
LoRa_Node_GH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d258  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d704  0800d704  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d70c  0800d70c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d70c  0800d70c  0001d70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d710  0800d710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800d714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000170  0800d880  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800d880  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fc4  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d89  00000000  00000000  0003919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000133f  00000000  00000000  0003e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b97e  00000000  00000000  0003faff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e29e  00000000  00000000  0005b47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a25f  00000000  00000000  0007971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073e8  00000000  00000000  0011397c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011ad64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000170 	.word	0x20000170
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d350 	.word	0x0800d350

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000174 	.word	0x20000174
 800014c:	0800d350 	.word	0x0800d350

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_d2f>:
 800075c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000764:	bf24      	itt	cs
 8000766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800076e:	d90d      	bls.n	800078c <__aeabi_d2f+0x30>
 8000770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800077c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000784:	bf08      	it	eq
 8000786:	f020 0001 	biceq.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000790:	d121      	bne.n	80007d6 <__aeabi_d2f+0x7a>
 8000792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000796:	bfbc      	itt	lt
 8000798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800079c:	4770      	bxlt	lr
 800079e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007a6:	f1c2 0218 	rsb	r2, r2, #24
 80007aa:	f1c2 0c20 	rsb	ip, r2, #32
 80007ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	bf18      	it	ne
 80007b8:	f040 0001 	orrne.w	r0, r0, #1
 80007bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c8:	ea40 000c 	orr.w	r0, r0, ip
 80007cc:	fa23 f302 	lsr.w	r3, r3, r2
 80007d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d4:	e7cc      	b.n	8000770 <__aeabi_d2f+0x14>
 80007d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007da:	d107      	bne.n	80007ec <__aeabi_d2f+0x90>
 80007dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e0:	bf1e      	ittt	ne
 80007e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ea:	4770      	bxne	lr
 80007ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_frsub>:
 80007fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000800:	e002      	b.n	8000808 <__addsf3>
 8000802:	bf00      	nop

08000804 <__aeabi_fsub>:
 8000804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000808 <__addsf3>:
 8000808:	0042      	lsls	r2, r0, #1
 800080a:	bf1f      	itttt	ne
 800080c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000810:	ea92 0f03 	teqne	r2, r3
 8000814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800081c:	d06a      	beq.n	80008f4 <__addsf3+0xec>
 800081e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000826:	bfc1      	itttt	gt
 8000828:	18d2      	addgt	r2, r2, r3
 800082a:	4041      	eorgt	r1, r0
 800082c:	4048      	eorgt	r0, r1
 800082e:	4041      	eorgt	r1, r0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	2b19      	cmp	r3, #25
 8000836:	bf88      	it	hi
 8000838:	4770      	bxhi	lr
 800083a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4240      	negne	r0, r0
 800084a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800084e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4249      	negne	r1, r1
 800085a:	ea92 0f03 	teq	r2, r3
 800085e:	d03f      	beq.n	80008e0 <__addsf3+0xd8>
 8000860:	f1a2 0201 	sub.w	r2, r2, #1
 8000864:	fa41 fc03 	asr.w	ip, r1, r3
 8000868:	eb10 000c 	adds.w	r0, r0, ip
 800086c:	f1c3 0320 	rsb	r3, r3, #32
 8000870:	fa01 f103 	lsl.w	r1, r1, r3
 8000874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000878:	d502      	bpl.n	8000880 <__addsf3+0x78>
 800087a:	4249      	negs	r1, r1
 800087c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000884:	d313      	bcc.n	80008ae <__addsf3+0xa6>
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d306      	bcc.n	800089a <__addsf3+0x92>
 800088c:	0840      	lsrs	r0, r0, #1
 800088e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000892:	f102 0201 	add.w	r2, r2, #1
 8000896:	2afe      	cmp	r2, #254	; 0xfe
 8000898:	d251      	bcs.n	800093e <__addsf3+0x136>
 800089a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	ea40 0003 	orr.w	r0, r0, r3
 80008ac:	4770      	bx	lr
 80008ae:	0049      	lsls	r1, r1, #1
 80008b0:	eb40 0000 	adc.w	r0, r0, r0
 80008b4:	3a01      	subs	r2, #1
 80008b6:	bf28      	it	cs
 80008b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008bc:	d2ed      	bcs.n	800089a <__addsf3+0x92>
 80008be:	fab0 fc80 	clz	ip, r0
 80008c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ce:	bfaa      	itet	ge
 80008d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d4:	4252      	neglt	r2, r2
 80008d6:	4318      	orrge	r0, r3
 80008d8:	bfbc      	itt	lt
 80008da:	40d0      	lsrlt	r0, r2
 80008dc:	4318      	orrlt	r0, r3
 80008de:	4770      	bx	lr
 80008e0:	f092 0f00 	teq	r2, #0
 80008e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008e8:	bf06      	itte	eq
 80008ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ee:	3201      	addeq	r2, #1
 80008f0:	3b01      	subne	r3, #1
 80008f2:	e7b5      	b.n	8000860 <__addsf3+0x58>
 80008f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008fc:	bf18      	it	ne
 80008fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000902:	d021      	beq.n	8000948 <__addsf3+0x140>
 8000904:	ea92 0f03 	teq	r2, r3
 8000908:	d004      	beq.n	8000914 <__addsf3+0x10c>
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	bf08      	it	eq
 8000910:	4608      	moveq	r0, r1
 8000912:	4770      	bx	lr
 8000914:	ea90 0f01 	teq	r0, r1
 8000918:	bf1c      	itt	ne
 800091a:	2000      	movne	r0, #0
 800091c:	4770      	bxne	lr
 800091e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000922:	d104      	bne.n	800092e <__addsf3+0x126>
 8000924:	0040      	lsls	r0, r0, #1
 8000926:	bf28      	it	cs
 8000928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000932:	bf3c      	itt	cc
 8000934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bxcc	lr
 800093a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800093e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000946:	4770      	bx	lr
 8000948:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800094c:	bf16      	itet	ne
 800094e:	4608      	movne	r0, r1
 8000950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000954:	4601      	movne	r1, r0
 8000956:	0242      	lsls	r2, r0, #9
 8000958:	bf06      	itte	eq
 800095a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095e:	ea90 0f01 	teqeq	r0, r1
 8000962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000966:	4770      	bx	lr

08000968 <__aeabi_ui2f>:
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e004      	b.n	8000978 <__aeabi_i2f+0x8>
 800096e:	bf00      	nop

08000970 <__aeabi_i2f>:
 8000970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000974:	bf48      	it	mi
 8000976:	4240      	negmi	r0, r0
 8000978:	ea5f 0c00 	movs.w	ip, r0
 800097c:	bf08      	it	eq
 800097e:	4770      	bxeq	lr
 8000980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000984:	4601      	mov	r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	e01c      	b.n	80009c6 <__aeabi_l2f+0x2a>

0800098c <__aeabi_ul2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e00a      	b.n	80009b0 <__aeabi_l2f+0x14>
 800099a:	bf00      	nop

0800099c <__aeabi_l2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__aeabi_l2f+0x14>
 80009aa:	4240      	negs	r0, r0
 80009ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b0:	ea5f 0c01 	movs.w	ip, r1
 80009b4:	bf02      	ittt	eq
 80009b6:	4684      	moveq	ip, r0
 80009b8:	4601      	moveq	r1, r0
 80009ba:	2000      	moveq	r0, #0
 80009bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c0:	bf08      	it	eq
 80009c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ca:	fabc f28c 	clz	r2, ip
 80009ce:	3a08      	subs	r2, #8
 80009d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d4:	db10      	blt.n	80009f8 <__aeabi_l2f+0x5c>
 80009d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009da:	4463      	add	r3, ip
 80009dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e0:	f1c2 0220 	rsb	r2, r2, #32
 80009e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	eb43 0002 	adc.w	r0, r3, r2
 80009f0:	bf08      	it	eq
 80009f2:	f020 0001 	biceq.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	f102 0220 	add.w	r2, r2, #32
 80009fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a08:	fa21 f202 	lsr.w	r2, r1, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_fmul>:
 8000a18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a20:	bf1e      	ittt	ne
 8000a22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a26:	ea92 0f0c 	teqne	r2, ip
 8000a2a:	ea93 0f0c 	teqne	r3, ip
 8000a2e:	d06f      	beq.n	8000b10 <__aeabi_fmul+0xf8>
 8000a30:	441a      	add	r2, r3
 8000a32:	ea80 0c01 	eor.w	ip, r0, r1
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3e:	d01e      	beq.n	8000a7e <__aeabi_fmul+0x66>
 8000a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a58:	bf3e      	ittt	cc
 8000a5a:	0049      	lslcc	r1, r1, #1
 8000a5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a60:	005b      	lslcc	r3, r3, #1
 8000a62:	ea40 0001 	orr.w	r0, r0, r1
 8000a66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a6a:	2afd      	cmp	r2, #253	; 0xfd
 8000a6c:	d81d      	bhi.n	8000aaa <__aeabi_fmul+0x92>
 8000a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	f090 0f00 	teq	r0, #0
 8000a82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	0249      	lsleq	r1, r1, #9
 8000a8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a92:	3a7f      	subs	r2, #127	; 0x7f
 8000a94:	bfc2      	ittt	gt
 8000a96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9e:	4770      	bxgt	lr
 8000aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	3a01      	subs	r2, #1
 8000aaa:	dc5d      	bgt.n	8000b68 <__aeabi_fmul+0x150>
 8000aac:	f112 0f19 	cmn.w	r2, #25
 8000ab0:	bfdc      	itt	le
 8000ab2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bxle	lr
 8000ab8:	f1c2 0200 	rsb	r2, r2, #0
 8000abc:	0041      	lsls	r1, r0, #1
 8000abe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ac2:	f1c2 0220 	rsb	r2, r2, #32
 8000ac6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ace:	f140 0000 	adc.w	r0, r0, #0
 8000ad2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad6:	bf08      	it	eq
 8000ad8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000adc:	4770      	bx	lr
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ae6:	bf02      	ittt	eq
 8000ae8:	0040      	lsleq	r0, r0, #1
 8000aea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aee:	3a01      	subeq	r2, #1
 8000af0:	d0f9      	beq.n	8000ae6 <__aeabi_fmul+0xce>
 8000af2:	ea40 000c 	orr.w	r0, r0, ip
 8000af6:	f093 0f00 	teq	r3, #0
 8000afa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afe:	bf02      	ittt	eq
 8000b00:	0049      	lsleq	r1, r1, #1
 8000b02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b06:	3b01      	subeq	r3, #1
 8000b08:	d0f9      	beq.n	8000afe <__aeabi_fmul+0xe6>
 8000b0a:	ea41 010c 	orr.w	r1, r1, ip
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fmul+0x18>
 8000b10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b14:	ea92 0f0c 	teq	r2, ip
 8000b18:	bf18      	it	ne
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d00a      	beq.n	8000b36 <__aeabi_fmul+0x11e>
 8000b20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b24:	bf18      	it	ne
 8000b26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b2a:	d1d8      	bne.n	8000ade <__aeabi_fmul+0xc6>
 8000b2c:	ea80 0001 	eor.w	r0, r0, r1
 8000b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f090 0f00 	teq	r0, #0
 8000b3a:	bf17      	itett	ne
 8000b3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b40:	4608      	moveq	r0, r1
 8000b42:	f091 0f00 	teqne	r1, #0
 8000b46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b4a:	d014      	beq.n	8000b76 <__aeabi_fmul+0x15e>
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	d101      	bne.n	8000b56 <__aeabi_fmul+0x13e>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d10f      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b56:	ea93 0f0c 	teq	r3, ip
 8000b5a:	d103      	bne.n	8000b64 <__aeabi_fmul+0x14c>
 8000b5c:	024b      	lsls	r3, r1, #9
 8000b5e:	bf18      	it	ne
 8000b60:	4608      	movne	r0, r1
 8000b62:	d108      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_fdiv>:
 8000b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b88:	bf1e      	ittt	ne
 8000b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8e:	ea92 0f0c 	teqne	r2, ip
 8000b92:	ea93 0f0c 	teqne	r3, ip
 8000b96:	d069      	beq.n	8000c6c <__aeabi_fdiv+0xec>
 8000b98:	eba2 0203 	sub.w	r2, r2, r3
 8000b9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba6:	d037      	beq.n	8000c18 <__aeabi_fdiv+0x98>
 8000ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf38      	it	cc
 8000bbc:	005b      	lslcc	r3, r3, #1
 8000bbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	bf24      	itt	cs
 8000bca:	1a5b      	subcs	r3, r3, r1
 8000bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000be2:	bf24      	itt	cs
 8000be4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bf0:	bf24      	itt	cs
 8000bf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c02:	d1e0      	bne.n	8000bc6 <__aeabi_fdiv+0x46>
 8000c04:	2afd      	cmp	r2, #253	; 0xfd
 8000c06:	f63f af50 	bhi.w	8000aaa <__aeabi_fmul+0x92>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c20:	327f      	adds	r2, #127	; 0x7f
 8000c22:	bfc2      	ittt	gt
 8000c24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2c:	4770      	bxgt	lr
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	3a01      	subs	r2, #1
 8000c38:	e737      	b.n	8000aaa <__aeabi_fmul+0x92>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0040      	lsleq	r0, r0, #1
 8000c46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4a:	3a01      	subeq	r2, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fdiv+0xc2>
 8000c4e:	ea40 000c 	orr.w	r0, r0, ip
 8000c52:	f093 0f00 	teq	r3, #0
 8000c56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	bf02      	ittt	eq
 8000c5c:	0049      	lsleq	r1, r1, #1
 8000c5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c62:	3b01      	subeq	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <__aeabi_fdiv+0xda>
 8000c66:	ea41 010c 	orr.w	r1, r1, ip
 8000c6a:	e795      	b.n	8000b98 <__aeabi_fdiv+0x18>
 8000c6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c70:	ea92 0f0c 	teq	r2, ip
 8000c74:	d108      	bne.n	8000c88 <__aeabi_fdiv+0x108>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	f47f af7d 	bne.w	8000b76 <__aeabi_fmul+0x15e>
 8000c7c:	ea93 0f0c 	teq	r3, ip
 8000c80:	f47f af70 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e776      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c88:	ea93 0f0c 	teq	r3, ip
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_fdiv+0x118>
 8000c8e:	024b      	lsls	r3, r1, #9
 8000c90:	f43f af4c 	beq.w	8000b2c <__aeabi_fmul+0x114>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e76e      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c9c:	bf18      	it	ne
 8000c9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	d1ca      	bne.n	8000c3a <__aeabi_fdiv+0xba>
 8000ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ca8:	f47f af5c 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000cac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	f47f af3c 	bne.w	8000b2c <__aeabi_fmul+0x114>
 8000cb4:	e75f      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000cb6:	bf00      	nop

08000cb8 <__gesf2>:
 8000cb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cbc:	e006      	b.n	8000ccc <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__lesf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	e002      	b.n	8000ccc <__cmpsf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__cmpsf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	bf18      	it	ne
 8000cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce2:	d011      	beq.n	8000d08 <__cmpsf2+0x40>
 8000ce4:	b001      	add	sp, #4
 8000ce6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cea:	bf18      	it	ne
 8000cec:	ea90 0f01 	teqne	r0, r1
 8000cf0:	bf58      	it	pl
 8000cf2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cf6:	bf88      	it	hi
 8000cf8:	17c8      	asrhi	r0, r1, #31
 8000cfa:	bf38      	it	cc
 8000cfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d00:	bf18      	it	ne
 8000d02:	f040 0001 	orrne.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	d102      	bne.n	8000d14 <__cmpsf2+0x4c>
 8000d0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d12:	d105      	bne.n	8000d20 <__cmpsf2+0x58>
 8000d14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d18:	d1e4      	bne.n	8000ce4 <__cmpsf2+0x1c>
 8000d1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d1e:	d0e1      	beq.n	8000ce4 <__cmpsf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d32:	f7ff ffc9 	bl	8000cc8 <__cmpsf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffd2 	bl	8000d28 <__aeabi_cfrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc8 	bl	8000d28 <__aeabi_cfrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_ldivmod>:
 8000de4:	b97b      	cbnz	r3, 8000e06 <__aeabi_ldivmod+0x22>
 8000de6:	b972      	cbnz	r2, 8000e06 <__aeabi_ldivmod+0x22>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bfbe      	ittt	lt
 8000dec:	2000      	movlt	r0, #0
 8000dee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000df2:	e006      	blt.n	8000e02 <__aeabi_ldivmod+0x1e>
 8000df4:	bf08      	it	eq
 8000df6:	2800      	cmpeq	r0, #0
 8000df8:	bf1c      	itt	ne
 8000dfa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8000e02:	f000 b9bd 	b.w	8001180 <__aeabi_idiv0>
 8000e06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	db09      	blt.n	8000e26 <__aeabi_ldivmod+0x42>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db1a      	blt.n	8000e4c <__aeabi_ldivmod+0x68>
 8000e16:	f000 f84d 	bl	8000eb4 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db1b      	blt.n	8000e68 <__aeabi_ldivmod+0x84>
 8000e30:	f000 f840 	bl	8000eb4 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	4252      	negs	r2, r2
 8000e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f82f 	bl	8000eb4 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4240      	negs	r0, r0
 8000e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e66:	4770      	bx	lr
 8000e68:	4252      	negs	r2, r2
 8000e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6e:	f000 f821 	bl	8000eb4 <__udivmoddi4>
 8000e72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7a:	b004      	add	sp, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b972 	b.w	8001180 <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f806 	bl	8000eb4 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9e08      	ldr	r6, [sp, #32]
 8000eba:	460d      	mov	r5, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	468e      	mov	lr, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14c      	bne.n	8000f5e <__udivmoddi4+0xaa>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	d967      	bls.n	8000f9a <__udivmoddi4+0xe6>
 8000eca:	fab2 f382 	clz	r3, r2
 8000ece:	b153      	cbz	r3, 8000ee6 <__udivmoddi4+0x32>
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	f1c3 0220 	rsb	r2, r3, #32
 8000ed8:	fa01 fe03 	lsl.w	lr, r1, r3
 8000edc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee0:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ee4:	409c      	lsls	r4, r3
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fbbe f1f7 	udiv	r1, lr, r7
 8000eee:	fa1f f58c 	uxth.w	r5, ip
 8000ef2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000ef6:	fb01 f005 	mul.w	r0, r1, r5
 8000efa:	0c22      	lsrs	r2, r4, #16
 8000efc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x66>
 8000f04:	eb1c 0202 	adds.w	r2, ip, r2
 8000f08:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f0c:	f080 8119 	bcs.w	8001142 <__udivmoddi4+0x28e>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f240 8116 	bls.w	8001142 <__udivmoddi4+0x28e>
 8000f16:	3902      	subs	r1, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a12      	subs	r2, r2, r0
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	fb00 f505 	mul.w	r5, r0, r5
 8000f28:	b2a4      	uxth	r4, r4
 8000f2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	d90a      	bls.n	8000f48 <__udivmoddi4+0x94>
 8000f32:	eb1c 0404 	adds.w	r4, ip, r4
 8000f36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f3a:	f080 8104 	bcs.w	8001146 <__udivmoddi4+0x292>
 8000f3e:	42a5      	cmp	r5, r4
 8000f40:	f240 8101 	bls.w	8001146 <__udivmoddi4+0x292>
 8000f44:	4464      	add	r4, ip
 8000f46:	3802      	subs	r0, #2
 8000f48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	b11e      	cbz	r6, 8000f5a <__udivmoddi4+0xa6>
 8000f52:	40dc      	lsrs	r4, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	e9c6 4300 	strd	r4, r3, [r6]
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0xc0>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80ea 	beq.w	800113c <__udivmoddi4+0x288>
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	fab3 f183 	clz	r1, r3
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d148      	bne.n	800100e <__udivmoddi4+0x15a>
 8000f7c:	42ab      	cmp	r3, r5
 8000f7e:	d302      	bcc.n	8000f86 <__udivmoddi4+0xd2>
 8000f80:	4282      	cmp	r2, r0
 8000f82:	f200 80f8 	bhi.w	8001176 <__udivmoddi4+0x2c2>
 8000f86:	1a84      	subs	r4, r0, r2
 8000f88:	eb65 0203 	sbc.w	r2, r5, r3
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4696      	mov	lr, r2
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d0e2      	beq.n	8000f5a <__udivmoddi4+0xa6>
 8000f94:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f98:	e7df      	b.n	8000f5a <__udivmoddi4+0xa6>
 8000f9a:	b902      	cbnz	r2, 8000f9e <__udivmoddi4+0xea>
 8000f9c:	deff      	udf	#255	; 0xff
 8000f9e:	fab2 f382 	clz	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 808e 	bne.w	80010c4 <__udivmoddi4+0x210>
 8000fa8:	1a88      	subs	r0, r1, r2
 8000faa:	2101      	movs	r1, #1
 8000fac:	0c17      	lsrs	r7, r2, #16
 8000fae:	fa1f fe82 	uxth.w	lr, r2
 8000fb2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000fb6:	fb07 0015 	mls	r0, r7, r5, r0
 8000fba:	0c22      	lsrs	r2, r4, #16
 8000fbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fc0:	fb0e f005 	mul.w	r0, lr, r5
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x126>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d202      	bcs.n	8000fd8 <__udivmoddi4+0x124>
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	f200 80cc 	bhi.w	8001170 <__udivmoddi4+0x2bc>
 8000fd8:	4645      	mov	r5, r8
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fe0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fe4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x150>
 8000ff2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x14e>
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	f200 80b4 	bhi.w	800116a <__udivmoddi4+0x2b6>
 8001002:	4610      	mov	r0, r2
 8001004:	eba4 040e 	sub.w	r4, r4, lr
 8001008:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800100c:	e7a0      	b.n	8000f50 <__udivmoddi4+0x9c>
 800100e:	f1c1 0720 	rsb	r7, r1, #32
 8001012:	408b      	lsls	r3, r1
 8001014:	fa22 fc07 	lsr.w	ip, r2, r7
 8001018:	ea4c 0c03 	orr.w	ip, ip, r3
 800101c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001020:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001024:	fbba f8f9 	udiv	r8, sl, r9
 8001028:	408d      	lsls	r5, r1
 800102a:	fa20 f307 	lsr.w	r3, r0, r7
 800102e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001032:	fa1f fe8c 	uxth.w	lr, ip
 8001036:	432b      	orrs	r3, r5
 8001038:	fa00 f501 	lsl.w	r5, r0, r1
 800103c:	fb08 f00e 	mul.w	r0, r8, lr
 8001040:	0c1c      	lsrs	r4, r3, #16
 8001042:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001046:	42a0      	cmp	r0, r4
 8001048:	fa02 f201 	lsl.w	r2, r2, r1
 800104c:	d90b      	bls.n	8001066 <__udivmoddi4+0x1b2>
 800104e:	eb1c 0404 	adds.w	r4, ip, r4
 8001052:	f108 3aff 	add.w	sl, r8, #4294967295
 8001056:	f080 8086 	bcs.w	8001166 <__udivmoddi4+0x2b2>
 800105a:	42a0      	cmp	r0, r4
 800105c:	f240 8083 	bls.w	8001166 <__udivmoddi4+0x2b2>
 8001060:	f1a8 0802 	sub.w	r8, r8, #2
 8001064:	4464      	add	r4, ip
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	b298      	uxth	r0, r3
 800106a:	fbb4 f3f9 	udiv	r3, r4, r9
 800106e:	fb09 4413 	mls	r4, r9, r3, r4
 8001072:	fb03 fe0e 	mul.w	lr, r3, lr
 8001076:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800107a:	45a6      	cmp	lr, r4
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x1dc>
 800107e:	eb1c 0404 	adds.w	r4, ip, r4
 8001082:	f103 30ff 	add.w	r0, r3, #4294967295
 8001086:	d26a      	bcs.n	800115e <__udivmoddi4+0x2aa>
 8001088:	45a6      	cmp	lr, r4
 800108a:	d968      	bls.n	800115e <__udivmoddi4+0x2aa>
 800108c:	3b02      	subs	r3, #2
 800108e:	4464      	add	r4, ip
 8001090:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001094:	fba0 9302 	umull	r9, r3, r0, r2
 8001098:	eba4 040e 	sub.w	r4, r4, lr
 800109c:	429c      	cmp	r4, r3
 800109e:	46c8      	mov	r8, r9
 80010a0:	469e      	mov	lr, r3
 80010a2:	d354      	bcc.n	800114e <__udivmoddi4+0x29a>
 80010a4:	d051      	beq.n	800114a <__udivmoddi4+0x296>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d067      	beq.n	800117a <__udivmoddi4+0x2c6>
 80010aa:	ebb5 0308 	subs.w	r3, r5, r8
 80010ae:	eb64 040e 	sbc.w	r4, r4, lr
 80010b2:	40cb      	lsrs	r3, r1
 80010b4:	fa04 f707 	lsl.w	r7, r4, r7
 80010b8:	431f      	orrs	r7, r3
 80010ba:	40cc      	lsrs	r4, r1
 80010bc:	e9c6 7400 	strd	r7, r4, [r6]
 80010c0:	2100      	movs	r1, #0
 80010c2:	e74a      	b.n	8000f5a <__udivmoddi4+0xa6>
 80010c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010c8:	f1c3 0020 	rsb	r0, r3, #32
 80010cc:	40c1      	lsrs	r1, r0
 80010ce:	409d      	lsls	r5, r3
 80010d0:	fa24 f000 	lsr.w	r0, r4, r0
 80010d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d8:	4328      	orrs	r0, r5
 80010da:	fbb1 f5f7 	udiv	r5, r1, r7
 80010de:	fb07 1115 	mls	r1, r7, r5, r1
 80010e2:	fa1f fe8c 	uxth.w	lr, ip
 80010e6:	0c02      	lsrs	r2, r0, #16
 80010e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010ec:	fb05 f10e 	mul.w	r1, r5, lr
 80010f0:	4291      	cmp	r1, r2
 80010f2:	fa04 f403 	lsl.w	r4, r4, r3
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x256>
 80010f8:	eb1c 0202 	adds.w	r2, ip, r2
 80010fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8001100:	d22f      	bcs.n	8001162 <__udivmoddi4+0x2ae>
 8001102:	4291      	cmp	r1, r2
 8001104:	d92d      	bls.n	8001162 <__udivmoddi4+0x2ae>
 8001106:	3d02      	subs	r5, #2
 8001108:	4462      	add	r2, ip
 800110a:	1a52      	subs	r2, r2, r1
 800110c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001110:	fb07 2211 	mls	r2, r7, r1, r2
 8001114:	b280      	uxth	r0, r0
 8001116:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800111a:	fb01 f20e 	mul.w	r2, r1, lr
 800111e:	4282      	cmp	r2, r0
 8001120:	d908      	bls.n	8001134 <__udivmoddi4+0x280>
 8001122:	eb1c 0000 	adds.w	r0, ip, r0
 8001126:	f101 38ff 	add.w	r8, r1, #4294967295
 800112a:	d216      	bcs.n	800115a <__udivmoddi4+0x2a6>
 800112c:	4282      	cmp	r2, r0
 800112e:	d914      	bls.n	800115a <__udivmoddi4+0x2a6>
 8001130:	3902      	subs	r1, #2
 8001132:	4460      	add	r0, ip
 8001134:	1a80      	subs	r0, r0, r2
 8001136:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800113a:	e73a      	b.n	8000fb2 <__udivmoddi4+0xfe>
 800113c:	4631      	mov	r1, r6
 800113e:	4630      	mov	r0, r6
 8001140:	e70b      	b.n	8000f5a <__udivmoddi4+0xa6>
 8001142:	4671      	mov	r1, lr
 8001144:	e6e9      	b.n	8000f1a <__udivmoddi4+0x66>
 8001146:	4610      	mov	r0, r2
 8001148:	e6fe      	b.n	8000f48 <__udivmoddi4+0x94>
 800114a:	454d      	cmp	r5, r9
 800114c:	d2ab      	bcs.n	80010a6 <__udivmoddi4+0x1f2>
 800114e:	ebb9 0802 	subs.w	r8, r9, r2
 8001152:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001156:	3801      	subs	r0, #1
 8001158:	e7a5      	b.n	80010a6 <__udivmoddi4+0x1f2>
 800115a:	4641      	mov	r1, r8
 800115c:	e7ea      	b.n	8001134 <__udivmoddi4+0x280>
 800115e:	4603      	mov	r3, r0
 8001160:	e796      	b.n	8001090 <__udivmoddi4+0x1dc>
 8001162:	4645      	mov	r5, r8
 8001164:	e7d1      	b.n	800110a <__udivmoddi4+0x256>
 8001166:	46d0      	mov	r8, sl
 8001168:	e77d      	b.n	8001066 <__udivmoddi4+0x1b2>
 800116a:	4464      	add	r4, ip
 800116c:	3802      	subs	r0, #2
 800116e:	e749      	b.n	8001004 <__udivmoddi4+0x150>
 8001170:	3d02      	subs	r5, #2
 8001172:	4462      	add	r2, ip
 8001174:	e731      	b.n	8000fda <__udivmoddi4+0x126>
 8001176:	4608      	mov	r0, r1
 8001178:	e70a      	b.n	8000f90 <__udivmoddi4+0xdc>
 800117a:	4631      	mov	r1, r6
 800117c:	e6ed      	b.n	8000f5a <__udivmoddi4+0xa6>
 800117e:	bf00      	nop

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001194:	f107 030e 	add.w	r3, r7, #14
 8001198:	461a      	mov	r2, r3
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fd6b 	bl	8001c78 <BME280_ReadRegister>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 80011ac:	2301      	movs	r3, #1
 80011ae:	e005      	b.n	80011bc <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b76      	cmp	r3, #118	; 0x76
 80011b4:	d101      	bne.n	80011ba <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 80011b6:	2302      	movs	r3, #2
 80011b8:	e000      	b.n	80011bc <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 80011ba:	2300      	movs	r3, #0
		}
	}
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->dig_H2 = 0;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->dig_H3 = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->dig_H4 = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->dig_H5 = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->dig_H6 = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dev->dig_P1 = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->dig_P6 = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->dig_P7 = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	84da      	strh	r2, [r3, #38]	; 0x26
	dev->dig_P8 = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	851a      	strh	r2, [r3, #40]	; 0x28
	dev->dig_P9 = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 8001264:	22b6      	movs	r2, #182	; 0xb6
 8001266:	21e0      	movs	r1, #224	; 0xe0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fd3d 	bl	8001ce8 <BME280_WriteRegister>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <BME280_Reset+0xb8>
	{
		return 1;	// NOK
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <BME280_Reset+0xba>
	}
	else
	{
		return 0; // OK
 800127c:	2300      	movs	r3, #0
	}
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	// Humidity; Set value: 011 = oversampling x4
	static const uint8_t ctrl_humData = 0x03;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <BME280_Init+0x70>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	21f2      	movs	r1, #242	; 0xf2
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fd21 	bl	8001ce8 <BME280_WriteRegister>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 80012b0:	2301      	movs	r3, #1
 80012b2:	e01c      	b.n	80012ee <BME280_Init+0x66>
	}

	// Temp, Press, Mode; Set value: 01101111 = oversampling x4, oversampling x4, normal mode
	static const uint8_t scrl_meadData = 0x6F;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <BME280_Init+0x74>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	21f4      	movs	r1, #244	; 0xf4
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fd13 	bl	8001ce8 <BME280_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <BME280_Init+0x48>
	{
		return 1;	// NOK
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00e      	b.n	80012ee <BME280_Init+0x66>
	}

	// Standbay, time IIR filter, 3-wire SPI, Mode; Set value: 0000010 = standbay 0.5ms, IIR 2, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <BME280_Init+0x78>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	21f5      	movs	r1, #245	; 0xf5
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fd05 	bl	8001ce8 <BME280_WriteRegister>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <BME280_Init+0x64>
	{
		return 1;	// NOK
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 80012ec:	2300      	movs	r3, #0
	}
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800d5e8 	.word	0x0800d5e8
 80012fc:	0800d5e9 	.word	0x0800d5e9
 8001300:	0800d5ea 	.word	0x0800d5ea

08001304 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	751a      	strb	r2, [r3, #20]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 800132a:	f107 0214 	add.w	r2, r7, #20
 800132e:	2319      	movs	r3, #25
 8001330:	2188      	movs	r1, #136	; 0x88
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fcba 	bl	8001cac <BME280_ReadRegisters>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 800133e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <BME280_ReadCalibData+0x46>
	{
		return 1;	// NOK
 8001346:	2301      	movs	r3, #1
 8001348:	e0d0      	b.n	80014ec <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7d3b      	ldrb	r3, [r7, #20]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	b29b      	uxth	r3, r3
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b29a      	uxth	r2, r3
 8001366:	7dbb      	ldrb	r3, [r7, #22]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 8001374:	7e7b      	ldrb	r3, [r7, #25]
 8001376:	b29b      	uxth	r3, r3
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	7e3b      	ldrb	r3, [r7, #24]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	b29b      	uxth	r3, r3
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b29a      	uxth	r2, r3
 8001392:	7ebb      	ldrb	r3, [r7, #26]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800139e:	7f7b      	ldrb	r3, [r7, #29]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	7f3b      	ldrb	r3, [r7, #28]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	7fbb      	ldrb	r3, [r7, #30]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 80013ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80013e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80013fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001402:	b29b      	uxth	r3, r3
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b29a      	uxth	r2, r3
 8001408:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800140c:	b29b      	uxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	b21a      	sxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	b29b      	uxth	r3, r3
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b29a      	uxth	r2, r3
 8001422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001426:	b29b      	uxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 8001432:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001436:	b29b      	uxth	r3, r3
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b29a      	uxth	r2, r3
 800143c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001440:	b29b      	uxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 800144c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001450:	b29b      	uxth	r3, r3
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b29a      	uxth	r2, r3
 8001456:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800145a:	b29b      	uxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21a      	sxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 8001466:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 8001470:	f107 020c 	add.w	r2, r7, #12
 8001474:	2307      	movs	r3, #7
 8001476:	21e1      	movs	r1, #225	; 0xe1
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fc17 	bl	8001cac <BME280_ReadRegisters>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8001484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <BME280_ReadCalibData+0x18c>
	{
		return 1;	// NOK
 800148c:	2301      	movs	r3, #1
 800148e:	e02d      	b.n	80014ec <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 8001490:	7b7b      	ldrb	r3, [r7, #13]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21a      	sxth	r2, r3
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	b21b      	sxth	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b21a      	sxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	7c3b      	ldrb	r3, [r7, #16]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 80014c6:	7c7b      	ldrb	r3, [r7, #17]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7c3b      	ldrb	r3, [r7, #16]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 80014e0:	7cbb      	ldrb	r3, [r7, #18]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3730      	adds	r7, #48	; 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	10da      	asrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8a9b      	ldrh	r3, [r3, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	12db      	asrs	r3, r3, #11
 8001516:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	111b      	asrs	r3, r3, #4
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	8a92      	ldrh	r2, [r2, #20]
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	1112      	asrs	r2, r2, #4
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	8a89      	ldrh	r1, [r1, #20]
 800152a:	1a52      	subs	r2, r2, r1
 800152c:	fb02 f303 	mul.w	r3, r2, r3
 8001530:	131b      	asrs	r3, r3, #12
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	139b      	asrs	r3, r3, #14
 800153e:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	441a      	add	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3380      	adds	r3, #128	; 0x80
 8001556:	121b      	asrs	r3, r3, #8
 8001558:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8001566:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156a:	b0ca      	sub	sp, #296	; 0x128
 800156c:	af00      	add	r7, sp, #0
 800156e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001572:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8001576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	17da      	asrs	r2, r3, #31
 800157e:	461c      	mov	r4, r3
 8001580:	4615      	mov	r5, r2
 8001582:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001586:	f145 3bff 	adc.w	fp, r5, #4294967295
 800158a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800158e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001592:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001596:	fb03 f102 	mul.w	r1, r3, r2
 800159a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800159e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	18ca      	adds	r2, r1, r3
 80015a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ac:	fba3 8903 	umull	r8, r9, r3, r3
 80015b0:	eb02 0309 	add.w	r3, r2, r9
 80015b4:	4699      	mov	r9, r3
 80015b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015ba:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015be:	b21b      	sxth	r3, r3
 80015c0:	17da      	asrs	r2, r3, #31
 80015c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015c6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015ca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015ce:	4603      	mov	r3, r0
 80015d0:	fb03 f209 	mul.w	r2, r3, r9
 80015d4:	460b      	mov	r3, r1
 80015d6:	fb08 f303 	mul.w	r3, r8, r3
 80015da:	4413      	add	r3, r2
 80015dc:	4602      	mov	r2, r0
 80015de:	fba8 2102 	umull	r2, r1, r8, r2
 80015e2:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80015e6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ee:	4413      	add	r3, r2
 80015f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015f4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 8001600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001604:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001608:	b21b      	sxth	r3, r3
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001610:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800161c:	462a      	mov	r2, r5
 800161e:	fb02 f203 	mul.w	r2, r2, r3
 8001622:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001626:	4621      	mov	r1, r4
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	441a      	add	r2, r3
 800162e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001632:	4621      	mov	r1, r4
 8001634:	fba3 3101 	umull	r3, r1, r3, r1
 8001638:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800163c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800164a:	f04f 0000 	mov.w	r0, #0
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001656:	462b      	mov	r3, r5
 8001658:	0459      	lsls	r1, r3, #17
 800165a:	4622      	mov	r2, r4
 800165c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001660:	4623      	mov	r3, r4
 8001662:	0458      	lsls	r0, r3, #17
 8001664:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001668:	1814      	adds	r4, r2, r0
 800166a:	643c      	str	r4, [r7, #64]	; 0x40
 800166c:	414b      	adcs	r3, r1
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
 8001670:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001674:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800167c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001680:	b21b      	sxth	r3, r3
 8001682:	17da      	asrs	r2, r3, #31
 8001684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001698:	00d9      	lsls	r1, r3, #3
 800169a:	2000      	movs	r0, #0
 800169c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016a0:	1814      	adds	r4, r2, r0
 80016a2:	63bc      	str	r4, [r7, #56]	; 0x38
 80016a4:	414b      	adcs	r3, r1
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 80016b0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b8:	fb03 f102 	mul.w	r1, r3, r2
 80016bc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	18ca      	adds	r2, r1, r3
 80016ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ce:	fba3 3103 	umull	r3, r1, r3, r3
 80016d2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80016d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016de:	18d3      	adds	r3, r2, r3
 80016e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	17da      	asrs	r2, r3, #31
 80016f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016f8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80016fc:	4622      	mov	r2, r4
 80016fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001702:	4641      	mov	r1, r8
 8001704:	fb01 f202 	mul.w	r2, r1, r2
 8001708:	464d      	mov	r5, r9
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	4603      	mov	r3, r0
 8001710:	fb03 f305 	mul.w	r3, r3, r5
 8001714:	4413      	add	r3, r2
 8001716:	4602      	mov	r2, r0
 8001718:	4641      	mov	r1, r8
 800171a:	fba2 2101 	umull	r2, r1, r2, r1
 800171e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001722:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001726:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800172a:	4413      	add	r3, r2
 800172c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001730:	f04f 0000 	mov.w	r0, #0
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800173c:	4623      	mov	r3, r4
 800173e:	0a18      	lsrs	r0, r3, #8
 8001740:	462a      	mov	r2, r5
 8001742:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001746:	462b      	mov	r3, r5
 8001748:	1219      	asrs	r1, r3, #8
 800174a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800174e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001752:	b21b      	sxth	r3, r3
 8001754:	17da      	asrs	r2, r3, #31
 8001756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800175a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800175e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001762:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001766:	464a      	mov	r2, r9
 8001768:	fb02 f203 	mul.w	r2, r2, r3
 800176c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001770:	4644      	mov	r4, r8
 8001772:	fb04 f303 	mul.w	r3, r4, r3
 8001776:	441a      	add	r2, r3
 8001778:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800177c:	4644      	mov	r4, r8
 800177e:	fba3 3404 	umull	r3, r4, r3, r4
 8001782:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001786:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800178a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800178e:	18d3      	adds	r3, r2, r3
 8001790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017a0:	464c      	mov	r4, r9
 80017a2:	0323      	lsls	r3, r4, #12
 80017a4:	46c4      	mov	ip, r8
 80017a6:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80017aa:	4644      	mov	r4, r8
 80017ac:	0322      	lsls	r2, r4, #12
 80017ae:	1884      	adds	r4, r0, r2
 80017b0:	633c      	str	r4, [r7, #48]	; 0x30
 80017b2:	eb41 0303 	adc.w	r3, r1, r3
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 80017c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017c4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017c8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017d4:	8b5b      	ldrh	r3, [r3, #26]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2200      	movs	r2, #0
 80017da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017e2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80017e6:	4622      	mov	r2, r4
 80017e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017ec:	4641      	mov	r1, r8
 80017ee:	fb01 f202 	mul.w	r2, r1, r2
 80017f2:	464d      	mov	r5, r9
 80017f4:	4618      	mov	r0, r3
 80017f6:	4621      	mov	r1, r4
 80017f8:	4603      	mov	r3, r0
 80017fa:	fb03 f305 	mul.w	r3, r3, r5
 80017fe:	4413      	add	r3, r2
 8001800:	4602      	mov	r2, r0
 8001802:	4641      	mov	r1, r8
 8001804:	fba2 2101 	umull	r2, r1, r2, r1
 8001808:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800180c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001810:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001814:	4413      	add	r3, r2
 8001816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001826:	4629      	mov	r1, r5
 8001828:	104a      	asrs	r2, r1, #1
 800182a:	4629      	mov	r1, r5
 800182c:	17cb      	asrs	r3, r1, #31
 800182e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 8001832:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001836:	4313      	orrs	r3, r2
 8001838:	d101      	bne.n	800183e <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 800183a:	2300      	movs	r3, #0
 800183c:	e146      	b.n	8001acc <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 800183e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001842:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001846:	17da      	asrs	r2, r3, #31
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
 800184a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800184c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001850:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001854:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001858:	105b      	asrs	r3, r3, #1
 800185a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001862:	07db      	lsls	r3, r3, #31
 8001864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001868:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800186c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001870:	4604      	mov	r4, r0
 8001872:	1aa4      	subs	r4, r4, r2
 8001874:	67bc      	str	r4, [r7, #120]	; 0x78
 8001876:	eb61 0303 	sbc.w	r3, r1, r3
 800187a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800187c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001880:	4622      	mov	r2, r4
 8001882:	462b      	mov	r3, r5
 8001884:	1891      	adds	r1, r2, r2
 8001886:	6239      	str	r1, [r7, #32]
 8001888:	415b      	adcs	r3, r3
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001890:	4621      	mov	r1, r4
 8001892:	1851      	adds	r1, r2, r1
 8001894:	61b9      	str	r1, [r7, #24]
 8001896:	4629      	mov	r1, r5
 8001898:	414b      	adcs	r3, r1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018a8:	4649      	mov	r1, r9
 80018aa:	018b      	lsls	r3, r1, #6
 80018ac:	4641      	mov	r1, r8
 80018ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b2:	4641      	mov	r1, r8
 80018b4:	018a      	lsls	r2, r1, #6
 80018b6:	4641      	mov	r1, r8
 80018b8:	1889      	adds	r1, r1, r2
 80018ba:	6139      	str	r1, [r7, #16]
 80018bc:	4649      	mov	r1, r9
 80018be:	eb43 0101 	adc.w	r1, r3, r1
 80018c2:	6179      	str	r1, [r7, #20]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d0:	4649      	mov	r1, r9
 80018d2:	008b      	lsls	r3, r1, #2
 80018d4:	46c4      	mov	ip, r8
 80018d6:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80018da:	4641      	mov	r1, r8
 80018dc:	008a      	lsls	r2, r1, #2
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	4622      	mov	r2, r4
 80018e6:	189b      	adds	r3, r3, r2
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	460b      	mov	r3, r1
 80018ec:	462a      	mov	r2, r5
 80018ee:	eb42 0303 	adc.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001900:	4649      	mov	r1, r9
 8001902:	008b      	lsls	r3, r1, #2
 8001904:	46c4      	mov	ip, r8
 8001906:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 800190a:	4641      	mov	r1, r8
 800190c:	008a      	lsls	r2, r1, #2
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	4603      	mov	r3, r0
 8001914:	4622      	mov	r2, r4
 8001916:	189b      	adds	r3, r3, r2
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
 800191a:	462b      	mov	r3, r5
 800191c:	460a      	mov	r2, r1
 800191e:	eb42 0303 	adc.w	r3, r2, r3
 8001922:	677b      	str	r3, [r7, #116]	; 0x74
 8001924:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001928:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800192c:	f7ff fa5a 	bl	8000de4 <__aeabi_ldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800193c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001940:	b21b      	sxth	r3, r3
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	66bb      	str	r3, [r7, #104]	; 0x68
 8001946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001948:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	0b50      	lsrs	r0, r2, #13
 8001956:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800195a:	1359      	asrs	r1, r3, #13
 800195c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001960:	462b      	mov	r3, r5
 8001962:	fb00 f203 	mul.w	r2, r0, r3
 8001966:	4623      	mov	r3, r4
 8001968:	fb03 f301 	mul.w	r3, r3, r1
 800196c:	4413      	add	r3, r2
 800196e:	4622      	mov	r2, r4
 8001970:	fba2 2100 	umull	r2, r1, r2, r0
 8001974:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001978:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800197c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001986:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0b50      	lsrs	r0, r2, #13
 8001994:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001998:	1359      	asrs	r1, r3, #13
 800199a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800199e:	462b      	mov	r3, r5
 80019a0:	fb00 f203 	mul.w	r2, r0, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	fb03 f301 	mul.w	r3, r3, r1
 80019aa:	4413      	add	r3, r2
 80019ac:	4622      	mov	r2, r4
 80019ae:	fba2 2100 	umull	r2, r1, r2, r0
 80019b2:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80019b6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019be:	4413      	add	r3, r2
 80019c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019d0:	4621      	mov	r1, r4
 80019d2:	0e4a      	lsrs	r2, r1, #25
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	460c      	mov	r4, r1
 80019da:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80019de:	164b      	asrs	r3, r1, #25
 80019e0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 80019e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019e8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
 80019f2:	667a      	str	r2, [r7, #100]	; 0x64
 80019f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019fc:	462a      	mov	r2, r5
 80019fe:	fb02 f203 	mul.w	r2, r2, r3
 8001a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a06:	4621      	mov	r1, r4
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a12:	4621      	mov	r1, r4
 8001a14:	fba2 2101 	umull	r2, r1, r2, r1
 8001a18:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001a1c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a20:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a24:	4413      	add	r3, r2
 8001a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a36:	4621      	mov	r1, r4
 8001a38:	0cca      	lsrs	r2, r1, #19
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	460c      	mov	r4, r1
 8001a40:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001a44:	14cb      	asrs	r3, r1, #19
 8001a46:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001a4a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a4e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a52:	1884      	adds	r4, r0, r2
 8001a54:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a56:	eb41 0303 	adc.w	r3, r1, r3
 8001a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a60:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a64:	4621      	mov	r1, r4
 8001a66:	1889      	adds	r1, r1, r2
 8001a68:	6539      	str	r1, [r7, #80]	; 0x50
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	eb43 0101 	adc.w	r1, r3, r1
 8001a70:	6579      	str	r1, [r7, #84]	; 0x54
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a7e:	4623      	mov	r3, r4
 8001a80:	0a18      	lsrs	r0, r3, #8
 8001a82:	462a      	mov	r2, r5
 8001a84:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001a88:	462b      	mov	r3, r5
 8001a8a:	1219      	asrs	r1, r3, #8
 8001a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a90:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	17da      	asrs	r2, r3, #31
 8001a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aa8:	464c      	mov	r4, r9
 8001aaa:	0123      	lsls	r3, r4, #4
 8001aac:	46c4      	mov	ip, r8
 8001aae:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001ab2:	4644      	mov	r4, r8
 8001ab4:	0122      	lsls	r2, r4, #4
 8001ab6:	1884      	adds	r4, r0, r2
 8001ab8:	603c      	str	r4, [r7, #0]
 8001aba:	eb41 0303 	adc.w	r3, r1, r3
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)pressure;
 8001ac8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ad8 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001aea:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	039a      	lsls	r2, r3, #14
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001af6:	051b      	lsls	r3, r3, #20
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001b00:	4619      	mov	r1, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b0e:	13db      	asrs	r3, r3, #15
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f992 2036 	ldrsb.w	r2, [r2, #54]	; 0x36
 8001b16:	4611      	mov	r1, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	fb01 f202 	mul.w	r2, r1, r2
 8001b1e:	1292      	asrs	r2, r2, #10
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001b26:	4608      	mov	r0, r1
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	fb00 f101 	mul.w	r1, r0, r1
 8001b2e:	12c9      	asrs	r1, r1, #11
 8001b30:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b34:	fb01 f202 	mul.w	r2, r1, r2
 8001b38:	1292      	asrs	r2, r2, #10
 8001b3a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	; 0x2e
 8001b44:	fb01 f202 	mul.w	r2, r1, r2
 8001b48:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b4c:	1392      	asrs	r2, r2, #14
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	13db      	asrs	r3, r3, #15
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	13d2      	asrs	r2, r2, #15
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	11db      	asrs	r3, r3, #7
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b7a:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b82:	bfa8      	it	ge
 8001b84:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b88:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	131b      	asrs	r3, r3, #12
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	; 0x38
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t Data[8] = {};
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
	int32_t RawTemp = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t RawPressure = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t RawHumidity = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	21f7      	movs	r1, #247	; 0xf7
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f86e 	bl	8001cac <BME280_ReadRegisters>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (status != HAL_OK)
 8001bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <BME280_ReadAllData+0x4a>
	{
		return 1;	// NOK
 8001bde:	2301      	movs	r3, #1
 8001be0:	e046      	b.n	8001c70 <BME280_ReadAllData+0xd8>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	031b      	lsls	r3, r3, #12
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001be8:	7c3b      	ldrb	r3, [r7, #16]
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001bee:	7c7b      	ldrb	r3, [r7, #17]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001c02:	7b3b      	ldrb	r3, [r7, #12]
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001c22:	7cbb      	ldrb	r3, [r7, #18]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[7];
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fc5c 	bl	80014f4 <BME280_TemperatureCompesation>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fc8e 	bl	8001566 <BME280_PressureCompesation>
 8001c4a:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fe89 	bl	8000968 <__aeabi_ui2f>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff3a 	bl	8001ad8 <BME280_HumidityCompesation>
 8001c64:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	0a9a      	lsrs	r2, r3, #10
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	460b      	mov	r3, r1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	21ec      	movs	r1, #236	; 0xec
 8001c9e:	f004 fd17 	bl	80066d0 <HAL_I2C_Mem_Read>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	7abb      	ldrb	r3, [r7, #10]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2164      	movs	r1, #100	; 0x64
 8001cce:	9102      	str	r1, [sp, #8]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	21ec      	movs	r1, #236	; 0xec
 8001cda:	f004 fcf9 	bl	80066d0 <HAL_I2C_Mem_Read>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2301      	movs	r3, #1
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	1cbb      	adds	r3, r7, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	21ec      	movs	r1, #236	; 0xec
 8001d10:	f004 fbe4 	bl	80064dc <HAL_I2C_Mem_Write>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <GetPage>:


/* STM32F103C8Tx have 128 PAGES (Page 0 to Page 127) of 1 KB each = 128 KB Flash Memory */

static uint32_t GetPage(uint32_t Address)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	// FLASH_PAGE_SIZE is STM function
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e016      	b.n	8001d5a <GetPage+0x3c>
	{
		if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d32:	3301      	adds	r3, #1
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d20b      	bcs.n	8001d54 <GetPage+0x36>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d304      	bcc.n	8001d54 <GetPage+0x36>
	    {
			return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	e006      	b.n	8001d62 <GetPage+0x44>
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3301      	adds	r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5e:	dde5      	ble.n	8001d2c <GetPage+0xe>
	    }
	}

  return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <Flash_Write_Data>:
}


// Write data to MCU flash
uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_FLASH_Unlock();
 8001d7e:	f003 ff07 	bl	8005b90 <HAL_FLASH_Unlock>

	uint32_t StartPage = GetPage(StartPageAddress);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff ffcb 	bl	8001d1e <GetPage>
 8001d88:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8001d96:	69f8      	ldr	r0, [r7, #28]
 8001d98:	f7ff ffc1 	bl	8001d1e <GetPage>
 8001d9c:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <Flash_Write_Data+0xb4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <Flash_Write_Data+0xb4>)
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	0a9b      	lsrs	r3, r3, #10
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <Flash_Write_Data+0xb4>)
 8001db6:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4818      	ldr	r0, [pc, #96]	; (8001e20 <Flash_Write_Data+0xb4>)
 8001dc0:	f003 ffd8 	bl	8005d74 <HAL_FLASHEx_Erase>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01f      	beq.n	8001e0a <Flash_Write_Data+0x9e>
	{
		return HAL_FLASH_GetError ();
 8001dca:	f003 ff17 	bl	8005bfc <HAL_FLASH_GetError>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	e022      	b.n	8001e18 <Flash_Write_Data+0xac>
	}

	while (sofar < numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	461c      	mov	r4, r3
 8001de0:	4615      	mov	r5, r2
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	2002      	movs	r0, #2
 8001dea:	f003 fe61 	bl	8005ab0 <HAL_FLASH_Program>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <Flash_Write_Data+0x96>
		{
			StartPageAddress += 4;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3304      	adds	r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8001e00:	e003      	b.n	8001e0a <Flash_Write_Data+0x9e>
		}
		else
		{
			 return HAL_FLASH_GetError ();
 8001e02:	f003 fefb 	bl	8005bfc <HAL_FLASH_GetError>
 8001e06:	4603      	mov	r3, r0
 8001e08:	e006      	b.n	8001e18 <Flash_Write_Data+0xac>
	while (sofar < numberofwords)
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbdf      	blt.n	8001dd2 <Flash_Write_Data+0x66>
		}
	}

	HAL_FLASH_Lock();
 8001e12:	f003 fee3 	bl	8005bdc <HAL_FLASH_Lock>

	return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e20:	2000018c 	.word	0x2000018c

08001e24 <Flash_Read_Data>:


// Read data from MCU flash
void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3304      	adds	r3, #4
 8001e44:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	80fa      	strh	r2, [r7, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d000      	beq.n	8001e52 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001e50:	e7ef      	b.n	8001e32 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001e52:	bf00      	nop
	}
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0c      	blt.n	8001e8c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_ClearPendingIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	3360      	adds	r3, #96	; 0x60
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08d      	sub	sp, #52	; 0x34
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea2:	f002 ff6b 	bl	8004d7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea6:	f000 fbb7 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eaa:	f000 fe55 	bl	8002b58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eae:	f000 fc61 	bl	8002774 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001eb2:	f000 fc8d 	bl	80027d0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001eb6:	f000 fd1d 	bl	80028f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001eba:	f000 fe23 	bl	8002b04 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001ebe:	f000 fd4f 	bl	8002960 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001ec2:	f000 fc09 	bl	80026d8 <MX_ADC1_Init>
  MX_RTC_Init();
 8001ec6:	f000 fcb1 	bl	800282c <MX_RTC_Init>
  MX_TIM2_Init();
 8001eca:	f000 fd7f 	bl	80029cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ece:	f000 fdcb 	bl	8002a68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100 / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value to decrease power consumption
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  uint8_t status = 0;											// error counter
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8001ede:	4bad      	ldr	r3, [pc, #692]	; (8002194 <main+0x2f8>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	f200 837c 	bhi.w	80025e0 <main+0x744>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <main+0x54>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f09 	.word	0x08001f09
 8001ef4:	08002153 	.word	0x08002153
 8001ef8:	080021f1 	.word	0x080021f1
 8001efc:	080023f5 	.word	0x080023f5
 8001f00:	08002535 	.word	0x08002535
 8001f04:	080025d9 	.word	0x080025d9

	  case STATE_INIT:

		  ////////* DEVICE BOOT *////////

		  if (measurements.ADC_read_cnt == 0)
 8001f08:	4ba3      	ldr	r3, [pc, #652]	; (8002198 <main+0x2fc>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d145      	bne.n	8001f9c <main+0x100>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 8001f10:	49a2      	ldr	r1, [pc, #648]	; (800219c <main+0x300>)
 8001f12:	48a3      	ldr	r0, [pc, #652]	; (80021a0 <main+0x304>)
 8001f14:	f7ff f956 	bl	80011c4 <BME280_Reset>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f20:	4413      	add	r3, r2
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  HAL_Delay(200);
 8001f26:	20c8      	movs	r0, #200	; 0xc8
 8001f28:	f002 ff8a 	bl	8004e40 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8001f2c:	499b      	ldr	r1, [pc, #620]	; (800219c <main+0x300>)
 8001f2e:	489c      	ldr	r0, [pc, #624]	; (80021a0 <main+0x304>)
 8001f30:	f7ff f928 	bl	8001184 <BME280_ReadDeviceID>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 8001f42:	4996      	ldr	r1, [pc, #600]	; (800219c <main+0x300>)
 8001f44:	4896      	ldr	r0, [pc, #600]	; (80021a0 <main+0x304>)
 8001f46:	f7ff f9dd 	bl	8001304 <BME280_ReadCalibData>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f52:	4413      	add	r3, r2
 8001f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  status += BME280_Init(&bme280, &hi2c2);
 8001f58:	4990      	ldr	r1, [pc, #576]	; (800219c <main+0x300>)
 8001f5a:	4891      	ldr	r0, [pc, #580]	; (80021a0 <main+0x304>)
 8001f5c:	f7ff f994 	bl	8001288 <BME280_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f68:	4413      	add	r3, r2
 8001f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			  // Enable power to the humudity probe
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2108      	movs	r1, #8
 8001f72:	488c      	ldr	r0, [pc, #560]	; (80021a4 <main+0x308>)
 8001f74:	f004 f92a 	bl	80061cc <HAL_GPIO_WritePin>

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f78:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <main+0x30c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4b8a      	ldr	r3, [pc, #552]	; (80021a8 <main+0x30c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0202 	bic.w	r2, r2, #2
 8001f86:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4887      	ldr	r0, [pc, #540]	; (80021a8 <main+0x30c>)
 8001f8c:	f007 fee2 	bl	8009d54 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8001f90:	4886      	ldr	r0, [pc, #536]	; (80021ac <main+0x310>)
 8001f92:	f008 ffe3 	bl	800af5c <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8001f96:	4886      	ldr	r0, [pc, #536]	; (80021b0 <main+0x314>)
 8001f98:	f008 ffe0 	bl	800af5c <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8001f9c:	4b7e      	ldr	r3, [pc, #504]	; (8002198 <main+0x2fc>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	f040 831f 	bne.w	80025e4 <main+0x748>
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <main+0x2fc>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f040 831a 	bne.w	80025e4 <main+0x748>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8001fb0:	4b79      	ldr	r3, [pc, #484]	; (8002198 <main+0x2fc>)
 8001fb2:	789b      	ldrb	r3, [r3, #2]
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	487f      	ldr	r0, [pc, #508]	; (80021b4 <main+0x318>)
 8001fb8:	f000 ff16 	bl	8002de8 <ADC_Read_Battery>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4976      	ldr	r1, [pc, #472]	; (8002198 <main+0x2fc>)
 8001fc0:	f104 0308 	add.w	r3, r4, #8
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4879      	ldr	r0, [pc, #484]	; (80021b8 <main+0x31c>)
 8001fd2:	f000 fff7 	bl	8002fc4 <ADC_Read_EHum>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <main+0x2fc>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	461c      	mov	r4, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7fe fcc1 	bl	8000968 <__aeabi_ui2f>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	496b      	ldr	r1, [pc, #428]	; (8002198 <main+0x2fc>)
 8001fea:	1ca3      	adds	r3, r4, #2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 8001ff2:	4b69      	ldr	r3, [pc, #420]	; (8002198 <main+0x2fc>)
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <main+0x2fc>)
 8001ffc:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <main+0x2fc>)
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 		// reset timer read flag
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <main+0x2fc>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 800200a:	4868      	ldr	r0, [pc, #416]	; (80021ac <main+0x310>)
 800200c:	f008 ffa6 	bl	800af5c <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 8002010:	4b61      	ldr	r3, [pc, #388]	; (8002198 <main+0x2fc>)
 8002012:	789b      	ldrb	r3, [r3, #2]
 8002014:	2b05      	cmp	r3, #5
 8002016:	f040 82e5 	bne.w	80025e4 <main+0x748>
			  {
				  measurements.ADC_read_cnt = 0;
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <main+0x2fc>)
 800201c:	2200      	movs	r2, #0
 800201e:	709a      	strb	r2, [r3, #2]
				  HAL_TIM_Base_Stop_IT(&htim2);
 8002020:	4862      	ldr	r0, [pc, #392]	; (80021ac <main+0x310>)
 8002022:	f008 ffed 	bl	800b000 <HAL_TIM_Base_Stop_IT>

				  // Disable power to the humudity probe
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2108      	movs	r1, #8
 800202a:	485e      	ldr	r0, [pc, #376]	; (80021a4 <main+0x308>)
 800202c:	f004 f8ce 	bl	80061cc <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <main+0x2fc>)
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <main+0x2fc>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
 8002044:	e022      	b.n	800208c <main+0x1f0>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 8002046:	4b54      	ldr	r3, [pc, #336]	; (8002198 <main+0x2fc>)
 8002048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800204a:	4953      	ldr	r1, [pc, #332]	; (8002198 <main+0x2fc>)
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3308      	adds	r3, #8
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe fbd5 	bl	8000808 <__addsf3>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <main+0x2fc>)
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <main+0x2fc>)
 8002068:	6a1a      	ldr	r2, [r3, #32]
 800206a:	494b      	ldr	r1, [pc, #300]	; (8002198 <main+0x2fc>)
 800206c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206e:	3302      	adds	r3, #2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f7fe fbc5 	bl	8000808 <__addsf3>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <main+0x2fc>)
 8002084:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	3301      	adds	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	2b04      	cmp	r3, #4
 8002090:	ddd9      	ble.n	8002046 <main+0x1aa>
				  }

				  measurements.battery_voltage /= 5;
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <main+0x2fc>)
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	4949      	ldr	r1, [pc, #292]	; (80021bc <main+0x320>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fd71 	bl	8000b80 <__aeabi_fdiv>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <main+0x2fc>)
 80020a4:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 80020a6:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <main+0x2fc>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4944      	ldr	r1, [pc, #272]	; (80021bc <main+0x320>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fd67 	bl	8000b80 <__aeabi_fdiv>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <main+0x2fc>)
 80020b8:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_ReadAllData(&bme280, &hi2c2);
 80020ba:	4938      	ldr	r1, [pc, #224]	; (800219c <main+0x300>)
 80020bc:	4838      	ldr	r0, [pc, #224]	; (80021a0 <main+0x304>)
 80020be:	f7ff fd6b 	bl	8001b98 <BME280_ReadAllData>

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 80020c2:	483f      	ldr	r0, [pc, #252]	; (80021c0 <main+0x324>)
 80020c4:	f000 fec6 	bl	8002e54 <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 80020c8:	483d      	ldr	r0, [pc, #244]	; (80021c0 <main+0x324>)
 80020ca:	f001 f9f3 	bl	80034b4 <rfm95_init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <main+0x248>
 80020da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020de:	3301      	adds	r3, #1
 80020e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); // Clear EXTI1 NVIC pending flag
 80020e4:	2007      	movs	r0, #7
 80020e6:	f7ff febb 	bl	8001e60 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); // Clear EXTI3 NVIC pending
 80020ea:	2009      	movs	r0, #9
 80020ec:	f7ff feb8 	bl	8001e60 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // Clear EXTI15_10 NVIC pending flag
 80020f0:	2028      	movs	r0, #40	; 0x28
 80020f2:	f7ff feb5 	bl	8001e60 <__NVIC_ClearPendingIRQ>
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020f6:	2009      	movs	r0, #9
 80020f8:	f003 fc2b 	bl	8005952 <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020fc:	2007      	movs	r0, #7
 80020fe:	f003 fc28 	bl	8005952 <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Bricks the program, inturrupt is not needed -> only for RX

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 3.5f) status++; //Vbat NEEDS TO BE SET
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <main+0x2fc>)
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	492f      	ldr	r1, [pc, #188]	; (80021c4 <main+0x328>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe23 	bl	8000d54 <__aeabi_fcmplt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <main+0x282>
 8002114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002118:	3301      	adds	r3, #1
 800211a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  lora_data.errSendCnt += status;
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <main+0x32c>)
 8002120:	785a      	ldrb	r2, [r3, #1]
 8002122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002126:	4413      	add	r3, r2
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <main+0x32c>)
 800212c:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 800212e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <main+0x2ae>
				  {
					  state = STATE_FIRST_CONN;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <main+0x2f8>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
					  //state = STATE_SEND;
					  status = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  lora_data.errSendCnt = 0;
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <main+0x32c>)
 8002144:	2200      	movs	r2, #0
 8002146:	705a      	strb	r2, [r3, #1]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 8002148:	e24c      	b.n	80025e4 <main+0x748>
					  state = STATE_ERROR;
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <main+0x2f8>)
 800214c:	2205      	movs	r2, #5
 800214e:	701a      	strb	r2, [r3, #0]
		  break;
 8002150:	e248      	b.n	80025e4 <main+0x748>
	  case STATE_FIRST_CONN:

		  ////////* FIRST LoRa/SIM CONNECTION TEST *////////

		  // Create data packet that will be send - dummy
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <main+0x330>)
 8002154:	61fb      	str	r3, [r7, #28]

		  // Read number of TX packets from flash
		  uint32_t tx_count = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 800215a:	f107 0318 	add.w	r3, r7, #24
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	481b      	ldr	r0, [pc, #108]	; (80021d0 <main+0x334>)
 8002164:	f7ff fe5e 	bl	8001e24 <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <main+0x324>)
 800216e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	2204      	movs	r2, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4811      	ldr	r0, [pc, #68]	; (80021c0 <main+0x324>)
 800217c:	f002 f980 	bl	8004480 <rfm95_send_receive_cycle>
 8002180:	4603      	mov	r3, r0
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <main+0x338>
		  {
			  // Put device in error state
			  state = STATE_ERROR;
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <main+0x2f8>)
 800218e:	2205      	movs	r2, #5
 8002190:	701a      	strb	r2, [r3, #0]

			  // Send data packet
			  //state = STATE_SEND;
		  }

		  break;
 8002192:	e22a      	b.n	80025ea <main+0x74e>
 8002194:	2000055c 	.word	0x2000055c
 8002198:	200001d4 	.word	0x200001d4
 800219c:	2000036c 	.word	0x2000036c
 80021a0:	2000019c 	.word	0x2000019c
 80021a4:	40010800 	.word	0x40010800
 80021a8:	200003c0 	.word	0x200003c0
 80021ac:	20000484 	.word	0x20000484
 80021b0:	200004cc 	.word	0x200004cc
 80021b4:	200001d8 	.word	0x200001d8
 80021b8:	200001dc 	.word	0x200001dc
 80021bc:	40a00000 	.word	0x40a00000
 80021c0:	20000220 	.word	0x20000220
 80021c4:	40600000 	.word	0x40600000
 80021c8:	20000210 	.word	0x20000210
 80021cc:	04030201 	.word	0x04030201
 80021d0:	0801f800 	.word	0x0801f800
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 80021d4:	4b77      	ldr	r3, [pc, #476]	; (80023b4 <main+0x518>)
 80021d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80021da:	607b      	str	r3, [r7, #4]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2201      	movs	r2, #1
 80021e0:	4619      	mov	r1, r3
 80021e2:	4875      	ldr	r0, [pc, #468]	; (80023b8 <main+0x51c>)
 80021e4:	f7ff fdc2 	bl	8001d6c <Flash_Write_Data>
			  state = STATE_GO_SLEEP;
 80021e8:	4b74      	ldr	r3, [pc, #464]	; (80023bc <main+0x520>)
 80021ea:	2204      	movs	r2, #4
 80021ec:	701a      	strb	r2, [r3, #0]
		  break;
 80021ee:	e1fc      	b.n	80025ea <main+0x74e>
	  case STATE_RUN:

		  ////////* DEVICE WAKEUP ROUTINE *////////

		  // Start all clocks
		  if (awake == 1)
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <main+0x524>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11d      	bne.n	8002234 <main+0x398>
		  {
			  awake = 0;
 80021f8:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <main+0x524>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 80021fe:	f000 fa0b 	bl	8002618 <SystemClock_Config>
			  HAL_ResumeTick();
 8002202:	f002 fe4f 	bl	8004ea4 <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <main+0x528>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <main+0x528>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0202 	bic.w	r2, r2, #2
 8002214:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002216:	2100      	movs	r1, #0
 8002218:	486a      	ldr	r0, [pc, #424]	; (80023c4 <main+0x528>)
 800221a:	f007 fd9b 	bl	8009d54 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Init(&htim2);
 800221e:	486a      	ldr	r0, [pc, #424]	; (80023c8 <main+0x52c>)
 8002220:	f008 fe4c 	bl	800aebc <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Init(&htim3);
 8002224:	4869      	ldr	r0, [pc, #420]	; (80023cc <main+0x530>)
 8002226:	f008 fe49 	bl	800aebc <HAL_TIM_Base_Init>

			  // Enable power to the humudity probe
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	2108      	movs	r1, #8
 800222e:	4868      	ldr	r0, [pc, #416]	; (80023d0 <main+0x534>)
 8002230:	f003 ffcc 	bl	80061cc <HAL_GPIO_WritePin>
		  }

		  if (measurements.ADC_read_cnt == 0)
 8002234:	4b67      	ldr	r3, [pc, #412]	; (80023d4 <main+0x538>)
 8002236:	789b      	ldrb	r3, [r3, #2]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <main+0x3ac>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
			  status += BME280_Init(&bme280, &hi2c2);
			#endif

			  HAL_TIM_Base_Start_IT(&htim2);
 800223c:	4862      	ldr	r0, [pc, #392]	; (80023c8 <main+0x52c>)
 800223e:	f008 fe8d 	bl	800af5c <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002242:	4862      	ldr	r0, [pc, #392]	; (80023cc <main+0x530>)
 8002244:	f008 fe8a 	bl	800af5c <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002248:	4b62      	ldr	r3, [pc, #392]	; (80023d4 <main+0x538>)
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b01      	cmp	r3, #1
 800224e:	f040 81cb 	bne.w	80025e8 <main+0x74c>
 8002252:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <main+0x538>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 81c6 	bne.w	80025e8 <main+0x74c>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800225c:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <main+0x538>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	461c      	mov	r4, r3
 8002262:	485d      	ldr	r0, [pc, #372]	; (80023d8 <main+0x53c>)
 8002264:	f000 fdc0 	bl	8002de8 <ADC_Read_Battery>
 8002268:	4602      	mov	r2, r0
 800226a:	495a      	ldr	r1, [pc, #360]	; (80023d4 <main+0x538>)
 800226c:	f104 0308 	add.w	r3, r4, #8
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	4619      	mov	r1, r3
 800227c:	4857      	ldr	r0, [pc, #348]	; (80023dc <main+0x540>)
 800227e:	f000 fea1 	bl	8002fc4 <ADC_Read_EHum>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <main+0x538>)
 8002288:	789b      	ldrb	r3, [r3, #2]
 800228a:	461c      	mov	r4, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fb6b 	bl	8000968 <__aeabi_ui2f>
 8002292:	4602      	mov	r2, r0
 8002294:	494f      	ldr	r1, [pc, #316]	; (80023d4 <main+0x538>)
 8002296:	1ca3      	adds	r3, r4, #2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <main+0x538>)
 80022a0:	789b      	ldrb	r3, [r3, #2]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <main+0x538>)
 80022a8:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <main+0x538>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 			// reset timer read flag
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <main+0x538>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 80022b6:	4844      	ldr	r0, [pc, #272]	; (80023c8 <main+0x52c>)
 80022b8:	f008 fe50 	bl	800af5c <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80022bc:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <main+0x538>)
 80022be:	789b      	ldrb	r3, [r3, #2]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	f040 8191 	bne.w	80025e8 <main+0x74c>
			  {
				  measurements.ADC_read_cnt = 0;
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <main+0x538>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	709a      	strb	r2, [r3, #2]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80022cc:	483e      	ldr	r0, [pc, #248]	; (80023c8 <main+0x52c>)
 80022ce:	f008 fe97 	bl	800b000 <HAL_TIM_Base_Stop_IT>

				  // Disable power to the humudity probe
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2108      	movs	r1, #8
 80022d6:	483e      	ldr	r0, [pc, #248]	; (80023d0 <main+0x534>)
 80022d8:	f003 ff78 	bl	80061cc <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 80022dc:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <main+0x538>)
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <main+0x538>)
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e022      	b.n	8002338 <main+0x49c>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <main+0x538>)
 80022f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f6:	4937      	ldr	r1, [pc, #220]	; (80023d4 <main+0x538>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3308      	adds	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f7fe fa7f 	bl	8000808 <__addsf3>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <main+0x538>)
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <main+0x538>)
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	492f      	ldr	r1, [pc, #188]	; (80023d4 <main+0x538>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3302      	adds	r3, #2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f7fe fa6f 	bl	8000808 <__addsf3>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <main+0x538>)
 8002330:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	3301      	adds	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2b04      	cmp	r3, #4
 800233c:	ddd9      	ble.n	80022f2 <main+0x456>
				  }

				  measurements.battery_voltage /= 5;
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <main+0x538>)
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	4927      	ldr	r1, [pc, #156]	; (80023e0 <main+0x544>)
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fc1b 	bl	8000b80 <__aeabi_fdiv>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <main+0x538>)
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <main+0x538>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4922      	ldr	r1, [pc, #136]	; (80023e0 <main+0x544>)
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fc11 	bl	8000b80 <__aeabi_fdiv>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <main+0x538>)
 8002364:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002366:	491f      	ldr	r1, [pc, #124]	; (80023e4 <main+0x548>)
 8002368:	481f      	ldr	r0, [pc, #124]	; (80023e8 <main+0x54c>)
 800236a:	f7ff fc15 	bl	8001b98 <BME280_ReadAllData>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Bricks the program, inturrupt is not needed -> only for RX
				#endif

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 3.5f) status++; //Vbat NEED TO BE SET
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <main+0x538>)
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	491e      	ldr	r1, [pc, #120]	; (80023ec <main+0x550>)
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fced 	bl	8000d54 <__aeabi_fcmplt>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <main+0x4ee>
 8002380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002384:	3301      	adds	r3, #1
 8002386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  lora_data.errSendCnt += status;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <main+0x554>)
 800238c:	785a      	ldrb	r2, [r3, #1]
 800238e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002392:	4413      	add	r3, r2
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <main+0x554>)
 8002398:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 800239a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d803      	bhi.n	80023aa <main+0x50e>
				  {
					  state = STATE_SEND;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <main+0x520>)
 80023a4:	2203      	movs	r2, #3
 80023a6:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 80023a8:	e11e      	b.n	80025e8 <main+0x74c>
					  state = STATE_ERROR;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <main+0x520>)
 80023ac:	2205      	movs	r2, #5
 80023ae:	701a      	strb	r2, [r3, #0]
		  break;
 80023b0:	e11a      	b.n	80025e8 <main+0x74c>
 80023b2:	bf00      	nop
 80023b4:	20000220 	.word	0x20000220
 80023b8:	0801f800 	.word	0x0801f800
 80023bc:	2000055c 	.word	0x2000055c
 80023c0:	20000000 	.word	0x20000000
 80023c4:	200003c0 	.word	0x200003c0
 80023c8:	20000484 	.word	0x20000484
 80023cc:	200004cc 	.word	0x200004cc
 80023d0:	40010800 	.word	0x40010800
 80023d4:	200001d4 	.word	0x200001d4
 80023d8:	200001d8 	.word	0x200001d8
 80023dc:	200001dc 	.word	0x200001dc
 80023e0:	40a00000 	.word	0x40a00000
 80023e4:	2000036c 	.word	0x2000036c
 80023e8:	2000019c 	.word	0x2000019c
 80023ec:	40600000 	.word	0x40600000
 80023f0:	20000210 	.word	0x20000210
	  case STATE_SEND:

	  	  ////////* SEND DATA *////////

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 80023f4:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <main+0x750>)
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <main+0x566>
 80023fc:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <main+0x750>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t)(measurements.battery_voltage * 10);		// Battery voltage [3.5V -> 35V, no float]
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <main+0x754>)
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	497b      	ldr	r1, [pc, #492]	; (80025f4 <main+0x758>)
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fb05 	bl	8000a18 <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fcc7 	bl	8000da4 <__aeabi_f2uiz>
 8002416:	4603      	mov	r3, r0
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b74      	ldr	r3, [pc, #464]	; (80025ec <main+0x750>)
 800241c:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int32_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <main+0x75c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b21a      	sxth	r2, r3
 8002424:	4b71      	ldr	r3, [pc, #452]	; (80025ec <main+0x750>)
 8002426:	809a      	strh	r2, [r3, #4]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in perscents [0-100%]
 8002428:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <main+0x75c>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <main+0x750>)
 8002430:	719a      	strb	r2, [r3, #6]
		  lora_data.air_pressure = (uint32_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_ts]
 8002432:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <main+0x75c>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fcb4 	bl	8000da4 <__aeabi_f2uiz>
 800243c:	4603      	mov	r3, r0
 800243e:	4a6b      	ldr	r2, [pc, #428]	; (80025ec <main+0x750>)
 8002440:	6093      	str	r3, [r2, #8]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 8002442:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <main+0x754>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fcac 	bl	8000da4 <__aeabi_f2uiz>
 800244c:	4603      	mov	r3, r0
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <main+0x750>)
 8002452:	731a      	strb	r2, [r3, #12]

		  // Data packet that will be send (modify if needed)
		  uint8_t data_packet[14];

		  data_packet[0] = DEVICE_ID;                              // Device ID number
 8002454:	2301      	movs	r3, #1
 8002456:	723b      	strb	r3, [r7, #8]
		  data_packet[1] = lora_data.error;                        // Error flag
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <main+0x750>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	727b      	strb	r3, [r7, #9]
		  data_packet[2] = lora_data.errSendCnt;                   // No. of errors
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <main+0x750>)
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	72bb      	strb	r3, [r7, #10]
		  data_packet[3] = lora_data.battery;                      // battery voltage
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <main+0x750>)
 8002466:	789b      	ldrb	r3, [r3, #2]
 8002468:	72fb      	strb	r3, [r7, #11]

		  // Encode air_temperature (int32_t -> 4 bytes)
		  data_packet[4] = (uint8_t)(lora_data.air_temperature & 0xFF);
 800246a:	4b60      	ldr	r3, [pc, #384]	; (80025ec <main+0x750>)
 800246c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	733b      	strb	r3, [r7, #12]
		  data_packet[5] = (uint8_t)((lora_data.air_temperature >> 8) & 0xFF);
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <main+0x750>)
 8002476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800247a:	121b      	asrs	r3, r3, #8
 800247c:	b21b      	sxth	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	737b      	strb	r3, [r7, #13]
		  data_packet[6] = (uint8_t)((lora_data.air_temperature >> 16) & 0xFF);
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <main+0x750>)
 8002484:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002488:	141b      	asrs	r3, r3, #16
 800248a:	b2db      	uxtb	r3, r3
 800248c:	73bb      	strb	r3, [r7, #14]
		  data_packet[7] = (uint8_t)((lora_data.air_temperature >> 24) & 0xFF);
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <main+0x750>)
 8002490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002494:	161b      	asrs	r3, r3, #24
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73fb      	strb	r3, [r7, #15]

		  // Encode air_humidity
		  data_packet[8] = lora_data.air_humidity;
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <main+0x750>)
 800249c:	799b      	ldrb	r3, [r3, #6]
 800249e:	743b      	strb	r3, [r7, #16]

		  // Encode air_pressure (uint32_t -> 4 bytes)
		  data_packet[9] = (uint8_t)(lora_data.air_pressure & 0xFF);
 80024a0:	4b52      	ldr	r3, [pc, #328]	; (80025ec <main+0x750>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	747b      	strb	r3, [r7, #17]
		  data_packet[10] = (uint8_t)((lora_data.air_pressure >> 8) & 0xFF);
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <main+0x750>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	74bb      	strb	r3, [r7, #18]
		  data_packet[11] = (uint8_t)((lora_data.air_pressure >> 16) & 0xFF);
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <main+0x750>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	74fb      	strb	r3, [r7, #19]
		  data_packet[12] = (uint8_t)((lora_data.air_pressure >> 24) & 0xFF);
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <main+0x750>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	0e1b      	lsrs	r3, r3, #24
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	753b      	strb	r3, [r7, #20]

		  // Encode earth_humidity
		  data_packet[13] = lora_data.earth_humudity;
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <main+0x750>)
 80024c8:	7b1b      	ldrb	r3, [r3, #12]
 80024ca:	757b      	strb	r3, [r7, #21]

		  // Read number of TX packets from flash
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	4849      	ldr	r0, [pc, #292]	; (80025fc <main+0x760>)
 80024d6:	f7ff fca5 	bl	8001e24 <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b48      	ldr	r3, [pc, #288]	; (8002600 <main+0x764>)
 80024e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) // test_data_packet
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	220e      	movs	r2, #14
 80024ea:	4619      	mov	r1, r3
 80024ec:	4844      	ldr	r0, [pc, #272]	; (8002600 <main+0x764>)
 80024ee:	f001 ffc7 	bl	8004480 <rfm95_send_receive_cycle>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <main+0x670>
		  {
			  lora_data.errSendCnt++; // Not used
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <main+0x750>)
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	3301      	adds	r3, #1
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <main+0x750>)
 8002508:	705a      	strb	r2, [r3, #1]
 800250a:	e009      	b.n	8002520 <main+0x684>
		  }
		  else
		  {
			  // Write number of TX packets to flash
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <main+0x764>)
 800250e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002512:	603b      	str	r3, [r7, #0]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 8002514:	463b      	mov	r3, r7
 8002516:	2201      	movs	r2, #1
 8002518:	4619      	mov	r1, r3
 800251a:	4838      	ldr	r0, [pc, #224]	; (80025fc <main+0x760>)
 800251c:	f7ff fc26 	bl	8001d6c <Flash_Write_Data>
		  }

		  state = STATE_GO_SLEEP;
 8002520:	4b38      	ldr	r3, [pc, #224]	; (8002604 <main+0x768>)
 8002522:	2204      	movs	r2, #4
 8002524:	701a      	strb	r2, [r3, #0]

		  // Reset error counter
		  status = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  lora_data.errSendCnt = 0;
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <main+0x750>)
 800252e:	2200      	movs	r2, #0
 8002530:	705a      	strb	r2, [r3, #1]

		  break;
 8002532:	e05a      	b.n	80025ea <main+0x74e>

	  case STATE_GO_SLEEP:

		  ////////* PUT DEVICE TO SLEEP *////////

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002534:	2200      	movs	r2, #0
 8002536:	4934      	ldr	r1, [pc, #208]	; (8002608 <main+0x76c>)
 8002538:	4834      	ldr	r0, [pc, #208]	; (800260c <main+0x770>)
 800253a:	f007 f971 	bl	8009820 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800253e:	2200      	movs	r2, #0
 8002540:	4933      	ldr	r1, [pc, #204]	; (8002610 <main+0x774>)
 8002542:	4832      	ldr	r0, [pc, #200]	; (800260c <main+0x770>)
 8002544:	f007 fafa 	bl	8009b3c <HAL_RTC_GetDate>

		  //time.Hours += 1; // Next wake up after one hours
		  time.Minutes += 30; // Next wake up after 30 minuts
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <main+0x76c>)
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	331e      	adds	r3, #30
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <main+0x76c>)
 8002552:	705a      	strb	r2, [r3, #1]
		  //time.Minutes += 1; //test

		  if(time.Seconds>=60)
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <main+0x76c>)
 8002556:	789b      	ldrb	r3, [r3, #2]
 8002558:	2b3b      	cmp	r3, #59	; 0x3b
 800255a:	d90b      	bls.n	8002574 <main+0x6d8>
		  {
			  time.Minutes ++;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <main+0x76c>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	3301      	adds	r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <main+0x76c>)
 8002566:	705a      	strb	r2, [r3, #1]
			  time.Seconds = time.Seconds - 60;
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <main+0x76c>)
 800256a:	789b      	ldrb	r3, [r3, #2]
 800256c:	3b3c      	subs	r3, #60	; 0x3c
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <main+0x76c>)
 8002572:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <main+0x76c>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b3b      	cmp	r3, #59	; 0x3b
 800257a:	d90b      	bls.n	8002594 <main+0x6f8>
		  {
			  time.Hours++;
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <main+0x76c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <main+0x76c>)
 8002586:	701a      	strb	r2, [r3, #0]
			  time.Minutes = time.Minutes - 60;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <main+0x76c>)
 800258a:	785b      	ldrb	r3, [r3, #1]
 800258c:	3b3c      	subs	r3, #60	; 0x3c
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <main+0x76c>)
 8002592:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <main+0x76c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b17      	cmp	r3, #23
 800259a:	d902      	bls.n	80025a2 <main+0x706>
		  {
			  time.Hours = 0;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <main+0x76c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm = RTC_ALARM_A;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <main+0x778>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
		  sAlarm.AlarmTime.Hours = time.Hours;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <main+0x76c>)
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <main+0x778>)
 80025ae:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes = time.Minutes;
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <main+0x76c>)
 80025b2:	785a      	ldrb	r2, [r3, #1]
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <main+0x778>)
 80025b6:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds = time.Seconds;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <main+0x76c>)
 80025ba:	789a      	ldrb	r2, [r3, #2]
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <main+0x778>)
 80025be:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80025c0:	2200      	movs	r2, #0
 80025c2:	4914      	ldr	r1, [pc, #80]	; (8002614 <main+0x778>)
 80025c4:	4811      	ldr	r0, [pc, #68]	; (800260c <main+0x770>)
 80025c6:	f007 fb0d 	bl	8009be4 <HAL_RTC_SetAlarm_IT>

		  HAL_SuspendTick();
 80025ca:	f002 fc5d 	bl	8004e88 <HAL_SuspendTick>

		  // Set sleep mode
		#ifdef SLEEP_MODE_STOP
		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80025ce:	2101      	movs	r1, #1
 80025d0:	2001      	movs	r0, #1
 80025d2:	f006 fa51 	bl	8008a78 <HAL_PWR_EnterSTOPMode>

		#ifndef SLEEP_MODE_STOP
		  HAL_PWR_EnterSTANDBYMode();
		#endif

		  break;
 80025d6:	e008      	b.n	80025ea <main+0x74e>

	  case STATE_ERROR:

		  ////////* INIT ROUTINE FAILED *////////
		  state = STATE_GO_SLEEP;
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <main+0x768>)
 80025da:	2204      	movs	r2, #4
 80025dc:	701a      	strb	r2, [r3, #0]

		  break;
 80025de:	e004      	b.n	80025ea <main+0x74e>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 80025e0:	bf00      	nop
 80025e2:	e47c      	b.n	8001ede <main+0x42>
		  break;
 80025e4:	bf00      	nop
 80025e6:	e47a      	b.n	8001ede <main+0x42>
		  break;
 80025e8:	bf00      	nop
	  switch(state)
 80025ea:	e478      	b.n	8001ede <main+0x42>
 80025ec:	20000210 	.word	0x20000210
 80025f0:	200001d4 	.word	0x200001d4
 80025f4:	41200000 	.word	0x41200000
 80025f8:	2000019c 	.word	0x2000019c
 80025fc:	0801f800 	.word	0x0801f800
 8002600:	20000220 	.word	0x20000220
 8002604:	2000055c 	.word	0x2000055c
 8002608:	200002d8 	.word	0x200002d8
 800260c:	200003c0 	.word	0x200003c0
 8002610:	200002dc 	.word	0x200002dc
 8002614:	200002e0 	.word	0x200002e0

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b094      	sub	sp, #80	; 0x50
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002622:	2228      	movs	r2, #40	; 0x28
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f00a f811 	bl	800c64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002648:	2305      	movs	r3, #5
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800264c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800265a:	2301      	movs	r3, #1
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265e:	2302      	movs	r3, #2
 8002660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800266c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002672:	4618      	mov	r0, r3
 8002674:	f006 fa32 	bl	8008adc <HAL_RCC_OscConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800267e:	f000 fcc9 	bl	8003014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002682:	230f      	movs	r3, #15
 8002684:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800268e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f006 fc9e 	bl	8008fe0 <HAL_RCC_ClockConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026aa:	f000 fcb3 	bl	8003014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80026ae:	2303      	movs	r3, #3
 80026b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4618      	mov	r0, r3
 80026c2:	f006 fe1d 	bl	8009300 <HAL_RCCEx_PeriphCLKConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80026cc:	f000 fca2 	bl	8003014 <Error_Handler>
  }
}
 80026d0:	bf00      	nop
 80026d2:	3750      	adds	r7, #80	; 0x50
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <MX_ADC1_Init+0x94>)
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <MX_ADC1_Init+0x98>)
 80026ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <MX_ADC1_Init+0x94>)
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <MX_ADC1_Init+0x94>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_ADC1_Init+0x94>)
 80026fe:	2200      	movs	r2, #0
 8002700:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_ADC1_Init+0x94>)
 8002704:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002708:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_ADC1_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <MX_ADC1_Init+0x94>)
 8002712:	2202      	movs	r2, #2
 8002714:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002716:	4815      	ldr	r0, [pc, #84]	; (800276c <MX_ADC1_Init+0x94>)
 8002718:	f002 fbd2 	bl	8004ec0 <HAL_ADC_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002722:	f000 fc77 	bl	8003014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002726:	2301      	movs	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800272a:	2301      	movs	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <MX_ADC1_Init+0x94>)
 8002738:	f002 fe58 	bl	80053ec <HAL_ADC_ConfigChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002742:	f000 fc67 	bl	8003014 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002746:	2302      	movs	r3, #2
 8002748:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800274a:	2302      	movs	r3, #2
 800274c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <MX_ADC1_Init+0x94>)
 8002754:	f002 fe4a 	bl	80053ec <HAL_ADC_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800275e:	f000 fc59 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200002e8 	.word	0x200002e8
 8002770:	40012400 	.word	0x40012400

08002774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_I2C1_Init+0x50>)
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <MX_I2C1_Init+0x54>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <MX_I2C1_Init+0x58>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_I2C1_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_I2C1_Init+0x50>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027b2:	f003 fd3b 	bl	800622c <HAL_I2C_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027bc:	f000 fc2a 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000318 	.word	0x20000318
 80027c8:	40005400 	.word	0x40005400
 80027cc:	000186a0 	.word	0x000186a0

080027d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <MX_I2C2_Init+0x50>)
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <MX_I2C2_Init+0x54>)
 80027d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_I2C2_Init+0x50>)
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <MX_I2C2_Init+0x58>)
 80027de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_I2C2_Init+0x50>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <MX_I2C2_Init+0x50>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_I2C2_Init+0x50>)
 80027ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <MX_I2C2_Init+0x50>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_I2C2_Init+0x50>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <MX_I2C2_Init+0x50>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_I2C2_Init+0x50>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800280c:	4804      	ldr	r0, [pc, #16]	; (8002820 <MX_I2C2_Init+0x50>)
 800280e:	f003 fd0d 	bl	800622c <HAL_I2C_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002818:	f000 fbfc 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	2000036c 	.word	0x2000036c
 8002824:	40005800 	.word	0x40005800
 8002828:	000186a0 	.word	0x000186a0

0800282c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	2100      	movs	r1, #0
 8002838:	460a      	mov	r2, r1
 800283a:	801a      	strh	r2, [r3, #0]
 800283c:	460a      	mov	r2, r1
 800283e:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002844:	463b      	mov	r3, r7
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <MX_RTC_Init+0xc0>)
 800284e:	4a28      	ldr	r2, [pc, #160]	; (80028f0 <MX_RTC_Init+0xc4>)
 8002850:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <MX_RTC_Init+0xc0>)
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <MX_RTC_Init+0xc0>)
 800285c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002860:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002862:	4822      	ldr	r0, [pc, #136]	; (80028ec <MX_RTC_Init+0xc0>)
 8002864:	f006 feb8 	bl	80095d8 <HAL_RTC_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800286e:	f000 fbd1 	bl	8003014 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002872:	2300      	movs	r3, #0
 8002874:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8002876:	2300      	movs	r3, #0
 8002878:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 800287a:	2300      	movs	r3, #0
 800287c:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	2201      	movs	r2, #1
 8002884:	4619      	mov	r1, r3
 8002886:	4819      	ldr	r0, [pc, #100]	; (80028ec <MX_RTC_Init+0xc0>)
 8002888:	f006 ff32 	bl	80096f0 <HAL_RTC_SetTime>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8002892:	f000 fbbf 	bl	8003014 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002896:	2301      	movs	r3, #1
 8002898:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800289a:	2301      	movs	r3, #1
 800289c:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 800289e:	2301      	movs	r3, #1
 80028a0:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	2201      	movs	r2, #1
 80028ac:	4619      	mov	r1, r3
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <MX_RTC_Init+0xc0>)
 80028b0:	f007 f88e 	bl	80099d0 <HAL_RTC_SetDate>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80028ba:	f000 fbab 	bl	8003014 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80028be:	2300      	movs	r3, #0
 80028c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	2201      	movs	r2, #1
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_RTC_Init+0xc0>)
 80028d6:	f007 f985 	bl	8009be4 <HAL_RTC_SetAlarm_IT>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80028e0:	f000 fb98 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200003c0 	.word	0x200003c0
 80028f0:	40002800 	.word	0x40002800

080028f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_SPI1_Init+0x64>)
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <MX_SPI1_Init+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_SPI1_Init+0x64>)
 8002900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_SPI1_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_SPI1_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_SPI1_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_SPI1_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_SPI1_Init+0x64>)
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_SPI1_Init+0x64>)
 8002928:	2210      	movs	r2, #16
 800292a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <MX_SPI1_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_SPI1_Init+0x64>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <MX_SPI1_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_SPI1_Init+0x64>)
 8002940:	220a      	movs	r2, #10
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_SPI1_Init+0x64>)
 8002946:	f007 fd31 	bl	800a3ac <HAL_SPI_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002950:	f000 fb60 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200003d4 	.word	0x200003d4
 800295c:	40013000 	.word	0x40013000

08002960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <MX_SPI2_Init+0x64>)
 8002966:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <MX_SPI2_Init+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_SPI2_Init+0x64>)
 800296c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002972:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_SPI2_Init+0x64>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_SPI2_Init+0x64>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_SPI2_Init+0x64>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_SPI2_Init+0x64>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_SPI2_Init+0x64>)
 800298c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_SPI2_Init+0x64>)
 8002994:	2208      	movs	r2, #8
 8002996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <MX_SPI2_Init+0x64>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_SPI2_Init+0x64>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <MX_SPI2_Init+0x64>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_SPI2_Init+0x64>)
 80029ac:	220a      	movs	r2, #10
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_SPI2_Init+0x64>)
 80029b2:	f007 fcfb 	bl	800a3ac <HAL_SPI_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029bc:	f000 fb2a 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000042c 	.word	0x2000042c
 80029c8:	40003800 	.word	0x40003800

080029cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e0:	463b      	mov	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <MX_TIM2_Init+0x98>)
 80029ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <MX_TIM2_Init+0x98>)
 80029f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <MX_TIM2_Init+0x98>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a00:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a12:	4814      	ldr	r0, [pc, #80]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a14:	f008 fa52 	bl	800aebc <HAL_TIM_Base_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002a1e:	f000 faf9 	bl	8003014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480d      	ldr	r0, [pc, #52]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a30:	f008 fc1c 	bl	800b26c <HAL_TIM_ConfigClockSource>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002a3a:	f000 faeb 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a46:	463b      	mov	r3, r7
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4806      	ldr	r0, [pc, #24]	; (8002a64 <MX_TIM2_Init+0x98>)
 8002a4c:	f008 fdf2 	bl	800b634 <HAL_TIMEx_MasterConfigSynchronization>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a56:	f000 fadd 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000484 	.word	0x20000484

08002a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6e:	f107 0308 	add.w	r3, r7, #8
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <MX_TIM3_Init+0x94>)
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <MX_TIM3_Init+0x98>)
 8002a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2199;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <MX_TIM3_Init+0x94>)
 8002a8c:	f640 0297 	movw	r2, #2199	; 0x897
 8002a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <MX_TIM3_Init+0x94>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <MX_TIM3_Init+0x94>)
 8002a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <MX_TIM3_Init+0x94>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MX_TIM3_Init+0x94>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aac:	4813      	ldr	r0, [pc, #76]	; (8002afc <MX_TIM3_Init+0x94>)
 8002aae:	f008 fa05 	bl	800aebc <HAL_TIM_Base_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ab8:	f000 faac 	bl	8003014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <MX_TIM3_Init+0x94>)
 8002aca:	f008 fbcf 	bl	800b26c <HAL_TIM_ConfigClockSource>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ad4:	f000 fa9e 	bl	8003014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_TIM3_Init+0x94>)
 8002ae6:	f008 fda5 	bl	800b634 <HAL_TIMEx_MasterConfigSynchronization>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002af0:	f000 fa90 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200004cc 	.word	0x200004cc
 8002b00:	40000400 	.word	0x40000400

08002b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b0a:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <MX_USART1_UART_Init+0x50>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f008 fdea 	bl	800b714 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b46:	f000 fa65 	bl	8003014 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000514 	.word	0x20000514
 8002b54:	40013800 	.word	0x40013800

08002b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4a60      	ldr	r2, [pc, #384]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	6193      	str	r3, [r2, #24]
 8002b78:	4b5e      	ldr	r3, [pc, #376]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b84:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b8a:	f043 0320 	orr.w	r3, r3, #32
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9c:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002bba:	f043 0308 	orr.w	r3, r3, #8
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <MX_GPIO_Init+0x19c>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2108      	movs	r1, #8
 8002bd0:	4849      	ldr	r0, [pc, #292]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002bd2:	f003 fafb 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_EX_Pin|RESET_Pin, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002bdc:	4846      	ldr	r0, [pc, #280]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002bde:	f003 faf5 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002be2:	2201      	movs	r2, #1
 8002be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be8:	4844      	ldr	r0, [pc, #272]	; (8002cfc <MX_GPIO_Init+0x1a4>)
 8002bea:	f003 faef 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_SLP_GPIO_Port, SIM_SLP_Pin, GPIO_PIN_RESET);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf4:	4841      	ldr	r0, [pc, #260]	; (8002cfc <MX_GPIO_Init+0x1a4>)
 8002bf6:	f003 fae9 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EHUM_PWR_Pin SPI_CS_EX_Pin */
  GPIO_InitStruct.Pin = EHUM_PWR_Pin|SPI_CS_EX_Pin;
 8002bfa:	2318      	movs	r3, #24
 8002bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4839      	ldr	r0, [pc, #228]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002c12:	f003 f957 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin SIM_ISR_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin|SIM_ISR_Pin;
 8002c16:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c1c:	4b38      	ldr	r3, [pc, #224]	; (8002d00 <MX_GPIO_Init+0x1a8>)
 8002c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4834      	ldr	r0, [pc, #208]	; (8002cfc <MX_GPIO_Init+0x1a4>)
 8002c2c:	f003 f94a 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin SIM_SLP_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|SIM_SLP_Pin;
 8002c30:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4619      	mov	r1, r3
 8002c48:	482c      	ldr	r0, [pc, #176]	; (8002cfc <MX_GPIO_Init+0x1a4>)
 8002c4a:	f003 f93b 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	4824      	ldr	r0, [pc, #144]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002c68:	f003 f92c 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8002c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	4619      	mov	r1, r3
 8002c80:	481d      	ldr	r0, [pc, #116]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002c82:	f003 f91f 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_RST_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin|DIO1_Pin;
 8002c86:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <MX_GPIO_Init+0x1a8>)
 8002c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4817      	ldr	r0, [pc, #92]	; (8002cf8 <MX_GPIO_Init+0x1a0>)
 8002c9c:	f003 f912 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 8002ca0:	2330      	movs	r3, #48	; 0x30
 8002ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4812      	ldr	r0, [pc, #72]	; (8002cfc <MX_GPIO_Init+0x1a4>)
 8002cb4:	f003 f906 	bl	8005ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2007      	movs	r0, #7
 8002cbe:	f002 fe2c 	bl	800591a <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	2009      	movs	r0, #9
 8002cc8:	f002 fe27 	bl	800591a <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // ^^^^^^^^ COMMENT ALL IRQ ENABLE WRITEN BY IDE ^^^^^^^^
  // Manual setup IRQs - interrupt signal already at startup
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2007      	movs	r0, #7
 8002cd2:	f002 fe22 	bl	800591a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2101      	movs	r1, #1
 8002cda:	2009      	movs	r0, #9
 8002cdc:	f002 fe1d 	bl	800591a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8002ce0:	2009      	movs	r0, #9
 8002ce2:	f002 fe44 	bl	800596e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002ce6:	2007      	movs	r0, #7
 8002ce8:	f002 fe41 	bl	800596e <HAL_NVIC_DisableIRQ>


/* USER CODE END MX_GPIO_Init_2 */
}
 8002cec:	bf00      	nop
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	10110000 	.word	0x10110000

08002d04 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

// Wake up interrupt - STOP mode //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	awake = 1;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RTC_AlarmAEventCallback+0x28>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_RTC_AlarmAEventCallback+0x1c>
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	701a      	strb	r2, [r3, #0]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	2000055c 	.word	0x2000055c

08002d34 <HAL_TIM_PeriodElapsedCallback>:
}


// TIMER Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d10c      	bne.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (measurements.ADC_read == 0)
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8002d4e:	480e      	ldr	r0, [pc, #56]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002d50:	f008 f956 	bl	800b000 <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Start_IT(&hadc1);
 8002d54:	480d      	ldr	r0, [pc, #52]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002d56:	f002 f98b 	bl	8005070 <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d108      	bne.n	8002d7c <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM2 overflows
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002d72:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d74:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8002d76:	4808      	ldr	r0, [pc, #32]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002d78:	f008 f8f0 	bl	800af5c <HAL_TIM_Base_Start_IT>
	}
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200001d4 	.word	0x200001d4
 8002d88:	20000484 	.word	0x20000484
 8002d8c:	200002e8 	.word	0x200002e8
 8002d90:	40000400 	.word	0x40000400
 8002d94:	20000560 	.word	0x20000560
 8002d98:	200004cc 	.word	0x200004cc

08002d9c <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_ADC_ConvCpltCallback+0x40>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <HAL_ADC_ConvCpltCallback+0x36>
    {
    	measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f002 fa48 	bl	8005244 <HAL_ADC_GetValue>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_ADC_ConvCpltCallback+0x44>)
 8002db8:	6053      	str	r3, [r2, #4]
    	measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f002 fa42 	bl	8005244 <HAL_ADC_GetValue>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_ADC_ConvCpltCallback+0x44>)
 8002dc4:	6093      	str	r3, [r2, #8]
    	HAL_ADC_Stop_IT(&hadc1);
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <HAL_ADC_ConvCpltCallback+0x48>)
 8002dc8:	f002 fa08 	bl	80051dc <HAL_ADC_Stop_IT>
    	measurements.ADC_read_end = 1;
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_ADC_ConvCpltCallback+0x44>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
    }
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40012400 	.word	0x40012400
 8002de0:	200001d4 	.word	0x200001d4
 8002de4:	200002e8 	.word	0x200002e8

08002de8 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	float Vout = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fc17 	bl	8000628 <__aeabi_ui2d>
 8002dfa:	a311      	add	r3, pc, #68	; (adr r3, 8002e40 <ADC_Read_Battery+0x58>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd f9a6 	bl	8000150 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fca6 	bl	800075c <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	490d      	ldr	r1, [pc, #52]	; (8002e48 <ADC_Read_Battery+0x60>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd feb3 	bl	8000b80 <__aeabi_fdiv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60fb      	str	r3, [r7, #12]
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
 8002e1e:	490b      	ldr	r1, [pc, #44]	; (8002e4c <ADC_Read_Battery+0x64>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7fd fead 	bl	8000b80 <__aeabi_fdiv>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4909      	ldr	r1, [pc, #36]	; (8002e50 <ADC_Read_Battery+0x68>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fdf4 	bl	8000a18 <__aeabi_fmul>
 8002e30:	4603      	mov	r3, r0
 8002e32:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 8002e34:	68bb      	ldr	r3, [r7, #8]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	33333333 	.word	0x33333333
 8002e44:	40093333 	.word	0x40093333
 8002e48:	457ff000 	.word	0x457ff000
 8002e4c:	461c4000 	.word	0x461c4000
 8002e50:	469c4000 	.word	0x469c4000

08002e54 <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 8002e54:	b4b0      	push	{r4, r5, r7}
 8002e56:	b08d      	sub	sp, #52	; 0x34
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <RFM95W_Struct_Init+0xa4>)
 8002e60:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a25      	ldr	r2, [pc, #148]	; (8002efc <RFM95W_Struct_Init+0xa8>)
 8002e66:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e6e:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <RFM95W_Struct_Init+0xac>)
 8002e74:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7c:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	63da      	str	r2, [r3, #60]	; 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <RFM95W_Struct_Init+0xb0>)
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <RFM95W_Struct_Init+0xb4>)
 8002ea0:	64da      	str	r2, [r3, #76]	; 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <RFM95W_Struct_Init+0xb8>)
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3312      	adds	r3, #18
 8002eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eac:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <RFM95W_Struct_Init+0xbc>)
 8002eb0:	f107 041c 	add.w	r4, r7, #28
 8002eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3326      	adds	r3, #38	; 0x26
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	f107 041c 	add.w	r4, r7, #28
 8002ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec6:	6028      	str	r0, [r5, #0]
 8002ec8:	6069      	str	r1, [r5, #4]
 8002eca:	60aa      	str	r2, [r5, #8]
 8002ecc:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <RFM95W_Struct_Init+0xc0>)
 8002ed0:	f107 040c 	add.w	r4, r7, #12
 8002ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3316      	adds	r3, #22
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f107 040c 	add.w	r4, r7, #12
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	6028      	str	r0, [r5, #0]
 8002ee8:	6069      	str	r1, [r5, #4]
 8002eea:	60aa      	str	r2, [r5, #8]
 8002eec:	60eb      	str	r3, [r5, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	3734      	adds	r7, #52	; 0x34
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bcb0      	pop	{r4, r5, r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	2000042c 	.word	0x2000042c
 8002efc:	40010c00 	.word	0x40010c00
 8002f00:	40010800 	.word	0x40010800
 8002f04:	08002f95 	.word	0x08002f95
 8002f08:	08002f71 	.word	0x08002f71
 8002f0c:	e9780b26 	.word	0xe9780b26
 8002f10:	0800d368 	.word	0x0800d368
 8002f14:	0800d378 	.word	0x0800d378

08002f18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
	//__disable_irq();
    if (GPIO_Pin == DIO0_Pin) {
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d104      	bne.n	8002f32 <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	480f      	ldr	r0, [pc, #60]	; (8002f68 <HAL_GPIO_EXTI_Callback+0x50>)
 8002f2c:	f001 fb95 	bl	800465a <rfm95_on_interrupt>
 8002f30:	e013      	b.n	8002f5a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO1_Pin) {
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f38:	d104      	bne.n	8002f44 <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	480a      	ldr	r0, [pc, #40]	; (8002f68 <HAL_GPIO_EXTI_Callback+0x50>)
 8002f3e:	f001 fb8c 	bl	800465a <rfm95_on_interrupt>
 8002f42:	e00a      	b.n	8002f5a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO5_Pin) {
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d104      	bne.n	8002f54 <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4806      	ldr	r0, [pc, #24]	; (8002f68 <HAL_GPIO_EXTI_Callback+0x50>)
 8002f4e:	f001 fb84 	bl	800465a <rfm95_on_interrupt>
 8002f52:	e002      	b.n	8002f5a <HAL_GPIO_EXTI_Callback+0x42>
    } else {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear any unexpected interrupt
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x54>)
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	6153      	str	r3, [r2, #20]
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the flag
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_GPIO_EXTI_Callback+0x54>)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	6153      	str	r3, [r2, #20]
    //__enable_irq();
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000220 	.word	0x20000220
 8002f6c:	40010400 	.word	0x40010400

08002f70 <random_int>:

static uint8_t random_int(uint8_t max)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <random_int+0x20>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2db      	uxtb	r3, r3
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	200001d4 	.word	0x200001d4

08002f94 <get_precision_tick>:

static uint32_t get_precision_tick()
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9a:	b672      	cpsid	i
}
 8002f9c:	bf00      	nop
    __disable_irq(); // Disable interrupts to ensure atomic access to tick variables
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <get_precision_tick+0x28>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <get_precision_tick+0x2c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fac:	b662      	cpsie	i
}
 8002fae:	bf00      	nop
    __enable_irq(); // Re-enable interrupts
    return precision_tick;
 8002fb0:	687b      	ldr	r3, [r7, #4]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200004cc 	.word	0x200004cc
 8002fc0:	20000560 	.word	0x20000560

08002fc4 <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
	uint8_t humidity = (uint8_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3bf0      	subs	r3, #240	; 0xf0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fb27 	bl	8000628 <__aeabi_ui2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fd fb9b 	bl	800071c <__aeabi_d2uiz>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fcc0 	bl	8000970 <__aeabi_i2f>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fd fd0d 	bl	8000a18 <__aeabi_fmul>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fecf 	bl	8000da4 <__aeabi_f2uiz>
 8003006:	4603      	mov	r3, r0
 8003008:	73fb      	strb	r3, [r7, #15]
	return humidity;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800301c:	e7fe      	b.n	800301c <Error_Handler+0x8>

0800301e <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	460b      	mov	r3, r1
 800302c:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6858      	ldr	r0, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	891b      	ldrh	r3, [r3, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	4619      	mov	r1, r3
 800303a:	f003 f8c7 	bl	80061cc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003044:	b2db      	uxtb	r3, r3
 8003046:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	f107 0117 	add.w	r1, r7, #23
 8003050:	2364      	movs	r3, #100	; 0x64
 8003052:	2201      	movs	r2, #1
 8003054:	f007 fa2e 	bl	800a4b4 <HAL_SPI_Transmit>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <read_register+0x44>
		return false;
 800305e:	2300      	movs	r3, #0
 8003060:	e015      	b.n	800308e <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b29a      	uxth	r2, r3
 800306a:	2364      	movs	r3, #100	; 0x64
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	f007 fb64 	bl	800a73a <HAL_SPI_Receive>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <read_register+0x5e>
		return false;
 8003078:	2300      	movs	r3, #0
 800307a:	e008      	b.n	800308e <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6858      	ldr	r0, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	891b      	ldrh	r3, [r3, #8]
 8003084:	2201      	movs	r2, #1
 8003086:	4619      	mov	r1, r3
 8003088:	f003 f8a0 	bl	80061cc <HAL_GPIO_WritePin>

	return true;
 800308c:	2301      	movs	r3, #1

}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
 80030a2:	4613      	mov	r3, r2
 80030a4:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6858      	ldr	r0, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	891b      	ldrh	r3, [r3, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	4619      	mov	r1, r3
 80030b2:	f003 f88b 	bl	80061cc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	733b      	strb	r3, [r7, #12]
 80030c0:	78bb      	ldrb	r3, [r7, #2]
 80030c2:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	f107 010c 	add.w	r1, r7, #12
 80030cc:	2364      	movs	r3, #100	; 0x64
 80030ce:	2202      	movs	r2, #2
 80030d0:	f007 f9f0 	bl	800a4b4 <HAL_SPI_Transmit>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <write_register+0x48>
		return false;
 80030da:	2300      	movs	r3, #0
 80030dc:	e008      	b.n	80030f0 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6858      	ldr	r0, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	891b      	ldrh	r3, [r3, #8]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4619      	mov	r1, r3
 80030ea:	f003 f86f 	bl	80061cc <HAL_GPIO_WritePin>

	return true;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	460b      	mov	r3, r1
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	2b0f      	cmp	r3, #15
 800310a:	d905      	bls.n	8003118 <config_set_channel+0x20>
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <config_set_channel+0x54>)
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <config_set_channel+0x58>)
 8003110:	2175      	movs	r1, #117	; 0x75
 8003112:	4810      	ldr	r0, [pc, #64]	; (8003154 <config_set_channel+0x5c>)
 8003114:	f009 f956 	bl	800c3c4 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8003118:	7afa      	ldrb	r2, [r7, #11]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	321a      	adds	r2, #26
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800312a:	b21a      	sxth	r2, r3
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	b21b      	sxth	r3, r3
 8003136:	4313      	orrs	r3, r2
 8003138:	b21b      	sxth	r3, r3
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	0800d388 	.word	0x0800d388
 8003150:	0800d5ec 	.word	0x0800d5ec
 8003154:	0800d39c 	.word	0x0800d39c

08003158 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f64a 3267 	movw	r2, #43879	; 0xab67
 8003166:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <config_load_default+0x58>)
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffb2 	bl	80030f8 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <config_load_default+0x5c>)
 8003196:	2101      	movs	r1, #1
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ffad 	bl	80030f8 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 800319e:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <config_load_default+0x60>)
 80031a0:	2102      	movs	r1, #2
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ffa8 	bl	80030f8 <config_set_channel>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	33be27a0 	.word	0x33be27a0
 80031b4:	33c134e0 	.word	0x33c134e0
 80031b8:	33c44220 	.word	0x33c44220

080031bc <reset>:


static void reset(rfm95_handle_t *handle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68d8      	ldr	r0, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8a1b      	ldrh	r3, [r3, #16]
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	f002 fffc 	bl	80061cc <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 80031d4:	2001      	movs	r0, #1
 80031d6:	f001 fe33 	bl	8004e40 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68d8      	ldr	r0, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	8a1b      	ldrh	r3, [r3, #16]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4619      	mov	r1, r3
 80031e6:	f002 fff1 	bl	80061cc <HAL_GPIO_WritePin>
	HAL_Delay(20);//5
 80031ea:	2014      	movs	r0, #20
 80031ec:	f001 fe28 	bl	8004e40 <HAL_Delay>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	2000      	movs	r0, #0
 8003206:	460a      	mov	r2, r1
 8003208:	4603      	mov	r3, r0
 800320a:	0b55      	lsrs	r5, r2, #13
 800320c:	04d4      	lsls	r4, r2, #19
 800320e:	4a27      	ldr	r2, [pc, #156]	; (80032ac <configure_frequency+0xb4>)
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fd fe34 	bl	8000e84 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8003224:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	0c02      	lsrs	r2, r0, #16
 8003232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003236:	0c0b      	lsrs	r3, r1, #16
 8003238:	b2d3      	uxtb	r3, r2
 800323a:	461a      	mov	r2, r3
 800323c:	2106      	movs	r1, #6
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ff29 	bl	8003096 <write_register>
 8003244:	4603      	mov	r3, r0
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <configure_frequency+0x5c>
 8003250:	2300      	movs	r3, #0
 8003252:	e026      	b.n	80032a2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8003254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	0a02      	lsrs	r2, r0, #8
 8003262:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003266:	0a0b      	lsrs	r3, r1, #8
 8003268:	b2d3      	uxtb	r3, r2
 800326a:	461a      	mov	r2, r3
 800326c:	2107      	movs	r1, #7
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff11 	bl	8003096 <write_register>
 8003274:	4603      	mov	r3, r0
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <configure_frequency+0x8c>
 8003280:	2300      	movs	r3, #0
 8003282:	e00e      	b.n	80032a2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8003284:	7a3b      	ldrb	r3, [r7, #8]
 8003286:	461a      	mov	r2, r3
 8003288:	2108      	movs	r1, #8
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff03 	bl	8003096 <write_register>
 8003290:	4603      	mov	r3, r0
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <configure_frequency+0xa8>
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <configure_frequency+0xaa>

	return true;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	01e84800 	.word	0x01e84800

080032b0 <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80032c0:	461a      	mov	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	fa42 f303 	asr.w	r3, r2, r3
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <configure_channel+0x2c>
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <configure_channel+0x48>)
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <configure_channel+0x4c>)
 80032d4:	21a1      	movs	r1, #161	; 0xa1
 80032d6:	480a      	ldr	r0, [pc, #40]	; (8003300 <configure_channel+0x50>)
 80032d8:	f009 f874 	bl	800c3c4 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	321a      	adds	r2, #26
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	4619      	mov	r1, r3
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff85 	bl	80031f8 <configure_frequency>
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	0800d3b0 	.word	0x0800d3b0
 80032fc:	0800d600 	.word	0x0800d600
 8003300:	0800d39c 	.word	0x0800d39c

08003304 <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	460b      	mov	r3, r1
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	72fb      	strb	r3, [r7, #11]
	// Works with interrupt but it needs more testing for timeout
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4798      	blx	r3
 8003318:	4601      	mov	r1, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <wait_for_irq+0x5c>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	440b      	add	r3, r1
 800332e:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8003330:	e008      	b.n	8003344 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4798      	blx	r3
 8003338:	4602      	mov	r2, r0
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4293      	cmp	r3, r2
 800333e:	d801      	bhi.n	8003344 <wait_for_irq+0x40>
			return false;
 8003340:	2300      	movs	r3, #0
 8003342:	e008      	b.n	8003356 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	332a      	adds	r3, #42	; 0x2a
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ee      	beq.n	8003332 <wait_for_irq+0x2e>
		}
	}
	return true;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	10624dd3 	.word	0x10624dd3

08003364 <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	4798      	blx	r3
 8003372:	4602      	mov	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4912      	ldr	r1, [pc, #72]	; (80033cc <wait_for_rx_irqs+0x68>)
 8003382:	fba1 1303 	umull	r1, r3, r1, r3
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	4413      	add	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 800338c:	e008      	b.n	80033a0 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	4798      	blx	r3
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4293      	cmp	r3, r2
 800339a:	d801      	bhi.n	80033a0 <wait_for_rx_irqs+0x3c>
			return false;
 800339c:	2300      	movs	r3, #0
 800339e:	e011      	b.n	80033c4 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <wait_for_rx_irqs+0x50>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ec      	beq.n	800338e <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80033dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	dd03      	ble.n	80033ec <rfm95_set_power+0x1c>
 80033e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e8:	2b11      	cmp	r3, #17
 80033ea:	dd09      	ble.n	8003400 <rfm95_set_power+0x30>
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b14      	cmp	r3, #20
 80033f2:	d005      	beq.n	8003400 <rfm95_set_power+0x30>
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <rfm95_set_power+0xd8>)
 80033f6:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <rfm95_set_power+0xdc>)
 80033f8:	21c3      	movs	r1, #195	; 0xc3
 80033fa:	482d      	ldr	r0, [pc, #180]	; (80034b0 <rfm95_set_power+0xe0>)
 80033fc:	f008 ffe2 	bl	800c3c4 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8003400:	2300      	movs	r3, #0
 8003402:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340c:	2b01      	cmp	r3, #1
 800340e:	dd18      	ble.n	8003442 <rfm95_set_power+0x72>
 8003410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003414:	2b11      	cmp	r3, #17
 8003416:	dc14      	bgt.n	8003442 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8003418:	7b3b      	ldrb	r3, [r7, #12]
 800341a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800341e:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003420:	7b3b      	ldrb	r3, [r7, #12]
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	3b02      	subs	r3, #2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	b2da      	uxtb	r2, r3
 8003434:	7b3b      	ldrb	r3, [r7, #12]
 8003436:	f362 0303 	bfi	r3, r2, #0, #4
 800343a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER; //0x14;
 800343c:	2384      	movs	r3, #132	; 0x84
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e011      	b.n	8003466 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8003442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003446:	2b14      	cmp	r3, #20
 8003448:	d10d      	bne.n	8003466 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 800344a:	7b3b      	ldrb	r3, [r7, #12]
 800344c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003450:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003452:	7b3b      	ldrb	r3, [r7, #12]
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 800345a:	7b3b      	ldrb	r3, [r7, #12]
 800345c:	f043 030f 	orr.w	r3, r3, #15
 8003460:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8003462:	2387      	movs	r3, #135	; 0x87
 8003464:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8003466:	7b3b      	ldrb	r3, [r7, #12]
 8003468:	461a      	mov	r2, r3
 800346a:	2109      	movs	r1, #9
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fe12 	bl	8003096 <write_register>
 8003472:	4603      	mov	r3, r0
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <rfm95_set_power+0xb2>
 800347e:	2300      	movs	r3, #0
 8003480:	e00e      	b.n	80034a0 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	461a      	mov	r2, r3
 8003486:	214d      	movs	r1, #77	; 0x4d
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fe04 	bl	8003096 <write_register>
 800348e:	4603      	mov	r3, r0
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <rfm95_set_power+0xce>
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <rfm95_set_power+0xd0>

	return true;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	0800d3e4 	.word	0x0800d3e4
 80034ac:	0800d614 	.word	0x0800d614
 80034b0:	0800d39c 	.word	0x0800d39c

080034b4 <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c6:	d005      	beq.n	80034d4 <rfm95_init+0x20>
 80034c8:	4b94      	ldr	r3, [pc, #592]	; (800371c <rfm95_init+0x268>)
 80034ca:	4a95      	ldr	r2, [pc, #596]	; (8003720 <rfm95_init+0x26c>)
 80034cc:	21de      	movs	r1, #222	; 0xde
 80034ce:	4895      	ldr	r0, [pc, #596]	; (8003724 <rfm95_init+0x270>)
 80034d0:	f008 ff78 	bl	800c3c4 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <rfm95_init+0x36>
 80034de:	4b92      	ldr	r3, [pc, #584]	; (8003728 <rfm95_init+0x274>)
 80034e0:	4a8f      	ldr	r2, [pc, #572]	; (8003720 <rfm95_init+0x26c>)
 80034e2:	21df      	movs	r1, #223	; 0xdf
 80034e4:	488f      	ldr	r0, [pc, #572]	; (8003724 <rfm95_init+0x270>)
 80034e6:	f008 ff6d 	bl	800c3c4 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <rfm95_init+0x4c>
 80034f4:	4b8d      	ldr	r3, [pc, #564]	; (800372c <rfm95_init+0x278>)
 80034f6:	4a8a      	ldr	r2, [pc, #552]	; (8003720 <rfm95_init+0x26c>)
 80034f8:	21e0      	movs	r1, #224	; 0xe0
 80034fa:	488a      	ldr	r0, [pc, #552]	; (8003724 <rfm95_init+0x270>)
 80034fc:	f008 ff62 	bl	800c3c4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <rfm95_init+0x62>
 800350a:	4b89      	ldr	r3, [pc, #548]	; (8003730 <rfm95_init+0x27c>)
 800350c:	4a84      	ldr	r2, [pc, #528]	; (8003720 <rfm95_init+0x26c>)
 800350e:	21e1      	movs	r1, #225	; 0xe1
 8003510:	4884      	ldr	r0, [pc, #528]	; (8003724 <rfm95_init+0x270>)
 8003512:	f008 ff57 	bl	800c3c4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <rfm95_init+0x78>
 8003520:	4b84      	ldr	r3, [pc, #528]	; (8003734 <rfm95_init+0x280>)
 8003522:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <rfm95_init+0x26c>)
 8003524:	21e2      	movs	r1, #226	; 0xe2
 8003526:	487f      	ldr	r0, [pc, #508]	; (8003724 <rfm95_init+0x270>)
 8003528:	f008 ff4c 	bl	800c3c4 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <rfm95_init+0x8c>
 8003534:	4b80      	ldr	r3, [pc, #512]	; (8003738 <rfm95_init+0x284>)
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <rfm95_init+0x26c>)
 8003538:	21e3      	movs	r1, #227	; 0xe3
 800353a:	487a      	ldr	r0, [pc, #488]	; (8003724 <rfm95_init+0x270>)
 800353c:	f008 ff42 	bl	800c3c4 <__assert_func>
	assert(handle->random_int != NULL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <rfm95_init+0xa0>
 8003548:	4b7c      	ldr	r3, [pc, #496]	; (800373c <rfm95_init+0x288>)
 800354a:	4a75      	ldr	r2, [pc, #468]	; (8003720 <rfm95_init+0x26c>)
 800354c:	21e4      	movs	r1, #228	; 0xe4
 800354e:	4875      	ldr	r0, [pc, #468]	; (8003724 <rfm95_init+0x270>)
 8003550:	f008 ff38 	bl	800c3c4 <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	f242 7210 	movw	r2, #10000	; 0x2710
 800355c:	4293      	cmp	r3, r2
 800355e:	d805      	bhi.n	800356c <rfm95_init+0xb8>
 8003560:	4b77      	ldr	r3, [pc, #476]	; (8003740 <rfm95_init+0x28c>)
 8003562:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <rfm95_init+0x26c>)
 8003564:	21e6      	movs	r1, #230	; 0xe6
 8003566:	486f      	ldr	r0, [pc, #444]	; (8003724 <rfm95_init+0x270>)
 8003568:	f008 ff2c 	bl	800c3c4 <__assert_func>

	reset(handle);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fe25 	bl	80031bc <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <rfm95_init+0xec>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	3260      	adds	r2, #96	; 0x60
 8003582:	4610      	mov	r0, r2
 8003584:	4798      	blx	r3
 8003586:	4603      	mov	r3, r0
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003598:	f64a 3267 	movw	r2, #43879	; 0xab67
 800359c:	4293      	cmp	r3, r2
 800359e:	d002      	beq.n	80035a6 <rfm95_init+0xf2>
		config_load_default(handle);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fdd9 	bl	8003158 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80035a6:	f107 020f 	add.w	r2, r7, #15
 80035aa:	2301      	movs	r3, #1
 80035ac:	2142      	movs	r1, #66	; 0x42
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fd35 	bl	800301e <read_register>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f083 0301 	eor.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <rfm95_init+0x110>
 80035c0:	2300      	movs	r3, #0
 80035c2:	e0a7      	b.n	8003714 <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b12      	cmp	r3, #18
 80035c8:	d001      	beq.n	80035ce <rfm95_init+0x11a>
 80035ca:	2300      	movs	r3, #0
 80035cc:	e0a2      	b.n	8003714 <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 80035ce:	2200      	movs	r2, #0
 80035d0:	2101      	movs	r1, #1
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fd5f 	bl	8003096 <write_register>
 80035d8:	4603      	mov	r3, r0
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <rfm95_init+0x134>
 80035e4:	2300      	movs	r3, #0
 80035e6:	e095      	b.n	8003714 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	2101      	movs	r1, #1
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fd52 	bl	8003096 <write_register>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <rfm95_init+0x14e>
 80035fe:	2300      	movs	r3, #0
 8003600:	e088      	b.n	8003714 <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz RX_DONE
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003602:	2240      	movs	r2, #64	; 0x40
 8003604:	2140      	movs	r1, #64	; 0x40
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fd45 	bl	8003096 <write_register>
 800360c:	4603      	mov	r3, r0
 800360e:	f083 0301 	eor.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <rfm95_init+0x168>
 8003618:	2300      	movs	r3, #0
 800361a:	e07b      	b.n	8003714 <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 800362a:	2111      	movs	r1, #17
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fecf 	bl	80033d0 <rfm95_set_power>
 8003632:	4603      	mov	r3, r0
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <rfm95_init+0x18e>
 800363e:	2300      	movs	r3, #0
 8003640:	e068      	b.n	8003714 <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8003642:	2223      	movs	r2, #35	; 0x23
 8003644:	210c      	movs	r1, #12
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fd25 	bl	8003096 <write_register>
 800364c:	4603      	mov	r3, r0
 800364e:	f083 0301 	eor.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <rfm95_init+0x1a8>
 8003658:	2300      	movs	r3, #0
 800365a:	e05b      	b.n	8003714 <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800365c:	2200      	movs	r2, #0
 800365e:	2120      	movs	r1, #32
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fd18 	bl	8003096 <write_register>
 8003666:	4603      	mov	r3, r0
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <rfm95_init+0x1c2>
 8003672:	2300      	movs	r3, #0
 8003674:	e04e      	b.n	8003714 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8003676:	2208      	movs	r2, #8
 8003678:	2121      	movs	r1, #33	; 0x21
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fd0b 	bl	8003096 <write_register>
 8003680:	4603      	mov	r3, r0
 8003682:	f083 0301 	eor.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <rfm95_init+0x1dc>
 800368c:	2300      	movs	r3, #0
 800368e:	e041      	b.n	8003714 <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8003690:	2234      	movs	r2, #52	; 0x34
 8003692:	2139      	movs	r1, #57	; 0x39
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff fcfe 	bl	8003096 <write_register>
 800369a:	4603      	mov	r3, r0
 800369c:	f083 0301 	eor.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <rfm95_init+0x1f6>
 80036a6:	2300      	movs	r3, #0
 80036a8:	e034      	b.n	8003714 <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	210e      	movs	r1, #14
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff fcf1 	bl	8003096 <write_register>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f083 0301 	eor.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <rfm95_init+0x210>
 80036c0:	2300      	movs	r3, #0
 80036c2:	e027      	b.n	8003714 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80036c4:	2200      	movs	r2, #0
 80036c6:	210f      	movs	r1, #15
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fce4 	bl	8003096 <write_register>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <rfm95_init+0x22a>
 80036da:	2300      	movs	r3, #0
 80036dc:	e01a      	b.n	8003714 <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	2123      	movs	r1, #35	; 0x23
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fcd7 	bl	8003096 <write_register>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f083 0301 	eor.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <rfm95_init+0x244>
 80036f4:	2300      	movs	r3, #0
 80036f6:	e00d      	b.n	8003714 <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	2101      	movs	r1, #1
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fcca 	bl	8003096 <write_register>
 8003702:	4603      	mov	r3, r0
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <rfm95_init+0x25e>
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <rfm95_init+0x260>

	return true;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0800d410 	.word	0x0800d410
 8003720:	0800d624 	.word	0x0800d624
 8003724:	0800d39c 	.word	0x0800d39c
 8003728:	0800d444 	.word	0x0800d444
 800372c:	0800d480 	.word	0x0800d480
 8003730:	0800d4b8 	.word	0x0800d4b8
 8003734:	0800d4f4 	.word	0x0800d4f4
 8003738:	0800d52c 	.word	0x0800d52c
 800373c:	0800d550 	.word	0x0800d550
 8003740:	0800d56c 	.word	0x0800d56c

08003744 <process_mac_commands>:
	return true;
}


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t answer_index = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while (index < frame_payload_length) {
 800375e:	bf00      	nop
 8003760:	e19b      	b.n	8003a9a <process_mac_commands+0x356>
		switch (frame_payload[index++])
 8003762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	3b01      	subs	r3, #1
 8003776:	2b0c      	cmp	r3, #12
 8003778:	f200 818f 	bhi.w	8003a9a <process_mac_commands+0x356>
 800377c:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <process_mac_commands+0x40>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037d3 	.word	0x080037d3
 800378c:	080037f1 	.word	0x080037f1
 8003790:	0800380f 	.word	0x0800380f
 8003794:	08003829 	.word	0x08003829
 8003798:	08003871 	.word	0x08003871
 800379c:	080038db 	.word	0x080038db
 80037a0:	080039fd 	.word	0x080039fd
 80037a4:	08003a5d 	.word	0x08003a5d
 80037a8:	08003a6b 	.word	0x08003a6b
 80037ac:	08003a7d 	.word	0x08003a7d
 80037b0:	08003a8b 	.word	0x08003a8b
 80037b4:	08003a99 	.word	0x08003a99
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 80037b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d801      	bhi.n	80037c6 <process_mac_commands+0x82>
 80037c2:	2300      	movs	r3, #0
 80037c4:	e174      	b.n	8003ab0 <process_mac_commands+0x36c>

				index += 1;
 80037c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ca:	3301      	adds	r3, #1
 80037cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80037d0:	e163      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d6:	3301      	adds	r3, #1
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4293      	cmp	r3, r2
 80037de:	d801      	bhi.n	80037e4 <process_mac_commands+0xa0>
 80037e0:	2300      	movs	r3, #0
 80037e2:	e165      	b.n	8003ab0 <process_mac_commands+0x36c>

				index += 2;
 80037e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e8:	3302      	adds	r3, #2
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80037ee:	e154      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 80037f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f4:	3303      	adds	r3, #3
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d801      	bhi.n	8003802 <process_mac_commands+0xbe>
 80037fe:	2300      	movs	r3, #0
 8003800:	e156      	b.n	8003ab0 <process_mac_commands+0x36c>

				index += 4;
 8003802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003806:	3304      	adds	r3, #4
 8003808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800380c:	e145      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 800380e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d801      	bhi.n	800381c <process_mac_commands+0xd8>
 8003818:	2300      	movs	r3, #0
 800381a:	e149      	b.n	8003ab0 <process_mac_commands+0x36c>

				index += 1;
 800381c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003820:	3301      	adds	r3, #1
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003826:	e138      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382c:	3304      	adds	r3, #4
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4293      	cmp	r3, r2
 8003834:	d801      	bhi.n	800383a <process_mac_commands+0xf6>
 8003836:	2300      	movs	r3, #0
 8003838:	e13a      	b.n	8003ab0 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 800383a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800383e:	2b30      	cmp	r3, #48	; 0x30
 8003840:	d901      	bls.n	8003846 <process_mac_commands+0x102>
 8003842:	2300      	movs	r3, #0
 8003844:	e134      	b.n	8003ab0 <process_mac_commands+0x36c>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 8003846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003850:	461a      	mov	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	4413      	add	r3, r2
 8003856:	2205      	movs	r2, #5
 8003858:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 800385a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003864:	461a      	mov	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4413      	add	r3, r2
 800386a:	2207      	movs	r2, #7
 800386c:	701a      	strb	r2, [r3, #0]
				break;
 800386e:	e114      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8003870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003874:	2b2f      	cmp	r3, #47	; 0x2f
 8003876:	d901      	bls.n	800387c <process_mac_commands+0x138>
 8003878:	2300      	movs	r3, #0
 800387a:	e119      	b.n	8003ab0 <process_mac_commands+0x36c>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 800387c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <process_mac_commands+0x154>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	4798      	blx	r3
 8003894:	4603      	mov	r3, r0
 8003896:	e000      	b.n	800389a <process_mac_commands+0x156>
 8003898:	23ff      	movs	r3, #255	; 0xff
 800389a:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 800389c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80038a6:	461a      	mov	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	2206      	movs	r2, #6
 80038ae:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 80038b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80038ba:	461a      	mov	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	7dfa      	ldrb	r2, [r7, #23]
 80038c2:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 80038c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80038ce:	461a      	mov	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	7e3a      	ldrb	r2, [r7, #24]
 80038d6:	701a      	strb	r2, [r3, #0]
				break;
 80038d8:	e0df      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 80038da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038de:	3304      	adds	r3, #4
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d801      	bhi.n	80038ec <process_mac_commands+0x1a8>
 80038e8:	2300      	movs	r3, #0
 80038ea:	e0e1      	b.n	8003ab0 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 80038ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d901      	bls.n	80038f8 <process_mac_commands+0x1b4>
 80038f4:	2300      	movs	r3, #0
 80038f6:	e0db      	b.n	8003ab0 <process_mac_commands+0x36c>

				uint8_t channel_index = frame_payload[index++];
 80038f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 800390e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003918:	461a      	mov	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint8_t frequency_msb = frame_payload[index++];
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 800393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8003966:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800396a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	431a      	orrs	r2, r3
 8003972:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	4313      	orrs	r3, r2
 800397a:	2264      	movs	r2, #100	; 0x64
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 8003982:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 800398c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 8003994:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003998:	2b02      	cmp	r3, #2
 800399a:	d906      	bls.n	80039aa <process_mac_commands+0x266>
					config_set_channel(handle, channel_index, frequency);
 800399c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fba7 	bl	80030f8 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 80039aa:	7efb      	ldrb	r3, [r7, #27]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d902      	bls.n	80039b6 <process_mac_commands+0x272>
 80039b0:	7ebb      	ldrb	r3, [r7, #26]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d901      	bls.n	80039ba <process_mac_commands+0x276>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <process_mac_commands+0x278>
 80039ba:	2300      	movs	r3, #0
 80039bc:	767b      	strb	r3, [r7, #25]
 80039be:	7e7b      	ldrb	r3, [r7, #25]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 80039c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80039d0:	461a      	mov	r2, r3
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	2207      	movs	r2, #7
 80039d8:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 80039da:	7e7b      	ldrb	r3, [r7, #25]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	b25a      	sxtb	r2, r3
 80039e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
 80039f0:	4619      	mov	r1, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	440b      	add	r3, r1
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
				break;
 80039fa:	e04e      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 80039fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d801      	bhi.n	8003a0a <process_mac_commands+0x2c6>
 8003a06:	2300      	movs	r3, #0
 8003a08:	e052      	b.n	8003ab0 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003a0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a0e:	2b30      	cmp	r3, #48	; 0x30
 8003a10:	d901      	bls.n	8003a16 <process_mac_commands+0x2d2>
 8003a12:	2300      	movs	r3, #0
 8003a14:	e04c      	b.n	8003ab0 <process_mac_commands+0x36c>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8003a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <process_mac_commands+0x302>
					handle->config.rx1_delay = 1;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8003a46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	2208      	movs	r2, #8
 8003a58:	701a      	strb	r2, [r3, #0]
				break;
 8003a5a:	e01e      	b.n	8003a9a <process_mac_commands+0x356>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d819      	bhi.n	8003a9a <process_mac_commands+0x356>
 8003a66:	2300      	movs	r3, #0
 8003a68:	e022      	b.n	8003ab0 <process_mac_commands+0x36c>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a6e:	3304      	adds	r3, #4
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d810      	bhi.n	8003a9a <process_mac_commands+0x356>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e019      	b.n	8003ab0 <process_mac_commands+0x36c>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d809      	bhi.n	8003a9a <process_mac_commands+0x356>
 8003a86:	2300      	movs	r3, #0
 8003a88:	e012      	b.n	8003ab0 <process_mac_commands+0x36c>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d802      	bhi.n	8003a9a <process_mac_commands+0x356>
 8003a94:	2300      	movs	r3, #0
 8003a96:	e00b      	b.n	8003ab0 <process_mac_commands+0x36c>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8003a98:	bf00      	nop
	while (index < frame_payload_length) {
 8003a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f63f ae5e 	bhi.w	8003762 <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003aac:	701a      	strb	r2, [r3, #0]
	return true;
 8003aae:	2301      	movs	r3, #1
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aca:	492b      	ldr	r1, [pc, #172]	; (8003b78 <receive_at_scheduled_time+0xc0>)
 8003acc:	fba1 1202 	umull	r1, r2, r1, r2
 8003ad0:	0992      	lsrs	r2, r2, #6
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	1a8a      	subs	r2, r1, r2
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8003ada:	2200      	movs	r2, #0
 8003adc:	2140      	movs	r1, #64	; 0x40
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fad9 	bl	8003096 <write_register>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <receive_at_scheduled_time+0x3c>
 8003af0:	2300      	movs	r3, #0
 8003af2:	e03c      	b.n	8003b6e <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8003af4:	22ff      	movs	r2, #255	; 0xff
 8003af6:	2112      	movs	r1, #18
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff facc 	bl	8003096 <write_register>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <receive_at_scheduled_time+0x56>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e02f      	b.n	8003b6e <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8003b26:	2281      	movs	r2, #129	; 0x81
 8003b28:	2101      	movs	r1, #1
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fab3 	bl	8003096 <write_register>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f083 0301 	eor.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <receive_at_scheduled_time+0x88>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e016      	b.n	8003b6e <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003b40:	22c8      	movs	r2, #200	; 0xc8
 8003b42:	2102      	movs	r1, #2
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fbdd 	bl	8003304 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8003b52:	2286      	movs	r2, #134	; 0x86
 8003b54:	2101      	movs	r1, #1
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fa9d 	bl	8003096 <write_register>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <receive_at_scheduled_time+0xb4>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <receive_at_scheduled_time+0xb6>

	return true;
 8003b6c:	2301      	movs	r3, #1
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b08a      	sub	sp, #40	; 0x28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	2202      	movs	r2, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <calculate_rx_timings+0xc4>)
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	0fd9      	lsrs	r1, r3, #31
 8003bca:	440b      	add	r3, r1
 8003bcc:	105b      	asrs	r3, r3, #1
 8003bce:	425b      	negs	r3, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	17da      	asrs	r2, r3, #31
 8003bd8:	469a      	mov	sl, r3
 8003bda:	4693      	mov	fp, r2
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	2200      	movs	r2, #0
 8003be2:	4698      	mov	r8, r3
 8003be4:	4691      	mov	r9, r2
 8003be6:	fb08 f20b 	mul.w	r2, r8, fp
 8003bea:	fb0a f309 	mul.w	r3, sl, r9
 8003bee:	4413      	add	r3, r2
 8003bf0:	fbaa 4508 	umull	r4, r5, sl, r8
 8003bf4:	442b      	add	r3, r5
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <calculate_rx_timings+0xc4>)
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fd f8ef 	bl	8000de4 <__aeabi_ldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8003c18:	fb03 f202 	mul.w	r2, r3, r2
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	441a      	add	r2, r3
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c40:	000f4240 	.word	0x000f4240

08003c44 <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8003c58:	f107 0320 	add.w	r3, r7, #32
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2207      	movs	r2, #7
 8003c68:	49ab      	ldr	r1, [pc, #684]	; (8003f18 <receive_package+0x2d4>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff86 	bl	8003b7c <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d306      	bcc.n	8003c86 <receive_package+0x42>
 8003c78:	4ba8      	ldr	r3, [pc, #672]	; (8003f1c <receive_package+0x2d8>)
 8003c7a:	4aa9      	ldr	r2, [pc, #676]	; (8003f20 <receive_package+0x2dc>)
 8003c7c:	f240 11df 	movw	r1, #479	; 0x1df
 8003c80:	48a8      	ldr	r0, [pc, #672]	; (8003f24 <receive_package+0x2e0>)
 8003c82:	f008 fb9f 	bl	800c3c4 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8003c86:	2272      	movs	r2, #114	; 0x72
 8003c88:	211d      	movs	r1, #29
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fa03 	bl	8003096 <write_register>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <receive_package+0x5c>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e136      	b.n	8003f0e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	211e      	movs	r1, #30
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff f9ed 	bl	8003096 <write_register>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f083 0301 	eor.w	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <receive_package+0x88>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e120      	b.n	8003f0e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003ccc:	2204      	movs	r2, #4
 8003cce:	2126      	movs	r1, #38	; 0x26
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff f9e0 	bl	8003096 <write_register>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <receive_package+0xa2>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e113      	b.n	8003f0e <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	211f      	movs	r1, #31
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff f9d1 	bl	8003096 <write_register>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f083 0301 	eor.w	r3, r3, #1
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <receive_package+0xc0>
 8003d00:	2300      	movs	r3, #0
 8003d02:	e104      	b.n	8003f0e <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8003d04:	2267      	movs	r2, #103	; 0x67
 8003d06:	2133      	movs	r1, #51	; 0x33
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff f9c4 	bl	8003096 <write_register>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <receive_package+0xda>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e0f7      	b.n	8003f0e <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8003d1e:	2219      	movs	r2, #25
 8003d20:	213b      	movs	r1, #59	; 0x3b
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff f9b7 	bl	8003096 <write_register>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f083 0301 	eor.w	r3, r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <receive_package+0xf4>
 8003d34:	2300      	movs	r3, #0
 8003d36:	e0ea      	b.n	8003f0e <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff febb 	bl	8003ab8 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fb0e 	bl	8003364 <wait_for_rx_irqs>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d07a      	beq.n	8003e4a <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	2101      	movs	r1, #1
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff f99c 	bl	8003096 <write_register>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <receive_package+0x12a>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e0cf      	b.n	8003f0e <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d166      	bne.n	8003e46 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	f107 0318 	add.w	r3, r7, #24
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	220c      	movs	r2, #12
 8003d88:	4963      	ldr	r1, [pc, #396]	; (8003f18 <receive_package+0x2d4>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff fef6 	bl	8003b7c <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8003d90:	4965      	ldr	r1, [pc, #404]	; (8003f28 <receive_package+0x2e4>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fa30 	bl	80031f8 <configure_frequency>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f083 0301 	eor.w	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <receive_package+0x164>
 8003da4:	2300      	movs	r3, #0
 8003da6:	e0b2      	b.n	8003f0e <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8003da8:	22c2      	movs	r2, #194	; 0xc2
 8003daa:	211d      	movs	r1, #29
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff f972 	bl	8003096 <write_register>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f083 0301 	eor.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <receive_package+0x17e>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e0a5      	b.n	8003f0e <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	211e      	movs	r1, #30
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff f95c 	bl	8003096 <write_register>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f083 0301 	eor.w	r3, r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <receive_package+0x1aa>
 8003dea:	2300      	movs	r3, #0
 8003dec:	e08f      	b.n	8003f0e <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003dee:	2204      	movs	r2, #4
 8003df0:	2126      	movs	r1, #38	; 0x26
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff f94f 	bl	8003096 <write_register>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f083 0301 	eor.w	r3, r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <receive_package+0x1c4>
 8003e04:	2300      	movs	r3, #0
 8003e06:	e082      	b.n	8003f0e <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	211f      	movs	r1, #31
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff f940 	bl	8003096 <write_register>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f083 0301 	eor.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <receive_package+0x1e2>
 8003e22:	2300      	movs	r3, #0
 8003e24:	e073      	b.n	8003f0e <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fe44 	bl	8003ab8 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fa97 	bl	8003364 <wait_for_rx_irqs>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f083 0301 	eor.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e063      	b.n	8003f0e <receive_package+0x2ca>
			}
		}

		return true;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e061      	b.n	8003f0e <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8003e4a:	f107 021f 	add.w	r2, r7, #31
 8003e4e:	2301      	movs	r3, #1
 8003e50:	2112      	movs	r1, #18
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff f8e3 	bl	800301e <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <receive_package+0x222>
		return true;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e053      	b.n	8003f0e <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8003e66:	f107 021e 	add.w	r2, r7, #30
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	2119      	movs	r1, #25
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff f8d5 	bl	800301e <read_register>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <receive_package+0x240>
 8003e80:	2300      	movs	r3, #0
 8003e82:	e044      	b.n	8003f0e <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8003e84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da00      	bge.n	8003e8e <receive_package+0x24a>
 8003e8c:	3303      	adds	r3, #3
 8003e8e:	109b      	asrs	r3, r3, #2
 8003e90:	b25a      	sxtb	r2, r3
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8003e96:	f107 021d 	add.w	r2, r7, #29
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2113      	movs	r1, #19
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff f8bd 	bl	800301e <read_register>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <receive_package+0x270>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e02c      	b.n	8003f0e <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	210d      	movs	r1, #13
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff f8ec 	bl	8003096 <write_register>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <receive_package+0x28a>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e01f      	b.n	8003f0e <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8003ece:	7f7b      	ldrb	r3, [r7, #29]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff f8a2 	bl	800301e <read_register>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <receive_package+0x2a6>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e011      	b.n	8003f0e <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	2101      	movs	r1, #1
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff f8d1 	bl	8003096 <write_register>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <receive_package+0x2c0>
 8003f00:	2300      	movs	r3, #0
 8003f02:	e004      	b.n	8003f0e <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8003f04:	7f7b      	ldrb	r3, [r7, #29]
 8003f06:	461a      	mov	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	601a      	str	r2, [r3, #0]
	return true;
 8003f0c:	2301      	movs	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	0001e848 	.word	0x0001e848
 8003f1c:	0800d598 	.word	0x0800d598
 8003f20:	0800d630 	.word	0x0800d630
 8003f24:	0800d39c 	.word	0x0800d39c
 8003f28:	33d3e608 	.word	0x33d3e608

08003f2c <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff f9b6 	bl	80032b0 <configure_channel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f083 0301 	eor.w	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <send_package+0x28>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e0d9      	b.n	8004108 <send_package+0x1dc>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8003f54:	2272      	movs	r2, #114	; 0x72
 8003f56:	211d      	movs	r1, #29
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff f89c 	bl	8003096 <write_register>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f083 0301 	eor.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <send_package+0x42>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e0cc      	b.n	8004108 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8003f6e:	2274      	movs	r2, #116	; 0x74
 8003f70:	211e      	movs	r1, #30
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff f88f 	bl	8003096 <write_register>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f083 0301 	eor.w	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <send_package+0x5c>
 8003f84:	2300      	movs	r3, #0
 8003f86:	e0bf      	b.n	8004108 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003f88:	2204      	movs	r2, #4
 8003f8a:	2126      	movs	r1, #38	; 0x26
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff f882 	bl	8003096 <write_register>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f083 0301 	eor.w	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <send_package+0x76>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e0b2      	b.n	8004108 <send_package+0x1dc>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8003fa2:	2227      	movs	r2, #39	; 0x27
 8003fa4:	2133      	movs	r1, #51	; 0x33
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff f875 	bl	8003096 <write_register>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f083 0301 	eor.w	r3, r3, #1
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <send_package+0x90>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e0a5      	b.n	8004108 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8003fbc:	221d      	movs	r2, #29
 8003fbe:	213b      	movs	r1, #59	; 0x3b
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff f868 	bl	8003096 <write_register>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <send_package+0xaa>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e098      	b.n	8004108 <send_package+0x1dc>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2122      	movs	r1, #34	; 0x22
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff f859 	bl	8003096 <write_register>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <send_package+0xc8>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e089      	b.n	8004108 <send_package+0x1dc>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	2140      	movs	r1, #64	; 0x40
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff f84c 	bl	8003096 <write_register>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f083 0301 	eor.w	r3, r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <send_package+0xe2>
 800400a:	2300      	movs	r3, #0
 800400c:	e07c      	b.n	8004108 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	2112      	movs	r1, #18
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff f83f 	bl	8003096 <write_register>
 8004018:	4603      	mov	r3, r0
 800401a:	f083 0301 	eor.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <send_package+0xfc>
 8004024:	2300      	movs	r3, #0
 8004026:	e06f      	b.n	8004108 <send_package+0x1dc>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8004038:	2281      	movs	r2, #129	; 0x81
 800403a:	2101      	movs	r1, #1
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff f82a 	bl	8003096 <write_register>
 8004042:	4603      	mov	r3, r0
 8004044:	f083 0301 	eor.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <send_package+0x126>
 800404e:	2300      	movs	r3, #0
 8004050:	e05a      	b.n	8004108 <send_package+0x1dc>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8004052:	22c8      	movs	r2, #200	; 0xc8
 8004054:	2102      	movs	r1, #2
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff f954 	bl	8003304 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	210d      	movs	r1, #13
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff f818 	bl	8003096 <write_register>
 8004066:	4603      	mov	r3, r0
 8004068:	f083 0301 	eor.w	r3, r3, #1
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <send_package+0x14a>
 8004072:	2300      	movs	r3, #0
 8004074:	e048      	b.n	8004108 <send_package+0x1dc>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e00b      	b.n	8004094 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4413      	add	r3, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	2100      	movs	r1, #0
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff f804 	bl	8003096 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d3ef      	bcc.n	800407c <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 800409c:	2283      	movs	r2, #131	; 0x83
 800409e:	2101      	movs	r1, #1
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fe fff8 	bl	8003096 <write_register>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <send_package+0x18a>
 80040b2:	2300      	movs	r3, #0
 80040b4:	e028      	b.n	8004108 <send_package+0x1dc>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 80040b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ba:	2100      	movs	r1, #0
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff f921 	bl	8003304 <wait_for_irq>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f083 0301 	eor.w	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <send_package+0x1a6>
 80040ce:	2300      	movs	r3, #0
 80040d0:	e01a      	b.n	8004108 <send_package+0x1dc>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	2101      	movs	r1, #1
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7fe ffd8 	bl	8003096 <write_register>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f083 0301 	eor.w	r3, r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <send_package+0x1ca>
 80040f2:	2300      	movs	r3, #0
 80040f4:	e008      	b.n	8004108 <send_package+0x1dc>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80040fc:	3301      	adds	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b08d      	sub	sp, #52	; 0x34
 8004114:	af04      	add	r7, sp, #16
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	330d      	adds	r3, #13
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d906      	bls.n	8004138 <encode_phy_payload+0x28>
 800412a:	4b51      	ldr	r3, [pc, #324]	; (8004270 <encode_phy_payload+0x160>)
 800412c:	4a51      	ldr	r2, [pc, #324]	; (8004274 <encode_phy_payload+0x164>)
 800412e:	f240 216a 	movw	r1, #618	; 0x26a
 8004132:	4851      	ldr	r0, [pc, #324]	; (8004278 <encode_phy_payload+0x168>)
 8004134:	f008 f946 	bl	800c3c4 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3301      	adds	r3, #1
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	7d52      	ldrb	r2, [r2, #21]
 8004146:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3302      	adds	r3, #2
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	7d12      	ldrb	r2, [r2, #20]
 8004150:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3303      	adds	r3, #3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	7cd2      	ldrb	r2, [r2, #19]
 800415a:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3304      	adds	r3, #4
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	7c92      	ldrb	r2, [r2, #18]
 8004164:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3305      	adds	r3, #5
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	3306      	adds	r3, #6
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	b29a      	uxth	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3307      	adds	r3, #7
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3308      	adds	r3, #8
 8004192:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004196:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	3309      	adds	r3, #9
 800419c:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f008 facc 	bl	800c746 <memcpy>
	if (port == 0) {
 80041ae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	18d0      	adds	r0, r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	b2d9      	uxtb	r1, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80041c6:	461c      	mov	r4, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3316      	adds	r3, #22
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	3212      	adds	r2, #18
 80041d0:	9201      	str	r2, [sp, #4]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	4622      	mov	r2, r4
 80041d8:	f007 fe15 	bl	800be06 <Encrypt_Payload>
 80041dc:	e012      	b.n	8004204 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	18d0      	adds	r0, r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2d9      	uxtb	r1, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80041ee:	461c      	mov	r4, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3326      	adds	r3, #38	; 0x26
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	3212      	adds	r2, #18
 80041f8:	9201      	str	r2, [sp, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2300      	movs	r3, #0
 80041fe:	4622      	mov	r2, r4
 8004200:	f007 fe01 	bl	800be06 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	4413      	add	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	b2d8      	uxtb	r0, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004216:	461c      	mov	r4, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3316      	adds	r3, #22
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	3212      	adds	r2, #18
 8004220:	f107 0114 	add.w	r1, r7, #20
 8004224:	9202      	str	r2, [sp, #8]
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	2300      	movs	r3, #0
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4623      	mov	r3, r4
 800422e:	4602      	mov	r2, r0
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f007 fe9d 	bl	800bf70 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8004236:	2300      	movs	r3, #0
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e00d      	b.n	8004258 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 800423c:	7ffa      	ldrb	r2, [r7, #31]
 800423e:	7ff9      	ldrb	r1, [r7, #31]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	440b      	add	r3, r1
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	440b      	add	r3, r1
 8004248:	3220      	adds	r2, #32
 800424a:	443a      	add	r2, r7
 800424c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004250:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8004252:	7ffb      	ldrb	r3, [r7, #31]
 8004254:	3301      	adds	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d9ee      	bls.n	800423c <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	3304      	adds	r3, #4
 8004262:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8004264:	69bb      	ldr	r3, [r7, #24]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3724      	adds	r7, #36	; 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}
 800426e:	bf00      	nop
 8004270:	0800d5b4 	.word	0x0800d5b4
 8004274:	0800d640 	.word	0x0800d640
 8004278:	0800d39c 	.word	0x0800d39c

0800427c <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b08d      	sub	sp, #52	; 0x34
 8004280:	af04      	add	r7, sp, #16
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b60      	cmp	r3, #96	; 0x60
 8004292:	d001      	beq.n	8004298 <decode_phy_payload+0x1c>
		return false;
 8004294:	2300      	movs	r3, #0
 8004296:	e0aa      	b.n	80043ee <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3301      	adds	r3, #1
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	7d5b      	ldrb	r3, [r3, #21]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d114      	bne.n	80042d0 <decode_phy_payload+0x54>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3302      	adds	r3, #2
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	7d1b      	ldrb	r3, [r3, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d10d      	bne.n	80042d0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3303      	adds	r3, #3
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d106      	bne.n	80042d0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3304      	adds	r3, #4
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	7c9b      	ldrb	r3, [r3, #18]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <decode_phy_payload+0x58>
		return false;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e08c      	b.n	80043ee <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	795b      	ldrb	r3, [r3, #5]
 80042d8:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 80042da:	7ffb      	ldrb	r3, [r7, #31]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3307      	adds	r3, #7
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	b21a      	sxth	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3306      	adds	r3, #6
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b21b      	sxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004300:	8bba      	ldrh	r2, [r7, #28]
 8004302:	429a      	cmp	r2, r3
 8004304:	d201      	bcs.n	800430a <decode_phy_payload+0x8e>
		return false;
 8004306:	2300      	movs	r3, #0
 8004308:	e071      	b.n	80043ee <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8bba      	ldrh	r2, [r7, #28]
 800430e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	3b04      	subs	r3, #4
 8004316:	b2d8      	uxtb	r0, r3
 8004318:	8bbc      	ldrh	r4, [r7, #28]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3316      	adds	r3, #22
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	3212      	adds	r2, #18
 8004322:	f107 0114 	add.w	r1, r7, #20
 8004326:	9202      	str	r2, [sp, #8]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2301      	movs	r3, #1
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	4623      	mov	r3, r4
 8004330:	4602      	mov	r2, r0
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f007 fe1c 	bl	800bf70 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	3b04      	subs	r3, #4
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	18d1      	adds	r1, r2, r3
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	2204      	movs	r2, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f008 f971 	bl	800c62e <memcmp>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <decode_phy_payload+0xda>
		return false;
 8004352:	2300      	movs	r3, #0
 8004354:	e04b      	b.n	80043ee <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	f1a3 020c 	sub.w	r2, r3, #12
 800435c:	7fbb      	ldrb	r3, [r7, #30]
 800435e:	429a      	cmp	r2, r3
 8004360:	d10b      	bne.n	800437a <decode_phy_payload+0xfe>
		*frame_port = 0;
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f103 0208 	add.w	r2, r3, #8
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	7fba      	ldrb	r2, [r7, #30]
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e038      	b.n	80043ec <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	7a1a      	ldrb	r2, [r3, #8]
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8004382:	7fbb      	ldrb	r3, [r7, #30]
 8004384:	3309      	adds	r3, #9
 8004386:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	3b04      	subs	r3, #4
 800438c:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 800438e:	7eba      	ldrb	r2, [r7, #26]
 8004390:	7efb      	ldrb	r3, [r7, #27]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 800439e:	7efb      	ldrb	r3, [r7, #27]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	18d0      	adds	r0, r2, r3
 80043a4:	8bbc      	ldrh	r4, [r7, #28]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3316      	adds	r3, #22
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	3212      	adds	r2, #18
 80043ae:	7e79      	ldrb	r1, [r7, #25]
 80043b0:	9201      	str	r2, [sp, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2301      	movs	r3, #1
 80043b6:	4622      	mov	r2, r4
 80043b8:	f007 fd25 	bl	800be06 <Encrypt_Payload>
 80043bc:	e00e      	b.n	80043dc <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 80043be:	7efb      	ldrb	r3, [r7, #27]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	18d0      	adds	r0, r2, r3
 80043c4:	8bbc      	ldrh	r4, [r7, #28]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3326      	adds	r3, #38	; 0x26
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	3212      	adds	r2, #18
 80043ce:	7e79      	ldrb	r1, [r7, #25]
 80043d0:	9201      	str	r2, [sp, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	4622      	mov	r2, r4
 80043d8:	f007 fd15 	bl	800be06 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 80043dc:	7efb      	ldrb	r3, [r7, #27]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	441a      	add	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	7e7a      	ldrb	r2, [r7, #25]
 80043ea:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80043ec:	2301      	movs	r3, #1
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}

080043f6 <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8004402:	2300      	movs	r3, #0
 8004404:	73bb      	strb	r3, [r7, #14]
 8004406:	e010      	b.n	800442a <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800440e:	461a      	mov	r2, r3
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	fa42 f303 	asr.w	r3, r2, r3
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <select_random_channel+0x2e>
			channel_count++;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	3301      	adds	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	3301      	adds	r3, #1
 8004428:	73bb      	strb	r3, [r7, #14]
 800442a:	7bbb      	ldrb	r3, [r7, #14]
 800442c:	2b0f      	cmp	r3, #15
 800442e:	d9eb      	bls.n	8004408 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	4610      	mov	r0, r2
 8004438:	4798      	blx	r3
 800443a:	4603      	mov	r3, r0
 800443c:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 800443e:	2300      	movs	r3, #0
 8004440:	733b      	strb	r3, [r7, #12]
 8004442:	e015      	b.n	8004470 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800444a:	461a      	mov	r2, r3
 800444c:	7b3b      	ldrb	r3, [r7, #12]
 800444e:	fa42 f303 	asr.w	r3, r2, r3
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <select_random_channel+0x74>
			if (random_channel == 0) {
 800445a:	7b7b      	ldrb	r3, [r7, #13]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <select_random_channel+0x6e>
				return i;
 8004460:	7b3b      	ldrb	r3, [r7, #12]
 8004462:	e009      	b.n	8004478 <select_random_channel+0x82>
			} else {
				random_channel--;
 8004464:	7b7b      	ldrb	r3, [r7, #13]
 8004466:	3b01      	subs	r3, #1
 8004468:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 800446a:	7b3b      	ldrb	r3, [r7, #12]
 800446c:	3301      	adds	r3, #1
 800446e:	733b      	strb	r3, [r7, #12]
 8004470:	7b3b      	ldrb	r3, [r7, #12]
 8004472:	2b0f      	cmp	r3, #15
 8004474:	d9e6      	bls.n	8004444 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b0aa      	sub	sp, #168	; 0xa8
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 800448c:	2300      	movs	r3, #0
 800448e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004490:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004494:	223c      	movs	r2, #60	; 0x3c
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f008 f8d8 	bl	800c64e <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 800449e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80044a2:	2301      	movs	r3, #1
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fe30 	bl	8004110 <encode_phy_payload>
 80044b0:	4603      	mov	r3, r0
 80044b2:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff9e 	bl	80043f6 <select_random_channel>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks))
 80044c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044c2:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80044c6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80044ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fd2a 	bl	8003f2c <send_package>
 80044d8:	4603      	mov	r3, r0
 80044da:	f083 0301 	eor.w	r3, r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <rfm95_send_receive_cycle+0x72>
	{
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	2101      	movs	r1, #1
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7fe fdd4 	bl	8003096 <write_register>
		return false;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e0af      	b.n	8004652 <rfm95_send_receive_cycle+0x1d2>
	}


	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 80044f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f008 f8a7 	bl	800c64e <memset>
	phy_payload_len = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8096 	beq.w	800463c <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8004510:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004512:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004516:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800451a:	f107 0353 	add.w	r3, r7, #83	; 0x53
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fb8e 	bl	8003c44 <receive_package>
 8004528:	4603      	mov	r3, r0
 800452a:	f083 0301 	eor.w	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	2101      	movs	r1, #1
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7fe fdac 	bl	8003096 <write_register>
			if (handle->save_config) {
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	3260      	adds	r2, #96	; 0x60
 800454e:	4610      	mov	r0, r2
 8004550:	4798      	blx	r3
			}
			return false;
 8004552:	2300      	movs	r3, #0
 8004554:	e07d      	b.n	8004652 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8004556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004558:	2b00      	cmp	r3, #0
 800455a:	d06f      	beq.n	800463c <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 8004562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004564:	b2da      	uxtb	r2, r3
 8004566:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800456a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800456e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	4603      	mov	r3, r0
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fe7d 	bl	800427c <decode_phy_payload>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d059      	beq.n	800463c <rfm95_send_receive_cycle+0x1bc>

				// Process Mac Commands
				if (frame_port == 0) {
 8004588:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800458c:	2b00      	cmp	r3, #0
 800458e:	d155      	bne.n	800463c <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	f107 0318 	add.w	r3, r7, #24
 8004598:	222f      	movs	r2, #47	; 0x2f
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f008 f856 	bl	800c64e <memset>
					uint8_t mac_response_len = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 80045a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80045ae:	4618      	mov	r0, r3
 80045b0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80045b4:	f107 0214 	add.w	r2, r7, #20
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	f107 0349 	add.w	r3, r7, #73	; 0x49
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	4602      	mov	r2, r0
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff f8bd 	bl	8003744 <process_mac_commands>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d035      	beq.n	800463c <rfm95_send_receive_cycle+0x1bc>
 80045d0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d031      	beq.n	800463c <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 80045d8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80045dc:	4618      	mov	r0, r3
 80045de:	f107 0214 	add.w	r2, r7, #20
 80045e2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4603      	mov	r3, r0
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fd8f 	bl	8004110 <encode_phy_payload>
 80045f2:	4603      	mov	r3, r0
 80045f4:	65bb      	str	r3, [r7, #88]	; 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 80045f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f8:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80045fc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004600:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	4603      	mov	r3, r0
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fc8f 	bl	8003f2c <send_package>
 800460e:	4603      	mov	r3, r0
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <rfm95_send_receive_cycle+0x1bc>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	2101      	movs	r1, #1
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7fe fd39 	bl	8003096 <write_register>
							if (handle->save_config) {
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	3260      	adds	r2, #96	; 0x60
 8004634:	4610      	mov	r0, r2
 8004636:	4798      	blx	r3
							}
							return false;
 8004638:	2300      	movs	r3, #0
			return false;
 800463a:	e00a      	b.n	8004652 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	3260      	adds	r2, #96	; 0x60
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
	}

	return true;
 8004650:	2301      	movs	r3, #1
}
 8004652:	4618      	mov	r0, r3
 8004654:	37a0      	adds	r7, #160	; 0xa0
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 800465a:	b590      	push	{r4, r7, lr}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	78fc      	ldrb	r4, [r7, #3]
 800466c:	4798      	blx	r3
 800466e:	4601      	mov	r1, r0
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	6059      	str	r1, [r3, #4]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bd90      	pop	{r4, r7, pc}

08004684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_MspInit+0x5c>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	4a14      	ldr	r2, [pc, #80]	; (80046e0 <HAL_MspInit+0x5c>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6193      	str	r3, [r2, #24]
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_MspInit+0x5c>)
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_MspInit+0x5c>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_MspInit+0x5c>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	61d3      	str	r3, [r2, #28]
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_MspInit+0x5c>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <HAL_MspInit+0x60>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_MspInit+0x60>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40010000 	.word	0x40010000

080046e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_ADC_MspInit+0x7c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d129      	bne.n	800475c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_ADC_MspInit+0x80>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_ADC_MspInit+0x80>)
 800470e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004712:	6193      	str	r3, [r2, #24]
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_ADC_MspInit+0x80>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_ADC_MspInit+0x80>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4a10      	ldr	r2, [pc, #64]	; (8004768 <HAL_ADC_MspInit+0x80>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	6193      	str	r3, [r2, #24]
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_ADC_MspInit+0x80>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004738:	2306      	movs	r3, #6
 800473a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800473c:	2303      	movs	r3, #3
 800473e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004740:	f107 0310 	add.w	r3, r7, #16
 8004744:	4619      	mov	r1, r3
 8004746:	4809      	ldr	r0, [pc, #36]	; (800476c <HAL_ADC_MspInit+0x84>)
 8004748:	f001 fbbc 	bl	8005ec4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800474c:	2200      	movs	r2, #0
 800474e:	2102      	movs	r1, #2
 8004750:	2012      	movs	r0, #18
 8004752:	f001 f8e2 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004756:	2012      	movs	r0, #18
 8004758:	f001 f8fb 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800475c:	bf00      	nop
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40012400 	.word	0x40012400
 8004768:	40021000 	.word	0x40021000
 800476c:	40010800 	.word	0x40010800

08004770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004778:	f107 0318 	add.w	r3, r7, #24
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <HAL_I2C_MspInit+0xd8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d12c      	bne.n	80047ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_I2C_MspInit+0xdc>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4a2d      	ldr	r2, [pc, #180]	; (800484c <HAL_I2C_MspInit+0xdc>)
 8004796:	f043 0308 	orr.w	r3, r3, #8
 800479a:	6193      	str	r3, [r2, #24]
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_I2C_MspInit+0xdc>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047a8:	23c0      	movs	r3, #192	; 0xc0
 80047aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ac:	2312      	movs	r3, #18
 80047ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047b0:	2303      	movs	r3, #3
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b4:	f107 0318 	add.w	r3, r7, #24
 80047b8:	4619      	mov	r1, r3
 80047ba:	4825      	ldr	r0, [pc, #148]	; (8004850 <HAL_I2C_MspInit+0xe0>)
 80047bc:	f001 fb82 	bl	8005ec4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047c0:	4b22      	ldr	r3, [pc, #136]	; (800484c <HAL_I2C_MspInit+0xdc>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	4a21      	ldr	r2, [pc, #132]	; (800484c <HAL_I2C_MspInit+0xdc>)
 80047c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047ca:	61d3      	str	r3, [r2, #28]
 80047cc:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_I2C_MspInit+0xdc>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2100      	movs	r1, #0
 80047dc:	201f      	movs	r0, #31
 80047de:	f001 f89c 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80047e2:	201f      	movs	r0, #31
 80047e4:	f001 f8b5 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80047e8:	e029      	b.n	800483e <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a19      	ldr	r2, [pc, #100]	; (8004854 <HAL_I2C_MspInit+0xe4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d124      	bne.n	800483e <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <HAL_I2C_MspInit+0xdc>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <HAL_I2C_MspInit+0xdc>)
 80047fa:	f043 0308 	orr.w	r3, r3, #8
 80047fe:	6193      	str	r3, [r2, #24]
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_I2C_MspInit+0xdc>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800480c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004812:	2312      	movs	r3, #18
 8004814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481a:	f107 0318 	add.w	r3, r7, #24
 800481e:	4619      	mov	r1, r3
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <HAL_I2C_MspInit+0xe0>)
 8004822:	f001 fb4f 	bl	8005ec4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_I2C_MspInit+0xdc>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <HAL_I2C_MspInit+0xdc>)
 800482c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004830:	61d3      	str	r3, [r2, #28]
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_I2C_MspInit+0xdc>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
}
 800483e:	bf00      	nop
 8004840:	3728      	adds	r7, #40	; 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40005400 	.word	0x40005400
 800484c:	40021000 	.word	0x40021000
 8004850:	40010c00 	.word	0x40010c00
 8004854:	40005800 	.word	0x40005800

08004858 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <HAL_RTC_MspInit+0x4c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d118      	bne.n	800489c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800486a:	f004 f8f9 	bl	8008a60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800486e:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <HAL_RTC_MspInit+0x50>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <HAL_RTC_MspInit+0x50>)
 8004874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004878:	61d3      	str	r3, [r2, #28]
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RTC_MspInit+0x50>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RTC_MspInit+0x54>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800488c:	2200      	movs	r2, #0
 800488e:	2100      	movs	r1, #0
 8004890:	2029      	movs	r0, #41	; 0x29
 8004892:	f001 f842 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004896:	2029      	movs	r0, #41	; 0x29
 8004898:	f001 f85b 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800489c:	bf00      	nop
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40002800 	.word	0x40002800
 80048a8:	40021000 	.word	0x40021000
 80048ac:	4242043c 	.word	0x4242043c

080048b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b8:	f107 0318 	add.w	r3, r7, #24
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a37      	ldr	r2, [pc, #220]	; (80049a8 <HAL_SPI_MspInit+0xf8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d130      	bne.n	8004932 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4a35      	ldr	r2, [pc, #212]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048da:	6193      	str	r3, [r2, #24]
 80048dc:	4b33      	ldr	r3, [pc, #204]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6193      	str	r3, [r2, #24]
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004900:	23a0      	movs	r3, #160	; 0xa0
 8004902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004908:	2303      	movs	r3, #3
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	f107 0318 	add.w	r3, r7, #24
 8004910:	4619      	mov	r1, r3
 8004912:	4827      	ldr	r0, [pc, #156]	; (80049b0 <HAL_SPI_MspInit+0x100>)
 8004914:	f001 fad6 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	2300      	movs	r3, #0
 8004922:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004924:	f107 0318 	add.w	r3, r7, #24
 8004928:	4619      	mov	r1, r3
 800492a:	4821      	ldr	r0, [pc, #132]	; (80049b0 <HAL_SPI_MspInit+0x100>)
 800492c:	f001 faca 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004930:	e036      	b.n	80049a0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <HAL_SPI_MspInit+0x104>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d131      	bne.n	80049a0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 8004942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004946:	61d3      	str	r3, [r2, #28]
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004954:	4b15      	ldr	r3, [pc, #84]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	4a14      	ldr	r2, [pc, #80]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6193      	str	r3, [r2, #24]
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_SPI_MspInit+0xfc>)
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800496c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004972:	2302      	movs	r3, #2
 8004974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004976:	2303      	movs	r3, #3
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497a:	f107 0318 	add.w	r3, r7, #24
 800497e:	4619      	mov	r1, r3
 8004980:	480d      	ldr	r0, [pc, #52]	; (80049b8 <HAL_SPI_MspInit+0x108>)
 8004982:	f001 fa9f 	bl	8005ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004986:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800498a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	f107 0318 	add.w	r3, r7, #24
 8004998:	4619      	mov	r1, r3
 800499a:	4807      	ldr	r0, [pc, #28]	; (80049b8 <HAL_SPI_MspInit+0x108>)
 800499c:	f001 fa92 	bl	8005ec4 <HAL_GPIO_Init>
}
 80049a0:	bf00      	nop
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40013000 	.word	0x40013000
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40010800 	.word	0x40010800
 80049b4:	40003800 	.word	0x40003800
 80049b8:	40010c00 	.word	0x40010c00

080049bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d114      	bne.n	80049f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049ce:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	61d3      	str	r3, [r2, #28]
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	201c      	movs	r0, #28
 80049ec:	f000 ff95 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80049f0:	201c      	movs	r0, #28
 80049f2:	f000 ffae 	bl	8005952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80049f6:	e018      	b.n	8004a2a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <HAL_TIM_Base_MspInit+0x7c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d113      	bne.n	8004a2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	61d3      	str	r3, [r2, #28]
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_TIM_Base_MspInit+0x78>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	201d      	movs	r0, #29
 8004a20:	f000 ff7b 	bl	800591a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a24:	201d      	movs	r0, #29
 8004a26:	f000 ff94 	bl	8005952 <HAL_NVIC_EnableIRQ>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40000400 	.word	0x40000400

08004a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <HAL_UART_MspInit+0x8c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d131      	bne.n	8004ac0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a66:	6193      	str	r3, [r2, #24]
 8004a68:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a74:	4b15      	ldr	r3, [pc, #84]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a7a:	f043 0304 	orr.w	r3, r3, #4
 8004a7e:	6193      	str	r3, [r2, #24]
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <HAL_UART_MspInit+0x90>)
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8004a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a92:	2302      	movs	r3, #2
 8004a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a96:	2303      	movs	r3, #3
 8004a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8004a9a:	f107 0310 	add.w	r3, r7, #16
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	480b      	ldr	r0, [pc, #44]	; (8004ad0 <HAL_UART_MspInit+0x94>)
 8004aa2:	f001 fa0f 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8004aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <HAL_UART_MspInit+0x94>)
 8004abc:	f001 fa02 	bl	8005ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ac0:	bf00      	nop
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40013800 	.word	0x40013800
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40010800 	.word	0x40010800

08004ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ad8:	e7fe      	b.n	8004ad8 <NMI_Handler+0x4>

08004ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	#ifdef DEBUG
     __BKPT(0);
 8004ade:	be00      	bkpt	0x0000
   	#endif

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ae0:	e7fe      	b.n	8004ae0 <HardFault_Handler+0x6>

08004ae2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ae6:	e7fe      	b.n	8004ae6 <MemManage_Handler+0x4>

08004ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aec:	e7fe      	b.n	8004aec <BusFault_Handler+0x4>

08004aee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004af2:	e7fe      	b.n	8004af2 <UsageFault_Handler+0x4>

08004af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr

08004b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b1c:	f000 f974 	bl	8004e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO5_Pin);
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f001 fb67 	bl	80061fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8004b36:	2008      	movs	r0, #8
 8004b38:	f001 fb60 	bl	80061fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004b44:	4802      	ldr	r0, [pc, #8]	; (8004b50 <ADC1_2_IRQHandler+0x10>)
 8004b46:	f000 fb89 	bl	800525c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200002e8 	.word	0x200002e8

08004b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b58:	4802      	ldr	r0, [pc, #8]	; (8004b64 <TIM2_IRQHandler+0x10>)
 8004b5a:	f006 fa7f 	bl	800b05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000484 	.word	0x20000484

08004b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b6c:	4802      	ldr	r0, [pc, #8]	; (8004b78 <TIM3_IRQHandler+0x10>)
 8004b6e:	f006 fa75 	bl	800b05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200004cc 	.word	0x200004cc

08004b7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004b80:	4802      	ldr	r0, [pc, #8]	; (8004b8c <I2C1_EV_IRQHandler+0x10>)
 8004b82:	f002 f80d 	bl	8006ba0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000318 	.word	0x20000318

08004b90 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <RTC_Alarm_IRQHandler+0x10>)
 8004b96:	f005 f93d 	bl	8009e14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200003c0 	.word	0x200003c0

08004ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return 1;
 8004ba8:	2301      	movs	r3, #1
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <_kill>:

int _kill(int pid, int sig)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bbc:	f007 fd96 	bl	800c6ec <__errno>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2216      	movs	r2, #22
 8004bc4:	601a      	str	r2, [r3, #0]
  return -1;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_exit>:

void _exit (int status)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bda:	f04f 31ff 	mov.w	r1, #4294967295
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ffe7 	bl	8004bb2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004be4:	e7fe      	b.n	8004be4 <_exit+0x12>

08004be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e00a      	b.n	8004c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bf8:	f3af 8000 	nop.w
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	60ba      	str	r2, [r7, #8]
 8004c04:	b2ca      	uxtb	r2, r1
 8004c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dbf0      	blt.n	8004bf8 <_read+0x12>
  }

  return len;
 8004c16:	687b      	ldr	r3, [r7, #4]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e009      	b.n	8004c46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	60ba      	str	r2, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dbf1      	blt.n	8004c32 <_write+0x12>
  }
  return len;
 8004c4e:	687b      	ldr	r3, [r7, #4]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <_close>:

int _close(int file)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <_isatty>:

int _isatty(int file)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c94:	2301      	movs	r3, #1
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <_sbrk+0x5c>)
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <_sbrk+0x60>)
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <_sbrk+0x64>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <_sbrk+0x64>)
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <_sbrk+0x68>)
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <_sbrk+0x64>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d207      	bcs.n	8004cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce8:	f007 fd00 	bl	800c6ec <__errno>
 8004cec:	4603      	mov	r3, r0
 8004cee:	220c      	movs	r2, #12
 8004cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	e009      	b.n	8004d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <_sbrk+0x64>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <_sbrk+0x64>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <_sbrk+0x64>)
 8004d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20005000 	.word	0x20005000
 8004d18:	00000400 	.word	0x00000400
 8004d1c:	20000564 	.word	0x20000564
 8004d20:	200006f0 	.word	0x200006f0

08004d24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d30:	f7ff fff8 	bl	8004d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d34:	480b      	ldr	r0, [pc, #44]	; (8004d64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d36:	490c      	ldr	r1, [pc, #48]	; (8004d68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d38:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d3c:	e002      	b.n	8004d44 <LoopCopyDataInit>

08004d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d42:	3304      	adds	r3, #4

08004d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d48:	d3f9      	bcc.n	8004d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d4c:	4c09      	ldr	r4, [pc, #36]	; (8004d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d50:	e001      	b.n	8004d56 <LoopFillZerobss>

08004d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d54:	3204      	adds	r2, #4

08004d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d58:	d3fb      	bcc.n	8004d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d5a:	f007 fccd 	bl	800c6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d5e:	f7fd f89d 	bl	8001e9c <main>
  bx lr
 8004d62:	4770      	bx	lr
  ldr r0, =_sdata
 8004d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d68:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004d6c:	0800d714 	.word	0x0800d714
  ldr r2, =_sbss
 8004d70:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8004d74:	200006ec 	.word	0x200006ec

08004d78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d78:	e7fe      	b.n	8004d78 <CAN1_RX1_IRQHandler>
	...

08004d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_Init+0x28>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <HAL_Init+0x28>)
 8004d86:	f043 0310 	orr.w	r3, r3, #16
 8004d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	f000 fdb9 	bl	8005904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d92:	200f      	movs	r0, #15
 8004d94:	f000 f808 	bl	8004da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d98:	f7ff fc74 	bl	8004684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40022000 	.word	0x40022000

08004da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004db0:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_InitTick+0x54>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_InitTick+0x58>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fddf 	bl	800598a <HAL_SYSTICK_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00e      	b.n	8004df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d80a      	bhi.n	8004df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	f000 fd99 	bl	800591a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <HAL_InitTick+0x5c>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	2000000c 	.word	0x2000000c
 8004e04:	20000008 	.word	0x20000008

08004e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_IncTick+0x1c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_IncTick+0x20>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4413      	add	r3, r2
 8004e18:	4a03      	ldr	r2, [pc, #12]	; (8004e28 <HAL_IncTick+0x20>)
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	20000568 	.word	0x20000568

08004e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <HAL_GetTick+0x10>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	20000568 	.word	0x20000568

08004e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_GetTick>
 8004e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d005      	beq.n	8004e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_Delay+0x44>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e66:	bf00      	nop
 8004e68:	f7ff ffe0 	bl	8004e2c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d8f7      	bhi.n	8004e68 <HAL_Delay+0x28>
  {
  }
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c

08004e88 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <HAL_SuspendTick+0x18>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <HAL_SuspendTick+0x18>)
 8004e92:	f023 0302 	bic.w	r3, r3, #2
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	e000e010 	.word	0xe000e010

08004ea4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_ResumeTick+0x18>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a03      	ldr	r2, [pc, #12]	; (8004ebc <HAL_ResumeTick+0x18>)
 8004eae:	f043 0302 	orr.w	r3, r3, #2
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	e000e010 	.word	0xe000e010

08004ec0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0be      	b.n	8005060 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fbf2 	bl	80046e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fbc3 	bl	8005690 <ADC_ConversionStop_Disable>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8099 	bne.w	800504e <HAL_ADC_Init+0x18e>
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 8095 	bne.w	800504e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	f043 0202 	orr.w	r2, r3, #2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7b1b      	ldrb	r3, [r3, #12]
 8004f46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f58:	d003      	beq.n	8004f62 <HAL_ADC_Init+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_ADC_Init+0xa8>
 8004f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f66:	e000      	b.n	8004f6a <HAL_ADC_Init+0xaa>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7d1b      	ldrb	r3, [r3, #20]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d119      	bne.n	8004fac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7b1b      	ldrb	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	035a      	lsls	r2, r3, #13
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e00b      	b.n	8004fac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <HAL_ADC_Init+0x1a8>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fdc:	d003      	beq.n	8004fe6 <HAL_ADC_Init+0x126>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d104      	bne.n	8004ff0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	051b      	lsls	r3, r3, #20
 8004fee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	430a      	orrs	r2, r1
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_ADC_Init+0x1ac>)
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d10b      	bne.n	800502c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f023 0303 	bic.w	r3, r3, #3
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800502a:	e018      	b.n	800505e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f023 0312 	bic.w	r3, r3, #18
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f043 0201 	orr.w	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800504c:	e007      	b.n	800505e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	f043 0210 	orr.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffe1f7fd 	.word	0xffe1f7fd
 800506c:	ff1f0efe 	.word	0xff1f0efe

08005070 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_ADC_Start_IT+0x1a>
 8005086:	2302      	movs	r3, #2
 8005088:	e0a0      	b.n	80051cc <HAL_ADC_Start_IT+0x15c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 faa2 	bl	80055dc <ADC_Enable>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 808f 	bne.w	80051c2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a45      	ldr	r2, [pc, #276]	; (80051d4 <HAL_ADC_Start_IT+0x164>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d105      	bne.n	80050ce <HAL_ADC_Start_IT+0x5e>
 80050c2:	4b45      	ldr	r3, [pc, #276]	; (80051d8 <HAL_ADC_Start_IT+0x168>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d115      	bne.n	80050fa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d026      	beq.n	8005136 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050f8:	e01d      	b.n	8005136 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a33      	ldr	r2, [pc, #204]	; (80051d8 <HAL_ADC_Start_IT+0x168>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_ADC_Start_IT+0xaa>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <HAL_ADC_Start_IT+0x164>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <HAL_ADC_Start_IT+0xc6>
 800511a:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_ADC_Start_IT+0x168>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800512e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f023 0206 	bic.w	r2, r3, #6
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c
 800514e:	e002      	b.n	8005156 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f06f 0202 	mvn.w	r2, #2
 8005166:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005182:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005186:	d113      	bne.n	80051b0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800518c:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <HAL_ADC_Start_IT+0x164>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d105      	bne.n	800519e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_ADC_Start_IT+0x168>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80051ac:	609a      	str	r2, [r3, #8]
 80051ae:	e00c      	b.n	80051ca <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	e003      	b.n	80051ca <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40012800 	.word	0x40012800
 80051d8:	40012400 	.word	0x40012400

080051dc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_Stop_IT+0x1a>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e022      	b.n	800523c <HAL_ADC_Stop_IT+0x60>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa46 	bl	8005690 <ADC_ConversionStop_Disable>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d111      	bne.n	8005232 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0220 	bic.w	r2, r2, #32
 800521c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800523a:	7bfb      	ldrb	r3, [r7, #15]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d03e      	beq.n	80052fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d039      	beq.n	80052fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80052aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80052ae:	d11d      	bne.n	80052ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d119      	bne.n	80052ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0220 	bic.w	r2, r2, #32
 80052c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d105      	bne.n	80052ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fd fd55 	bl	8002d9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0212 	mvn.w	r2, #18
 80052fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d04d      	beq.n	80053a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d048      	beq.n	80053a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d105      	bne.n	8005328 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005332:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005336:	d012      	beq.n	800535e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005342:	2b00      	cmp	r3, #0
 8005344:	d125      	bne.n	8005392 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005350:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005354:	d11d      	bne.n	8005392 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800536c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9bd 	bl	8005712 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 020c 	mvn.w	r2, #12
 80053a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f809 	bl	80053da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0201 	mvn.w	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_ADC_ConfigChannel+0x20>
 8005408:	2302      	movs	r3, #2
 800540a:	e0dc      	b.n	80055c6 <HAL_ADC_ConfigChannel+0x1da>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b06      	cmp	r3, #6
 800541a:	d81c      	bhi.n	8005456 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	3b05      	subs	r3, #5
 800542e:	221f      	movs	r2, #31
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	4019      	ands	r1, r3
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	3b05      	subs	r3, #5
 8005448:	fa00 f203 	lsl.w	r2, r0, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	635a      	str	r2, [r3, #52]	; 0x34
 8005454:	e03c      	b.n	80054d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b0c      	cmp	r3, #12
 800545c:	d81c      	bhi.n	8005498 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	3b23      	subs	r3, #35	; 0x23
 8005470:	221f      	movs	r2, #31
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	43db      	mvns	r3, r3
 8005478:	4019      	ands	r1, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	3b23      	subs	r3, #35	; 0x23
 800548a:	fa00 f203 	lsl.w	r2, r0, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
 8005496:	e01b      	b.n	80054d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	3b41      	subs	r3, #65	; 0x41
 80054aa:	221f      	movs	r2, #31
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	4019      	ands	r1, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	3b41      	subs	r3, #65	; 0x41
 80054c4:	fa00 f203 	lsl.w	r2, r0, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b09      	cmp	r3, #9
 80054d6:	d91c      	bls.n	8005512 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68d9      	ldr	r1, [r3, #12]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	3b1e      	subs	r3, #30
 80054ea:	2207      	movs	r2, #7
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	4019      	ands	r1, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6898      	ldr	r0, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	4413      	add	r3, r2
 8005502:	3b1e      	subs	r3, #30
 8005504:	fa00 f203 	lsl.w	r2, r0, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e019      	b.n	8005546 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6919      	ldr	r1, [r3, #16]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	2207      	movs	r2, #7
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	4019      	ands	r1, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6898      	ldr	r0, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4413      	add	r3, r2
 800553a:	fa00 f203 	lsl.w	r2, r0, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b10      	cmp	r3, #16
 800554c:	d003      	beq.n	8005556 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005552:	2b11      	cmp	r3, #17
 8005554:	d132      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d126      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800557c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b10      	cmp	r3, #16
 8005584:	d11a      	bne.n	80055bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005586:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	0c9a      	lsrs	r2, r3, #18
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800559c:	e002      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f9      	bne.n	800559e <HAL_ADC_ConfigChannel+0x1b2>
 80055aa:	e007      	b.n	80055bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f043 0220 	orr.w	r2, r3, #32
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	40012400 	.word	0x40012400
 80055d4:	20000004 	.word	0x20000004
 80055d8:	431bde83 	.word	0x431bde83

080055dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d040      	beq.n	800567c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <ADC_Enable+0xac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <ADC_Enable+0xb0>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	0c9b      	lsrs	r3, r3, #18
 8005616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005618:	e002      	b.n	8005620 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3b01      	subs	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f9      	bne.n	800561a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005626:	f7ff fc01 	bl	8004e2c <HAL_GetTick>
 800562a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800562c:	e01f      	b.n	800566e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800562e:	f7ff fbfd 	bl	8004e2c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d918      	bls.n	800566e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d011      	beq.n	800566e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	f043 0210 	orr.w	r2, r3, #16
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b01      	cmp	r3, #1
 800567a:	d1d8      	bne.n	800562e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000004 	.word	0x20000004
 800568c:	431bde83 	.word	0x431bde83

08005690 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d12e      	bne.n	8005708 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056ba:	f7ff fbb7 	bl	8004e2c <HAL_GetTick>
 80056be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056c0:	e01b      	b.n	80056fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056c2:	f7ff fbb3 	bl	8004e2c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d914      	bls.n	80056fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10d      	bne.n	80056fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e007      	b.n	800570a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b01      	cmp	r3, #1
 8005706:	d0dc      	beq.n	80056c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <__NVIC_SetPriorityGrouping>:
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <__NVIC_SetPriorityGrouping+0x44>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005740:	4013      	ands	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800574c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <__NVIC_SetPriorityGrouping+0x44>)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	60d3      	str	r3, [r2, #12]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <__NVIC_GetPriorityGrouping>:
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <__NVIC_GetPriorityGrouping+0x18>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	f003 0307 	and.w	r3, r3, #7
}
 800577a:	4618      	mov	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <__NVIC_EnableIRQ>:
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005796:	2b00      	cmp	r3, #0
 8005798:	db0b      	blt.n	80057b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	f003 021f 	and.w	r2, r3, #31
 80057a0:	4906      	ldr	r1, [pc, #24]	; (80057bc <__NVIC_EnableIRQ+0x34>)
 80057a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	2001      	movs	r0, #1
 80057aa:	fa00 f202 	lsl.w	r2, r0, r2
 80057ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	e000e100 	.word	0xe000e100

080057c0 <__NVIC_DisableIRQ>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db12      	blt.n	80057f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	490a      	ldr	r1, [pc, #40]	; (8005804 <__NVIC_DisableIRQ+0x44>)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2001      	movs	r0, #1
 80057e2:	fa00 f202 	lsl.w	r2, r0, r2
 80057e6:	3320      	adds	r3, #32
 80057e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80057ec:	f3bf 8f4f 	dsb	sy
}
 80057f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057f2:	f3bf 8f6f 	isb	sy
}
 80057f6:	bf00      	nop
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	e000e100 	.word	0xe000e100

08005808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005818:	2b00      	cmp	r3, #0
 800581a:	db0a      	blt.n	8005832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	b2da      	uxtb	r2, r3
 8005820:	490c      	ldr	r1, [pc, #48]	; (8005854 <__NVIC_SetPriority+0x4c>)
 8005822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005826:	0112      	lsls	r2, r2, #4
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	440b      	add	r3, r1
 800582c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005830:	e00a      	b.n	8005848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	4908      	ldr	r1, [pc, #32]	; (8005858 <__NVIC_SetPriority+0x50>)
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	3b04      	subs	r3, #4
 8005840:	0112      	lsls	r2, r2, #4
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	440b      	add	r3, r1
 8005846:	761a      	strb	r2, [r3, #24]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e000e100 	.word	0xe000e100
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	; 0x24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f1c3 0307 	rsb	r3, r3, #7
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf28      	it	cs
 800587a:	2304      	movcs	r3, #4
 800587c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3304      	adds	r3, #4
 8005882:	2b06      	cmp	r3, #6
 8005884:	d902      	bls.n	800588c <NVIC_EncodePriority+0x30>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3b03      	subs	r3, #3
 800588a:	e000      	b.n	800588e <NVIC_EncodePriority+0x32>
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	401a      	ands	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a4:	f04f 31ff 	mov.w	r1, #4294967295
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	fa01 f303 	lsl.w	r3, r1, r3
 80058ae:	43d9      	mvns	r1, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b4:	4313      	orrs	r3, r2
         );
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3724      	adds	r7, #36	; 0x24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058d0:	d301      	bcc.n	80058d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058d2:	2301      	movs	r3, #1
 80058d4:	e00f      	b.n	80058f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058d6:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <SysTick_Config+0x40>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3b01      	subs	r3, #1
 80058dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058de:	210f      	movs	r1, #15
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	f7ff ff90 	bl	8005808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <SysTick_Config+0x40>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ee:	4b04      	ldr	r3, [pc, #16]	; (8005900 <SysTick_Config+0x40>)
 80058f0:	2207      	movs	r2, #7
 80058f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	e000e010 	.word	0xe000e010

08005904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff09 	bl	8005724 <__NVIC_SetPriorityGrouping>
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800591a:	b580      	push	{r7, lr}
 800591c:	b086      	sub	sp, #24
 800591e:	af00      	add	r7, sp, #0
 8005920:	4603      	mov	r3, r0
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800592c:	f7ff ff1e 	bl	800576c <__NVIC_GetPriorityGrouping>
 8005930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff ff90 	bl	800585c <NVIC_EncodePriority>
 800593c:	4602      	mov	r2, r0
 800593e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff5f 	bl	8005808 <__NVIC_SetPriority>
}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	4603      	mov	r3, r0
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff11 	bl	8005788 <__NVIC_EnableIRQ>
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	4603      	mov	r3, r0
 8005976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff ff1f 	bl	80057c0 <__NVIC_DisableIRQ>
}
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff ff94 	bl	80058c0 <SysTick_Config>
 8005998:	4603      	mov	r3, r0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d005      	beq.n	80059c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	e051      	b.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020e 	bic.w	r2, r2, #14
 80059d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <HAL_DMA_Abort_IT+0xd4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d029      	beq.n	8005a46 <HAL_DMA_Abort_IT+0xa2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <HAL_DMA_Abort_IT+0xd8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d022      	beq.n	8005a42 <HAL_DMA_Abort_IT+0x9e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <HAL_DMA_Abort_IT+0xdc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01a      	beq.n	8005a3c <HAL_DMA_Abort_IT+0x98>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_DMA_Abort_IT+0xe0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d012      	beq.n	8005a36 <HAL_DMA_Abort_IT+0x92>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_DMA_Abort_IT+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00a      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x8c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <HAL_DMA_Abort_IT+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d102      	bne.n	8005a2a <HAL_DMA_Abort_IT+0x86>
 8005a24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a28:	e00e      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a2e:	e00b      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a34:	e008      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a3a:	e005      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a40:	e002      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a42:	2310      	movs	r3, #16
 8005a44:	e000      	b.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <HAL_DMA_Abort_IT+0xec>)
 8005a4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
    } 
  }
  return status;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40020008 	.word	0x40020008
 8005a7c:	4002001c 	.word	0x4002001c
 8005a80:	40020030 	.word	0x40020030
 8005a84:	40020044 	.word	0x40020044
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	4002006c 	.word	0x4002006c
 8005a90:	40020000 	.word	0x40020000

08005a94 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005aa2:	b2db      	uxtb	r3, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr
	...

08005ab0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005aca:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <HAL_FLASH_Program+0xd8>)
 8005acc:	7e1b      	ldrb	r3, [r3, #24]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_FLASH_Program+0x26>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e054      	b.n	8005b80 <HAL_FLASH_Program+0xd0>
 8005ad6:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <HAL_FLASH_Program+0xd8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005adc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ae0:	f000 f8b2 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d144      	bne.n	8005b78 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d102      	bne.n	8005afa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005af4:	2301      	movs	r3, #1
 8005af6:	757b      	strb	r3, [r7, #21]
 8005af8:	e007      	b.n	8005b0a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d102      	bne.n	8005b06 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005b00:	2302      	movs	r3, #2
 8005b02:	757b      	strb	r3, [r7, #21]
 8005b04:	e001      	b.n	8005b0a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005b06:	2304      	movs	r3, #4
 8005b08:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	75bb      	strb	r3, [r7, #22]
 8005b0e:	e02d      	b.n	8005b6c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005b10:	7dbb      	ldrb	r3, [r7, #22]
 8005b12:	005a      	lsls	r2, r3, #1
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	eb02 0c03 	add.w	ip, r2, r3
 8005b1a:	7dbb      	ldrb	r3, [r7, #22]
 8005b1c:	0119      	lsls	r1, r3, #4
 8005b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b22:	f1c1 0620 	rsb	r6, r1, #32
 8005b26:	f1a1 0020 	sub.w	r0, r1, #32
 8005b2a:	fa22 f401 	lsr.w	r4, r2, r1
 8005b2e:	fa03 f606 	lsl.w	r6, r3, r6
 8005b32:	4334      	orrs	r4, r6
 8005b34:	fa23 f000 	lsr.w	r0, r3, r0
 8005b38:	4304      	orrs	r4, r0
 8005b3a:	fa23 f501 	lsr.w	r5, r3, r1
 8005b3e:	b2a3      	uxth	r3, r4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4660      	mov	r0, ip
 8005b44:	f000 f864 	bl	8005c10 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b4c:	f000 f87c 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005b54:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <HAL_FLASH_Program+0xdc>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <HAL_FLASH_Program+0xdc>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005b66:	7dbb      	ldrb	r3, [r7, #22]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	75bb      	strb	r3, [r7, #22]
 8005b6c:	7dba      	ldrb	r2, [r7, #22]
 8005b6e:	7d7b      	ldrb	r3, [r7, #21]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d3cd      	bcc.n	8005b10 <HAL_FLASH_Program+0x60>
 8005b74:	e000      	b.n	8005b78 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005b76:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <HAL_FLASH_Program+0xd8>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	761a      	strb	r2, [r3, #24]

  return status;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b88:	20000570 	.word	0x20000570
 8005b8c:	40022000 	.word	0x40022000

08005b90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_FLASH_Unlock+0x40>)
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <HAL_FLASH_Unlock+0x40>)
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <HAL_FLASH_Unlock+0x44>)
 8005baa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005bac:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <HAL_FLASH_Unlock+0x40>)
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <HAL_FLASH_Unlock+0x48>)
 8005bb0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <HAL_FLASH_Unlock+0x40>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40022000 	.word	0x40022000
 8005bd4:	45670123 	.word	0x45670123
 8005bd8:	cdef89ab 	.word	0xcdef89ab

08005bdc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <HAL_FLASH_Lock+0x1c>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <HAL_FLASH_Lock+0x1c>)
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40022000 	.word	0x40022000

08005bfc <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005c00:	4b02      	ldr	r3, [pc, #8]	; (8005c0c <HAL_FLASH_GetError+0x10>)
 8005c02:	69db      	ldr	r3, [r3, #28]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	20000570 	.word	0x20000570

08005c10 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <FLASH_Program_HalfWord+0x30>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <FLASH_Program_HalfWord+0x34>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	4a07      	ldr	r2, [pc, #28]	; (8005c44 <FLASH_Program_HalfWord+0x34>)
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	887a      	ldrh	r2, [r7, #2]
 8005c32:	801a      	strh	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000570 	.word	0x20000570
 8005c44:	40022000 	.word	0x40022000

08005c48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005c50:	f7ff f8ec 	bl	8004e2c <HAL_GetTick>
 8005c54:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c56:	e010      	b.n	8005c7a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d00c      	beq.n	8005c7a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <FLASH_WaitForLastOperation+0x2e>
 8005c66:	f7ff f8e1 	bl	8004e2c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d201      	bcs.n	8005c7a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e025      	b.n	8005cc6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e8      	bne.n	8005c58 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c94:	2220      	movs	r2, #32
 8005c96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <FLASH_WaitForLastOperation+0x88>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cbc:	f000 f80a 	bl	8005cd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40022000 	.word	0x40022000

08005cd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005cde:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005cea:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f043 0302 	orr.w	r3, r3, #2
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005cf4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f043 0310 	orr.w	r3, r3, #16
 8005cfc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d14:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <FLASH_SetErrorCode+0x9c>)
 8005d34:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f240 1201 	movw	r2, #257	; 0x101
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d106      	bne.n	8005d5a <FLASH_SetErrorCode+0x86>
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4a06      	ldr	r2, [pc, #24]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	61d3      	str	r3, [r2, #28]
}  
 8005d58:	e002      	b.n	8005d60 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d5a:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <FLASH_SetErrorCode+0x98>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60d3      	str	r3, [r2, #12]
}  
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40022000 	.word	0x40022000
 8005d70:	20000570 	.word	0x20000570

08005d74 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005d88:	7e1b      	ldrb	r3, [r3, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_FLASHEx_Erase+0x1e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e053      	b.n	8005e3a <HAL_FLASHEx_Erase+0xc6>
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d116      	bne.n	8005dce <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005da4:	f7ff ff50 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d141      	bne.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005dae:	2001      	movs	r0, #1
 8005db0:	f000 f84c 	bl	8005e4c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005db8:	f7ff ff46 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6113      	str	r3, [r2, #16]
 8005dcc:	e031      	b.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005dce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dd2:	f7ff ff39 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d12a      	bne.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	e019      	b.n	8005e20 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f000 f849 	bl	8005e84 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005df2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005df6:	f7ff ff27 	bl	8005c48 <FLASH_WaitForLastOperation>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <HAL_FLASHEx_Erase+0xd4>)
 8005e04:	f023 0302 	bic.w	r3, r3, #2
 8005e08:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	601a      	str	r2, [r3, #0]
            break;
 8005e16:	e00c      	b.n	8005e32 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	029a      	lsls	r2, r3, #10
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d3dc      	bcc.n	8005dec <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <HAL_FLASHEx_Erase+0xd0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	761a      	strb	r2, [r3, #24]

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000570 	.word	0x20000570
 8005e48:	40022000 	.word	0x40022000

08005e4c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <FLASH_MassErase+0x30>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e60:	f043 0304 	orr.w	r3, r3, #4
 8005e64:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <FLASH_MassErase+0x34>)
 8005e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e70:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	20000570 	.word	0x20000570
 8005e80:	40022000 	.word	0x40022000

08005e84 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <FLASH_PageErase+0x38>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <FLASH_PageErase+0x3c>)
 8005eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20000570 	.word	0x20000570
 8005ec0:	40022000 	.word	0x40022000

08005ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b08b      	sub	sp, #44	; 0x2c
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ed6:	e169      	b.n	80061ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	f040 8158 	bne.w	80061a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4a9a      	ldr	r2, [pc, #616]	; (8006164 <HAL_GPIO_Init+0x2a0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d05e      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f00:	4a98      	ldr	r2, [pc, #608]	; (8006164 <HAL_GPIO_Init+0x2a0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d875      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f06:	4a98      	ldr	r2, [pc, #608]	; (8006168 <HAL_GPIO_Init+0x2a4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d058      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f0c:	4a96      	ldr	r2, [pc, #600]	; (8006168 <HAL_GPIO_Init+0x2a4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d86f      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f12:	4a96      	ldr	r2, [pc, #600]	; (800616c <HAL_GPIO_Init+0x2a8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d052      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f18:	4a94      	ldr	r2, [pc, #592]	; (800616c <HAL_GPIO_Init+0x2a8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d869      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f1e:	4a94      	ldr	r2, [pc, #592]	; (8006170 <HAL_GPIO_Init+0x2ac>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d04c      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f24:	4a92      	ldr	r2, [pc, #584]	; (8006170 <HAL_GPIO_Init+0x2ac>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d863      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f2a:	4a92      	ldr	r2, [pc, #584]	; (8006174 <HAL_GPIO_Init+0x2b0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d046      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
 8005f30:	4a90      	ldr	r2, [pc, #576]	; (8006174 <HAL_GPIO_Init+0x2b0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d85d      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f36:	2b12      	cmp	r3, #18
 8005f38:	d82a      	bhi.n	8005f90 <HAL_GPIO_Init+0xcc>
 8005f3a:	2b12      	cmp	r3, #18
 8005f3c:	d859      	bhi.n	8005ff2 <HAL_GPIO_Init+0x12e>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <HAL_GPIO_Init+0x80>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fbf 	.word	0x08005fbf
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005fab 	.word	0x08005fab
 8005f50:	08005fed 	.word	0x08005fed
 8005f54:	08005ff3 	.word	0x08005ff3
 8005f58:	08005ff3 	.word	0x08005ff3
 8005f5c:	08005ff3 	.word	0x08005ff3
 8005f60:	08005ff3 	.word	0x08005ff3
 8005f64:	08005ff3 	.word	0x08005ff3
 8005f68:	08005ff3 	.word	0x08005ff3
 8005f6c:	08005ff3 	.word	0x08005ff3
 8005f70:	08005ff3 	.word	0x08005ff3
 8005f74:	08005ff3 	.word	0x08005ff3
 8005f78:	08005ff3 	.word	0x08005ff3
 8005f7c:	08005ff3 	.word	0x08005ff3
 8005f80:	08005ff3 	.word	0x08005ff3
 8005f84:	08005ff3 	.word	0x08005ff3
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	4a79      	ldr	r2, [pc, #484]	; (8006178 <HAL_GPIO_Init+0x2b4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f96:	e02c      	b.n	8005ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	623b      	str	r3, [r7, #32]
          break;
 8005f9e:	e029      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	623b      	str	r3, [r7, #32]
          break;
 8005fa8:	e024      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	623b      	str	r3, [r7, #32]
          break;
 8005fb2:	e01f      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	623b      	str	r3, [r7, #32]
          break;
 8005fbc:	e01a      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d102      	bne.n	8005fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	623b      	str	r3, [r7, #32]
          break;
 8005fca:	e013      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	611a      	str	r2, [r3, #16]
          break;
 8005fde:	e009      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	615a      	str	r2, [r3, #20]
          break;
 8005fea:	e003      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
          break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_GPIO_Init+0x130>
          break;
 8005ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2bff      	cmp	r3, #255	; 0xff
 8005ff8:	d801      	bhi.n	8005ffe <HAL_GPIO_Init+0x13a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	e001      	b.n	8006002 <HAL_GPIO_Init+0x13e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2bff      	cmp	r3, #255	; 0xff
 8006008:	d802      	bhi.n	8006010 <HAL_GPIO_Init+0x14c>
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	e002      	b.n	8006016 <HAL_GPIO_Init+0x152>
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	3b08      	subs	r3, #8
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	210f      	movs	r1, #15
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80b1 	beq.w	80061a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006044:	4b4d      	ldr	r3, [pc, #308]	; (800617c <HAL_GPIO_Init+0x2b8>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	4a4c      	ldr	r2, [pc, #304]	; (800617c <HAL_GPIO_Init+0x2b8>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6193      	str	r3, [r2, #24]
 8006050:	4b4a      	ldr	r3, [pc, #296]	; (800617c <HAL_GPIO_Init+0x2b8>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800605c:	4a48      	ldr	r2, [pc, #288]	; (8006180 <HAL_GPIO_Init+0x2bc>)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	3302      	adds	r3, #2
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a40      	ldr	r2, [pc, #256]	; (8006184 <HAL_GPIO_Init+0x2c0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_GPIO_Init+0x1ec>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <HAL_GPIO_Init+0x2c4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00d      	beq.n	80060ac <HAL_GPIO_Init+0x1e8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3e      	ldr	r2, [pc, #248]	; (800618c <HAL_GPIO_Init+0x2c8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <HAL_GPIO_Init+0x1e4>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3d      	ldr	r2, [pc, #244]	; (8006190 <HAL_GPIO_Init+0x2cc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_GPIO_Init+0x1e0>
 80060a0:	2303      	movs	r3, #3
 80060a2:	e006      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060a4:	2304      	movs	r3, #4
 80060a6:	e004      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e002      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_GPIO_Init+0x1ee>
 80060b0:	2300      	movs	r3, #0
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	f002 0203 	and.w	r2, r2, #3
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	4093      	lsls	r3, r2
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80060c2:	492f      	ldr	r1, [pc, #188]	; (8006180 <HAL_GPIO_Init+0x2bc>)
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	3302      	adds	r3, #2
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80060dc:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	492c      	ldr	r1, [pc, #176]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]
 80060e8:	e006      	b.n	80060f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060ea:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	4928      	ldr	r1, [pc, #160]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006104:	4b23      	ldr	r3, [pc, #140]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	4922      	ldr	r1, [pc, #136]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	60cb      	str	r3, [r1, #12]
 8006110:	e006      	b.n	8006120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	43db      	mvns	r3, r3
 800611a:	491e      	ldr	r1, [pc, #120]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800611c:	4013      	ands	r3, r2
 800611e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d006      	beq.n	800613a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800612c:	4b19      	ldr	r3, [pc, #100]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4918      	ldr	r1, [pc, #96]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	e006      	b.n	8006148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	43db      	mvns	r3, r3
 8006142:	4914      	ldr	r1, [pc, #80]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006144:	4013      	ands	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d021      	beq.n	8006198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	490e      	ldr	r1, [pc, #56]	; (8006194 <HAL_GPIO_Init+0x2d0>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	e021      	b.n	80061a6 <HAL_GPIO_Init+0x2e2>
 8006162:	bf00      	nop
 8006164:	10320000 	.word	0x10320000
 8006168:	10310000 	.word	0x10310000
 800616c:	10220000 	.word	0x10220000
 8006170:	10210000 	.word	0x10210000
 8006174:	10120000 	.word	0x10120000
 8006178:	10110000 	.word	0x10110000
 800617c:	40021000 	.word	0x40021000
 8006180:	40010000 	.word	0x40010000
 8006184:	40010800 	.word	0x40010800
 8006188:	40010c00 	.word	0x40010c00
 800618c:	40011000 	.word	0x40011000
 8006190:	40011400 	.word	0x40011400
 8006194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_GPIO_Init+0x304>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	43db      	mvns	r3, r3
 80061a0:	4909      	ldr	r1, [pc, #36]	; (80061c8 <HAL_GPIO_Init+0x304>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f ae8e 	bne.w	8005ed8 <HAL_GPIO_Init+0x14>
  }
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	40010400 	.word	0x40010400

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80061e8:	e003      	b.n	80061f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	4013      	ands	r3, r2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d006      	beq.n	8006220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006212:	4a05      	ldr	r2, [pc, #20]	; (8006228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fc fe7c 	bl	8002f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40010400 	.word	0x40010400

0800622c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e12b      	b.n	8006496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fe fa8c 	bl	8004770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	; 0x24
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800628e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006290:	f002 fff0 	bl	8009274 <HAL_RCC_GetPCLK1Freq>
 8006294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4a81      	ldr	r2, [pc, #516]	; (80064a0 <HAL_I2C_Init+0x274>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d807      	bhi.n	80062b0 <HAL_I2C_Init+0x84>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4a80      	ldr	r2, [pc, #512]	; (80064a4 <HAL_I2C_Init+0x278>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	bf94      	ite	ls
 80062a8:	2301      	movls	r3, #1
 80062aa:	2300      	movhi	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e006      	b.n	80062be <HAL_I2C_Init+0x92>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a7d      	ldr	r2, [pc, #500]	; (80064a8 <HAL_I2C_Init+0x27c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bf94      	ite	ls
 80062b8:	2301      	movls	r3, #1
 80062ba:	2300      	movhi	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e0e7      	b.n	8006496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a78      	ldr	r2, [pc, #480]	; (80064ac <HAL_I2C_Init+0x280>)
 80062ca:	fba2 2303 	umull	r2, r3, r2, r3
 80062ce:	0c9b      	lsrs	r3, r3, #18
 80062d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a6a      	ldr	r2, [pc, #424]	; (80064a0 <HAL_I2C_Init+0x274>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <HAL_I2C_Init+0xd4>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	3301      	adds	r3, #1
 80062fe:	e009      	b.n	8006314 <HAL_I2C_Init+0xe8>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	4a69      	ldr	r2, [pc, #420]	; (80064b0 <HAL_I2C_Init+0x284>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	099b      	lsrs	r3, r3, #6
 8006312:	3301      	adds	r3, #1
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	430b      	orrs	r3, r1
 800631a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	495c      	ldr	r1, [pc, #368]	; (80064a0 <HAL_I2C_Init+0x274>)
 8006330:	428b      	cmp	r3, r1
 8006332:	d819      	bhi.n	8006368 <HAL_I2C_Init+0x13c>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1e59      	subs	r1, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006348:	400b      	ands	r3, r1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_I2C_Init+0x138>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1e59      	subs	r1, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	fbb1 f3f3 	udiv	r3, r1, r3
 800635c:	3301      	adds	r3, #1
 800635e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006362:	e051      	b.n	8006408 <HAL_I2C_Init+0x1dc>
 8006364:	2304      	movs	r3, #4
 8006366:	e04f      	b.n	8006408 <HAL_I2C_Init+0x1dc>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d111      	bne.n	8006394 <HAL_I2C_Init+0x168>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1e58      	subs	r0, r3, #1
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6859      	ldr	r1, [r3, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	440b      	add	r3, r1
 800637e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006382:	3301      	adds	r3, #1
 8006384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006388:	2b00      	cmp	r3, #0
 800638a:	bf0c      	ite	eq
 800638c:	2301      	moveq	r3, #1
 800638e:	2300      	movne	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	e012      	b.n	80063ba <HAL_I2C_Init+0x18e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1e58      	subs	r0, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6859      	ldr	r1, [r3, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	0099      	lsls	r1, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063aa:	3301      	adds	r3, #1
 80063ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_I2C_Init+0x196>
 80063be:	2301      	movs	r3, #1
 80063c0:	e022      	b.n	8006408 <HAL_I2C_Init+0x1dc>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10e      	bne.n	80063e8 <HAL_I2C_Init+0x1bc>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1e58      	subs	r0, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	440b      	add	r3, r1
 80063d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80063dc:	3301      	adds	r3, #1
 80063de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	e00f      	b.n	8006408 <HAL_I2C_Init+0x1dc>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1e58      	subs	r0, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6859      	ldr	r1, [r3, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	0099      	lsls	r1, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	6809      	ldr	r1, [r1, #0]
 800640c:	4313      	orrs	r3, r2
 800640e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69da      	ldr	r2, [r3, #28]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6911      	ldr	r1, [r2, #16]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68d2      	ldr	r2, [r2, #12]
 8006442:	4311      	orrs	r1, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	430b      	orrs	r3, r1
 800644a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	000186a0 	.word	0x000186a0
 80064a4:	001e847f 	.word	0x001e847f
 80064a8:	003d08ff 	.word	0x003d08ff
 80064ac:	431bde83 	.word	0x431bde83
 80064b0:	10624dd3 	.word	0x10624dd3

080064b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b80      	cmp	r3, #128	; 0x80
 80064c8:	d103      	bne.n	80064d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	611a      	str	r2, [r3, #16]
  }
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	461a      	mov	r2, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	817b      	strh	r3, [r7, #10]
 80064ee:	460b      	mov	r3, r1
 80064f0:	813b      	strh	r3, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064f6:	f7fe fc99 	bl	8004e2c <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b20      	cmp	r3, #32
 8006506:	f040 80d9 	bne.w	80066bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	2319      	movs	r3, #25
 8006510:	2201      	movs	r2, #1
 8006512:	496d      	ldr	r1, [pc, #436]	; (80066c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f002 f819 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
 8006522:	e0cc      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_I2C_Mem_Write+0x56>
 800652e:	2302      	movs	r3, #2
 8006530:	e0c5      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d007      	beq.n	8006558 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2221      	movs	r2, #33	; 0x21
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2240      	movs	r2, #64	; 0x40
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a4d      	ldr	r2, [pc, #308]	; (80066cc <HAL_I2C_Mem_Write+0x1f0>)
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800659a:	88f8      	ldrh	r0, [r7, #6]
 800659c:	893a      	ldrh	r2, [r7, #8]
 800659e:	8979      	ldrh	r1, [r7, #10]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4603      	mov	r3, r0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f001 fda8 	bl	8008100 <I2C_RequestMemoryWrite>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d052      	beq.n	800665c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e081      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f002 f8de 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d107      	bne.n	80065e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e06b      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b04      	cmp	r3, #4
 8006622:	d11b      	bne.n	800665c <HAL_I2C_Mem_Write+0x180>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1aa      	bne.n	80065ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f002 f8d1 	bl	8008810 <I2C_WaitOnBTFFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	2b04      	cmp	r3, #4
 800667a:	d107      	bne.n	800668c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e016      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e000      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	00100002 	.word	0x00100002
 80066cc:	ffff0000 	.word	0xffff0000

080066d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	; 0x30
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	817b      	strh	r3, [r7, #10]
 80066e2:	460b      	mov	r3, r1
 80066e4:	813b      	strh	r3, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ee:	f7fe fb9d 	bl	8004e2c <HAL_GetTick>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 8244 	bne.w	8006b8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2319      	movs	r3, #25
 8006708:	2201      	movs	r2, #1
 800670a:	4982      	ldr	r1, [pc, #520]	; (8006914 <HAL_I2C_Mem_Read+0x244>)
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f001 ff1d 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
 800671a:	e237      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_I2C_Mem_Read+0x5a>
 8006726:	2302      	movs	r3, #2
 8006728:	e230      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d007      	beq.n	8006750 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2222      	movs	r2, #34	; 0x22
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2240      	movs	r2, #64	; 0x40
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a62      	ldr	r2, [pc, #392]	; (8006918 <HAL_I2C_Mem_Read+0x248>)
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006792:	88f8      	ldrh	r0, [r7, #6]
 8006794:	893a      	ldrh	r2, [r7, #8]
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f001 fd42 	bl	800822c <I2C_RequestMemoryRead>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e1ec      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	61fb      	str	r3, [r7, #28]
 80067ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	e1c0      	b.n	8006b64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11e      	bne.n	8006828 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067fa:	b672      	cpsid	i
}
 80067fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006822:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006824:	b662      	cpsie	i
}
 8006826:	e035      	b.n	8006894 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682c:	2b02      	cmp	r3, #2
 800682e:	d11e      	bne.n	800686e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006840:	b672      	cpsid	i
}
 8006842:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800686a:	b662      	cpsie	i
}
 800686c:	e012      	b.n	8006894 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800687c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006894:	e166      	b.n	8006b64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	2b03      	cmp	r3, #3
 800689c:	f200 811f 	bhi.w	8006ade <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d123      	bne.n	80068f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f002 f829 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e167      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068ee:	e139      	b.n	8006b64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d152      	bne.n	800699e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2200      	movs	r2, #0
 8006900:	4906      	ldr	r1, [pc, #24]	; (800691c <HAL_I2C_Mem_Read+0x24c>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f001 fe22 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e13c      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
 8006912:	bf00      	nop
 8006914:	00100002 	.word	0x00100002
 8006918:	ffff0000 	.word	0xffff0000
 800691c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006920:	b672      	cpsid	i
}
 8006922:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006966:	b662      	cpsie	i
}
 8006968:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800699c:	e0e2      	b.n	8006b64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2200      	movs	r2, #0
 80069a6:	497b      	ldr	r1, [pc, #492]	; (8006b94 <HAL_I2C_Mem_Read+0x4c4>)
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f001 fdcf 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e0e9      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80069c8:	b672      	cpsid	i
}
 80069ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80069fe:	4b66      	ldr	r3, [pc, #408]	; (8006b98 <HAL_I2C_Mem_Read+0x4c8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	08db      	lsrs	r3, r3, #3
 8006a04:	4a65      	ldr	r2, [pc, #404]	; (8006b9c <HAL_I2C_Mem_Read+0x4cc>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	0a1a      	lsrs	r2, r3, #8
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	00da      	lsls	r2, r3, #3
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d118      	bne.n	8006a56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006a46:	b662      	cpsie	i
}
 8006a48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e09a      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d1d9      	bne.n	8006a18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006aa6:	b662      	cpsie	i
}
 8006aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006adc:	e042      	b.n	8006b64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f001 ff0e 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e04c      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d118      	bne.n	8006b64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f ae94 	bne.w	8006896 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3728      	adds	r7, #40	; 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	00010004 	.word	0x00010004
 8006b98:	20000004 	.word	0x20000004
 8006b9c:	14f8b589 	.word	0x14f8b589

08006ba0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d003      	beq.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x38>
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	f040 80b1 	bne.w	8006d3a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <HAL_I2C_EV_IRQHandler+0x6e>
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006bf8:	d003      	beq.n	8006c02 <HAL_I2C_EV_IRQHandler+0x62>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c00:	d101      	bne.n	8006c06 <HAL_I2C_EV_IRQHandler+0x66>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <HAL_I2C_EV_IRQHandler+0x68>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	f000 8114 	beq.w	8006e36 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x90>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fef9 	bl	8008a1a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fcb9 	bl	80075a0 <I2C_Master_SB>
 8006c2e:	e083      	b.n	8006d38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_I2C_EV_IRQHandler+0xac>
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fd30 	bl	80076aa <I2C_Master_ADD10>
 8006c4a:	e075      	b.n	8006d38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <HAL_I2C_EV_IRQHandler+0xc8>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fd4b 	bl	80076fc <I2C_Master_ADDR>
 8006c66:	e067      	b.n	8006d38 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d036      	beq.n	8006ce0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c80:	f000 80db 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <HAL_I2C_EV_IRQHandler+0x10a>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_I2C_EV_IRQHandler+0x10a>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f003 0304 	and.w	r3, r3, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d103      	bne.n	8006caa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f92d 	bl	8006f02 <I2C_MasterTransmit_TXE>
 8006ca8:	e046      	b.n	8006d38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 80c2 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80bc 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b21      	cmp	r3, #33	; 0x21
 8006cc6:	d103      	bne.n	8006cd0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f9b6 	bl	800703a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cce:	e0b4      	b.n	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	f040 80b1 	bne.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fa24 	bl	8007126 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cde:	e0ac      	b.n	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cee:	f000 80a4 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <HAL_I2C_EV_IRQHandler+0x178>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <HAL_I2C_EV_IRQHandler+0x178>
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d103      	bne.n	8006d18 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 faa0 	bl	8007256 <I2C_MasterReceive_RXNE>
 8006d16:	e00f      	b.n	8006d38 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 808b 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8085 	beq.w	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fb4b 	bl	80073cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d36:	e080      	b.n	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
 8006d38:	e07f      	b.n	8006e3a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	e007      	b.n	8006d5c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <HAL_I2C_EV_IRQHandler+0x1ea>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d80:	69b9      	ldr	r1, [r7, #24]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 ff11 	bl	8007baa <I2C_Slave_ADDR>
 8006d88:	e05a      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_I2C_EV_IRQHandler+0x206>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 ff4c 	bl	8007c3c <I2C_Slave_STOPF>
 8006da4:	e04c      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b21      	cmp	r3, #33	; 0x21
 8006daa:	d002      	beq.n	8006db2 <HAL_I2C_EV_IRQHandler+0x212>
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b29      	cmp	r3, #41	; 0x29
 8006db0:	d120      	bne.n	8006df4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <HAL_I2C_EV_IRQHandler+0x238>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <HAL_I2C_EV_IRQHandler+0x238>
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fe2e 	bl	8007a32 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dd6:	e032      	b.n	8006e3e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d02d      	beq.n	8006e3e <HAL_I2C_EV_IRQHandler+0x29e>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d028      	beq.n	8006e3e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fe5d 	bl	8007aac <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006df2:	e024      	b.n	8006e3e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00d      	beq.n	8006e1a <HAL_I2C_EV_IRQHandler+0x27a>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_I2C_EV_IRQHandler+0x27a>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fe6a 	bl	8007aec <I2C_SlaveReceive_RXNE>
 8006e18:	e012      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fe9a 	bl	8007b68 <I2C_SlaveReceive_BTF>
 8006e34:	e004      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr

08006ef0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr

08006f02 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f18:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d150      	bne.n	8006fca <I2C_MasterTransmit_TXE+0xc8>
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b21      	cmp	r3, #33	; 0x21
 8006f2c:	d14d      	bne.n	8006fca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d01d      	beq.n	8006f70 <I2C_MasterTransmit_TXE+0x6e>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d01a      	beq.n	8006f70 <I2C_MasterTransmit_TXE+0x6e>
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f40:	d016      	beq.n	8006f70 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f50:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2211      	movs	r2, #17
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff6c 	bl	8006e46 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f6e:	e060      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f7e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d107      	bne.n	8006fba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff ff81 	bl	8006eba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fb8:	e03b      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff ff3f 	bl	8006e46 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fc8:	e033      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
 8006fcc:	2b21      	cmp	r3, #33	; 0x21
 8006fce:	d005      	beq.n	8006fdc <I2C_MasterTransmit_TXE+0xda>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d12d      	bne.n	8007032 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2b22      	cmp	r3, #34	; 0x22
 8006fda:	d12a      	bne.n	8007032 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d108      	bne.n	8006ff8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ff6:	e01c      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d103      	bne.n	800700c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f88e 	bl	8007126 <I2C_MemoryTransmit_TXE_BTF>
}
 800700a:	e012      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007030:	e7ff      	b.n	8007032 <I2C_MasterTransmit_TXE+0x130>
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b21      	cmp	r3, #33	; 0x21
 8007052:	d164      	bne.n	800711e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d012      	beq.n	8007084 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007082:	e04c      	b.n	800711e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b08      	cmp	r3, #8
 8007088:	d01d      	beq.n	80070c6 <I2C_MasterTransmit_BTF+0x8c>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b20      	cmp	r3, #32
 800708e:	d01a      	beq.n	80070c6 <I2C_MasterTransmit_BTF+0x8c>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007096:	d016      	beq.n	80070c6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070a6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2211      	movs	r2, #17
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fec1 	bl	8006e46 <HAL_I2C_MasterTxCpltCallback>
}
 80070c4:	e02b      	b.n	800711e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070d4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	d107      	bne.n	8007110 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fed6 	bl	8006eba <HAL_I2C_MemTxCpltCallback>
}
 800710e:	e006      	b.n	800711e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff fe94 	bl	8006e46 <HAL_I2C_MasterTxCpltCallback>
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713a:	2b00      	cmp	r3, #0
 800713c:	d11d      	bne.n	800717a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10b      	bne.n	800715e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	b2da      	uxtb	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800715c:	e077      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	b29b      	uxth	r3, r3
 8007164:	121b      	asrs	r3, r3, #8
 8007166:	b2da      	uxtb	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007178:	e069      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	2b01      	cmp	r3, #1
 8007180:	d10b      	bne.n	800719a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007186:	b2da      	uxtb	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007198:	e059      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d152      	bne.n	8007248 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b22      	cmp	r3, #34	; 0x22
 80071a6:	d10d      	bne.n	80071c4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071c2:	e044      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d015      	beq.n	80071fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b21      	cmp	r3, #33	; 0x21
 80071d2:	d112      	bne.n	80071fa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071f8:	e029      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d124      	bne.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b21      	cmp	r3, #33	; 0x21
 8007208:	d121      	bne.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007218:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007228:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff fe3a 	bl	8006eba <HAL_I2C_MemTxCpltCallback>
}
 8007246:	e002      	b.n	800724e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff f933 	bl	80064b4 <I2C_Flush_DR>
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b22      	cmp	r3, #34	; 0x22
 8007268:	f040 80ac 	bne.w	80073c4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007270:	b29b      	uxth	r3, r3
 8007272:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b03      	cmp	r3, #3
 8007278:	d921      	bls.n	80072be <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	f040 808c 	bne.w	80073c4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072bc:	e082      	b.n	80073c4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d075      	beq.n	80073b2 <I2C_MasterReceive_RXNE+0x15c>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d002      	beq.n	80072d2 <I2C_MasterReceive_RXNE+0x7c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d16f      	bne.n	80073b2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fae4 	bl	80088a0 <I2C_WaitOnSTOPRequestThroughIT>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d142      	bne.n	8007364 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691a      	ldr	r2, [r3, #16]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d10a      	bne.n	800734e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fdc0 	bl	8006ecc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800734c:	e03a      	b.n	80073c4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2212      	movs	r2, #18
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff fd7b 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007362:	e02f      	b.n	80073c4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007372:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2220      	movs	r2, #32
 800739e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fd97 	bl	8006ede <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073b0:	e008      	b.n	80073c4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c0:	605a      	str	r2, [r3, #4]
}
 80073c2:	e7ff      	b.n	80073c4 <I2C_MasterReceive_RXNE+0x16e>
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d11b      	bne.n	800741c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	3b01      	subs	r3, #1
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800741a:	e0bd      	b.n	8007598 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b03      	cmp	r3, #3
 8007424:	d129      	bne.n	800747a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007434:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d00a      	beq.n	8007452 <I2C_MasterReceive_BTF+0x86>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d007      	beq.n	8007452 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007450:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007478:	e08e      	b.n	8007598 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d176      	bne.n	8007572 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d002      	beq.n	8007490 <I2C_MasterReceive_BTF+0xc4>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b10      	cmp	r3, #16
 800748e:	d108      	bne.n	80074a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	e019      	b.n	80074d6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d002      	beq.n	80074ae <I2C_MasterReceive_BTF+0xe2>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d108      	bne.n	80074c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e00a      	b.n	80074d6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d007      	beq.n	80074d6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007530:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b40      	cmp	r3, #64	; 0x40
 8007544:	d10a      	bne.n	800755c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fcb9 	bl	8006ecc <HAL_I2C_MemRxCpltCallback>
}
 800755a:	e01d      	b.n	8007598 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2212      	movs	r2, #18
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fc74 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
}
 8007570:	e012      	b.n	8007598 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d117      	bne.n	80075e4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075cc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075ce:	e067      	b.n	80076a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	611a      	str	r2, [r3, #16]
}
 80075e2:	e05d      	b.n	80076a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ec:	d133      	bne.n	8007656 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b21      	cmp	r3, #33	; 0x21
 80075f8:	d109      	bne.n	800760e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800760a:	611a      	str	r2, [r3, #16]
 800760c:	e008      	b.n	8007620 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	b2da      	uxtb	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <I2C_Master_SB+0x92>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d108      	bne.n	8007644 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d032      	beq.n	80076a0 <I2C_Master_SB+0x100>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02d      	beq.n	80076a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007652:	605a      	str	r2, [r3, #4]
}
 8007654:	e024      	b.n	80076a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10e      	bne.n	800767c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	b29b      	uxth	r3, r3
 8007664:	11db      	asrs	r3, r3, #7
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0306 	and.w	r3, r3, #6
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f063 030f 	orn	r3, r3, #15
 8007672:	b2da      	uxtb	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	611a      	str	r2, [r3, #16]
}
 800767a:	e011      	b.n	80076a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10d      	bne.n	80076a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	b29b      	uxth	r3, r3
 800768a:	11db      	asrs	r3, r3, #7
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f063 030e 	orn	r3, r3, #14
 8007698:	b2da      	uxtb	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	611a      	str	r2, [r3, #16]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr

080076aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <I2C_Master_ADD10+0x26>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00c      	beq.n	80076f2 <I2C_Master_ADD10+0x48>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f0:	605a      	str	r2, [r3, #4]
  }
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr

080076fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b091      	sub	sp, #68	; 0x44
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800770a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b22      	cmp	r3, #34	; 0x22
 8007724:	f040 8174 	bne.w	8007a10 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10f      	bne.n	8007750 <I2C_Master_ADDR+0x54>
 8007730:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d10b      	bne.n	8007750 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007738:	2300      	movs	r3, #0
 800773a:	633b      	str	r3, [r7, #48]	; 0x30
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	633b      	str	r3, [r7, #48]	; 0x30
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	e16b      	b.n	8007a28 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d11d      	bne.n	8007794 <I2C_Master_ADDR+0x98>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007760:	d118      	bne.n	8007794 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007762:	2300      	movs	r3, #0
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007786:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	651a      	str	r2, [r3, #80]	; 0x50
 8007792:	e149      	b.n	8007a28 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d113      	bne.n	80077c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800779e:	2300      	movs	r3, #0
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e120      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	f040 808a 	bne.w	80078e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077d8:	d137      	bne.n	800784a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f8:	d113      	bne.n	8007822 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007808:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780a:	2300      	movs	r3, #0
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	e0f2      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007822:	2300      	movs	r3, #0
 8007824:	623b      	str	r3, [r7, #32]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e0de      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b08      	cmp	r3, #8
 800784e:	d02e      	beq.n	80078ae <I2C_Master_ADDR+0x1b2>
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	2b20      	cmp	r3, #32
 8007854:	d02b      	beq.n	80078ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007858:	2b12      	cmp	r3, #18
 800785a:	d102      	bne.n	8007862 <I2C_Master_ADDR+0x166>
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	2b01      	cmp	r3, #1
 8007860:	d125      	bne.n	80078ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	2b04      	cmp	r3, #4
 8007866:	d00e      	beq.n	8007886 <I2C_Master_ADDR+0x18a>
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2b02      	cmp	r3, #2
 800786c:	d00b      	beq.n	8007886 <I2C_Master_ADDR+0x18a>
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b10      	cmp	r3, #16
 8007872:	d008      	beq.n	8007886 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e007      	b.n	8007896 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007894:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	e0ac      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e090      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d158      	bne.n	80079a2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d021      	beq.n	800793a <I2C_Master_ADDR+0x23e>
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d01e      	beq.n	800793a <I2C_Master_ADDR+0x23e>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d01b      	beq.n	800793a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007910:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e012      	b.n	8007960 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007948:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800796e:	d14b      	bne.n	8007a08 <I2C_Master_ADDR+0x30c>
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007976:	d00b      	beq.n	8007990 <I2C_Master_ADDR+0x294>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	2b01      	cmp	r3, #1
 800797c:	d008      	beq.n	8007990 <I2C_Master_ADDR+0x294>
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	2b08      	cmp	r3, #8
 8007982:	d005      	beq.n	8007990 <I2C_Master_ADDR+0x294>
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	2b10      	cmp	r3, #16
 8007988:	d002      	beq.n	8007990 <I2C_Master_ADDR+0x294>
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b20      	cmp	r3, #32
 800798e:	d13b      	bne.n	8007a08 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800799e:	605a      	str	r2, [r3, #4]
 80079a0:	e032      	b.n	8007a08 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c0:	d117      	bne.n	80079f2 <I2C_Master_ADDR+0x2f6>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079c8:	d00b      	beq.n	80079e2 <I2C_Master_ADDR+0x2e6>
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d008      	beq.n	80079e2 <I2C_Master_ADDR+0x2e6>
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d005      	beq.n	80079e2 <I2C_Master_ADDR+0x2e6>
 80079d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d8:	2b10      	cmp	r3, #16
 80079da:	d002      	beq.n	80079e2 <I2C_Master_ADDR+0x2e6>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d107      	bne.n	80079f2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a0e:	e00b      	b.n	8007a28 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a10:	2300      	movs	r3, #0
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	60bb      	str	r3, [r7, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	68bb      	ldr	r3, [r7, #8]
}
 8007a26:	e7ff      	b.n	8007a28 <I2C_Master_ADDR+0x32c>
 8007a28:	bf00      	nop
 8007a2a:	3744      	adds	r7, #68	; 0x44
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a40:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02b      	beq.n	8007aa4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d114      	bne.n	8007aa4 <I2C_SlaveTransmit_TXE+0x72>
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b29      	cmp	r3, #41	; 0x29
 8007a7e:	d111      	bne.n	8007aa4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2221      	movs	r2, #33	; 0x21
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2228      	movs	r2, #40	; 0x28
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f9e3 	bl	8006e6a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d011      	beq.n	8007ae2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02c      	beq.n	8007b60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d114      	bne.n	8007b60 <I2C_SlaveReceive_RXNE+0x74>
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3a:	d111      	bne.n	8007b60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2222      	movs	r2, #34	; 0x22
 8007b50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2228      	movs	r2, #40	; 0x28
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff f98e 	bl	8006e7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d012      	beq.n	8007ba0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bc4:	2b28      	cmp	r3, #40	; 0x28
 8007bc6:	d125      	bne.n	8007c14 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	81bb      	strh	r3, [r7, #12]
 8007bf6:	e002      	b.n	8007bfe <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c06:	89ba      	ldrh	r2, [r7, #12]
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f93e 	bl	8006e8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c12:	e00e      	b.n	8007c32 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60bb      	str	r3, [r7, #8]
 8007c28:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c98:	d172      	bne.n	8007d80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b22      	cmp	r3, #34	; 0x22
 8007c9e:	d002      	beq.n	8007ca6 <I2C_Slave_STOPF+0x6a>
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d135      	bne.n	8007d12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f043 0204 	orr.w	r2, r3, #4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd fed8 	bl	8005a94 <HAL_DMA_GetState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d049      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	4a69      	ldr	r2, [pc, #420]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007cf0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd fe54 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03d      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d10:	e035      	b.n	8007d7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f043 0204 	orr.w	r2, r3, #4
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fea2 	bl	8005a94 <HAL_DMA_GetState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d014      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	4a4e      	ldr	r2, [pc, #312]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007d5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fe1e 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	e000      	b.n	8007d80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d03e      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d112      	bne.n	8007dbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d112      	bne.n	8007df2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	f043 0204 	orr.w	r2, r3, #4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f843 	bl	8007e9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e16:	e039      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d109      	bne.n	8007e32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2228      	movs	r2, #40	; 0x28
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff f825 	bl	8006e7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b28      	cmp	r3, #40	; 0x28
 8007e3c:	d111      	bne.n	8007e62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <I2C_Slave_STOPF+0x25c>)
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff f824 	bl	8006ea8 <HAL_I2C_ListenCpltCallback>
}
 8007e60:	e014      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	2b22      	cmp	r3, #34	; 0x22
 8007e68:	d002      	beq.n	8007e70 <I2C_Slave_STOPF+0x234>
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b22      	cmp	r3, #34	; 0x22
 8007e6e:	d10d      	bne.n	8007e8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fff8 	bl	8006e7c <HAL_I2C_SlaveRxCpltCallback>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	080083fd 	.word	0x080083fd
 8007e98:	ffff0000 	.word	0xffff0000

08007e9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d002      	beq.n	8007ec0 <I2C_ITError+0x24>
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d10a      	bne.n	8007ed6 <I2C_ITError+0x3a>
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b22      	cmp	r3, #34	; 0x22
 8007ec4:	d107      	bne.n	8007ed6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ed4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007edc:	2b28      	cmp	r3, #40	; 0x28
 8007ede:	d107      	bne.n	8007ef0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2228      	movs	r2, #40	; 0x28
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007eee:	e015      	b.n	8007f1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efe:	d00a      	beq.n	8007f16 <I2C_ITError+0x7a>
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	2b60      	cmp	r3, #96	; 0x60
 8007f04:	d007      	beq.n	8007f16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f2a:	d162      	bne.n	8007ff2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d020      	beq.n	8007f8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	4a6a      	ldr	r2, [pc, #424]	; (80080f8 <I2C_ITError+0x25c>)
 8007f50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd fd24 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8089 	beq.w	8008076 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f86:	4610      	mov	r0, r2
 8007f88:	4798      	blx	r3
 8007f8a:	e074      	b.n	8008076 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	4a59      	ldr	r2, [pc, #356]	; (80080f8 <I2C_ITError+0x25c>)
 8007f92:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fd fd03 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d068      	beq.n	8008076 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d10b      	bne.n	8007fca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0201 	bic.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fec:	4610      	mov	r0, r2
 8007fee:	4798      	blx	r3
 8007ff0:	e041      	b.n	8008076 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b60      	cmp	r3, #96	; 0x60
 8007ffc:	d125      	bne.n	800804a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d10b      	bne.n	8008032 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0201 	bic.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe ff54 	bl	8006ef0 <HAL_I2C_AbortCpltCallback>
 8008048:	e015      	b.n	8008076 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d10b      	bne.n	8008070 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe ff34 	bl	8006ede <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10e      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d113      	bne.n	80080f0 <I2C_ITError+0x254>
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b28      	cmp	r3, #40	; 0x28
 80080cc:	d110      	bne.n	80080f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <I2C_ITError+0x260>)
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe fedc 	bl	8006ea8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	080083fd 	.word	0x080083fd
 80080fc:	ffff0000 	.word	0xffff0000

08008100 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4603      	mov	r3, r0
 8008110:	817b      	strh	r3, [r7, #10]
 8008112:	460b      	mov	r3, r1
 8008114:	813b      	strh	r3, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2200      	movs	r2, #0
 8008132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 fa08 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00d      	beq.n	800815e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008150:	d103      	bne.n	800815a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e05f      	b.n	800821e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800815e:	897b      	ldrh	r3, [r7, #10]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800816c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	6a3a      	ldr	r2, [r7, #32]
 8008172:	492d      	ldr	r1, [pc, #180]	; (8008228 <I2C_RequestMemoryWrite+0x128>)
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fa63 	bl	8008640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e04c      	b.n	800821e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	6a39      	ldr	r1, [r7, #32]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 faee 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d107      	bne.n	80081c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e02b      	b.n	800821e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d105      	bne.n	80081d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081cc:	893b      	ldrh	r3, [r7, #8]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	611a      	str	r2, [r3, #16]
 80081d6:	e021      	b.n	800821c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081d8:	893b      	ldrh	r3, [r7, #8]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	b29b      	uxth	r3, r3
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	6a39      	ldr	r1, [r7, #32]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fac8 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00d      	beq.n	8008212 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d107      	bne.n	800820e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800820c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e005      	b.n	800821e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008212:	893b      	ldrh	r3, [r7, #8]
 8008214:	b2da      	uxtb	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	00010002 	.word	0x00010002

0800822c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4603      	mov	r3, r0
 800823c:	817b      	strh	r3, [r7, #10]
 800823e:	460b      	mov	r3, r1
 8008240:	813b      	strh	r3, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008254:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	2200      	movs	r2, #0
 800826e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 f96a 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00d      	beq.n	800829a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828c:	d103      	bne.n	8008296 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e0aa      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800829a:	897b      	ldrh	r3, [r7, #10]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	6a3a      	ldr	r2, [r7, #32]
 80082ae:	4952      	ldr	r1, [pc, #328]	; (80083f8 <I2C_RequestMemoryRead+0x1cc>)
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f9c5 	bl	8008640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e097      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d8:	6a39      	ldr	r1, [r7, #32]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 fa50 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d107      	bne.n	80082fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e076      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d105      	bne.n	8008314 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008308:	893b      	ldrh	r3, [r7, #8]
 800830a:	b2da      	uxtb	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	611a      	str	r2, [r3, #16]
 8008312:	e021      	b.n	8008358 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008314:	893b      	ldrh	r3, [r7, #8]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	b29b      	uxth	r3, r3
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008324:	6a39      	ldr	r1, [r7, #32]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fa2a 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00d      	beq.n	800834e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2b04      	cmp	r3, #4
 8008338:	d107      	bne.n	800834a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e050      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800834e:	893b      	ldrh	r3, [r7, #8]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835a:	6a39      	ldr	r1, [r7, #32]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fa0f 	bl	8008780 <I2C_WaitOnTXEFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00d      	beq.n	8008384 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	2b04      	cmp	r3, #4
 800836e:	d107      	bne.n	8008380 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800837e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e035      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008392:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2200      	movs	r2, #0
 800839c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f8d3 	bl	800854c <I2C_WaitOnFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00d      	beq.n	80083c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	d103      	bne.n	80083c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e013      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083c8:	897b      	ldrh	r3, [r7, #10]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	6a3a      	ldr	r2, [r7, #32]
 80083dc:	4906      	ldr	r1, [pc, #24]	; (80083f8 <I2C_RequestMemoryRead+0x1cc>)
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f92e 	bl	8008640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	00010002 	.word	0x00010002

080083fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008416:	4b4b      	ldr	r3, [pc, #300]	; (8008544 <I2C_DMAAbort+0x148>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	08db      	lsrs	r3, r3, #3
 800841c:	4a4a      	ldr	r2, [pc, #296]	; (8008548 <I2C_DMAAbort+0x14c>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	0a1a      	lsrs	r2, r3, #8
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	00da      	lsls	r2, r3, #3
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008442:	e00a      	b.n	800845a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3b01      	subs	r3, #1
 8008448:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008458:	d0ea      	beq.n	8008430 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	2200      	movs	r2, #0
 8008468:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008476:	2200      	movs	r2, #0
 8008478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008488:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2200      	movs	r2, #0
 800848e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	2200      	movs	r2, #0
 800849e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ac:	2200      	movs	r2, #0
 80084ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0201 	bic.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b60      	cmp	r3, #96	; 0x60
 80084ca:	d10e      	bne.n	80084ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2200      	movs	r2, #0
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084e2:	6978      	ldr	r0, [r7, #20]
 80084e4:	f7fe fd04 	bl	8006ef0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084e8:	e027      	b.n	800853a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084ea:	7cfb      	ldrb	r3, [r7, #19]
 80084ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084f0:	2b28      	cmp	r3, #40	; 0x28
 80084f2:	d117      	bne.n	8008524 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008512:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2228      	movs	r2, #40	; 0x28
 800851e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008522:	e007      	b.n	8008534 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008534:	6978      	ldr	r0, [r7, #20]
 8008536:	f7fe fcd2 	bl	8006ede <HAL_I2C_ErrorCallback>
}
 800853a:	bf00      	nop
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000004 	.word	0x20000004
 8008548:	14f8b589 	.word	0x14f8b589

0800854c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800855c:	e048      	b.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d044      	beq.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008566:	f7fc fc61 	bl	8004e2c <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d302      	bcc.n	800857c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d139      	bne.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b01      	cmp	r3, #1
 8008584:	d10d      	bne.n	80085a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	43da      	mvns	r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4013      	ands	r3, r2
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf0c      	ite	eq
 8008598:	2301      	moveq	r3, #1
 800859a:	2300      	movne	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	e00c      	b.n	80085bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	43da      	mvns	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4013      	ands	r3, r2
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bf0c      	ite	eq
 80085b4:	2301      	moveq	r3, #1
 80085b6:	2300      	movne	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d116      	bne.n	80085f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085dc:	f043 0220 	orr.w	r2, r3, #32
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e023      	b.n	8008638 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	0c1b      	lsrs	r3, r3, #16
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d10d      	bne.n	8008616 <I2C_WaitOnFlagUntilTimeout+0xca>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	43da      	mvns	r2, r3
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4013      	ands	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	e00c      	b.n	8008630 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	43da      	mvns	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	bf0c      	ite	eq
 8008628:	2301      	moveq	r3, #1
 800862a:	2300      	movne	r3, #0
 800862c:	b2db      	uxtb	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	79fb      	ldrb	r3, [r7, #7]
 8008632:	429a      	cmp	r2, r3
 8008634:	d093      	beq.n	800855e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800864e:	e071      	b.n	8008734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800865a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865e:	d123      	bne.n	80086a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800866e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f043 0204 	orr.w	r2, r3, #4
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e067      	b.n	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d041      	beq.n	8008734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b0:	f7fc fbbc 	bl	8004e2c <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d302      	bcc.n	80086c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d136      	bne.n	8008734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	0c1b      	lsrs	r3, r3, #16
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10c      	bne.n	80086ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	43da      	mvns	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4013      	ands	r3, r2
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bf14      	ite	ne
 80086e2:	2301      	movne	r3, #1
 80086e4:	2300      	moveq	r3, #0
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	e00b      	b.n	8008702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	43da      	mvns	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	4013      	ands	r3, r2
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf14      	ite	ne
 80086fc:	2301      	movne	r3, #1
 80086fe:	2300      	moveq	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d016      	beq.n	8008734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	f043 0220 	orr.w	r2, r3, #32
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e021      	b.n	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	0c1b      	lsrs	r3, r3, #16
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b01      	cmp	r3, #1
 800873c:	d10c      	bne.n	8008758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	43da      	mvns	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	e00b      	b.n	8008770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	43da      	mvns	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4013      	ands	r3, r2
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	bf14      	ite	ne
 800876a:	2301      	movne	r3, #1
 800876c:	2300      	moveq	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af6d 	bne.w	8008650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800878c:	e034      	b.n	80087f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f915 	bl	80089be <I2C_IsAcknowledgeFailed>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e034      	b.n	8008808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d028      	beq.n	80087f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a6:	f7fc fb41 	bl	8004e2c <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d302      	bcc.n	80087bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11d      	bne.n	80087f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d016      	beq.n	80087f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e007      	b.n	8008808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b80      	cmp	r3, #128	; 0x80
 8008804:	d1c3      	bne.n	800878e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800881c:	e034      	b.n	8008888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f000 f8cd 	bl	80089be <I2C_IsAcknowledgeFailed>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e034      	b.n	8008898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d028      	beq.n	8008888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008836:	f7fc faf9 	bl	8004e2c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11d      	bne.n	8008888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b04      	cmp	r3, #4
 8008858:	d016      	beq.n	8008888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	f043 0220 	orr.w	r2, r3, #32
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e007      	b.n	8008898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b04      	cmp	r3, #4
 8008894:	d1c3      	bne.n	800881e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80088ac:	4b13      	ldr	r3, [pc, #76]	; (80088fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	08db      	lsrs	r3, r3, #3
 80088b2:	4a13      	ldr	r2, [pc, #76]	; (8008900 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	0a1a      	lsrs	r2, r3, #8
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d107      	bne.n	80088de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f043 0220 	orr.w	r2, r3, #32
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e008      	b.n	80088f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ec:	d0e9      	beq.n	80088c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000004 	.word	0x20000004
 8008900:	14f8b589 	.word	0x14f8b589

08008904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008910:	e049      	b.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b10      	cmp	r3, #16
 800891e:	d119      	bne.n	8008954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0210 	mvn.w	r2, #16
 8008928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e030      	b.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008954:	f7fc fa6a 	bl	8004e2c <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d11d      	bne.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d016      	beq.n	80089a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2220      	movs	r2, #32
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f043 0220 	orr.w	r2, r3, #32
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e007      	b.n	80089b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	d1ae      	bne.n	8008912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d4:	d11b      	bne.n	8008a0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f043 0204 	orr.w	r2, r3, #4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr

08008a1a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a2a:	d103      	bne.n	8008a34 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a32:	e007      	b.n	8008a44 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a3c:	d102      	bne.n	8008a44 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2208      	movs	r2, #8
 8008a42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr

08008a4e <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8008a52:	bf20      	wfe
  __asm volatile( "nop" );
 8008a54:	bf00      	nop
}
 8008a56:	bf00      	nop
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
	...

08008a60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
}
 8008a6a:	bf00      	nop
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	420e0020 	.word	0x420e0020

08008a78 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008a8a:	f023 0302 	bic.w	r3, r3, #2
 8008a8e:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8008a90:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f023 0201 	bic.w	r2, r3, #1
 8008a98:	490e      	ldr	r1, [pc, #56]	; (8008ad4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008aa0:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <HAL_PWR_EnterSTOPMode+0x60>)
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	4a0c      	ldr	r2, [pc, #48]	; (8008ad8 <HAL_PWR_EnterSTOPMode+0x60>)
 8008aa6:	f043 0304 	orr.w	r3, r3, #4
 8008aaa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008ab2:	bf30      	wfi
 8008ab4:	e004      	b.n	8008ac0 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008ab6:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8008ab8:	f7ff ffc9 	bl	8008a4e <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8008abc:	f7ff ffc7 	bl	8008a4e <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <HAL_PWR_EnterSTOPMode+0x60>)
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <HAL_PWR_EnterSTOPMode+0x60>)
 8008ac6:	f023 0304 	bic.w	r3, r3, #4
 8008aca:	6113      	str	r3, [r2, #16]
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40007000 	.word	0x40007000
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e272      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 8087 	beq.w	8008c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008afc:	4b92      	ldr	r3, [pc, #584]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f003 030c 	and.w	r3, r3, #12
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d00c      	beq.n	8008b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b08:	4b8f      	ldr	r3, [pc, #572]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f003 030c 	and.w	r3, r3, #12
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d112      	bne.n	8008b3a <HAL_RCC_OscConfig+0x5e>
 8008b14:	4b8c      	ldr	r3, [pc, #560]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b20:	d10b      	bne.n	8008b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b22:	4b89      	ldr	r3, [pc, #548]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d06c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x12c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d168      	bne.n	8008c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e24c      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b42:	d106      	bne.n	8008b52 <HAL_RCC_OscConfig+0x76>
 8008b44:	4b80      	ldr	r3, [pc, #512]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a7f      	ldr	r2, [pc, #508]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e02e      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd4>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10c      	bne.n	8008b74 <HAL_RCC_OscConfig+0x98>
 8008b5a:	4b7b      	ldr	r3, [pc, #492]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a7a      	ldr	r2, [pc, #488]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	4b78      	ldr	r3, [pc, #480]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a77      	ldr	r2, [pc, #476]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e01d      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd4>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b7c:	d10c      	bne.n	8008b98 <HAL_RCC_OscConfig+0xbc>
 8008b7e:	4b72      	ldr	r3, [pc, #456]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a71      	ldr	r2, [pc, #452]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	4b6f      	ldr	r3, [pc, #444]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a6e      	ldr	r2, [pc, #440]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e00b      	b.n	8008bb0 <HAL_RCC_OscConfig+0xd4>
 8008b98:	4b6b      	ldr	r3, [pc, #428]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a6a      	ldr	r2, [pc, #424]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	4b68      	ldr	r3, [pc, #416]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a67      	ldr	r2, [pc, #412]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d013      	beq.n	8008be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb8:	f7fc f938 	bl	8004e2c <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bbe:	e008      	b.n	8008bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc0:	f7fc f934 	bl	8004e2c <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	2b64      	cmp	r3, #100	; 0x64
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e200      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	4b5d      	ldr	r3, [pc, #372]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0f0      	beq.n	8008bc0 <HAL_RCC_OscConfig+0xe4>
 8008bde:	e014      	b.n	8008c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be0:	f7fc f924 	bl	8004e2c <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008be8:	f7fc f920 	bl	8004e2c <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b64      	cmp	r3, #100	; 0x64
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e1ec      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	4b53      	ldr	r3, [pc, #332]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f0      	bne.n	8008be8 <HAL_RCC_OscConfig+0x10c>
 8008c06:	e000      	b.n	8008c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d063      	beq.n	8008cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c16:	4b4c      	ldr	r3, [pc, #304]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f003 030c 	and.w	r3, r3, #12
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c22:	4b49      	ldr	r3, [pc, #292]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d11c      	bne.n	8008c68 <HAL_RCC_OscConfig+0x18c>
 8008c2e:	4b46      	ldr	r3, [pc, #280]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d116      	bne.n	8008c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c3a:	4b43      	ldr	r3, [pc, #268]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_RCC_OscConfig+0x176>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e1c0      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c52:	4b3d      	ldr	r3, [pc, #244]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	4939      	ldr	r1, [pc, #228]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c66:	e03a      	b.n	8008cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d020      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c70:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <HAL_RCC_OscConfig+0x270>)
 8008c72:	2201      	movs	r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c76:	f7fc f8d9 	bl	8004e2c <HAL_GetTick>
 8008c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c7e:	f7fc f8d5 	bl	8004e2c <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e1a1      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c90:	4b2d      	ldr	r3, [pc, #180]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d0f0      	beq.n	8008c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9c:	4b2a      	ldr	r3, [pc, #168]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4927      	ldr	r1, [pc, #156]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	600b      	str	r3, [r1, #0]
 8008cb0:	e015      	b.n	8008cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cb2:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <HAL_RCC_OscConfig+0x270>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb8:	f7fc f8b8 	bl	8004e2c <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cc0:	f7fc f8b4 	bl	8004e2c <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e180      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cd2:	4b1d      	ldr	r3, [pc, #116]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f0      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d03a      	beq.n	8008d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d019      	beq.n	8008d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cf2:	4b17      	ldr	r3, [pc, #92]	; (8008d50 <HAL_RCC_OscConfig+0x274>)
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cf8:	f7fc f898 	bl	8004e2c <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d00:	f7fc f894 	bl	8004e2c <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e160      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <HAL_RCC_OscConfig+0x26c>)
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f0      	beq.n	8008d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f000 fad0 	bl	80092c4 <RCC_Delay>
 8008d24:	e01c      	b.n	8008d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d26:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <HAL_RCC_OscConfig+0x274>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d2c:	f7fc f87e 	bl	8004e2c <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d32:	e00f      	b.n	8008d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d34:	f7fc f87a 	bl	8004e2c <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d908      	bls.n	8008d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e146      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
 8008d46:	bf00      	nop
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	42420000 	.word	0x42420000
 8008d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d54:	4b92      	ldr	r3, [pc, #584]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e9      	bne.n	8008d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 80a6 	beq.w	8008eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d72:	4b8b      	ldr	r3, [pc, #556]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10d      	bne.n	8008d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d7e:	4b88      	ldr	r3, [pc, #544]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	4a87      	ldr	r2, [pc, #540]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d88:	61d3      	str	r3, [r2, #28]
 8008d8a:	4b85      	ldr	r3, [pc, #532]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d92:	60bb      	str	r3, [r7, #8]
 8008d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d96:	2301      	movs	r3, #1
 8008d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d9a:	4b82      	ldr	r3, [pc, #520]	; (8008fa4 <HAL_RCC_OscConfig+0x4c8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d118      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008da6:	4b7f      	ldr	r3, [pc, #508]	; (8008fa4 <HAL_RCC_OscConfig+0x4c8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a7e      	ldr	r2, [pc, #504]	; (8008fa4 <HAL_RCC_OscConfig+0x4c8>)
 8008dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008db2:	f7fc f83b 	bl	8004e2c <HAL_GetTick>
 8008db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008db8:	e008      	b.n	8008dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dba:	f7fc f837 	bl	8004e2c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b64      	cmp	r3, #100	; 0x64
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e103      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dcc:	4b75      	ldr	r3, [pc, #468]	; (8008fa4 <HAL_RCC_OscConfig+0x4c8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d0f0      	beq.n	8008dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d106      	bne.n	8008dee <HAL_RCC_OscConfig+0x312>
 8008de0:	4b6f      	ldr	r3, [pc, #444]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	4a6e      	ldr	r2, [pc, #440]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	6213      	str	r3, [r2, #32]
 8008dec:	e02d      	b.n	8008e4a <HAL_RCC_OscConfig+0x36e>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10c      	bne.n	8008e10 <HAL_RCC_OscConfig+0x334>
 8008df6:	4b6a      	ldr	r3, [pc, #424]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	4a69      	ldr	r2, [pc, #420]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	6213      	str	r3, [r2, #32]
 8008e02:	4b67      	ldr	r3, [pc, #412]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	4a66      	ldr	r2, [pc, #408]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e08:	f023 0304 	bic.w	r3, r3, #4
 8008e0c:	6213      	str	r3, [r2, #32]
 8008e0e:	e01c      	b.n	8008e4a <HAL_RCC_OscConfig+0x36e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b05      	cmp	r3, #5
 8008e16:	d10c      	bne.n	8008e32 <HAL_RCC_OscConfig+0x356>
 8008e18:	4b61      	ldr	r3, [pc, #388]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	4a60      	ldr	r2, [pc, #384]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e1e:	f043 0304 	orr.w	r3, r3, #4
 8008e22:	6213      	str	r3, [r2, #32]
 8008e24:	4b5e      	ldr	r3, [pc, #376]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	4a5d      	ldr	r2, [pc, #372]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	6213      	str	r3, [r2, #32]
 8008e30:	e00b      	b.n	8008e4a <HAL_RCC_OscConfig+0x36e>
 8008e32:	4b5b      	ldr	r3, [pc, #364]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	4a5a      	ldr	r2, [pc, #360]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e38:	f023 0301 	bic.w	r3, r3, #1
 8008e3c:	6213      	str	r3, [r2, #32]
 8008e3e:	4b58      	ldr	r3, [pc, #352]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	4a57      	ldr	r2, [pc, #348]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e44:	f023 0304 	bic.w	r3, r3, #4
 8008e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d015      	beq.n	8008e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e52:	f7fb ffeb 	bl	8004e2c <HAL_GetTick>
 8008e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e58:	e00a      	b.n	8008e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e5a:	f7fb ffe7 	bl	8004e2c <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e0b1      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e70:	4b4b      	ldr	r3, [pc, #300]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d0ee      	beq.n	8008e5a <HAL_RCC_OscConfig+0x37e>
 8008e7c:	e014      	b.n	8008ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e7e:	f7fb ffd5 	bl	8004e2c <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e84:	e00a      	b.n	8008e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e86:	f7fb ffd1 	bl	8004e2c <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d901      	bls.n	8008e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e09b      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e9c:	4b40      	ldr	r3, [pc, #256]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008e9e:	6a1b      	ldr	r3, [r3, #32]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1ee      	bne.n	8008e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d105      	bne.n	8008eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eae:	4b3c      	ldr	r3, [pc, #240]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	4a3b      	ldr	r2, [pc, #236]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 8087 	beq.w	8008fd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ec4:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f003 030c 	and.w	r3, r3, #12
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d061      	beq.n	8008f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d146      	bne.n	8008f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ed8:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <HAL_RCC_OscConfig+0x4cc>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ede:	f7fb ffa5 	bl	8004e2c <HAL_GetTick>
 8008ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ee4:	e008      	b.n	8008ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ee6:	f7fb ffa1 	bl	8004e2c <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d901      	bls.n	8008ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e06d      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ef8:	4b29      	ldr	r3, [pc, #164]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f0      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0c:	d108      	bne.n	8008f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f0e:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	4921      	ldr	r1, [pc, #132]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f20:	4b1f      	ldr	r3, [pc, #124]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a19      	ldr	r1, [r3, #32]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	430b      	orrs	r3, r1
 8008f32:	491b      	ldr	r1, [pc, #108]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f38:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <HAL_RCC_OscConfig+0x4cc>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f3e:	f7fb ff75 	bl	8004e2c <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f44:	e008      	b.n	8008f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f46:	f7fb ff71 	bl	8004e2c <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e03d      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f58:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0f0      	beq.n	8008f46 <HAL_RCC_OscConfig+0x46a>
 8008f64:	e035      	b.n	8008fd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <HAL_RCC_OscConfig+0x4cc>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f6c:	f7fb ff5e 	bl	8004e2c <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f74:	f7fb ff5a 	bl	8004e2c <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e026      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <HAL_RCC_OscConfig+0x4c4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x498>
 8008f92:	e01e      	b.n	8008fd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d107      	bne.n	8008fac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e019      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
 8008fa0:	40021000 	.word	0x40021000
 8008fa4:	40007000 	.word	0x40007000
 8008fa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <HAL_RCC_OscConfig+0x500>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d106      	bne.n	8008fce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d001      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	40021000 	.word	0x40021000

08008fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0d0      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ff4:	4b6a      	ldr	r3, [pc, #424]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d910      	bls.n	8009024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009002:	4b67      	ldr	r3, [pc, #412]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f023 0207 	bic.w	r2, r3, #7
 800900a:	4965      	ldr	r1, [pc, #404]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	4313      	orrs	r3, r2
 8009010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009012:	4b63      	ldr	r3, [pc, #396]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d001      	beq.n	8009024 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0b8      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d020      	beq.n	8009072 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800903c:	4b59      	ldr	r3, [pc, #356]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	4a58      	ldr	r2, [pc, #352]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009046:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009054:	4b53      	ldr	r3, [pc, #332]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a52      	ldr	r2, [pc, #328]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800905a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800905e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009060:	4b50      	ldr	r3, [pc, #320]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	494d      	ldr	r1, [pc, #308]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800906e:	4313      	orrs	r3, r2
 8009070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d040      	beq.n	8009100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d107      	bne.n	8009096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009086:	4b47      	ldr	r3, [pc, #284]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d115      	bne.n	80090be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e07f      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d107      	bne.n	80090ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800909e:	4b41      	ldr	r3, [pc, #260]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d109      	bne.n	80090be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e073      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090ae:	4b3d      	ldr	r3, [pc, #244]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e06b      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090be:	4b39      	ldr	r3, [pc, #228]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f023 0203 	bic.w	r2, r3, #3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4936      	ldr	r1, [pc, #216]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090d0:	f7fb feac 	bl	8004e2c <HAL_GetTick>
 80090d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d6:	e00a      	b.n	80090ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090d8:	f7fb fea8 	bl	8004e2c <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d901      	bls.n	80090ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e053      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ee:	4b2d      	ldr	r3, [pc, #180]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f003 020c 	and.w	r2, r3, #12
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d1eb      	bne.n	80090d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009100:	4b27      	ldr	r3, [pc, #156]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d210      	bcs.n	8009130 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800910e:	4b24      	ldr	r3, [pc, #144]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f023 0207 	bic.w	r2, r3, #7
 8009116:	4922      	ldr	r1, [pc, #136]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	4313      	orrs	r3, r2
 800911c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d001      	beq.n	8009130 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e032      	b.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d008      	beq.n	800914e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800913c:	4b19      	ldr	r3, [pc, #100]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	4916      	ldr	r1, [pc, #88]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800914a:	4313      	orrs	r3, r2
 800914c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800915a:	4b12      	ldr	r3, [pc, #72]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	490e      	ldr	r1, [pc, #56]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 800916a:	4313      	orrs	r3, r2
 800916c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800916e:	f000 f821 	bl	80091b4 <HAL_RCC_GetSysClockFreq>
 8009172:	4602      	mov	r2, r0
 8009174:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	091b      	lsrs	r3, r3, #4
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	490a      	ldr	r1, [pc, #40]	; (80091a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009180:	5ccb      	ldrb	r3, [r1, r3]
 8009182:	fa22 f303 	lsr.w	r3, r2, r3
 8009186:	4a09      	ldr	r2, [pc, #36]	; (80091ac <HAL_RCC_ClockConfig+0x1cc>)
 8009188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800918a:	4b09      	ldr	r3, [pc, #36]	; (80091b0 <HAL_RCC_ClockConfig+0x1d0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f7fb fe0a 	bl	8004da8 <HAL_InitTick>

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	40022000 	.word	0x40022000
 80091a4:	40021000 	.word	0x40021000
 80091a8:	0800d654 	.word	0x0800d654
 80091ac:	20000004 	.word	0x20000004
 80091b0:	20000008 	.word	0x20000008

080091b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	2300      	movs	r3, #0
 80091c0:	60bb      	str	r3, [r7, #8]
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	2300      	movs	r3, #0
 80091c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80091ce:	4b1e      	ldr	r3, [pc, #120]	; (8009248 <HAL_RCC_GetSysClockFreq+0x94>)
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 030c 	and.w	r3, r3, #12
 80091da:	2b04      	cmp	r3, #4
 80091dc:	d002      	beq.n	80091e4 <HAL_RCC_GetSysClockFreq+0x30>
 80091de:	2b08      	cmp	r3, #8
 80091e0:	d003      	beq.n	80091ea <HAL_RCC_GetSysClockFreq+0x36>
 80091e2:	e027      	b.n	8009234 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091e4:	4b19      	ldr	r3, [pc, #100]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 80091e6:	613b      	str	r3, [r7, #16]
      break;
 80091e8:	e027      	b.n	800923a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	0c9b      	lsrs	r3, r3, #18
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	4a17      	ldr	r2, [pc, #92]	; (8009250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80091f4:	5cd3      	ldrb	r3, [r2, r3]
 80091f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <HAL_RCC_GetSysClockFreq+0x94>)
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	0c5b      	lsrs	r3, r3, #17
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	4a11      	ldr	r2, [pc, #68]	; (8009254 <HAL_RCC_GetSysClockFreq+0xa0>)
 800920e:	5cd3      	ldrb	r3, [r2, r3]
 8009210:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <HAL_RCC_GetSysClockFreq+0x98>)
 8009216:	fb03 f202 	mul.w	r2, r3, r2
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e004      	b.n	800922e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a0c      	ldr	r2, [pc, #48]	; (8009258 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009228:	fb02 f303 	mul.w	r3, r2, r3
 800922c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	613b      	str	r3, [r7, #16]
      break;
 8009232:	e002      	b.n	800923a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <HAL_RCC_GetSysClockFreq+0xa8>)
 8009236:	613b      	str	r3, [r7, #16]
      break;
 8009238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800923a:	693b      	ldr	r3, [r7, #16]
}
 800923c:	4618      	mov	r0, r3
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40021000 	.word	0x40021000
 800924c:	00b71b00 	.word	0x00b71b00
 8009250:	0800d66c 	.word	0x0800d66c
 8009254:	0800d67c 	.word	0x0800d67c
 8009258:	003d0900 	.word	0x003d0900
 800925c:	007a1200 	.word	0x007a1200

08009260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <HAL_RCC_GetHCLKFreq+0x10>)
 8009266:	681b      	ldr	r3, [r3, #0]
}
 8009268:	4618      	mov	r0, r3
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr
 8009270:	20000004 	.word	0x20000004

08009274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009278:	f7ff fff2 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4903      	ldr	r1, [pc, #12]	; (8009298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40021000 	.word	0x40021000
 8009298:	0800d664 	.word	0x0800d664

0800929c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80092a0:	f7ff ffde 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	0adb      	lsrs	r3, r3, #11
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	4903      	ldr	r1, [pc, #12]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092b2:	5ccb      	ldrb	r3, [r1, r3]
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	40021000 	.word	0x40021000
 80092c0:	0800d664 	.word	0x0800d664

080092c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <RCC_Delay+0x34>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <RCC_Delay+0x38>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	0a5b      	lsrs	r3, r3, #9
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	fb02 f303 	mul.w	r3, r2, r3
 80092de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80092e0:	bf00      	nop
  }
  while (Delay --);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	60fa      	str	r2, [r7, #12]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f9      	bne.n	80092e0 <RCC_Delay+0x1c>
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bc80      	pop	{r7}
 80092f6:	4770      	bx	lr
 80092f8:	20000004 	.word	0x20000004
 80092fc:	10624dd3 	.word	0x10624dd3

08009300 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d07d      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009320:	4b4f      	ldr	r3, [pc, #316]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10d      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800932c:	4b4c      	ldr	r3, [pc, #304]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	4a4b      	ldr	r2, [pc, #300]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009336:	61d3      	str	r3, [r2, #28]
 8009338:	4b49      	ldr	r3, [pc, #292]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009340:	60bb      	str	r3, [r7, #8]
 8009342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009344:	2301      	movs	r3, #1
 8009346:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009348:	4b46      	ldr	r3, [pc, #280]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009350:	2b00      	cmp	r3, #0
 8009352:	d118      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009354:	4b43      	ldr	r3, [pc, #268]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a42      	ldr	r2, [pc, #264]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800935a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800935e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009360:	f7fb fd64 	bl	8004e2c <HAL_GetTick>
 8009364:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009366:	e008      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009368:	f7fb fd60 	bl	8004e2c <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b64      	cmp	r3, #100	; 0x64
 8009374:	d901      	bls.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e06d      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800937a:	4b3a      	ldr	r3, [pc, #232]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0f0      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d02e      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d027      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093a4:	4b2e      	ldr	r3, [pc, #184]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093ae:	4b2e      	ldr	r3, [pc, #184]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093b4:	4b2c      	ldr	r3, [pc, #176]	; (8009468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80093ba:	4a29      	ldr	r2, [pc, #164]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ca:	f7fb fd2f 	bl	8004e2c <HAL_GetTick>
 80093ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093d0:	e00a      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d2:	f7fb fd2b 	bl	8004e2c <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d901      	bls.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e036      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093e8:	4b1d      	ldr	r3, [pc, #116]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0ee      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093f4:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	4917      	ldr	r1, [pc, #92]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009402:	4313      	orrs	r3, r2
 8009404:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d105      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800940c:	4b14      	ldr	r3, [pc, #80]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	4a13      	ldr	r2, [pc, #76]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009416:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d008      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	490b      	ldr	r1, [pc, #44]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009432:	4313      	orrs	r3, r2
 8009434:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0310 	and.w	r3, r3, #16
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	4904      	ldr	r1, [pc, #16]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009450:	4313      	orrs	r3, r2
 8009452:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40021000 	.word	0x40021000
 8009464:	40007000 	.word	0x40007000
 8009468:	42420440 	.word	0x42420440

0800946c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	2300      	movs	r3, #0
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b10      	cmp	r3, #16
 800948c:	d00a      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b10      	cmp	r3, #16
 8009492:	f200 8089 	bhi.w	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d045      	beq.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d074      	beq.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80094a2:	e081      	b.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 80094a4:	4b45      	ldr	r3, [pc, #276]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80094aa:	4b44      	ldr	r3, [pc, #272]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d07a      	beq.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	0c9b      	lsrs	r3, r3, #18
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	4a40      	ldr	r2, [pc, #256]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094c0:	5cd3      	ldrb	r3, [r2, r3]
 80094c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d015      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80094ce:	4b3b      	ldr	r3, [pc, #236]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	0c5b      	lsrs	r3, r3, #17
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	4a3a      	ldr	r2, [pc, #232]	; (80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80094da:	5cd3      	ldrb	r3, [r2, r3]
 80094dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00d      	beq.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80094e8:	4a37      	ldr	r2, [pc, #220]	; (80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	fb02 f303 	mul.w	r3, r2, r3
 80094f6:	61fb      	str	r3, [r7, #28]
 80094f8:	e004      	b.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	4a33      	ldr	r2, [pc, #204]	; (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
 8009502:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009504:	4b2d      	ldr	r3, [pc, #180]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009510:	d102      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	61bb      	str	r3, [r7, #24]
      break;
 8009516:	e049      	b.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	4a2c      	ldr	r2, [pc, #176]	; (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	085b      	lsrs	r3, r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
      break;
 8009526:	e041      	b.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8009528:	4b24      	ldr	r3, [pc, #144]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009538:	d108      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8009544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	e01e      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009556:	d109      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009558:	4b18      	ldr	r3, [pc, #96]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8009564:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e00e      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009576:	d11b      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8009578:	4b10      	ldr	r3, [pc, #64]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d015      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8009584:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009586:	61bb      	str	r3, [r7, #24]
      break;
 8009588:	e012      	b.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800958a:	e011      	b.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800958c:	f7ff fe86 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 8009590:	4602      	mov	r2, r0
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	0b9b      	lsrs	r3, r3, #14
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	3301      	adds	r3, #1
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a4:	61bb      	str	r3, [r7, #24]
      break;
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80095a8:	bf00      	nop
 80095aa:	e002      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80095ac:	bf00      	nop
 80095ae:	e000      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80095b0:	bf00      	nop
    }
  }
  return (frequency);
 80095b2:	69bb      	ldr	r3, [r7, #24]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	40021000 	.word	0x40021000
 80095c0:	0800d680 	.word	0x0800d680
 80095c4:	0800d690 	.word	0x0800d690
 80095c8:	00b71b00 	.word	0x00b71b00
 80095cc:	003d0900 	.word	0x003d0900
 80095d0:	aaaaaaab 	.word	0xaaaaaaab
 80095d4:	00016e36 	.word	0x00016e36

080095d8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e07a      	b.n	80096e4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	7c5b      	ldrb	r3, [r3, #17]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d105      	bne.n	8009604 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fb f92a 	bl	8004858 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc2c 	bl	8009e68 <HAL_RTC_WaitForSynchro>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2204      	movs	r2, #4
 800961a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e061      	b.n	80096e4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fce5 	bl	8009ff0 <RTC_EnterInitMode>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2204      	movs	r2, #4
 8009630:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e056      	b.n	80096e4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0207 	bic.w	r2, r2, #7
 8009644:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800964e:	4b27      	ldr	r3, [pc, #156]	; (80096ec <HAL_RTC_Init+0x114>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	4a26      	ldr	r2, [pc, #152]	; (80096ec <HAL_RTC_Init+0x114>)
 8009654:	f023 0301 	bic.w	r3, r3, #1
 8009658:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800965a:	4b24      	ldr	r3, [pc, #144]	; (80096ec <HAL_RTC_Init+0x114>)
 800965c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	4921      	ldr	r1, [pc, #132]	; (80096ec <HAL_RTC_Init+0x114>)
 8009668:	4313      	orrs	r3, r2
 800966a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d003      	beq.n	800967e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	e00e      	b.n	800969c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800967e:	2001      	movs	r0, #1
 8009680:	f7ff fef4 	bl	800946c <HAL_RCCEx_GetPeriphCLKFreq>
 8009684:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2204      	movs	r2, #4
 8009690:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e026      	b.n	80096e4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	3b01      	subs	r3, #1
 800969a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0c1a      	lsrs	r2, r3, #16
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f002 020f 	and.w	r2, r2, #15
 80096a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	b292      	uxth	r2, r2
 80096b2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fcc3 	bl	800a040 <RTC_ExitInitMode>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2204      	movs	r2, #4
 80096c4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e00c      	b.n	80096e4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80096e2:	2300      	movs	r3, #0
  }
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40006c00 	.word	0x40006c00

080096f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	2300      	movs	r3, #0
 8009702:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_RTC_SetTime+0x20>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e080      	b.n	8009816 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	7c1b      	ldrb	r3, [r3, #16]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_RTC_SetTime+0x30>
 800971c:	2302      	movs	r3, #2
 800971e:	e07a      	b.n	8009816 <HAL_RTC_SetTime+0x126>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2202      	movs	r2, #2
 800972a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d113      	bne.n	800975a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800973c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	785b      	ldrb	r3, [r3, #1]
 8009744:	4619      	mov	r1, r3
 8009746:	460b      	mov	r3, r1
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	1a5b      	subs	r3, r3, r1
 800974c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800974e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009754:	4413      	add	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e01e      	b.n	8009798 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fcb3 	bl	800a0ca <RTC_Bcd2ToByte>
 8009764:	4603      	mov	r3, r0
 8009766:	461a      	mov	r2, r3
 8009768:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800976c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fca8 	bl	800a0ca <RTC_Bcd2ToByte>
 800977a:	4603      	mov	r3, r0
 800977c:	461a      	mov	r2, r3
 800977e:	4613      	mov	r3, r2
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009786:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fc9c 	bl	800a0ca <RTC_Bcd2ToByte>
 8009792:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009794:	4423      	add	r3, r4
 8009796:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009798:	6979      	ldr	r1, [r7, #20]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fbc1 	bl	8009f22 <RTC_WriteTimeCounter>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d007      	beq.n	80097b6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2204      	movs	r2, #4
 80097aa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e02f      	b.n	8009816 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0205 	bic.w	r2, r2, #5
 80097c4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fbd2 	bl	8009f70 <RTC_ReadAlarmCounter>
 80097cc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d018      	beq.n	8009808 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d214      	bcs.n	8009808 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80097e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80097e8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80097ea:	6939      	ldr	r1, [r7, #16]
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fbd8 	bl	8009fa2 <RTC_WriteAlarmCounter>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2204      	movs	r2, #4
 80097fc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e006      	b.n	8009816 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009814:	2300      	movs	r3, #0
  }
}
 8009816:	4618      	mov	r0, r3
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	bd90      	pop	{r4, r7, pc}
	...

08009820 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	2300      	movs	r3, #0
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <HAL_RTC_GetTime+0x28>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0b5      	b.n	80099b8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e0ac      	b.n	80099b8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fb2f 	bl	8009ec2 <RTC_ReadTimeCounter>
 8009864:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	4a55      	ldr	r2, [pc, #340]	; (80099c0 <HAL_RTC_GetTime+0x1a0>)
 800986a:	fba2 2303 	umull	r2, r3, r2, r3
 800986e:	0adb      	lsrs	r3, r3, #11
 8009870:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	4b52      	ldr	r3, [pc, #328]	; (80099c0 <HAL_RTC_GetTime+0x1a0>)
 8009876:	fba3 1302 	umull	r1, r3, r3, r2
 800987a:	0adb      	lsrs	r3, r3, #11
 800987c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	4a4f      	ldr	r2, [pc, #316]	; (80099c4 <HAL_RTC_GetTime+0x1a4>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	095b      	lsrs	r3, r3, #5
 800988e:	b2da      	uxtb	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	4a4a      	ldr	r2, [pc, #296]	; (80099c0 <HAL_RTC_GetTime+0x1a0>)
 8009898:	fba2 1203 	umull	r1, r2, r2, r3
 800989c:	0ad2      	lsrs	r2, r2, #11
 800989e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80098a2:	fb01 f202 	mul.w	r2, r1, r2
 80098a6:	1a9a      	subs	r2, r3, r2
 80098a8:	4b46      	ldr	r3, [pc, #280]	; (80099c4 <HAL_RTC_GetTime+0x1a4>)
 80098aa:	fba3 1302 	umull	r1, r3, r3, r2
 80098ae:	0959      	lsrs	r1, r3, #5
 80098b0:	460b      	mov	r3, r1
 80098b2:	011b      	lsls	r3, r3, #4
 80098b4:	1a5b      	subs	r3, r3, r1
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	1ad1      	subs	r1, r2, r3
 80098ba:	b2ca      	uxtb	r2, r1
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b17      	cmp	r3, #23
 80098c4:	d955      	bls.n	8009972 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	4a3f      	ldr	r2, [pc, #252]	; (80099c8 <HAL_RTC_GetTime+0x1a8>)
 80098ca:	fba2 2303 	umull	r2, r3, r2, r3
 80098ce:	091b      	lsrs	r3, r3, #4
 80098d0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80098d2:	6939      	ldr	r1, [r7, #16]
 80098d4:	4b3c      	ldr	r3, [pc, #240]	; (80099c8 <HAL_RTC_GetTime+0x1a8>)
 80098d6:	fba3 2301 	umull	r2, r3, r3, r1
 80098da:	091a      	lsrs	r2, r3, #4
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	1aca      	subs	r2, r1, r3
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fb3f 	bl	8009f70 <RTC_ReadAlarmCounter>
 80098f2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fa:	d008      	beq.n	800990e <HAL_RTC_GetTime+0xee>
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	429a      	cmp	r2, r3
 8009902:	d904      	bls.n	800990e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	61fb      	str	r3, [r7, #28]
 800990c:	e002      	b.n	8009914 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4a2d      	ldr	r2, [pc, #180]	; (80099cc <HAL_RTC_GetTime+0x1ac>)
 8009918:	fb02 f303 	mul.w	r3, r2, r3
 800991c:	69ba      	ldr	r2, [r7, #24]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009922:	69b9      	ldr	r1, [r7, #24]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fafc 	bl	8009f22 <RTC_WriteTimeCounter>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e041      	b.n	80099b8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d00c      	beq.n	8009956 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4413      	add	r3, r2
 8009942:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009944:	69f9      	ldr	r1, [r7, #28]
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fb2b 	bl	8009fa2 <RTC_WriteAlarmCounter>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e030      	b.n	80099b8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009956:	69f9      	ldr	r1, [r7, #28]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fb22 	bl	8009fa2 <RTC_WriteAlarmCounter>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e027      	b.n	80099b8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fbca 	bl	800a104 <RTC_DateUpdate>
 8009970:	e003      	b.n	800997a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	b2da      	uxtb	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01a      	beq.n	80099b6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fb83 	bl	800a090 <RTC_ByteToBcd2>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fb7a 	bl	800a090 <RTC_ByteToBcd2>
 800999c:	4603      	mov	r3, r0
 800999e:	461a      	mov	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	789b      	ldrb	r3, [r3, #2]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fb71 	bl	800a090 <RTC_ByteToBcd2>
 80099ae:	4603      	mov	r3, r0
 80099b0:	461a      	mov	r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	91a2b3c5 	.word	0x91a2b3c5
 80099c4:	88888889 	.word	0x88888889
 80099c8:	aaaaaaab 	.word	0xaaaaaaab
 80099cc:	00015180 	.word	0x00015180

080099d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	61fb      	str	r3, [r7, #28]
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <HAL_RTC_SetDate+0x24>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e097      	b.n	8009b28 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	7c1b      	ldrb	r3, [r3, #16]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d101      	bne.n	8009a04 <HAL_RTC_SetDate+0x34>
 8009a00:	2302      	movs	r3, #2
 8009a02:	e091      	b.n	8009b28 <HAL_RTC_SetDate+0x158>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10c      	bne.n	8009a30 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	78da      	ldrb	r2, [r3, #3]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	785a      	ldrb	r2, [r3, #1]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	789a      	ldrb	r2, [r3, #2]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	739a      	strb	r2, [r3, #14]
 8009a2e:	e01a      	b.n	8009a66 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	78db      	ldrb	r3, [r3, #3]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fb48 	bl	800a0ca <RTC_Bcd2ToByte>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fb3f 	bl	800a0ca <RTC_Bcd2ToByte>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	461a      	mov	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	789b      	ldrb	r3, [r3, #2]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fb36 	bl	800a0ca <RTC_Bcd2ToByte>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	461a      	mov	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	7bdb      	ldrb	r3, [r3, #15]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	7b59      	ldrb	r1, [r3, #13]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	7b9b      	ldrb	r3, [r3, #14]
 8009a74:	461a      	mov	r2, r3
 8009a76:	f000 fc21 	bl	800a2bc <RTC_WeekDayNum>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7b1a      	ldrb	r2, [r3, #12]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 fa19 	bl	8009ec2 <RTC_ReadTimeCounter>
 8009a90:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4a26      	ldr	r2, [pc, #152]	; (8009b30 <HAL_RTC_SetDate+0x160>)
 8009a96:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9a:	0adb      	lsrs	r3, r3, #11
 8009a9c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b18      	cmp	r3, #24
 8009aa2:	d93a      	bls.n	8009b1a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	4a23      	ldr	r2, [pc, #140]	; (8009b34 <HAL_RTC_SetDate+0x164>)
 8009aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8009aac:	091b      	lsrs	r3, r3, #4
 8009aae:	4a22      	ldr	r2, [pc, #136]	; (8009b38 <HAL_RTC_SetDate+0x168>)
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009aba:	69f9      	ldr	r1, [r7, #28]
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 fa30 	bl	8009f22 <RTC_WriteTimeCounter>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2204      	movs	r2, #4
 8009acc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e027      	b.n	8009b28 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fa49 	bl	8009f70 <RTC_ReadAlarmCounter>
 8009ade:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae6:	d018      	beq.n	8009b1a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d214      	bcs.n	8009b1a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009af6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009afa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009afc:	69b9      	ldr	r1, [r7, #24]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 fa4f 	bl	8009fa2 <RTC_WriteAlarmCounter>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d007      	beq.n	8009b1a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e006      	b.n	8009b28 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	91a2b3c5 	.word	0x91a2b3c5
 8009b34:	aaaaaaab 	.word	0xaaaaaaab
 8009b38:	00015180 	.word	0x00015180

08009b3c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	460a      	mov	r2, r1
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	460a      	mov	r2, r1
 8009b54:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <HAL_RTC_GetDate+0x26>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e03a      	b.n	8009bdc <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8009b66:	f107 0314 	add.w	r3, r7, #20
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff fe56 	bl	8009820 <HAL_RTC_GetTime>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e02e      	b.n	8009bdc <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	7b1a      	ldrb	r2, [r3, #12]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	7bda      	ldrb	r2, [r3, #15]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	7b5a      	ldrb	r2, [r3, #13]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	7b9a      	ldrb	r2, [r3, #14]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01a      	beq.n	8009bda <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	78db      	ldrb	r3, [r3, #3]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fa71 	bl	800a090 <RTC_ByteToBcd2>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fa68 	bl	800a090 <RTC_ByteToBcd2>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fa5f 	bl	800a090 <RTC_ByteToBcd2>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b089      	sub	sp, #36	; 0x24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8009bf4:	f107 0314 	add.w	r3, r7, #20
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	460a      	mov	r2, r1
 8009bfc:	801a      	strh	r2, [r3, #0]
 8009bfe:	460a      	mov	r2, r1
 8009c00:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <HAL_RTC_SetAlarm_IT+0x2a>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e099      	b.n	8009d46 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	7c1b      	ldrb	r3, [r3, #16]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_RTC_SetAlarm_IT+0x3a>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e093      	b.n	8009d46 <HAL_RTC_SetAlarm_IT+0x162>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2202      	movs	r2, #2
 8009c28:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8009c2a:	f107 0314 	add.w	r3, r7, #20
 8009c2e:	2200      	movs	r2, #0
 8009c30:	4619      	mov	r1, r3
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7ff fdf4 	bl	8009820 <HAL_RTC_GetTime>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e081      	b.n	8009d46 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009c42:	7d3b      	ldrb	r3, [r7, #20]
 8009c44:	461a      	mov	r2, r3
 8009c46:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009c4a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8009c4e:	7d7b      	ldrb	r3, [r7, #21]
 8009c50:	4619      	mov	r1, r3
 8009c52:	460b      	mov	r3, r1
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	1a5b      	subs	r3, r3, r1
 8009c58:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009c5a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8009c5c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009c5e:	4413      	add	r3, r2
 8009c60:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d113      	bne.n	8009c90 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009c72:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	1a5b      	subs	r3, r3, r1
 8009c82:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009c84:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009c8a:	4413      	add	r3, r2
 8009c8c:	61fb      	str	r3, [r7, #28]
 8009c8e:	e01e      	b.n	8009cce <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fa18 	bl	800a0ca <RTC_Bcd2ToByte>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009ca2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	785b      	ldrb	r3, [r3, #1]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fa0d 	bl	800a0ca <RTC_Bcd2ToByte>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009cbc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	789b      	ldrb	r3, [r3, #2]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fa01 	bl	800a0ca <RTC_Bcd2ToByte>
 8009cc8:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8009cca:	4423      	add	r3, r4
 8009ccc:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d205      	bcs.n	8009ce2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009cdc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009ce0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009ce2:	69f9      	ldr	r1, [r7, #28]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f95c 	bl	8009fa2 <RTC_WriteAlarmCounter>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d007      	beq.n	8009d00 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2204      	movs	r2, #4
 8009cf4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e022      	b.n	8009d46 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0202 	bic.w	r2, r2, #2
 8009d0e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0202 	orr.w	r2, r2, #2
 8009d1e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a0a      	ldr	r2, [pc, #40]	; (8009d50 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009d2c:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d36:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009d44:	2300      	movs	r3, #0
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd90      	pop	{r4, r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40010400 	.word	0x40010400

08009d54 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e04e      	b.n	8009e06 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7c1b      	ldrb	r3, [r3, #16]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d101      	bne.n	8009d74 <HAL_RTC_DeactivateAlarm+0x20>
 8009d70:	2302      	movs	r3, #2
 8009d72:	e048      	b.n	8009e06 <HAL_RTC_DeactivateAlarm+0xb2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0202 	bic.w	r2, r2, #2
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f92d 	bl	8009ff0 <RTC_EnterInitMode>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d007      	beq.n	8009dac <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2204      	movs	r2, #4
 8009da0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e02c      	b.n	8009e06 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0202 	bic.w	r2, r2, #2
 8009dba:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dc4:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8009dd0:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <HAL_RTC_DeactivateAlarm+0xbc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0e      	ldr	r2, [pc, #56]	; (8009e10 <HAL_RTC_DeactivateAlarm+0xbc>)
 8009dd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009dda:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f92f 	bl	800a040 <RTC_ExitInitMode>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2204      	movs	r2, #4
 8009dec:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e006      	b.n	8009e06 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40010400 	.word	0x40010400

08009e14 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7f8 ff63 	bl	8002d04 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0202 	bic.w	r2, r2, #2
 8009e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009e54:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	745a      	strb	r2, [r3, #17]
}
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	40010400 	.word	0x40010400

08009e68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e01d      	b.n	8009eba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0208 	bic.w	r2, r2, #8
 8009e8c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009e8e:	f7fa ffcd 	bl	8004e2c <HAL_GetTick>
 8009e92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009e94:	e009      	b.n	8009eaa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009e96:	f7fa ffc9 	bl	8004e2c <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea4:	d901      	bls.n	8009eaa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e007      	b.n	8009eba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0ee      	beq.n	8009e96 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b087      	sub	sp, #28
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	827b      	strh	r3, [r7, #18]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	823b      	strh	r3, [r7, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8009ef2:	8a7a      	ldrh	r2, [r7, #18]
 8009ef4:	8a3b      	ldrh	r3, [r7, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d008      	beq.n	8009f0c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009efa:	8a3b      	ldrh	r3, [r7, #16]
 8009efc:	041a      	lsls	r2, r3, #16
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e004      	b.n	8009f16 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009f0c:	8a7b      	ldrh	r3, [r7, #18]
 8009f0e:	041a      	lsls	r2, r3, #16
 8009f10:	89fb      	ldrh	r3, [r7, #14]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8009f16:	697b      	ldr	r3, [r7, #20]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr

08009f22 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f85d 	bl	8009ff0 <RTC_EnterInitMode>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e011      	b.n	8009f66 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	0c12      	lsrs	r2, r2, #16
 8009f4a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	b292      	uxth	r2, r2
 8009f54:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f872 	bl	800a040 <RTC_ExitInitMode>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	81fb      	strh	r3, [r7, #14]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8009f90:	89fb      	ldrh	r3, [r7, #14]
 8009f92:	041a      	lsls	r2, r3, #16
 8009f94:	89bb      	ldrh	r3, [r7, #12]
 8009f96:	4313      	orrs	r3, r2
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bc80      	pop	{r7}
 8009fa0:	4770      	bx	lr

08009fa2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f81d 	bl	8009ff0 <RTC_EnterInitMode>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
 8009fc0:	e011      	b.n	8009fe6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	0c12      	lsrs	r2, r2, #16
 8009fca:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	b292      	uxth	r2, r2
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f832 	bl	800a040 <RTC_ExitInitMode>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009ffc:	f7fa ff16 	bl	8004e2c <HAL_GetTick>
 800a000:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a002:	e009      	b.n	800a018 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a004:	f7fa ff12 	bl	8004e2c <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a012:	d901      	bls.n	800a018 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e00f      	b.n	800a038 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0ee      	beq.n	800a004 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f042 0210 	orr.w	r2, r2, #16
 800a034:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0210 	bic.w	r2, r2, #16
 800a05a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a05c:	f7fa fee6 	bl	8004e2c <HAL_GetTick>
 800a060:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a062:	e009      	b.n	800a078 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a064:	f7fa fee2 	bl	8004e2c <HAL_GetTick>
 800a068:	4602      	mov	r2, r0
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1ad3      	subs	r3, r2, r3
 800a06e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a072:	d901      	bls.n	800a078 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e007      	b.n	800a088 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0ee      	beq.n	800a064 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800a09e:	e005      	b.n	800a0ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	3b0a      	subs	r3, #10
 800a0aa:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	2b09      	cmp	r3, #9
 800a0b0:	d8f6      	bhi.n	800a0a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b2db      	uxtb	r3, r3
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bc80      	pop	{r7}
 800a0c8:	4770      	bx	lr

0800a0ca <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b085      	sub	sp, #20
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	091b      	lsrs	r3, r3, #4
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	f003 030f 	and.w	r3, r3, #15
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	b2db      	uxtb	r3, r3
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	2300      	movs	r3, #0
 800a114:	613b      	str	r3, [r7, #16]
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7bdb      	ldrb	r3, [r3, #15]
 800a122:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7b5b      	ldrb	r3, [r3, #13]
 800a128:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7b9b      	ldrb	r3, [r3, #14]
 800a12e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800a130:	2300      	movs	r3, #0
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	e06f      	b.n	800a216 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d011      	beq.n	800a160 <RTC_DateUpdate+0x5c>
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d00e      	beq.n	800a160 <RTC_DateUpdate+0x5c>
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2b05      	cmp	r3, #5
 800a146:	d00b      	beq.n	800a160 <RTC_DateUpdate+0x5c>
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	2b07      	cmp	r3, #7
 800a14c:	d008      	beq.n	800a160 <RTC_DateUpdate+0x5c>
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b08      	cmp	r3, #8
 800a152:	d005      	beq.n	800a160 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	2b0a      	cmp	r3, #10
 800a158:	d002      	beq.n	800a160 <RTC_DateUpdate+0x5c>
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2b0c      	cmp	r3, #12
 800a15e:	d117      	bne.n	800a190 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b1e      	cmp	r3, #30
 800a164:	d803      	bhi.n	800a16e <RTC_DateUpdate+0x6a>
      {
        day++;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a16c:	e050      	b.n	800a210 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b0c      	cmp	r3, #12
 800a172:	d005      	beq.n	800a180 <RTC_DateUpdate+0x7c>
        {
          month++;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a17a:	2301      	movs	r3, #1
 800a17c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a17e:	e047      	b.n	800a210 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800a180:	2301      	movs	r3, #1
 800a182:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a184:	2301      	movs	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]
          year++;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	3301      	adds	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800a18e:	e03f      	b.n	800a210 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b04      	cmp	r3, #4
 800a194:	d008      	beq.n	800a1a8 <RTC_DateUpdate+0xa4>
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b06      	cmp	r3, #6
 800a19a:	d005      	beq.n	800a1a8 <RTC_DateUpdate+0xa4>
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2b09      	cmp	r3, #9
 800a1a0:	d002      	beq.n	800a1a8 <RTC_DateUpdate+0xa4>
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b0b      	cmp	r3, #11
 800a1a6:	d10c      	bne.n	800a1c2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b1d      	cmp	r3, #29
 800a1ac:	d803      	bhi.n	800a1b6 <RTC_DateUpdate+0xb2>
      {
        day++;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a1b4:	e02c      	b.n	800a210 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a1c0:	e026      	b.n	800a210 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d123      	bne.n	800a210 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b1b      	cmp	r3, #27
 800a1cc:	d803      	bhi.n	800a1d6 <RTC_DateUpdate+0xd2>
      {
        day++;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	e01c      	b.n	800a210 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b1c      	cmp	r3, #28
 800a1da:	d111      	bne.n	800a200 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 f839 	bl	800a258 <RTC_IsLeapYear>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <RTC_DateUpdate+0xf0>
        {
          day++;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e00d      	b.n	800a210 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	e007      	b.n	800a210 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b1d      	cmp	r3, #29
 800a204:	d104      	bne.n	800a210 <RTC_DateUpdate+0x10c>
      {
        month++;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3301      	adds	r3, #1
 800a20a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a20c:	2301      	movs	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	3301      	adds	r3, #1
 800a214:	60bb      	str	r3, [r7, #8]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d38b      	bcc.n	800a136 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	b2da      	uxtb	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	4619      	mov	r1, r3
 800a240:	6978      	ldr	r0, [r7, #20]
 800a242:	f000 f83b 	bl	800a2bc <RTC_WeekDayNum>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	731a      	strb	r2, [r3, #12]
}
 800a24e:	bf00      	nop
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	f003 0303 	and.w	r3, r3, #3
 800a268:	b29b      	uxth	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	e01d      	b.n	800a2ae <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	4a10      	ldr	r2, [pc, #64]	; (800a2b8 <RTC_IsLeapYear+0x60>)
 800a276:	fba2 1203 	umull	r1, r2, r2, r3
 800a27a:	0952      	lsrs	r2, r2, #5
 800a27c:	2164      	movs	r1, #100	; 0x64
 800a27e:	fb01 f202 	mul.w	r2, r1, r2
 800a282:	1a9b      	subs	r3, r3, r2
 800a284:	b29b      	uxth	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e00f      	b.n	800a2ae <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	4a09      	ldr	r2, [pc, #36]	; (800a2b8 <RTC_IsLeapYear+0x60>)
 800a292:	fba2 1203 	umull	r1, r2, r2, r3
 800a296:	09d2      	lsrs	r2, r2, #7
 800a298:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a29c:	fb01 f202 	mul.w	r2, r1, r2
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800a2ac:	2300      	movs	r3, #0
  }
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bc80      	pop	{r7}
 800a2b6:	4770      	bx	lr
 800a2b8:	51eb851f 	.word	0x51eb851f

0800a2bc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60bb      	str	r3, [r7, #8]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a2da:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d82d      	bhi.n	800a33e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	005b      	lsls	r3, r3, #1
 800a2e8:	4413      	add	r3, r2
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	4a2c      	ldr	r2, [pc, #176]	; (800a3a0 <RTC_WeekDayNum+0xe4>)
 800a2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f4:	085a      	lsrs	r2, r3, #1
 800a2f6:	78bb      	ldrb	r3, [r7, #2]
 800a2f8:	441a      	add	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	3b01      	subs	r3, #1
 800a302:	089b      	lsrs	r3, r3, #2
 800a304:	441a      	add	r2, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	3b01      	subs	r3, #1
 800a30a:	4926      	ldr	r1, [pc, #152]	; (800a3a4 <RTC_WeekDayNum+0xe8>)
 800a30c:	fba1 1303 	umull	r1, r3, r1, r3
 800a310:	095b      	lsrs	r3, r3, #5
 800a312:	1ad2      	subs	r2, r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3b01      	subs	r3, #1
 800a318:	4922      	ldr	r1, [pc, #136]	; (800a3a4 <RTC_WeekDayNum+0xe8>)
 800a31a:	fba1 1303 	umull	r1, r3, r1, r3
 800a31e:	09db      	lsrs	r3, r3, #7
 800a320:	4413      	add	r3, r2
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	4b20      	ldr	r3, [pc, #128]	; (800a3a8 <RTC_WeekDayNum+0xec>)
 800a326:	fba3 1302 	umull	r1, r3, r3, r2
 800a32a:	1ad1      	subs	r1, r2, r3
 800a32c:	0849      	lsrs	r1, r1, #1
 800a32e:	440b      	add	r3, r1
 800a330:	0899      	lsrs	r1, r3, #2
 800a332:	460b      	mov	r3, r1
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	1a5b      	subs	r3, r3, r1
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e029      	b.n	800a392 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	4613      	mov	r3, r2
 800a342:	005b      	lsls	r3, r3, #1
 800a344:	4413      	add	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	1a9b      	subs	r3, r3, r2
 800a34a:	4a15      	ldr	r2, [pc, #84]	; (800a3a0 <RTC_WeekDayNum+0xe4>)
 800a34c:	fba2 2303 	umull	r2, r3, r2, r3
 800a350:	085a      	lsrs	r2, r3, #1
 800a352:	78bb      	ldrb	r3, [r7, #2]
 800a354:	441a      	add	r2, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	441a      	add	r2, r3
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	089b      	lsrs	r3, r3, #2
 800a35e:	441a      	add	r2, r3
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4910      	ldr	r1, [pc, #64]	; (800a3a4 <RTC_WeekDayNum+0xe8>)
 800a364:	fba1 1303 	umull	r1, r3, r1, r3
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	1ad2      	subs	r2, r2, r3
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	490d      	ldr	r1, [pc, #52]	; (800a3a4 <RTC_WeekDayNum+0xe8>)
 800a370:	fba1 1303 	umull	r1, r3, r1, r3
 800a374:	09db      	lsrs	r3, r3, #7
 800a376:	4413      	add	r3, r2
 800a378:	1c9a      	adds	r2, r3, #2
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <RTC_WeekDayNum+0xec>)
 800a37c:	fba3 1302 	umull	r1, r3, r3, r2
 800a380:	1ad1      	subs	r1, r2, r3
 800a382:	0849      	lsrs	r1, r1, #1
 800a384:	440b      	add	r3, r1
 800a386:	0899      	lsrs	r1, r3, #2
 800a388:	460b      	mov	r3, r1
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	1a5b      	subs	r3, r3, r1
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	b2db      	uxtb	r3, r3
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr
 800a3a0:	38e38e39 	.word	0x38e38e39
 800a3a4:	51eb851f 	.word	0x51eb851f
 800a3a8:	24924925 	.word	0x24924925

0800a3ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e076      	b.n	800a4ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d108      	bne.n	800a3d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3ce:	d009      	beq.n	800a3e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	61da      	str	r2, [r3, #28]
 800a3d6:	e005      	b.n	800a3e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7fa fa56 	bl	80048b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a41a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a436:	431a      	orrs	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a45e:	431a      	orrs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a468:	ea42 0103 	orr.w	r1, r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	0c1a      	lsrs	r2, r3, #16
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f002 0204 	and.w	r2, r2, #4
 800a48a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	69da      	ldr	r2, [r3, #28]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a49a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d101      	bne.n	800a4d6 <HAL_SPI_Transmit+0x22>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e12d      	b.n	800a732 <HAL_SPI_Transmit+0x27e>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4de:	f7fa fca5 	bl	8004e2c <HAL_GetTick>
 800a4e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d002      	beq.n	800a4fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a4f8:	e116      	b.n	800a728 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <HAL_SPI_Transmit+0x52>
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a50a:	e10d      	b.n	800a728 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2203      	movs	r2, #3
 800a510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	88fa      	ldrh	r2, [r7, #6]
 800a52a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a552:	d10f      	bne.n	800a574 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a562:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a572:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57e:	2b40      	cmp	r3, #64	; 0x40
 800a580:	d007      	beq.n	800a592 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a59a:	d14f      	bne.n	800a63c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <HAL_SPI_Transmit+0xf6>
 800a5a4:	8afb      	ldrh	r3, [r7, #22]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d142      	bne.n	800a630 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	881a      	ldrh	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	1c9a      	adds	r2, r3, #2
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a5ce:	e02f      	b.n	800a630 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0302 	and.w	r3, r3, #2
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d112      	bne.n	800a604 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	881a      	ldrh	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	1c9a      	adds	r2, r3, #2
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	86da      	strh	r2, [r3, #54]	; 0x36
 800a602:	e015      	b.n	800a630 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a604:	f7fa fc12 	bl	8004e2c <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d803      	bhi.n	800a61c <HAL_SPI_Transmit+0x168>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d102      	bne.n	800a622 <HAL_SPI_Transmit+0x16e>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d106      	bne.n	800a630 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a62e:	e07b      	b.n	800a728 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ca      	bne.n	800a5d0 <HAL_SPI_Transmit+0x11c>
 800a63a:	e050      	b.n	800a6de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <HAL_SPI_Transmit+0x196>
 800a644:	8afb      	ldrh	r3, [r7, #22]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d144      	bne.n	800a6d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	330c      	adds	r3, #12
 800a654:	7812      	ldrb	r2, [r2, #0]
 800a656:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a666:	b29b      	uxth	r3, r3
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a670:	e030      	b.n	800a6d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d113      	bne.n	800a6a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a6a6:	e015      	b.n	800a6d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6a8:	f7fa fbc0 	bl	8004e2c <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d803      	bhi.n	800a6c0 <HAL_SPI_Transmit+0x20c>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d102      	bne.n	800a6c6 <HAL_SPI_Transmit+0x212>
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a6d2:	e029      	b.n	800a728 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1c9      	bne.n	800a672 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fbcc 	bl	800ae80 <SPI_EndRxTxTransaction>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	613b      	str	r3, [r7, #16]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e003      	b.n	800a728 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a730:	7ffb      	ldrb	r3, [r7, #31]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af02      	add	r7, sp, #8
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	603b      	str	r3, [r7, #0]
 800a746:	4613      	mov	r3, r2
 800a748:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b01      	cmp	r3, #1
 800a758:	d002      	beq.n	800a760 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800a75a:	2302      	movs	r3, #2
 800a75c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a75e:	e0fb      	b.n	800a958 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a768:	d112      	bne.n	800a790 <HAL_SPI_Receive+0x56>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10e      	bne.n	800a790 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2204      	movs	r2, #4
 800a776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a77a:	88fa      	ldrh	r2, [r7, #6]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	4613      	mov	r3, r2
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f8ef 	bl	800a96a <HAL_SPI_TransmitReceive>
 800a78c:	4603      	mov	r3, r0
 800a78e:	e0e8      	b.n	800a962 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <HAL_SPI_Receive+0x64>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e0e1      	b.n	800a962 <HAL_SPI_Receive+0x228>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7a6:	f7fa fb41 	bl	8004e2c <HAL_GetTick>
 800a7aa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_SPI_Receive+0x7e>
 800a7b2:	88fb      	ldrh	r3, [r7, #6]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a7bc:	e0cc      	b.n	800a958 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	88fa      	ldrh	r2, [r7, #6]
 800a7d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	88fa      	ldrh	r2, [r7, #6]
 800a7dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a804:	d10f      	bne.n	800a826 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a824:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a830:	2b40      	cmp	r3, #64	; 0x40
 800a832:	d007      	beq.n	800a844 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a842:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d16a      	bne.n	800a922 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a84c:	e032      	b.n	800a8b4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d115      	bne.n	800a888 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f103 020c 	add.w	r2, r3, #12
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	7812      	ldrb	r2, [r2, #0]
 800a86a:	b2d2      	uxtb	r2, r2
 800a86c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a886:	e015      	b.n	800a8b4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a888:	f7fa fad0 	bl	8004e2c <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d803      	bhi.n	800a8a0 <HAL_SPI_Receive+0x166>
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d102      	bne.n	800a8a6 <HAL_SPI_Receive+0x16c>
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a8b2:	e051      	b.n	800a958 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1c7      	bne.n	800a84e <HAL_SPI_Receive+0x114>
 800a8be:	e035      	b.n	800a92c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d113      	bne.n	800a8f6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68da      	ldr	r2, [r3, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	b292      	uxth	r2, r2
 800a8da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	1c9a      	adds	r2, r3, #2
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8f4:	e015      	b.n	800a922 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8f6:	f7fa fa99 	bl	8004e2c <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d803      	bhi.n	800a90e <HAL_SPI_Receive+0x1d4>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d102      	bne.n	800a914 <HAL_SPI_Receive+0x1da>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a920:	e01a      	b.n	800a958 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a926:	b29b      	uxth	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1c9      	bne.n	800a8c0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 fa53 	bl	800addc <SPI_EndRxTransaction>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2220      	movs	r2, #32
 800a940:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	75fb      	strb	r3, [r7, #23]
 800a94e:	e003      	b.n	800a958 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a960:	7dfb      	ldrb	r3, [r7, #23]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b08c      	sub	sp, #48	; 0x30
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a978:	2301      	movs	r3, #1
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d101      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x26>
 800a98c:	2302      	movs	r3, #2
 800a98e:	e198      	b.n	800acc2 <HAL_SPI_TransmitReceive+0x358>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a998:	f7fa fa48 	bl	8004e2c <HAL_GetTick>
 800a99c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a9ae:	887b      	ldrh	r3, [r7, #2]
 800a9b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d00f      	beq.n	800a9da <HAL_SPI_TransmitReceive+0x70>
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9c0:	d107      	bne.n	800a9d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d103      	bne.n	800a9d2 <HAL_SPI_TransmitReceive+0x68>
 800a9ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d003      	beq.n	800a9da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a9d8:	e16d      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d005      	beq.n	800a9ec <HAL_SPI_TransmitReceive+0x82>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_SPI_TransmitReceive+0x82>
 800a9e6:	887b      	ldrh	r3, [r7, #2]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a9f2:	e160      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d003      	beq.n	800aa08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2205      	movs	r2, #5
 800aa04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	887a      	ldrh	r2, [r7, #2]
 800aa18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	887a      	ldrh	r2, [r7, #2]
 800aa1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	887a      	ldrh	r2, [r7, #2]
 800aa2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	887a      	ldrh	r2, [r7, #2]
 800aa30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa48:	2b40      	cmp	r3, #64	; 0x40
 800aa4a:	d007      	beq.n	800aa5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa64:	d17c      	bne.n	800ab60 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <HAL_SPI_TransmitReceive+0x10a>
 800aa6e:	8b7b      	ldrh	r3, [r7, #26]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d16a      	bne.n	800ab4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	881a      	ldrh	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa84:	1c9a      	adds	r2, r3, #2
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa98:	e057      	b.n	800ab4a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d11b      	bne.n	800aae0 <HAL_SPI_TransmitReceive+0x176>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d016      	beq.n	800aae0 <HAL_SPI_TransmitReceive+0x176>
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d113      	bne.n	800aae0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabc:	881a      	ldrh	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	1c9a      	adds	r2, r3, #2
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	3b01      	subs	r3, #1
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d119      	bne.n	800ab22 <HAL_SPI_TransmitReceive+0x1b8>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d014      	beq.n	800ab22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68da      	ldr	r2, [r3, #12]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	b292      	uxth	r2, r2
 800ab04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	1c9a      	adds	r2, r3, #2
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab22:	f7fa f983 	bl	8004e2c <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d80b      	bhi.n	800ab4a <HAL_SPI_TransmitReceive+0x1e0>
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d007      	beq.n	800ab4a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800ab48:	e0b5      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1a2      	bne.n	800aa9a <HAL_SPI_TransmitReceive+0x130>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d19d      	bne.n	800aa9a <HAL_SPI_TransmitReceive+0x130>
 800ab5e:	e080      	b.n	800ac62 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <HAL_SPI_TransmitReceive+0x204>
 800ab68:	8b7b      	ldrh	r3, [r7, #26]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d16f      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	7812      	ldrb	r2, [r2, #0]
 800ab7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab94:	e05b      	b.n	800ac4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d11c      	bne.n	800abde <HAL_SPI_TransmitReceive+0x274>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d017      	beq.n	800abde <HAL_SPI_TransmitReceive+0x274>
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d114      	bne.n	800abde <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	330c      	adds	r3, #12
 800abbe:	7812      	ldrb	r2, [r2, #0]
 800abc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	3b01      	subs	r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abda:	2300      	movs	r3, #0
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d119      	bne.n	800ac20 <HAL_SPI_TransmitReceive+0x2b6>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d014      	beq.n	800ac20 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	b2d2      	uxtb	r2, r2
 800ac02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	3b01      	subs	r3, #1
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac20:	f7fa f904 	bl	8004e2c <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d803      	bhi.n	800ac38 <HAL_SPI_TransmitReceive+0x2ce>
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac36:	d102      	bne.n	800ac3e <HAL_SPI_TransmitReceive+0x2d4>
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d107      	bne.n	800ac4e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800ac4c:	e033      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d19e      	bne.n	800ab96 <HAL_SPI_TransmitReceive+0x22c>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d199      	bne.n	800ab96 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f90a 	bl	800ae80 <SPI_EndRxTxTransaction>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d006      	beq.n	800ac80 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ac7e:	e01a      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acac:	e003      	b.n	800acb6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800acbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3730      	adds	r7, #48	; 0x30
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4613      	mov	r3, r2
 800acda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acdc:	f7fa f8a6 	bl	8004e2c <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4413      	add	r3, r2
 800acea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800acec:	f7fa f89e 	bl	8004e2c <HAL_GetTick>
 800acf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800acf2:	4b39      	ldr	r3, [pc, #228]	; (800add8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	015b      	lsls	r3, r3, #5
 800acf8:	0d1b      	lsrs	r3, r3, #20
 800acfa:	69fa      	ldr	r2, [r7, #28]
 800acfc:	fb02 f303 	mul.w	r3, r2, r3
 800ad00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad02:	e054      	b.n	800adae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d050      	beq.n	800adae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad0c:	f7fa f88e 	bl	8004e2c <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d902      	bls.n	800ad22 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d13d      	bne.n	800ad9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad3a:	d111      	bne.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad44:	d004      	beq.n	800ad50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad4e:	d107      	bne.n	800ad60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad68:	d10f      	bne.n	800ad8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e017      	b.n	800adce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3b01      	subs	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4013      	ands	r3, r2
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	429a      	cmp	r2, r3
 800adbc:	bf0c      	ite	eq
 800adbe:	2301      	moveq	r3, #1
 800adc0:	2300      	movne	r3, #0
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d19b      	bne.n	800ad04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20000004 	.word	0x20000004

0800addc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af02      	add	r7, sp, #8
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adf0:	d111      	bne.n	800ae16 <SPI_EndRxTransaction+0x3a>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adfa:	d004      	beq.n	800ae06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d107      	bne.n	800ae16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae1e:	d117      	bne.n	800ae50 <SPI_EndRxTransaction+0x74>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae28:	d112      	bne.n	800ae50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2200      	movs	r2, #0
 800ae32:	2101      	movs	r1, #1
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff ff49 	bl	800accc <SPI_WaitFlagStateUntilTimeout>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01a      	beq.n	800ae76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	f043 0220 	orr.w	r2, r3, #32
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e013      	b.n	800ae78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	2200      	movs	r2, #0
 800ae58:	2180      	movs	r1, #128	; 0x80
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff ff36 	bl	800accc <SPI_WaitFlagStateUntilTimeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d007      	beq.n	800ae76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f043 0220 	orr.w	r2, r3, #32
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e000      	b.n	800ae78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af02      	add	r7, sp, #8
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	2180      	movs	r1, #128	; 0x80
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff ff18 	bl	800accc <SPI_WaitFlagStateUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea6:	f043 0220 	orr.w	r2, r3, #32
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e000      	b.n	800aeb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e041      	b.n	800af52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7f9 fd6a 	bl	80049bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f000 faa2 	bl	800b444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d001      	beq.n	800af74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e03a      	b.n	800afea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68da      	ldr	r2, [r3, #12]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f042 0201 	orr.w	r2, r2, #1
 800af8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <HAL_TIM_Base_Start_IT+0x98>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00e      	beq.n	800afb4 <HAL_TIM_Base_Start_IT+0x58>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9e:	d009      	beq.n	800afb4 <HAL_TIM_Base_Start_IT+0x58>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a14      	ldr	r2, [pc, #80]	; (800aff8 <HAL_TIM_Base_Start_IT+0x9c>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d004      	beq.n	800afb4 <HAL_TIM_Base_Start_IT+0x58>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a13      	ldr	r2, [pc, #76]	; (800affc <HAL_TIM_Base_Start_IT+0xa0>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d111      	bne.n	800afd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 0307 	and.w	r3, r3, #7
 800afbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b06      	cmp	r3, #6
 800afc4:	d010      	beq.n	800afe8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f042 0201 	orr.w	r2, r2, #1
 800afd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd6:	e007      	b.n	800afe8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f042 0201 	orr.w	r2, r2, #1
 800afe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	bc80      	pop	{r7}
 800aff2:	4770      	bx	lr
 800aff4:	40012c00 	.word	0x40012c00
 800aff8:	40000400 	.word	0x40000400
 800affc:	40000800 	.word	0x40000800

0800b000 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0201 	bic.w	r2, r2, #1
 800b016:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6a1a      	ldr	r2, [r3, #32]
 800b01e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b022:	4013      	ands	r3, r2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10f      	bne.n	800b048 <HAL_TIM_Base_Stop_IT+0x48>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6a1a      	ldr	r2, [r3, #32]
 800b02e:	f240 4344 	movw	r3, #1092	; 0x444
 800b032:	4013      	ands	r3, r2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d107      	bne.n	800b048 <HAL_TIM_Base_Stop_IT+0x48>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 0201 	bic.w	r2, r2, #1
 800b046:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr

0800b05c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d122      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d11b      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f06f 0202 	mvn.w	r2, #2
 800b088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9b4 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b0a4:	e005      	b.n	800b0b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f9a7 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f9b6 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d122      	bne.n	800b10c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d11b      	bne.n	800b10c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f06f 0204 	mvn.w	r2, #4
 800b0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f98a 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b0f8:	e005      	b.n	800b106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f97d 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f98c 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	f003 0308 	and.w	r3, r3, #8
 800b116:	2b08      	cmp	r3, #8
 800b118:	d122      	bne.n	800b160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f003 0308 	and.w	r3, r3, #8
 800b124:	2b08      	cmp	r3, #8
 800b126:	d11b      	bne.n	800b160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f06f 0208 	mvn.w	r2, #8
 800b130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2204      	movs	r2, #4
 800b136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f960 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b14c:	e005      	b.n	800b15a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f953 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f962 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f003 0310 	and.w	r3, r3, #16
 800b16a:	2b10      	cmp	r3, #16
 800b16c:	d122      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b10      	cmp	r3, #16
 800b17a:	d11b      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f06f 0210 	mvn.w	r2, #16
 800b184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2208      	movs	r2, #8
 800b18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f936 	bl	800b40c <HAL_TIM_IC_CaptureCallback>
 800b1a0:	e005      	b.n	800b1ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f929 	bl	800b3fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f938 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10e      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d107      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f06f 0201 	mvn.w	r2, #1
 800b1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7f7 fdaa 	bl	8002d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ea:	2b80      	cmp	r3, #128	; 0x80
 800b1ec:	d10e      	bne.n	800b20c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f8:	2b80      	cmp	r3, #128	; 0x80
 800b1fa:	d107      	bne.n	800b20c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa7b 	bl	800b702 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b216:	2b40      	cmp	r3, #64	; 0x40
 800b218:	d10e      	bne.n	800b238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b224:	2b40      	cmp	r3, #64	; 0x40
 800b226:	d107      	bne.n	800b238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f8fc 	bl	800b430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0320 	and.w	r3, r3, #32
 800b242:	2b20      	cmp	r3, #32
 800b244:	d10e      	bne.n	800b264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0320 	and.w	r3, r3, #32
 800b250:	2b20      	cmp	r3, #32
 800b252:	d107      	bne.n	800b264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0220 	mvn.w	r2, #32
 800b25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fa46 	bl	800b6f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_TIM_ConfigClockSource+0x1c>
 800b284:	2302      	movs	r3, #2
 800b286:	e0b4      	b.n	800b3f2 <HAL_TIM_ConfigClockSource+0x186>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c0:	d03e      	beq.n	800b340 <HAL_TIM_ConfigClockSource+0xd4>
 800b2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c6:	f200 8087 	bhi.w	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ce:	f000 8086 	beq.w	800b3de <HAL_TIM_ConfigClockSource+0x172>
 800b2d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d6:	d87f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d8:	2b70      	cmp	r3, #112	; 0x70
 800b2da:	d01a      	beq.n	800b312 <HAL_TIM_ConfigClockSource+0xa6>
 800b2dc:	2b70      	cmp	r3, #112	; 0x70
 800b2de:	d87b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e0:	2b60      	cmp	r3, #96	; 0x60
 800b2e2:	d050      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0x11a>
 800b2e4:	2b60      	cmp	r3, #96	; 0x60
 800b2e6:	d877      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e8:	2b50      	cmp	r3, #80	; 0x50
 800b2ea:	d03c      	beq.n	800b366 <HAL_TIM_ConfigClockSource+0xfa>
 800b2ec:	2b50      	cmp	r3, #80	; 0x50
 800b2ee:	d873      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f0:	2b40      	cmp	r3, #64	; 0x40
 800b2f2:	d058      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x13a>
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d86f      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f8:	2b30      	cmp	r3, #48	; 0x30
 800b2fa:	d064      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b2fc:	2b30      	cmp	r3, #48	; 0x30
 800b2fe:	d86b      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b300:	2b20      	cmp	r3, #32
 800b302:	d060      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b304:	2b20      	cmp	r3, #32
 800b306:	d867      	bhi.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05c      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b30c:	2b10      	cmp	r3, #16
 800b30e:	d05a      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b310:	e062      	b.n	800b3d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b322:	f000 f968 	bl	800b5f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	609a      	str	r2, [r3, #8]
      break;
 800b33e:	e04f      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b350:	f000 f951 	bl	800b5f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b362:	609a      	str	r2, [r3, #8]
      break;
 800b364:	e03c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	461a      	mov	r2, r3
 800b374:	f000 f8c8 	bl	800b508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2150      	movs	r1, #80	; 0x50
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f91f 	bl	800b5c2 <TIM_ITRx_SetConfig>
      break;
 800b384:	e02c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b392:	461a      	mov	r2, r3
 800b394:	f000 f8e6 	bl	800b564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2160      	movs	r1, #96	; 0x60
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f90f 	bl	800b5c2 <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e01c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f000 f8a8 	bl	800b508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2140      	movs	r1, #64	; 0x40
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f8ff 	bl	800b5c2 <TIM_ITRx_SetConfig>
      break;
 800b3c4:	e00c      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f000 f8f6 	bl	800b5c2 <TIM_ITRx_SetConfig>
      break;
 800b3d6:	e003      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]
      break;
 800b3dc:	e000      	b.n	800b3e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr

0800b40c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	bc80      	pop	{r7}
 800b41c:	4770      	bx	lr

0800b41e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bc80      	pop	{r7}
 800b42e:	4770      	bx	lr

0800b430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bc80      	pop	{r7}
 800b440:	4770      	bx	lr
	...

0800b444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a29      	ldr	r2, [pc, #164]	; (800b4fc <TIM_Base_SetConfig+0xb8>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d00b      	beq.n	800b474 <TIM_Base_SetConfig+0x30>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b462:	d007      	beq.n	800b474 <TIM_Base_SetConfig+0x30>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a26      	ldr	r2, [pc, #152]	; (800b500 <TIM_Base_SetConfig+0xbc>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d003      	beq.n	800b474 <TIM_Base_SetConfig+0x30>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a25      	ldr	r2, [pc, #148]	; (800b504 <TIM_Base_SetConfig+0xc0>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d108      	bne.n	800b486 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b47a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a1c      	ldr	r2, [pc, #112]	; (800b4fc <TIM_Base_SetConfig+0xb8>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00b      	beq.n	800b4a6 <TIM_Base_SetConfig+0x62>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b494:	d007      	beq.n	800b4a6 <TIM_Base_SetConfig+0x62>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a19      	ldr	r2, [pc, #100]	; (800b500 <TIM_Base_SetConfig+0xbc>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_Base_SetConfig+0x62>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a18      	ldr	r2, [pc, #96]	; (800b504 <TIM_Base_SetConfig+0xc0>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d108      	bne.n	800b4b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	689a      	ldr	r2, [r3, #8]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a07      	ldr	r2, [pc, #28]	; (800b4fc <TIM_Base_SetConfig+0xb8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d103      	bne.n	800b4ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	615a      	str	r2, [r3, #20]
}
 800b4f2:	bf00      	nop
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc80      	pop	{r7}
 800b4fa:	4770      	bx	lr
 800b4fc:	40012c00 	.word	0x40012c00
 800b500:	40000400 	.word	0x40000400
 800b504:	40000800 	.word	0x40000800

0800b508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f023 0201 	bic.w	r2, r3, #1
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f023 030a 	bic.w	r3, r3, #10
 800b544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	621a      	str	r2, [r3, #32]
}
 800b55a:	bf00      	nop
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	bc80      	pop	{r7}
 800b562:	4770      	bx	lr

0800b564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	f023 0210 	bic.w	r2, r3, #16
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b58e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	031b      	lsls	r3, r3, #12
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	011b      	lsls	r3, r3, #4
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	697a      	ldr	r2, [r7, #20]
 800b5b6:	621a      	str	r2, [r3, #32]
}
 800b5b8:	bf00      	nop
 800b5ba:	371c      	adds	r7, #28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bc80      	pop	{r7}
 800b5c0:	4770      	bx	lr

0800b5c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	f043 0307 	orr.w	r3, r3, #7
 800b5e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	609a      	str	r2, [r3, #8]
}
 800b5ec:	bf00      	nop
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bc80      	pop	{r7}
 800b5f4:	4770      	bx	lr

0800b5f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b087      	sub	sp, #28
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	021a      	lsls	r2, r3, #8
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	431a      	orrs	r2, r3
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	4313      	orrs	r3, r2
 800b622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	609a      	str	r2, [r3, #8]
}
 800b62a:	bf00      	nop
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	bc80      	pop	{r7}
 800b632:	4770      	bx	lr

0800b634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b644:	2b01      	cmp	r3, #1
 800b646:	d101      	bne.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b648:	2302      	movs	r3, #2
 800b64a:	e046      	b.n	800b6da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a16      	ldr	r2, [pc, #88]	; (800b6e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00e      	beq.n	800b6ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b698:	d009      	beq.n	800b6ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a12      	ldr	r2, [pc, #72]	; (800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d004      	beq.n	800b6ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a10      	ldr	r2, [pc, #64]	; (800b6ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d10c      	bne.n	800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bc80      	pop	{r7}
 800b6e2:	4770      	bx	lr
 800b6e4:	40012c00 	.word	0x40012c00
 800b6e8:	40000400 	.word	0x40000400
 800b6ec:	40000800 	.word	0x40000800

0800b6f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bc80      	pop	{r7}
 800b700:	4770      	bx	lr

0800b702 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	bc80      	pop	{r7}
 800b712:	4770      	bx	lr

0800b714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e042      	b.n	800b7ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7f9 f97e 	bl	8004a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2224      	movs	r2, #36	; 0x24
 800b744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68da      	ldr	r2, [r3, #12]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f82b 	bl	800b7b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b76c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	695a      	ldr	r2, [r3, #20]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b77c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68da      	ldr	r2, [r3, #12]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b78c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2220      	movs	r2, #32
 800b798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b7ee:	f023 030c 	bic.w	r3, r3, #12
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	68b9      	ldr	r1, [r7, #8]
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699a      	ldr	r2, [r3, #24]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a2c      	ldr	r2, [pc, #176]	; (800b8c8 <UART_SetConfig+0x114>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d103      	bne.n	800b824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b81c:	f7fd fd3e 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	e002      	b.n	800b82a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b824:	f7fd fd26 	bl	8009274 <HAL_RCC_GetPCLK1Freq>
 800b828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4613      	mov	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	009a      	lsls	r2, r3, #2
 800b834:	441a      	add	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b840:	4a22      	ldr	r2, [pc, #136]	; (800b8cc <UART_SetConfig+0x118>)
 800b842:	fba2 2303 	umull	r2, r3, r2, r3
 800b846:	095b      	lsrs	r3, r3, #5
 800b848:	0119      	lsls	r1, r3, #4
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009a      	lsls	r2, r3, #2
 800b854:	441a      	add	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b860:	4b1a      	ldr	r3, [pc, #104]	; (800b8cc <UART_SetConfig+0x118>)
 800b862:	fba3 0302 	umull	r0, r3, r3, r2
 800b866:	095b      	lsrs	r3, r3, #5
 800b868:	2064      	movs	r0, #100	; 0x64
 800b86a:	fb00 f303 	mul.w	r3, r0, r3
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	011b      	lsls	r3, r3, #4
 800b872:	3332      	adds	r3, #50	; 0x32
 800b874:	4a15      	ldr	r2, [pc, #84]	; (800b8cc <UART_SetConfig+0x118>)
 800b876:	fba2 2303 	umull	r2, r3, r2, r3
 800b87a:	095b      	lsrs	r3, r3, #5
 800b87c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b880:	4419      	add	r1, r3
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009a      	lsls	r2, r3, #2
 800b88c:	441a      	add	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	fbb2 f2f3 	udiv	r2, r2, r3
 800b898:	4b0c      	ldr	r3, [pc, #48]	; (800b8cc <UART_SetConfig+0x118>)
 800b89a:	fba3 0302 	umull	r0, r3, r3, r2
 800b89e:	095b      	lsrs	r3, r3, #5
 800b8a0:	2064      	movs	r0, #100	; 0x64
 800b8a2:	fb00 f303 	mul.w	r3, r0, r3
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	3332      	adds	r3, #50	; 0x32
 800b8ac:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <UART_SetConfig+0x118>)
 800b8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b8b2:	095b      	lsrs	r3, r3, #5
 800b8b4:	f003 020f 	and.w	r2, r3, #15
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	440a      	add	r2, r1
 800b8be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	40013800 	.word	0x40013800
 800b8cc:	51eb851f 	.word	0x51eb851f

0800b8d0 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	777b      	strb	r3, [r7, #29]
 800b8e2:	e01b      	b.n	800b91c <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	77bb      	strb	r3, [r7, #30]
 800b8e8:	e012      	b.n	800b910 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800b8ea:	7fba      	ldrb	r2, [r7, #30]
 800b8ec:	7f7b      	ldrb	r3, [r7, #29]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	1899      	adds	r1, r3, r2
 800b8f8:	7fba      	ldrb	r2, [r7, #30]
 800b8fa:	7f7b      	ldrb	r3, [r7, #29]
 800b8fc:	7808      	ldrb	r0, [r1, #0]
 800b8fe:	4961      	ldr	r1, [pc, #388]	; (800ba84 <AES_Encrypt+0x1b4>)
 800b900:	0092      	lsls	r2, r2, #2
 800b902:	440a      	add	r2, r1
 800b904:	4413      	add	r3, r2
 800b906:	4602      	mov	r2, r0
 800b908:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800b90a:	7fbb      	ldrb	r3, [r7, #30]
 800b90c:	3301      	adds	r3, #1
 800b90e:	77bb      	strb	r3, [r7, #30]
 800b910:	7fbb      	ldrb	r3, [r7, #30]
 800b912:	2b03      	cmp	r3, #3
 800b914:	d9e9      	bls.n	800b8ea <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800b916:	7f7b      	ldrb	r3, [r7, #29]
 800b918:	3301      	adds	r3, #1
 800b91a:	777b      	strb	r3, [r7, #29]
 800b91c:	7f7b      	ldrb	r3, [r7, #29]
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d9e0      	bls.n	800b8e4 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800b922:	2300      	movs	r3, #0
 800b924:	77fb      	strb	r3, [r7, #31]
 800b926:	e00b      	b.n	800b940 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800b928:	7ffb      	ldrb	r3, [r7, #31]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	441a      	add	r2, r3
 800b92e:	7ffb      	ldrb	r3, [r7, #31]
 800b930:	7812      	ldrb	r2, [r2, #0]
 800b932:	3320      	adds	r3, #32
 800b934:	443b      	add	r3, r7
 800b936:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800b93a:	7ffb      	ldrb	r3, [r7, #31]
 800b93c:	3301      	adds	r3, #1
 800b93e:	77fb      	strb	r3, [r7, #31]
 800b940:	7ffb      	ldrb	r3, [r7, #31]
 800b942:	2b0f      	cmp	r3, #15
 800b944:	d9f0      	bls.n	800b928 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f89c 	bl	800ba88 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800b950:	2301      	movs	r3, #1
 800b952:	773b      	strb	r3, [r7, #28]
 800b954:	e038      	b.n	800b9c8 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800b956:	2300      	movs	r3, #0
 800b958:	777b      	strb	r3, [r7, #29]
 800b95a:	e01f      	b.n	800b99c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	77bb      	strb	r3, [r7, #30]
 800b960:	e016      	b.n	800b990 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800b962:	7fba      	ldrb	r2, [r7, #30]
 800b964:	7f7b      	ldrb	r3, [r7, #29]
 800b966:	4947      	ldr	r1, [pc, #284]	; (800ba84 <AES_Encrypt+0x1b4>)
 800b968:	0092      	lsls	r2, r2, #2
 800b96a:	440a      	add	r2, r1
 800b96c:	4413      	add	r3, r2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	7fbd      	ldrb	r5, [r7, #30]
 800b972:	7f7c      	ldrb	r4, [r7, #29]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 f8bf 	bl	800baf8 <AES_Sub_Byte>
 800b97a:	4603      	mov	r3, r0
 800b97c:	4619      	mov	r1, r3
 800b97e:	4a41      	ldr	r2, [pc, #260]	; (800ba84 <AES_Encrypt+0x1b4>)
 800b980:	00ab      	lsls	r3, r5, #2
 800b982:	4413      	add	r3, r2
 800b984:	4423      	add	r3, r4
 800b986:	460a      	mov	r2, r1
 800b988:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800b98a:	7fbb      	ldrb	r3, [r7, #30]
 800b98c:	3301      	adds	r3, #1
 800b98e:	77bb      	strb	r3, [r7, #30]
 800b990:	7fbb      	ldrb	r3, [r7, #30]
 800b992:	2b03      	cmp	r3, #3
 800b994:	d9e5      	bls.n	800b962 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800b996:	7f7b      	ldrb	r3, [r7, #29]
 800b998:	3301      	adds	r3, #1
 800b99a:	777b      	strb	r3, [r7, #29]
 800b99c:	7f7b      	ldrb	r3, [r7, #29]
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	d9dc      	bls.n	800b95c <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800b9a2:	f000 f8c5 	bl	800bb30 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800b9a6:	f000 f905 	bl	800bbb4 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800b9aa:	f107 020c 	add.w	r2, r7, #12
 800b9ae:	7f3b      	ldrb	r3, [r7, #28]
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 f994 	bl	800bce0 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800b9b8:	f107 030c 	add.w	r3, r7, #12
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f863 	bl	800ba88 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800b9c2:	7f3b      	ldrb	r3, [r7, #28]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	773b      	strb	r3, [r7, #28]
 800b9c8:	7f3b      	ldrb	r3, [r7, #28]
 800b9ca:	2b09      	cmp	r3, #9
 800b9cc:	d9c3      	bls.n	800b956 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	777b      	strb	r3, [r7, #29]
 800b9d2:	e01f      	b.n	800ba14 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	77bb      	strb	r3, [r7, #30]
 800b9d8:	e016      	b.n	800ba08 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800b9da:	7fba      	ldrb	r2, [r7, #30]
 800b9dc:	7f7b      	ldrb	r3, [r7, #29]
 800b9de:	4929      	ldr	r1, [pc, #164]	; (800ba84 <AES_Encrypt+0x1b4>)
 800b9e0:	0092      	lsls	r2, r2, #2
 800b9e2:	440a      	add	r2, r1
 800b9e4:	4413      	add	r3, r2
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	7fbd      	ldrb	r5, [r7, #30]
 800b9ea:	7f7c      	ldrb	r4, [r7, #29]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f883 	bl	800baf8 <AES_Sub_Byte>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4a23      	ldr	r2, [pc, #140]	; (800ba84 <AES_Encrypt+0x1b4>)
 800b9f8:	00ab      	lsls	r3, r5, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	4423      	add	r3, r4
 800b9fe:	460a      	mov	r2, r1
 800ba00:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800ba02:	7fbb      	ldrb	r3, [r7, #30]
 800ba04:	3301      	adds	r3, #1
 800ba06:	77bb      	strb	r3, [r7, #30]
 800ba08:	7fbb      	ldrb	r3, [r7, #30]
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d9e5      	bls.n	800b9da <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800ba0e:	7f7b      	ldrb	r3, [r7, #29]
 800ba10:	3301      	adds	r3, #1
 800ba12:	777b      	strb	r3, [r7, #29]
 800ba14:	7f7b      	ldrb	r3, [r7, #29]
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d9dc      	bls.n	800b9d4 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800ba1a:	f000 f889 	bl	800bb30 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800ba1e:	f107 020c 	add.w	r2, r7, #12
 800ba22:	7f3b      	ldrb	r3, [r7, #28]
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f95a 	bl	800bce0 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800ba2c:	f107 030c 	add.w	r3, r7, #12
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f829 	bl	800ba88 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800ba36:	2300      	movs	r3, #0
 800ba38:	777b      	strb	r3, [r7, #29]
 800ba3a:	e01a      	b.n	800ba72 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	77bb      	strb	r3, [r7, #30]
 800ba40:	e011      	b.n	800ba66 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800ba42:	7fb9      	ldrb	r1, [r7, #30]
 800ba44:	7f7a      	ldrb	r2, [r7, #29]
 800ba46:	7fb8      	ldrb	r0, [r7, #30]
 800ba48:	7f7b      	ldrb	r3, [r7, #29]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4403      	add	r3, r0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4403      	add	r3, r0
 800ba54:	480b      	ldr	r0, [pc, #44]	; (800ba84 <AES_Encrypt+0x1b4>)
 800ba56:	0089      	lsls	r1, r1, #2
 800ba58:	4401      	add	r1, r0
 800ba5a:	440a      	add	r2, r1
 800ba5c:	7812      	ldrb	r2, [r2, #0]
 800ba5e:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800ba60:	7fbb      	ldrb	r3, [r7, #30]
 800ba62:	3301      	adds	r3, #1
 800ba64:	77bb      	strb	r3, [r7, #30]
 800ba66:	7fbb      	ldrb	r3, [r7, #30]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d9ea      	bls.n	800ba42 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800ba6c:	7f7b      	ldrb	r3, [r7, #29]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	777b      	strb	r3, [r7, #29]
 800ba72:	7f7b      	ldrb	r3, [r7, #29]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d9e1      	bls.n	800ba3c <AES_Encrypt+0x16c>
		}
	}

}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bdb0      	pop	{r4, r5, r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20000590 	.word	0x20000590

0800ba88 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800ba90:	2300      	movs	r3, #0
 800ba92:	73bb      	strb	r3, [r7, #14]
 800ba94:	e024      	b.n	800bae0 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
 800ba9a:	e01b      	b.n	800bad4 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800ba9c:	7bfa      	ldrb	r2, [r7, #15]
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	4914      	ldr	r1, [pc, #80]	; (800baf4 <AES_Add_Round_Key+0x6c>)
 800baa2:	0092      	lsls	r2, r2, #2
 800baa4:	440a      	add	r2, r1
 800baa6:	4413      	add	r3, r2
 800baa8:	7818      	ldrb	r0, [r3, #0]
 800baaa:	7bfa      	ldrb	r2, [r7, #15]
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	461a      	mov	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4413      	add	r3, r2
 800bab8:	7819      	ldrb	r1, [r3, #0]
 800baba:	7bfa      	ldrb	r2, [r7, #15]
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	4041      	eors	r1, r0
 800bac0:	b2c8      	uxtb	r0, r1
 800bac2:	490c      	ldr	r1, [pc, #48]	; (800baf4 <AES_Add_Round_Key+0x6c>)
 800bac4:	0092      	lsls	r2, r2, #2
 800bac6:	440a      	add	r2, r1
 800bac8:	4413      	add	r3, r2
 800baca:	4602      	mov	r2, r0
 800bacc:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	3301      	adds	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d9e0      	bls.n	800ba9c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	3301      	adds	r3, #1
 800bade:	73bb      	strb	r3, [r7, #14]
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d9d7      	bls.n	800ba96 <AES_Add_Round_Key+0xe>
		}
	}
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	bc80      	pop	{r7}
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20000590 	.word	0x20000590

0800baf8 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	091b      	lsrs	r3, r3, #4
 800bb06:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800bb10:	7bfa      	ldrb	r2, [r7, #15]
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	4905      	ldr	r1, [pc, #20]	; (800bb2c <AES_Sub_Byte+0x34>)
 800bb16:	0112      	lsls	r2, r2, #4
 800bb18:	440a      	add	r2, r1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800bb20:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bc80      	pop	{r7}
 800bb2a:	4770      	bx	lr
 800bb2c:	20000010 	.word	0x20000010

0800bb30 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800bb36:	4b1e      	ldr	r3, [pc, #120]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb38:	791b      	ldrb	r3, [r3, #4]
 800bb3a:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800bb3c:	4b1c      	ldr	r3, [pc, #112]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb3e:	795a      	ldrb	r2, [r3, #5]
 800bb40:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb42:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800bb44:	4b1a      	ldr	r3, [pc, #104]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb46:	799a      	ldrb	r2, [r3, #6]
 800bb48:	4b19      	ldr	r3, [pc, #100]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb4a:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800bb4c:	4b18      	ldr	r3, [pc, #96]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb4e:	79da      	ldrb	r2, [r3, #7]
 800bb50:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb52:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800bb54:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800bb5a:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb5c:	7a1b      	ldrb	r3, [r3, #8]
 800bb5e:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800bb60:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb62:	7a9a      	ldrb	r2, [r3, #10]
 800bb64:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb66:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800bb68:	4a11      	ldr	r2, [pc, #68]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800bb6e:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb70:	7a5b      	ldrb	r3, [r3, #9]
 800bb72:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800bb74:	4b0e      	ldr	r3, [pc, #56]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb76:	7ada      	ldrb	r2, [r3, #11]
 800bb78:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb7a:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800bb7c:	4a0c      	ldr	r2, [pc, #48]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800bb82:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb84:	7bdb      	ldrb	r3, [r3, #15]
 800bb86:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800bb88:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb8a:	7b9a      	ldrb	r2, [r3, #14]
 800bb8c:	4b08      	ldr	r3, [pc, #32]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb8e:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800bb90:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb92:	7b5a      	ldrb	r2, [r3, #13]
 800bb94:	4b06      	ldr	r3, [pc, #24]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb96:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb9a:	7b1a      	ldrb	r2, [r3, #12]
 800bb9c:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bb9e:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800bba0:	4a03      	ldr	r2, [pc, #12]	; (800bbb0 <AES_Shift_Rows+0x80>)
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	7313      	strb	r3, [r2, #12]
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr
 800bbb0:	20000590 	.word	0x20000590

0800bbb4 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73bb      	strb	r3, [r7, #14]
 800bbbe:	e082      	b.n	800bcc6 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
 800bbc4:	e033      	b.n	800bc2e <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800bbc6:	7bf9      	ldrb	r1, [r7, #15]
 800bbc8:	7bba      	ldrb	r2, [r7, #14]
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	4843      	ldr	r0, [pc, #268]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bbce:	0089      	lsls	r1, r1, #2
 800bbd0:	4401      	add	r1, r0
 800bbd2:	440a      	add	r2, r1
 800bbd4:	7812      	ldrb	r2, [r2, #0]
 800bbd6:	3310      	adds	r3, #16
 800bbd8:	443b      	add	r3, r7
 800bbda:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800bbde:	7bfa      	ldrb	r2, [r7, #15]
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	493e      	ldr	r1, [pc, #248]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bbe4:	0092      	lsls	r2, r2, #2
 800bbe6:	440a      	add	r2, r1
 800bbe8:	4413      	add	r3, r2
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	0052      	lsls	r2, r2, #1
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	3310      	adds	r3, #16
 800bbf4:	443b      	add	r3, r7
 800bbf6:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800bbfa:	7bfa      	ldrb	r2, [r7, #15]
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	4937      	ldr	r1, [pc, #220]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	440a      	add	r2, r1
 800bc04:	4413      	add	r3, r2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da0c      	bge.n	800bc28 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	3310      	adds	r3, #16
 800bc12:	443b      	add	r3, r7
 800bc14:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	f082 021b 	eor.w	r2, r2, #27
 800bc1e:	b2d2      	uxtb	r2, r2
 800bc20:	3310      	adds	r3, #16
 800bc22:	443b      	add	r3, r7
 800bc24:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	73fb      	strb	r3, [r7, #15]
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d9c8      	bls.n	800bbc6 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800bc34:	793a      	ldrb	r2, [r7, #4]
 800bc36:	7a7b      	ldrb	r3, [r7, #9]
 800bc38:	4053      	eors	r3, r2
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	797b      	ldrb	r3, [r7, #5]
 800bc3e:	4053      	eors	r3, r2
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	7abb      	ldrb	r3, [r7, #10]
 800bc44:	4053      	eors	r3, r2
 800bc46:	b2d9      	uxtb	r1, r3
 800bc48:	7afa      	ldrb	r2, [r7, #11]
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	404a      	eors	r2, r1
 800bc4e:	b2d1      	uxtb	r1, r2
 800bc50:	4a22      	ldr	r2, [pc, #136]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bc52:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800bc54:	7a3a      	ldrb	r2, [r7, #8]
 800bc56:	797b      	ldrb	r3, [r7, #5]
 800bc58:	4053      	eors	r3, r2
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	7abb      	ldrb	r3, [r7, #10]
 800bc5e:	4053      	eors	r3, r2
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	79bb      	ldrb	r3, [r7, #6]
 800bc64:	4053      	eors	r3, r2
 800bc66:	b2d9      	uxtb	r1, r3
 800bc68:	7afa      	ldrb	r2, [r7, #11]
 800bc6a:	7bbb      	ldrb	r3, [r7, #14]
 800bc6c:	404a      	eors	r2, r1
 800bc6e:	b2d1      	uxtb	r1, r2
 800bc70:	4a1a      	ldr	r2, [pc, #104]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bc72:	4413      	add	r3, r2
 800bc74:	460a      	mov	r2, r1
 800bc76:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800bc78:	7a3a      	ldrb	r2, [r7, #8]
 800bc7a:	7a7b      	ldrb	r3, [r7, #9]
 800bc7c:	4053      	eors	r3, r2
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	79bb      	ldrb	r3, [r7, #6]
 800bc82:	4053      	eors	r3, r2
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	7afb      	ldrb	r3, [r7, #11]
 800bc88:	4053      	eors	r3, r2
 800bc8a:	b2d9      	uxtb	r1, r3
 800bc8c:	79fa      	ldrb	r2, [r7, #7]
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	404a      	eors	r2, r1
 800bc92:	b2d1      	uxtb	r1, r2
 800bc94:	4a11      	ldr	r2, [pc, #68]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bc96:	4413      	add	r3, r2
 800bc98:	460a      	mov	r2, r1
 800bc9a:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800bc9c:	7a3a      	ldrb	r2, [r7, #8]
 800bc9e:	793b      	ldrb	r3, [r7, #4]
 800bca0:	4053      	eors	r3, r2
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	7a7b      	ldrb	r3, [r7, #9]
 800bca6:	4053      	eors	r3, r2
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	7abb      	ldrb	r3, [r7, #10]
 800bcac:	4053      	eors	r3, r2
 800bcae:	b2d9      	uxtb	r1, r3
 800bcb0:	79fa      	ldrb	r2, [r7, #7]
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	404a      	eors	r2, r1
 800bcb6:	b2d1      	uxtb	r1, r2
 800bcb8:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <AES_Mix_Collums+0x128>)
 800bcba:	4413      	add	r3, r2
 800bcbc:	460a      	mov	r2, r1
 800bcbe:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	73bb      	strb	r3, [r7, #14]
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	f67f af79 	bls.w	800bbc0 <AES_Mix_Collums+0xc>
	}
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bc80      	pop	{r7}
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000590 	.word	0x20000590

0800bce0 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800bce0:	b590      	push	{r4, r7, lr}
 800bce2:	b087      	sub	sp, #28
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	6039      	str	r1, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800bcec:	2300      	movs	r3, #0
 800bcee:	75fb      	strb	r3, [r7, #23]
 800bcf0:	e00c      	b.n	800bd0c <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	441a      	add	r2, r3
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	7812      	ldrb	r2, [r2, #0]
 800bcfe:	3318      	adds	r3, #24
 800bd00:	443b      	add	r3, r7
 800bd02:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d9ef      	bls.n	800bcf2 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800bd12:	7b3b      	ldrb	r3, [r7, #12]
 800bd14:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800bd16:	7b7b      	ldrb	r3, [r7, #13]
 800bd18:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800bd22:	7d3b      	ldrb	r3, [r7, #20]
 800bd24:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	75fb      	strb	r3, [r7, #23]
 800bd2a:	e012      	b.n	800bd52 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	3318      	adds	r3, #24
 800bd30:	443b      	add	r3, r7
 800bd32:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bd36:	7dfc      	ldrb	r4, [r7, #23]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff fedd 	bl	800baf8 <AES_Sub_Byte>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	461a      	mov	r2, r3
 800bd42:	f104 0318 	add.w	r3, r4, #24
 800bd46:	443b      	add	r3, r7
 800bd48:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d9e9      	bls.n	800bd2c <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800bd5c:	e010      	b.n	800bd80 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800bd5e:	7d7b      	ldrb	r3, [r7, #21]
 800bd60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd64:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800bd66:	7d7b      	ldrb	r3, [r7, #21]
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800bd6c:	7cfb      	ldrb	r3, [r7, #19]
 800bd6e:	2b80      	cmp	r3, #128	; 0x80
 800bd70:	d103      	bne.n	800bd7a <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800bd72:	7d7b      	ldrb	r3, [r7, #21]
 800bd74:	f083 031b 	eor.w	r3, r3, #27
 800bd78:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800bd80:	79fb      	ldrb	r3, [r7, #7]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d1eb      	bne.n	800bd5e <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800bd86:	7b3a      	ldrb	r2, [r7, #12]
 800bd88:	7d7b      	ldrb	r3, [r7, #21]
 800bd8a:	4053      	eors	r3, r2
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800bd90:	2300      	movs	r3, #0
 800bd92:	75fb      	strb	r3, [r7, #23]
 800bd94:	e02f      	b.n	800bdf6 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	75bb      	strb	r3, [r7, #22]
 800bd9a:	e026      	b.n	800bdea <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800bd9c:	7dba      	ldrb	r2, [r7, #22]
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	461a      	mov	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	4413      	add	r3, r2
 800bdaa:	7819      	ldrb	r1, [r3, #0]
 800bdac:	7dbb      	ldrb	r3, [r7, #22]
 800bdae:	3318      	adds	r3, #24
 800bdb0:	443b      	add	r3, r7
 800bdb2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800bdb6:	7db8      	ldrb	r0, [r7, #22]
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4403      	add	r3, r0
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	4403      	add	r3, r0
 800bdc4:	404a      	eors	r2, r1
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800bdca:	7dba      	ldrb	r2, [r7, #22]
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	441a      	add	r2, r3
 800bdd8:	7dbb      	ldrb	r3, [r7, #22]
 800bdda:	7812      	ldrb	r2, [r2, #0]
 800bddc:	3318      	adds	r3, #24
 800bdde:	443b      	add	r3, r7
 800bde0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800bde4:	7dbb      	ldrb	r3, [r7, #22]
 800bde6:	3301      	adds	r3, #1
 800bde8:	75bb      	strb	r3, [r7, #22]
 800bdea:	7dbb      	ldrb	r3, [r7, #22]
 800bdec:	2b03      	cmp	r3, #3
 800bdee:	d9d5      	bls.n	800bd9c <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	75fb      	strb	r3, [r7, #23]
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d9cc      	bls.n	800bd96 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	bd90      	pop	{r4, r7, pc}

0800be06 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b08a      	sub	sp, #40	; 0x28
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	461a      	mov	r2, r3
 800be12:	460b      	mov	r3, r1
 800be14:	72fb      	strb	r3, [r7, #11]
 800be16:	4613      	mov	r3, r2
 800be18:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800be1a:	2300      	movs	r3, #0
 800be1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800be26:	2300      	movs	r3, #0
 800be28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	091b      	lsrs	r3, r3, #4
 800be30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 800be3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be42:	2b00      	cmp	r3, #0
 800be44:	d004      	beq.n	800be50 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800be46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800be4a:	3301      	adds	r3, #1
 800be4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800be50:	2301      	movs	r3, #1
 800be52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be56:	e07e      	b.n	800bf56 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800be58:	2301      	movs	r3, #1
 800be5a:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800be5c:	2300      	movs	r3, #0
 800be5e:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800be60:	2300      	movs	r3, #0
 800be62:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800be64:	2300      	movs	r3, #0
 800be66:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800be68:	2300      	movs	r3, #0
 800be6a:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800be6c:	7abb      	ldrb	r3, [r7, #10]
 800be6e:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be72:	78db      	ldrb	r3, [r3, #3]
 800be74:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be78:	789b      	ldrb	r3, [r3, #2]
 800be7a:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800be82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	0a1b      	lsrs	r3, r3, #8
 800be92:	b2db      	uxtb	r3, r3
 800be94:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800be96:	2300      	movs	r3, #0
 800be98:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800be9c:	2300      	movs	r3, #0
 800be9e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800bea2:	2300      	movs	r3, #0
 800bea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 800bea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800beac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff fd0a 	bl	800b8d0 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800bebc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bec0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d01c      	beq.n	800bf02 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800bec8:	2300      	movs	r3, #0
 800beca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bece:	e013      	b.n	800bef8 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bed8:	3328      	adds	r3, #40	; 0x28
 800beda:	443b      	add	r3, r7
 800bedc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bee0:	4053      	eors	r3, r2
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	701a      	strb	r2, [r3, #0]
				Data++;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800beee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bef2:	3301      	adds	r3, #1
 800bef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800befc:	2b0f      	cmp	r3, #15
 800befe:	d9e7      	bls.n	800bed0 <Encrypt_Payload+0xca>
 800bf00:	e024      	b.n	800bf4c <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800bf02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800bf0a:	2310      	movs	r3, #16
 800bf0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf16:	e013      	b.n	800bf40 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf20:	3328      	adds	r3, #40	; 0x28
 800bf22:	443b      	add	r3, r7
 800bf24:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800bf28:	4053      	eors	r3, r2
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	701a      	strb	r2, [r3, #0]
				Data++;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3301      	adds	r3, #1
 800bf34:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800bf36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bf40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bf44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d3e5      	bcc.n	800bf18 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800bf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf50:	3301      	adds	r3, #1
 800bf52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bf5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f67f af7a 	bls.w	800be58 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
 800bf68:	3728      	adds	r7, #40	; 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b09b      	sub	sp, #108	; 0x6c
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800bf80:	4bba      	ldr	r3, [pc, #744]	; (800c26c <Calculate_MIC+0x2fc>)
 800bf82:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800bf86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800bf8c:	4bb7      	ldr	r3, [pc, #732]	; (800c26c <Calculate_MIC+0x2fc>)
 800bf8e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bf92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800bf98:	4bb4      	ldr	r3, [pc, #720]	; (800c26c <Calculate_MIC+0x2fc>)
 800bf9a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800bf9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800bfa4:	4bb1      	ldr	r3, [pc, #708]	; (800c26c <Calculate_MIC+0x2fc>)
 800bfa6:	f107 0414 	add.w	r4, r7, #20
 800bfaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800bfc2:	2349      	movs	r3, #73	; 0x49
 800bfc4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800bfe0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800bfe4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 800bfe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfec:	78db      	ldrb	r3, [r3, #3]
 800bfee:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800bff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bff6:	789b      	ldrb	r3, [r3, #2]
 800bff8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 800bffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 800c006:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800c022:	2300      	movs	r3, #0
 800c024:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 800c028:	2300      	movs	r3, #0
 800c02a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 800c02e:	2300      	movs	r3, #0
 800c030:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	f003 030f 	and.w	r3, r3, #15
 800c048:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 800c04c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c050:	2b00      	cmp	r3, #0
 800c052:	d004      	beq.n	800c05e <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800c054:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c058:	3301      	adds	r3, #1
 800c05a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800c05e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c066:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 f901 	bl	800c270 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800c06e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff fc2b 	bl	800b8d0 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800c07a:	2300      	movs	r3, #0
 800c07c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c080:	e010      	b.n	800c0a4 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800c082:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c08a:	3268      	adds	r2, #104	; 0x68
 800c08c:	443a      	add	r2, r7
 800c08e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c092:	3368      	adds	r3, #104	; 0x68
 800c094:	443b      	add	r3, r7
 800c096:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800c09a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c09e:	3301      	adds	r3, #1
 800c0a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c0a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0a8:	2b0f      	cmp	r3, #15
 800c0aa:	d9ea      	bls.n	800c082 <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800c0ac:	e043      	b.n	800c136 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c0b4:	e00f      	b.n	800c0d6 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800c0b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	3368      	adds	r3, #104	; 0x68
 800c0c0:	443b      	add	r3, r7
 800c0c2:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800c0cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c0d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0da:	2b0f      	cmp	r3, #15
 800c0dc:	d9eb      	bls.n	800c0b6 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800c0de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c0e2:	f107 0314 	add.w	r3, r7, #20
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f949 	bl	800c380 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800c0ee:	f107 0314 	add.w	r3, r7, #20
 800c0f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fbeb 	bl	800b8d0 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c100:	e010      	b.n	800c124 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800c102:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c10a:	3268      	adds	r2, #104	; 0x68
 800c10c:	443a      	add	r2, r7
 800c10e:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800c112:	3368      	adds	r3, #104	; 0x68
 800c114:	443b      	add	r3, r7
 800c116:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800c11a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c11e:	3301      	adds	r3, #1
 800c120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c128:	2b0f      	cmp	r3, #15
 800c12a:	d9ea      	bls.n	800c102 <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800c12c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800c130:	3301      	adds	r3, #1
 800c132:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 800c136:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800c13a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c13e:	429a      	cmp	r2, r3
 800c140:	d3b5      	bcc.n	800c0ae <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800c142:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c146:	2b00      	cmp	r3, #0
 800c148:	d12e      	bne.n	800c1a8 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800c14a:	2300      	movs	r3, #0
 800c14c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c150:	e00f      	b.n	800c172 <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800c152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	3368      	adds	r3, #104	; 0x68
 800c15c:	443b      	add	r3, r7
 800c15e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800c168:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c16c:	3301      	adds	r3, #1
 800c16e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c172:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c176:	2b0f      	cmp	r3, #15
 800c178:	d9eb      	bls.n	800c152 <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800c17a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800c17e:	f107 0314 	add.w	r3, r7, #20
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f000 f8fb 	bl	800c380 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800c18a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c18e:	f107 0314 	add.w	r3, r7, #20
 800c192:	4611      	mov	r1, r2
 800c194:	4618      	mov	r0, r3
 800c196:	f000 f8f3 	bl	800c380 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800c19a:	f107 0314 	add.w	r3, r7, #20
 800c19e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7ff fb95 	bl	800b8d0 <AES_Encrypt>
 800c1a6:	e04d      	b.n	800c244 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c1ae:	e02f      	b.n	800c210 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800c1b0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c1b4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d20a      	bcs.n	800c1d2 <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800c1bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	7812      	ldrb	r2, [r2, #0]
 800c1c4:	3368      	adds	r3, #104	; 0x68
 800c1c6:	443b      	add	r3, r7
 800c1c8:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800c1d2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c1d6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d106      	bne.n	800c1ec <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800c1de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1e2:	3368      	adds	r3, #104	; 0x68
 800c1e4:	443b      	add	r3, r7
 800c1e6:	2280      	movs	r2, #128	; 0x80
 800c1e8:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800c1ec:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c1f0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d906      	bls.n	800c206 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800c1f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1fc:	3368      	adds	r3, #104	; 0x68
 800c1fe:	443b      	add	r3, r7
 800c200:	2200      	movs	r2, #0
 800c202:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800c206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c20a:	3301      	adds	r3, #1
 800c20c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c214:	2b0f      	cmp	r3, #15
 800c216:	d9cb      	bls.n	800c1b0 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800c218:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c21c:	f107 0314 	add.w	r3, r7, #20
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f000 f8ac 	bl	800c380 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800c228:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c22c:	f107 0314 	add.w	r3, r7, #20
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f8a4 	bl	800c380 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800c238:	f107 0314 	add.w	r3, r7, #20
 800c23c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff fb46 	bl	800b8d0 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800c244:	7d3a      	ldrb	r2, [r7, #20]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	3301      	adds	r3, #1
 800c24e:	7d7a      	ldrb	r2, [r7, #21]
 800c250:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	3302      	adds	r3, #2
 800c256:	7dba      	ldrb	r2, [r7, #22]
 800c258:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	3303      	adds	r3, #3
 800c25e:	7dfa      	ldrb	r2, [r7, #23]
 800c260:	701a      	strb	r2, [r3, #0]
}
 800c262:	bf00      	nop
 800c264:	376c      	adds	r7, #108	; 0x6c
 800c266:	46bd      	mov	sp, r7
 800c268:	bd90      	pop	{r4, r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0800d5d8 	.word	0x0800d5d8

0800c270 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fb26 	bl	800b8d0 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	b25b      	sxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	da02      	bge.n	800c294 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800c28e:	2301      	movs	r3, #1
 800c290:	75bb      	strb	r3, [r7, #22]
 800c292:	e001      	b.n	800c298 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f000 f83c 	bl	800c316 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800c29e:	7dbb      	ldrb	r3, [r7, #22]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d109      	bne.n	800c2b8 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	330f      	adds	r3, #15
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	320f      	adds	r2, #15
 800c2ae:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c2b2:	43db      	mvns	r3, r3
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75fb      	strb	r3, [r7, #23]
 800c2bc:	e00a      	b.n	800c2d4 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	441a      	add	r2, r3
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	440b      	add	r3, r1
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800c2ce:	7dfb      	ldrb	r3, [r7, #23]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	75fb      	strb	r3, [r7, #23]
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	2b0f      	cmp	r3, #15
 800c2d8:	d9f1      	bls.n	800c2be <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b25b      	sxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	da02      	bge.n	800c2ea <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	75bb      	strb	r3, [r7, #22]
 800c2e8:	e001      	b.n	800c2ee <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800c2ee:	68b8      	ldr	r0, [r7, #8]
 800c2f0:	f000 f811 	bl	800c316 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800c2f4:	7dbb      	ldrb	r3, [r7, #22]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d109      	bne.n	800c30e <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	330f      	adds	r3, #15
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	320f      	adds	r2, #15
 800c304:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c308:	43db      	mvns	r3, r3
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	7013      	strb	r3, [r2, #0]
	}
}
 800c30e:	bf00      	nop
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800c316:	b480      	push	{r7}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
 800c326:	e022      	b.n	800c36e <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	2b0e      	cmp	r3, #14
 800c32c:	d80d      	bhi.n	800c34a <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
 800c330:	3301      	adds	r3, #1
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	4413      	add	r3, r2
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	b25b      	sxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	da02      	bge.n	800c344 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800c33e:	2301      	movs	r3, #1
 800c340:	73bb      	strb	r3, [r7, #14]
 800c342:	e004      	b.n	800c34e <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	73bb      	strb	r3, [r7, #14]
 800c348:	e001      	b.n	800c34e <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4413      	add	r3, r2
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	b2d9      	uxtb	r1, r3
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	7bba      	ldrb	r2, [r7, #14]
 800c362:	440a      	add	r2, r1
 800c364:	b2d2      	uxtb	r2, r2
 800c366:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	3301      	adds	r3, #1
 800c36c:	73fb      	strb	r3, [r7, #15]
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	2b0f      	cmp	r3, #15
 800c372:	d9d9      	bls.n	800c328 <Shift_Left+0x12>
	}
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bc80      	pop	{r7}
 800c37e:	4770      	bx	lr

0800c380 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
 800c38e:	e010      	b.n	800c3b2 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	4413      	add	r3, r2
 800c396:	7819      	ldrb	r1, [r3, #0]
 800c398:	7bfb      	ldrb	r3, [r7, #15]
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	4413      	add	r3, r2
 800c39e:	781a      	ldrb	r2, [r3, #0]
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	4403      	add	r3, r0
 800c3a6:	404a      	eors	r2, r1
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	73fb      	strb	r3, [r7, #15]
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	2b0f      	cmp	r3, #15
 800c3b6:	d9eb      	bls.n	800c390 <XOR+0x10>
	}
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bc80      	pop	{r7}
 800c3c2:	4770      	bx	lr

0800c3c4 <__assert_func>:
 800c3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3c6:	4614      	mov	r4, r2
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <__assert_func+0x2c>)
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68d8      	ldr	r0, [r3, #12]
 800c3d2:	b14c      	cbz	r4, 800c3e8 <__assert_func+0x24>
 800c3d4:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <__assert_func+0x30>)
 800c3d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3da:	9100      	str	r1, [sp, #0]
 800c3dc:	462b      	mov	r3, r5
 800c3de:	4906      	ldr	r1, [pc, #24]	; (800c3f8 <__assert_func+0x34>)
 800c3e0:	f000 f8b2 	bl	800c548 <fiprintf>
 800c3e4:	f000 f9bd 	bl	800c762 <abort>
 800c3e8:	4b04      	ldr	r3, [pc, #16]	; (800c3fc <__assert_func+0x38>)
 800c3ea:	461c      	mov	r4, r3
 800c3ec:	e7f3      	b.n	800c3d6 <__assert_func+0x12>
 800c3ee:	bf00      	nop
 800c3f0:	20000168 	.word	0x20000168
 800c3f4:	0800d692 	.word	0x0800d692
 800c3f8:	0800d69f 	.word	0x0800d69f
 800c3fc:	0800d6cd 	.word	0x0800d6cd

0800c400 <std>:
 800c400:	2300      	movs	r3, #0
 800c402:	b510      	push	{r4, lr}
 800c404:	4604      	mov	r4, r0
 800c406:	e9c0 3300 	strd	r3, r3, [r0]
 800c40a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c40e:	6083      	str	r3, [r0, #8]
 800c410:	8181      	strh	r1, [r0, #12]
 800c412:	6643      	str	r3, [r0, #100]	; 0x64
 800c414:	81c2      	strh	r2, [r0, #14]
 800c416:	6183      	str	r3, [r0, #24]
 800c418:	4619      	mov	r1, r3
 800c41a:	2208      	movs	r2, #8
 800c41c:	305c      	adds	r0, #92	; 0x5c
 800c41e:	f000 f916 	bl	800c64e <memset>
 800c422:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <std+0x58>)
 800c424:	6224      	str	r4, [r4, #32]
 800c426:	6263      	str	r3, [r4, #36]	; 0x24
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <std+0x5c>)
 800c42a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c42c:	4b0c      	ldr	r3, [pc, #48]	; (800c460 <std+0x60>)
 800c42e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c430:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <std+0x64>)
 800c432:	6323      	str	r3, [r4, #48]	; 0x30
 800c434:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <std+0x68>)
 800c436:	429c      	cmp	r4, r3
 800c438:	d006      	beq.n	800c448 <std+0x48>
 800c43a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c43e:	4294      	cmp	r4, r2
 800c440:	d002      	beq.n	800c448 <std+0x48>
 800c442:	33d0      	adds	r3, #208	; 0xd0
 800c444:	429c      	cmp	r4, r3
 800c446:	d105      	bne.n	800c454 <std+0x54>
 800c448:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c450:	f000 b976 	b.w	800c740 <__retarget_lock_init_recursive>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800c5a9 	.word	0x0800c5a9
 800c45c:	0800c5cb 	.word	0x0800c5cb
 800c460:	0800c603 	.word	0x0800c603
 800c464:	0800c627 	.word	0x0800c627
 800c468:	200005a0 	.word	0x200005a0

0800c46c <stdio_exit_handler>:
 800c46c:	4a02      	ldr	r2, [pc, #8]	; (800c478 <stdio_exit_handler+0xc>)
 800c46e:	4903      	ldr	r1, [pc, #12]	; (800c47c <stdio_exit_handler+0x10>)
 800c470:	4803      	ldr	r0, [pc, #12]	; (800c480 <stdio_exit_handler+0x14>)
 800c472:	f000 b87b 	b.w	800c56c <_fwalk_sglue>
 800c476:	bf00      	nop
 800c478:	20000110 	.word	0x20000110
 800c47c:	0800d009 	.word	0x0800d009
 800c480:	2000011c 	.word	0x2000011c

0800c484 <cleanup_stdio>:
 800c484:	6841      	ldr	r1, [r0, #4]
 800c486:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <cleanup_stdio+0x34>)
 800c488:	b510      	push	{r4, lr}
 800c48a:	4299      	cmp	r1, r3
 800c48c:	4604      	mov	r4, r0
 800c48e:	d001      	beq.n	800c494 <cleanup_stdio+0x10>
 800c490:	f000 fdba 	bl	800d008 <_fflush_r>
 800c494:	68a1      	ldr	r1, [r4, #8]
 800c496:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <cleanup_stdio+0x38>)
 800c498:	4299      	cmp	r1, r3
 800c49a:	d002      	beq.n	800c4a2 <cleanup_stdio+0x1e>
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fdb3 	bl	800d008 <_fflush_r>
 800c4a2:	68e1      	ldr	r1, [r4, #12]
 800c4a4:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <cleanup_stdio+0x3c>)
 800c4a6:	4299      	cmp	r1, r3
 800c4a8:	d004      	beq.n	800c4b4 <cleanup_stdio+0x30>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b0:	f000 bdaa 	b.w	800d008 <_fflush_r>
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	bf00      	nop
 800c4b8:	200005a0 	.word	0x200005a0
 800c4bc:	20000608 	.word	0x20000608
 800c4c0:	20000670 	.word	0x20000670

0800c4c4 <global_stdio_init.part.0>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	4b0b      	ldr	r3, [pc, #44]	; (800c4f4 <global_stdio_init.part.0+0x30>)
 800c4c8:	4c0b      	ldr	r4, [pc, #44]	; (800c4f8 <global_stdio_init.part.0+0x34>)
 800c4ca:	4a0c      	ldr	r2, [pc, #48]	; (800c4fc <global_stdio_init.part.0+0x38>)
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	2104      	movs	r1, #4
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f7ff ff94 	bl	800c400 <std>
 800c4d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c4dc:	2201      	movs	r2, #1
 800c4de:	2109      	movs	r1, #9
 800c4e0:	f7ff ff8e 	bl	800c400 <std>
 800c4e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4ee:	2112      	movs	r1, #18
 800c4f0:	f7ff bf86 	b.w	800c400 <std>
 800c4f4:	200006d8 	.word	0x200006d8
 800c4f8:	200005a0 	.word	0x200005a0
 800c4fc:	0800c46d 	.word	0x0800c46d

0800c500 <__sfp_lock_acquire>:
 800c500:	4801      	ldr	r0, [pc, #4]	; (800c508 <__sfp_lock_acquire+0x8>)
 800c502:	f000 b91e 	b.w	800c742 <__retarget_lock_acquire_recursive>
 800c506:	bf00      	nop
 800c508:	200006e1 	.word	0x200006e1

0800c50c <__sfp_lock_release>:
 800c50c:	4801      	ldr	r0, [pc, #4]	; (800c514 <__sfp_lock_release+0x8>)
 800c50e:	f000 b919 	b.w	800c744 <__retarget_lock_release_recursive>
 800c512:	bf00      	nop
 800c514:	200006e1 	.word	0x200006e1

0800c518 <__sinit>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	4604      	mov	r4, r0
 800c51c:	f7ff fff0 	bl	800c500 <__sfp_lock_acquire>
 800c520:	6a23      	ldr	r3, [r4, #32]
 800c522:	b11b      	cbz	r3, 800c52c <__sinit+0x14>
 800c524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c528:	f7ff bff0 	b.w	800c50c <__sfp_lock_release>
 800c52c:	4b04      	ldr	r3, [pc, #16]	; (800c540 <__sinit+0x28>)
 800c52e:	6223      	str	r3, [r4, #32]
 800c530:	4b04      	ldr	r3, [pc, #16]	; (800c544 <__sinit+0x2c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1f5      	bne.n	800c524 <__sinit+0xc>
 800c538:	f7ff ffc4 	bl	800c4c4 <global_stdio_init.part.0>
 800c53c:	e7f2      	b.n	800c524 <__sinit+0xc>
 800c53e:	bf00      	nop
 800c540:	0800c485 	.word	0x0800c485
 800c544:	200006d8 	.word	0x200006d8

0800c548 <fiprintf>:
 800c548:	b40e      	push	{r1, r2, r3}
 800c54a:	b503      	push	{r0, r1, lr}
 800c54c:	4601      	mov	r1, r0
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	4805      	ldr	r0, [pc, #20]	; (800c568 <fiprintf+0x20>)
 800c552:	f853 2b04 	ldr.w	r2, [r3], #4
 800c556:	6800      	ldr	r0, [r0, #0]
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	f000 fa25 	bl	800c9a8 <_vfiprintf_r>
 800c55e:	b002      	add	sp, #8
 800c560:	f85d eb04 	ldr.w	lr, [sp], #4
 800c564:	b003      	add	sp, #12
 800c566:	4770      	bx	lr
 800c568:	20000168 	.word	0x20000168

0800c56c <_fwalk_sglue>:
 800c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c570:	4607      	mov	r7, r0
 800c572:	4688      	mov	r8, r1
 800c574:	4614      	mov	r4, r2
 800c576:	2600      	movs	r6, #0
 800c578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c57c:	f1b9 0901 	subs.w	r9, r9, #1
 800c580:	d505      	bpl.n	800c58e <_fwalk_sglue+0x22>
 800c582:	6824      	ldr	r4, [r4, #0]
 800c584:	2c00      	cmp	r4, #0
 800c586:	d1f7      	bne.n	800c578 <_fwalk_sglue+0xc>
 800c588:	4630      	mov	r0, r6
 800c58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58e:	89ab      	ldrh	r3, [r5, #12]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d907      	bls.n	800c5a4 <_fwalk_sglue+0x38>
 800c594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c598:	3301      	adds	r3, #1
 800c59a:	d003      	beq.n	800c5a4 <_fwalk_sglue+0x38>
 800c59c:	4629      	mov	r1, r5
 800c59e:	4638      	mov	r0, r7
 800c5a0:	47c0      	blx	r8
 800c5a2:	4306      	orrs	r6, r0
 800c5a4:	3568      	adds	r5, #104	; 0x68
 800c5a6:	e7e9      	b.n	800c57c <_fwalk_sglue+0x10>

0800c5a8 <__sread>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b0:	f000 f878 	bl	800c6a4 <_read_r>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	bfab      	itete	ge
 800c5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c5bc:	181b      	addge	r3, r3, r0
 800c5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5c2:	bfac      	ite	ge
 800c5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5c6:	81a3      	strhlt	r3, [r4, #12]
 800c5c8:	bd10      	pop	{r4, pc}

0800c5ca <__swrite>:
 800c5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	898b      	ldrh	r3, [r1, #12]
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	05db      	lsls	r3, r3, #23
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	4616      	mov	r6, r2
 800c5da:	d505      	bpl.n	800c5e8 <__swrite+0x1e>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e4:	f000 f84c 	bl	800c680 <_lseek_r>
 800c5e8:	89a3      	ldrh	r3, [r4, #12]
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fe:	f000 b863 	b.w	800c6c8 <_write_r>

0800c602 <__sseek>:
 800c602:	b510      	push	{r4, lr}
 800c604:	460c      	mov	r4, r1
 800c606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60a:	f000 f839 	bl	800c680 <_lseek_r>
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	bf15      	itete	ne
 800c614:	6560      	strne	r0, [r4, #84]	; 0x54
 800c616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c61e:	81a3      	strheq	r3, [r4, #12]
 800c620:	bf18      	it	ne
 800c622:	81a3      	strhne	r3, [r4, #12]
 800c624:	bd10      	pop	{r4, pc}

0800c626 <__sclose>:
 800c626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c62a:	f000 b819 	b.w	800c660 <_close_r>

0800c62e <memcmp>:
 800c62e:	b510      	push	{r4, lr}
 800c630:	3901      	subs	r1, #1
 800c632:	4402      	add	r2, r0
 800c634:	4290      	cmp	r0, r2
 800c636:	d101      	bne.n	800c63c <memcmp+0xe>
 800c638:	2000      	movs	r0, #0
 800c63a:	e005      	b.n	800c648 <memcmp+0x1a>
 800c63c:	7803      	ldrb	r3, [r0, #0]
 800c63e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c642:	42a3      	cmp	r3, r4
 800c644:	d001      	beq.n	800c64a <memcmp+0x1c>
 800c646:	1b18      	subs	r0, r3, r4
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	3001      	adds	r0, #1
 800c64c:	e7f2      	b.n	800c634 <memcmp+0x6>

0800c64e <memset>:
 800c64e:	4603      	mov	r3, r0
 800c650:	4402      	add	r2, r0
 800c652:	4293      	cmp	r3, r2
 800c654:	d100      	bne.n	800c658 <memset+0xa>
 800c656:	4770      	bx	lr
 800c658:	f803 1b01 	strb.w	r1, [r3], #1
 800c65c:	e7f9      	b.n	800c652 <memset+0x4>
	...

0800c660 <_close_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	2300      	movs	r3, #0
 800c664:	4d05      	ldr	r5, [pc, #20]	; (800c67c <_close_r+0x1c>)
 800c666:	4604      	mov	r4, r0
 800c668:	4608      	mov	r0, r1
 800c66a:	602b      	str	r3, [r5, #0]
 800c66c:	f7f8 faf4 	bl	8004c58 <_close>
 800c670:	1c43      	adds	r3, r0, #1
 800c672:	d102      	bne.n	800c67a <_close_r+0x1a>
 800c674:	682b      	ldr	r3, [r5, #0]
 800c676:	b103      	cbz	r3, 800c67a <_close_r+0x1a>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
 800c67c:	200006dc 	.word	0x200006dc

0800c680 <_lseek_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	4611      	mov	r1, r2
 800c688:	2200      	movs	r2, #0
 800c68a:	4d05      	ldr	r5, [pc, #20]	; (800c6a0 <_lseek_r+0x20>)
 800c68c:	602a      	str	r2, [r5, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f7f8 fb06 	bl	8004ca0 <_lseek>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_lseek_r+0x1e>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_lseek_r+0x1e>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200006dc 	.word	0x200006dc

0800c6a4 <_read_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4d05      	ldr	r5, [pc, #20]	; (800c6c4 <_read_r+0x20>)
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f7f8 fa97 	bl	8004be6 <_read>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_read_r+0x1e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_read_r+0x1e>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200006dc 	.word	0x200006dc

0800c6c8 <_write_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	4608      	mov	r0, r1
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4d05      	ldr	r5, [pc, #20]	; (800c6e8 <_write_r+0x20>)
 800c6d4:	602a      	str	r2, [r5, #0]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	f7f8 faa2 	bl	8004c20 <_write>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d102      	bne.n	800c6e6 <_write_r+0x1e>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	b103      	cbz	r3, 800c6e6 <_write_r+0x1e>
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	200006dc 	.word	0x200006dc

0800c6ec <__errno>:
 800c6ec:	4b01      	ldr	r3, [pc, #4]	; (800c6f4 <__errno+0x8>)
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20000168 	.word	0x20000168

0800c6f8 <__libc_init_array>:
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	4d0c      	ldr	r5, [pc, #48]	; (800c730 <__libc_init_array+0x38>)
 800c6fe:	4c0d      	ldr	r4, [pc, #52]	; (800c734 <__libc_init_array+0x3c>)
 800c700:	1b64      	subs	r4, r4, r5
 800c702:	10a4      	asrs	r4, r4, #2
 800c704:	42a6      	cmp	r6, r4
 800c706:	d109      	bne.n	800c71c <__libc_init_array+0x24>
 800c708:	f000 fe22 	bl	800d350 <_init>
 800c70c:	2600      	movs	r6, #0
 800c70e:	4d0a      	ldr	r5, [pc, #40]	; (800c738 <__libc_init_array+0x40>)
 800c710:	4c0a      	ldr	r4, [pc, #40]	; (800c73c <__libc_init_array+0x44>)
 800c712:	1b64      	subs	r4, r4, r5
 800c714:	10a4      	asrs	r4, r4, #2
 800c716:	42a6      	cmp	r6, r4
 800c718:	d105      	bne.n	800c726 <__libc_init_array+0x2e>
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c720:	4798      	blx	r3
 800c722:	3601      	adds	r6, #1
 800c724:	e7ee      	b.n	800c704 <__libc_init_array+0xc>
 800c726:	f855 3b04 	ldr.w	r3, [r5], #4
 800c72a:	4798      	blx	r3
 800c72c:	3601      	adds	r6, #1
 800c72e:	e7f2      	b.n	800c716 <__libc_init_array+0x1e>
 800c730:	0800d70c 	.word	0x0800d70c
 800c734:	0800d70c 	.word	0x0800d70c
 800c738:	0800d70c 	.word	0x0800d70c
 800c73c:	0800d710 	.word	0x0800d710

0800c740 <__retarget_lock_init_recursive>:
 800c740:	4770      	bx	lr

0800c742 <__retarget_lock_acquire_recursive>:
 800c742:	4770      	bx	lr

0800c744 <__retarget_lock_release_recursive>:
 800c744:	4770      	bx	lr

0800c746 <memcpy>:
 800c746:	440a      	add	r2, r1
 800c748:	4291      	cmp	r1, r2
 800c74a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c74e:	d100      	bne.n	800c752 <memcpy+0xc>
 800c750:	4770      	bx	lr
 800c752:	b510      	push	{r4, lr}
 800c754:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c758:	4291      	cmp	r1, r2
 800c75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c75e:	d1f9      	bne.n	800c754 <memcpy+0xe>
 800c760:	bd10      	pop	{r4, pc}

0800c762 <abort>:
 800c762:	2006      	movs	r0, #6
 800c764:	b508      	push	{r3, lr}
 800c766:	f000 fd35 	bl	800d1d4 <raise>
 800c76a:	2001      	movs	r0, #1
 800c76c:	f7f8 fa31 	bl	8004bd2 <_exit>

0800c770 <_free_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4605      	mov	r5, r0
 800c774:	2900      	cmp	r1, #0
 800c776:	d040      	beq.n	800c7fa <_free_r+0x8a>
 800c778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c77c:	1f0c      	subs	r4, r1, #4
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfb8      	it	lt
 800c782:	18e4      	addlt	r4, r4, r3
 800c784:	f000 f8dc 	bl	800c940 <__malloc_lock>
 800c788:	4a1c      	ldr	r2, [pc, #112]	; (800c7fc <_free_r+0x8c>)
 800c78a:	6813      	ldr	r3, [r2, #0]
 800c78c:	b933      	cbnz	r3, 800c79c <_free_r+0x2c>
 800c78e:	6063      	str	r3, [r4, #4]
 800c790:	6014      	str	r4, [r2, #0]
 800c792:	4628      	mov	r0, r5
 800c794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c798:	f000 b8d8 	b.w	800c94c <__malloc_unlock>
 800c79c:	42a3      	cmp	r3, r4
 800c79e:	d908      	bls.n	800c7b2 <_free_r+0x42>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	1821      	adds	r1, r4, r0
 800c7a4:	428b      	cmp	r3, r1
 800c7a6:	bf01      	itttt	eq
 800c7a8:	6819      	ldreq	r1, [r3, #0]
 800c7aa:	685b      	ldreq	r3, [r3, #4]
 800c7ac:	1809      	addeq	r1, r1, r0
 800c7ae:	6021      	streq	r1, [r4, #0]
 800c7b0:	e7ed      	b.n	800c78e <_free_r+0x1e>
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	b10b      	cbz	r3, 800c7bc <_free_r+0x4c>
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	d9fa      	bls.n	800c7b2 <_free_r+0x42>
 800c7bc:	6811      	ldr	r1, [r2, #0]
 800c7be:	1850      	adds	r0, r2, r1
 800c7c0:	42a0      	cmp	r0, r4
 800c7c2:	d10b      	bne.n	800c7dc <_free_r+0x6c>
 800c7c4:	6820      	ldr	r0, [r4, #0]
 800c7c6:	4401      	add	r1, r0
 800c7c8:	1850      	adds	r0, r2, r1
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	6011      	str	r1, [r2, #0]
 800c7ce:	d1e0      	bne.n	800c792 <_free_r+0x22>
 800c7d0:	6818      	ldr	r0, [r3, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	4408      	add	r0, r1
 800c7d6:	6010      	str	r0, [r2, #0]
 800c7d8:	6053      	str	r3, [r2, #4]
 800c7da:	e7da      	b.n	800c792 <_free_r+0x22>
 800c7dc:	d902      	bls.n	800c7e4 <_free_r+0x74>
 800c7de:	230c      	movs	r3, #12
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	e7d6      	b.n	800c792 <_free_r+0x22>
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	1821      	adds	r1, r4, r0
 800c7e8:	428b      	cmp	r3, r1
 800c7ea:	bf01      	itttt	eq
 800c7ec:	6819      	ldreq	r1, [r3, #0]
 800c7ee:	685b      	ldreq	r3, [r3, #4]
 800c7f0:	1809      	addeq	r1, r1, r0
 800c7f2:	6021      	streq	r1, [r4, #0]
 800c7f4:	6063      	str	r3, [r4, #4]
 800c7f6:	6054      	str	r4, [r2, #4]
 800c7f8:	e7cb      	b.n	800c792 <_free_r+0x22>
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	200006e4 	.word	0x200006e4

0800c800 <sbrk_aligned>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4e0e      	ldr	r6, [pc, #56]	; (800c83c <sbrk_aligned+0x3c>)
 800c804:	460c      	mov	r4, r1
 800c806:	6831      	ldr	r1, [r6, #0]
 800c808:	4605      	mov	r5, r0
 800c80a:	b911      	cbnz	r1, 800c812 <sbrk_aligned+0x12>
 800c80c:	f000 fcfe 	bl	800d20c <_sbrk_r>
 800c810:	6030      	str	r0, [r6, #0]
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 fcf9 	bl	800d20c <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d00a      	beq.n	800c834 <sbrk_aligned+0x34>
 800c81e:	1cc4      	adds	r4, r0, #3
 800c820:	f024 0403 	bic.w	r4, r4, #3
 800c824:	42a0      	cmp	r0, r4
 800c826:	d007      	beq.n	800c838 <sbrk_aligned+0x38>
 800c828:	1a21      	subs	r1, r4, r0
 800c82a:	4628      	mov	r0, r5
 800c82c:	f000 fcee 	bl	800d20c <_sbrk_r>
 800c830:	3001      	adds	r0, #1
 800c832:	d101      	bne.n	800c838 <sbrk_aligned+0x38>
 800c834:	f04f 34ff 	mov.w	r4, #4294967295
 800c838:	4620      	mov	r0, r4
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	200006e8 	.word	0x200006e8

0800c840 <_malloc_r>:
 800c840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c844:	1ccd      	adds	r5, r1, #3
 800c846:	f025 0503 	bic.w	r5, r5, #3
 800c84a:	3508      	adds	r5, #8
 800c84c:	2d0c      	cmp	r5, #12
 800c84e:	bf38      	it	cc
 800c850:	250c      	movcc	r5, #12
 800c852:	2d00      	cmp	r5, #0
 800c854:	4607      	mov	r7, r0
 800c856:	db01      	blt.n	800c85c <_malloc_r+0x1c>
 800c858:	42a9      	cmp	r1, r5
 800c85a:	d905      	bls.n	800c868 <_malloc_r+0x28>
 800c85c:	230c      	movs	r3, #12
 800c85e:	2600      	movs	r6, #0
 800c860:	603b      	str	r3, [r7, #0]
 800c862:	4630      	mov	r0, r6
 800c864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c868:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c93c <_malloc_r+0xfc>
 800c86c:	f000 f868 	bl	800c940 <__malloc_lock>
 800c870:	f8d8 3000 	ldr.w	r3, [r8]
 800c874:	461c      	mov	r4, r3
 800c876:	bb5c      	cbnz	r4, 800c8d0 <_malloc_r+0x90>
 800c878:	4629      	mov	r1, r5
 800c87a:	4638      	mov	r0, r7
 800c87c:	f7ff ffc0 	bl	800c800 <sbrk_aligned>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	4604      	mov	r4, r0
 800c884:	d155      	bne.n	800c932 <_malloc_r+0xf2>
 800c886:	f8d8 4000 	ldr.w	r4, [r8]
 800c88a:	4626      	mov	r6, r4
 800c88c:	2e00      	cmp	r6, #0
 800c88e:	d145      	bne.n	800c91c <_malloc_r+0xdc>
 800c890:	2c00      	cmp	r4, #0
 800c892:	d048      	beq.n	800c926 <_malloc_r+0xe6>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	4631      	mov	r1, r6
 800c898:	4638      	mov	r0, r7
 800c89a:	eb04 0903 	add.w	r9, r4, r3
 800c89e:	f000 fcb5 	bl	800d20c <_sbrk_r>
 800c8a2:	4581      	cmp	r9, r0
 800c8a4:	d13f      	bne.n	800c926 <_malloc_r+0xe6>
 800c8a6:	6821      	ldr	r1, [r4, #0]
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	1a6d      	subs	r5, r5, r1
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	f7ff ffa7 	bl	800c800 <sbrk_aligned>
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d037      	beq.n	800c926 <_malloc_r+0xe6>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	442b      	add	r3, r5
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d038      	beq.n	800c936 <_malloc_r+0xf6>
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	42a2      	cmp	r2, r4
 800c8c8:	d12b      	bne.n	800c922 <_malloc_r+0xe2>
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	605a      	str	r2, [r3, #4]
 800c8ce:	e00f      	b.n	800c8f0 <_malloc_r+0xb0>
 800c8d0:	6822      	ldr	r2, [r4, #0]
 800c8d2:	1b52      	subs	r2, r2, r5
 800c8d4:	d41f      	bmi.n	800c916 <_malloc_r+0xd6>
 800c8d6:	2a0b      	cmp	r2, #11
 800c8d8:	d917      	bls.n	800c90a <_malloc_r+0xca>
 800c8da:	1961      	adds	r1, r4, r5
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	6025      	str	r5, [r4, #0]
 800c8e0:	bf18      	it	ne
 800c8e2:	6059      	strne	r1, [r3, #4]
 800c8e4:	6863      	ldr	r3, [r4, #4]
 800c8e6:	bf08      	it	eq
 800c8e8:	f8c8 1000 	streq.w	r1, [r8]
 800c8ec:	5162      	str	r2, [r4, r5]
 800c8ee:	604b      	str	r3, [r1, #4]
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f104 060b 	add.w	r6, r4, #11
 800c8f6:	f000 f829 	bl	800c94c <__malloc_unlock>
 800c8fa:	f026 0607 	bic.w	r6, r6, #7
 800c8fe:	1d23      	adds	r3, r4, #4
 800c900:	1af2      	subs	r2, r6, r3
 800c902:	d0ae      	beq.n	800c862 <_malloc_r+0x22>
 800c904:	1b9b      	subs	r3, r3, r6
 800c906:	50a3      	str	r3, [r4, r2]
 800c908:	e7ab      	b.n	800c862 <_malloc_r+0x22>
 800c90a:	42a3      	cmp	r3, r4
 800c90c:	6862      	ldr	r2, [r4, #4]
 800c90e:	d1dd      	bne.n	800c8cc <_malloc_r+0x8c>
 800c910:	f8c8 2000 	str.w	r2, [r8]
 800c914:	e7ec      	b.n	800c8f0 <_malloc_r+0xb0>
 800c916:	4623      	mov	r3, r4
 800c918:	6864      	ldr	r4, [r4, #4]
 800c91a:	e7ac      	b.n	800c876 <_malloc_r+0x36>
 800c91c:	4634      	mov	r4, r6
 800c91e:	6876      	ldr	r6, [r6, #4]
 800c920:	e7b4      	b.n	800c88c <_malloc_r+0x4c>
 800c922:	4613      	mov	r3, r2
 800c924:	e7cc      	b.n	800c8c0 <_malloc_r+0x80>
 800c926:	230c      	movs	r3, #12
 800c928:	4638      	mov	r0, r7
 800c92a:	603b      	str	r3, [r7, #0]
 800c92c:	f000 f80e 	bl	800c94c <__malloc_unlock>
 800c930:	e797      	b.n	800c862 <_malloc_r+0x22>
 800c932:	6025      	str	r5, [r4, #0]
 800c934:	e7dc      	b.n	800c8f0 <_malloc_r+0xb0>
 800c936:	605b      	str	r3, [r3, #4]
 800c938:	deff      	udf	#255	; 0xff
 800c93a:	bf00      	nop
 800c93c:	200006e4 	.word	0x200006e4

0800c940 <__malloc_lock>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__malloc_lock+0x8>)
 800c942:	f7ff befe 	b.w	800c742 <__retarget_lock_acquire_recursive>
 800c946:	bf00      	nop
 800c948:	200006e0 	.word	0x200006e0

0800c94c <__malloc_unlock>:
 800c94c:	4801      	ldr	r0, [pc, #4]	; (800c954 <__malloc_unlock+0x8>)
 800c94e:	f7ff bef9 	b.w	800c744 <__retarget_lock_release_recursive>
 800c952:	bf00      	nop
 800c954:	200006e0 	.word	0x200006e0

0800c958 <__sfputc_r>:
 800c958:	6893      	ldr	r3, [r2, #8]
 800c95a:	b410      	push	{r4}
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b00      	cmp	r3, #0
 800c960:	6093      	str	r3, [r2, #8]
 800c962:	da07      	bge.n	800c974 <__sfputc_r+0x1c>
 800c964:	6994      	ldr	r4, [r2, #24]
 800c966:	42a3      	cmp	r3, r4
 800c968:	db01      	blt.n	800c96e <__sfputc_r+0x16>
 800c96a:	290a      	cmp	r1, #10
 800c96c:	d102      	bne.n	800c974 <__sfputc_r+0x1c>
 800c96e:	bc10      	pop	{r4}
 800c970:	f000 bb72 	b.w	800d058 <__swbuf_r>
 800c974:	6813      	ldr	r3, [r2, #0]
 800c976:	1c58      	adds	r0, r3, #1
 800c978:	6010      	str	r0, [r2, #0]
 800c97a:	7019      	strb	r1, [r3, #0]
 800c97c:	4608      	mov	r0, r1
 800c97e:	bc10      	pop	{r4}
 800c980:	4770      	bx	lr

0800c982 <__sfputs_r>:
 800c982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c984:	4606      	mov	r6, r0
 800c986:	460f      	mov	r7, r1
 800c988:	4614      	mov	r4, r2
 800c98a:	18d5      	adds	r5, r2, r3
 800c98c:	42ac      	cmp	r4, r5
 800c98e:	d101      	bne.n	800c994 <__sfputs_r+0x12>
 800c990:	2000      	movs	r0, #0
 800c992:	e007      	b.n	800c9a4 <__sfputs_r+0x22>
 800c994:	463a      	mov	r2, r7
 800c996:	4630      	mov	r0, r6
 800c998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c99c:	f7ff ffdc 	bl	800c958 <__sfputc_r>
 800c9a0:	1c43      	adds	r3, r0, #1
 800c9a2:	d1f3      	bne.n	800c98c <__sfputs_r+0xa>
 800c9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9a8 <_vfiprintf_r>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	4614      	mov	r4, r2
 800c9b0:	4698      	mov	r8, r3
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	b09d      	sub	sp, #116	; 0x74
 800c9b6:	b118      	cbz	r0, 800c9c0 <_vfiprintf_r+0x18>
 800c9b8:	6a03      	ldr	r3, [r0, #32]
 800c9ba:	b90b      	cbnz	r3, 800c9c0 <_vfiprintf_r+0x18>
 800c9bc:	f7ff fdac 	bl	800c518 <__sinit>
 800c9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c2:	07d9      	lsls	r1, r3, #31
 800c9c4:	d405      	bmi.n	800c9d2 <_vfiprintf_r+0x2a>
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d402      	bmi.n	800c9d2 <_vfiprintf_r+0x2a>
 800c9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ce:	f7ff feb8 	bl	800c742 <__retarget_lock_acquire_recursive>
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	071b      	lsls	r3, r3, #28
 800c9d6:	d501      	bpl.n	800c9dc <_vfiprintf_r+0x34>
 800c9d8:	692b      	ldr	r3, [r5, #16]
 800c9da:	b99b      	cbnz	r3, 800ca04 <_vfiprintf_r+0x5c>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f000 fb78 	bl	800d0d4 <__swsetup_r>
 800c9e4:	b170      	cbz	r0, 800ca04 <_vfiprintf_r+0x5c>
 800c9e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9e8:	07dc      	lsls	r4, r3, #31
 800c9ea:	d504      	bpl.n	800c9f6 <_vfiprintf_r+0x4e>
 800c9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f0:	b01d      	add	sp, #116	; 0x74
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	0598      	lsls	r0, r3, #22
 800c9fa:	d4f7      	bmi.n	800c9ec <_vfiprintf_r+0x44>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9fe:	f7ff fea1 	bl	800c744 <__retarget_lock_release_recursive>
 800ca02:	e7f3      	b.n	800c9ec <_vfiprintf_r+0x44>
 800ca04:	2300      	movs	r3, #0
 800ca06:	9309      	str	r3, [sp, #36]	; 0x24
 800ca08:	2320      	movs	r3, #32
 800ca0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca0e:	2330      	movs	r3, #48	; 0x30
 800ca10:	f04f 0901 	mov.w	r9, #1
 800ca14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca18:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cbc8 <_vfiprintf_r+0x220>
 800ca1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca20:	4623      	mov	r3, r4
 800ca22:	469a      	mov	sl, r3
 800ca24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca28:	b10a      	cbz	r2, 800ca2e <_vfiprintf_r+0x86>
 800ca2a:	2a25      	cmp	r2, #37	; 0x25
 800ca2c:	d1f9      	bne.n	800ca22 <_vfiprintf_r+0x7a>
 800ca2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca32:	d00b      	beq.n	800ca4c <_vfiprintf_r+0xa4>
 800ca34:	465b      	mov	r3, fp
 800ca36:	4622      	mov	r2, r4
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f7ff ffa1 	bl	800c982 <__sfputs_r>
 800ca40:	3001      	adds	r0, #1
 800ca42:	f000 80a9 	beq.w	800cb98 <_vfiprintf_r+0x1f0>
 800ca46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca48:	445a      	add	r2, fp
 800ca4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80a1 	beq.w	800cb98 <_vfiprintf_r+0x1f0>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca60:	f10a 0a01 	add.w	sl, sl, #1
 800ca64:	9304      	str	r3, [sp, #16]
 800ca66:	9307      	str	r3, [sp, #28]
 800ca68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca6e:	4654      	mov	r4, sl
 800ca70:	2205      	movs	r2, #5
 800ca72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca76:	4854      	ldr	r0, [pc, #336]	; (800cbc8 <_vfiprintf_r+0x220>)
 800ca78:	f000 fbd8 	bl	800d22c <memchr>
 800ca7c:	9a04      	ldr	r2, [sp, #16]
 800ca7e:	b9d8      	cbnz	r0, 800cab8 <_vfiprintf_r+0x110>
 800ca80:	06d1      	lsls	r1, r2, #27
 800ca82:	bf44      	itt	mi
 800ca84:	2320      	movmi	r3, #32
 800ca86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca8a:	0713      	lsls	r3, r2, #28
 800ca8c:	bf44      	itt	mi
 800ca8e:	232b      	movmi	r3, #43	; 0x2b
 800ca90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca94:	f89a 3000 	ldrb.w	r3, [sl]
 800ca98:	2b2a      	cmp	r3, #42	; 0x2a
 800ca9a:	d015      	beq.n	800cac8 <_vfiprintf_r+0x120>
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	9a07      	ldr	r2, [sp, #28]
 800caa6:	4621      	mov	r1, r4
 800caa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caac:	3b30      	subs	r3, #48	; 0x30
 800caae:	2b09      	cmp	r3, #9
 800cab0:	d94d      	bls.n	800cb4e <_vfiprintf_r+0x1a6>
 800cab2:	b1b0      	cbz	r0, 800cae2 <_vfiprintf_r+0x13a>
 800cab4:	9207      	str	r2, [sp, #28]
 800cab6:	e014      	b.n	800cae2 <_vfiprintf_r+0x13a>
 800cab8:	eba0 0308 	sub.w	r3, r0, r8
 800cabc:	fa09 f303 	lsl.w	r3, r9, r3
 800cac0:	4313      	orrs	r3, r2
 800cac2:	46a2      	mov	sl, r4
 800cac4:	9304      	str	r3, [sp, #16]
 800cac6:	e7d2      	b.n	800ca6e <_vfiprintf_r+0xc6>
 800cac8:	9b03      	ldr	r3, [sp, #12]
 800caca:	1d19      	adds	r1, r3, #4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	9103      	str	r1, [sp, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bfbb      	ittet	lt
 800cad4:	425b      	neglt	r3, r3
 800cad6:	f042 0202 	orrlt.w	r2, r2, #2
 800cada:	9307      	strge	r3, [sp, #28]
 800cadc:	9307      	strlt	r3, [sp, #28]
 800cade:	bfb8      	it	lt
 800cae0:	9204      	strlt	r2, [sp, #16]
 800cae2:	7823      	ldrb	r3, [r4, #0]
 800cae4:	2b2e      	cmp	r3, #46	; 0x2e
 800cae6:	d10c      	bne.n	800cb02 <_vfiprintf_r+0x15a>
 800cae8:	7863      	ldrb	r3, [r4, #1]
 800caea:	2b2a      	cmp	r3, #42	; 0x2a
 800caec:	d134      	bne.n	800cb58 <_vfiprintf_r+0x1b0>
 800caee:	9b03      	ldr	r3, [sp, #12]
 800caf0:	3402      	adds	r4, #2
 800caf2:	1d1a      	adds	r2, r3, #4
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	9203      	str	r2, [sp, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bfb8      	it	lt
 800cafc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb00:	9305      	str	r3, [sp, #20]
 800cb02:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbcc <_vfiprintf_r+0x224>
 800cb06:	2203      	movs	r2, #3
 800cb08:	4650      	mov	r0, sl
 800cb0a:	7821      	ldrb	r1, [r4, #0]
 800cb0c:	f000 fb8e 	bl	800d22c <memchr>
 800cb10:	b138      	cbz	r0, 800cb22 <_vfiprintf_r+0x17a>
 800cb12:	2240      	movs	r2, #64	; 0x40
 800cb14:	9b04      	ldr	r3, [sp, #16]
 800cb16:	eba0 000a 	sub.w	r0, r0, sl
 800cb1a:	4082      	lsls	r2, r0
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	3401      	adds	r4, #1
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb26:	2206      	movs	r2, #6
 800cb28:	4829      	ldr	r0, [pc, #164]	; (800cbd0 <_vfiprintf_r+0x228>)
 800cb2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb2e:	f000 fb7d 	bl	800d22c <memchr>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d03f      	beq.n	800cbb6 <_vfiprintf_r+0x20e>
 800cb36:	4b27      	ldr	r3, [pc, #156]	; (800cbd4 <_vfiprintf_r+0x22c>)
 800cb38:	bb1b      	cbnz	r3, 800cb82 <_vfiprintf_r+0x1da>
 800cb3a:	9b03      	ldr	r3, [sp, #12]
 800cb3c:	3307      	adds	r3, #7
 800cb3e:	f023 0307 	bic.w	r3, r3, #7
 800cb42:	3308      	adds	r3, #8
 800cb44:	9303      	str	r3, [sp, #12]
 800cb46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb48:	443b      	add	r3, r7
 800cb4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4c:	e768      	b.n	800ca20 <_vfiprintf_r+0x78>
 800cb4e:	460c      	mov	r4, r1
 800cb50:	2001      	movs	r0, #1
 800cb52:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb56:	e7a6      	b.n	800caa6 <_vfiprintf_r+0xfe>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4619      	mov	r1, r3
 800cb60:	3401      	adds	r4, #1
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	4620      	mov	r0, r4
 800cb66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb6a:	3a30      	subs	r2, #48	; 0x30
 800cb6c:	2a09      	cmp	r2, #9
 800cb6e:	d903      	bls.n	800cb78 <_vfiprintf_r+0x1d0>
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d0c6      	beq.n	800cb02 <_vfiprintf_r+0x15a>
 800cb74:	9105      	str	r1, [sp, #20]
 800cb76:	e7c4      	b.n	800cb02 <_vfiprintf_r+0x15a>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb80:	e7f0      	b.n	800cb64 <_vfiprintf_r+0x1bc>
 800cb82:	ab03      	add	r3, sp, #12
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	462a      	mov	r2, r5
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <_vfiprintf_r+0x230>)
 800cb8c:	a904      	add	r1, sp, #16
 800cb8e:	f3af 8000 	nop.w
 800cb92:	4607      	mov	r7, r0
 800cb94:	1c78      	adds	r0, r7, #1
 800cb96:	d1d6      	bne.n	800cb46 <_vfiprintf_r+0x19e>
 800cb98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb9a:	07d9      	lsls	r1, r3, #31
 800cb9c:	d405      	bmi.n	800cbaa <_vfiprintf_r+0x202>
 800cb9e:	89ab      	ldrh	r3, [r5, #12]
 800cba0:	059a      	lsls	r2, r3, #22
 800cba2:	d402      	bmi.n	800cbaa <_vfiprintf_r+0x202>
 800cba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cba6:	f7ff fdcd 	bl	800c744 <__retarget_lock_release_recursive>
 800cbaa:	89ab      	ldrh	r3, [r5, #12]
 800cbac:	065b      	lsls	r3, r3, #25
 800cbae:	f53f af1d 	bmi.w	800c9ec <_vfiprintf_r+0x44>
 800cbb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbb4:	e71c      	b.n	800c9f0 <_vfiprintf_r+0x48>
 800cbb6:	ab03      	add	r3, sp, #12
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	462a      	mov	r2, r5
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <_vfiprintf_r+0x230>)
 800cbc0:	a904      	add	r1, sp, #16
 800cbc2:	f000 f87d 	bl	800ccc0 <_printf_i>
 800cbc6:	e7e4      	b.n	800cb92 <_vfiprintf_r+0x1ea>
 800cbc8:	0800d6ce 	.word	0x0800d6ce
 800cbcc:	0800d6d4 	.word	0x0800d6d4
 800cbd0:	0800d6d8 	.word	0x0800d6d8
 800cbd4:	00000000 	.word	0x00000000
 800cbd8:	0800c983 	.word	0x0800c983

0800cbdc <_printf_common>:
 800cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	4699      	mov	r9, r3
 800cbe4:	688a      	ldr	r2, [r1, #8]
 800cbe6:	690b      	ldr	r3, [r1, #16]
 800cbe8:	4607      	mov	r7, r0
 800cbea:	4293      	cmp	r3, r2
 800cbec:	bfb8      	it	lt
 800cbee:	4613      	movlt	r3, r2
 800cbf0:	6033      	str	r3, [r6, #0]
 800cbf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbfc:	b10a      	cbz	r2, 800cc02 <_printf_common+0x26>
 800cbfe:	3301      	adds	r3, #1
 800cc00:	6033      	str	r3, [r6, #0]
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	0699      	lsls	r1, r3, #26
 800cc06:	bf42      	ittt	mi
 800cc08:	6833      	ldrmi	r3, [r6, #0]
 800cc0a:	3302      	addmi	r3, #2
 800cc0c:	6033      	strmi	r3, [r6, #0]
 800cc0e:	6825      	ldr	r5, [r4, #0]
 800cc10:	f015 0506 	ands.w	r5, r5, #6
 800cc14:	d106      	bne.n	800cc24 <_printf_common+0x48>
 800cc16:	f104 0a19 	add.w	sl, r4, #25
 800cc1a:	68e3      	ldr	r3, [r4, #12]
 800cc1c:	6832      	ldr	r2, [r6, #0]
 800cc1e:	1a9b      	subs	r3, r3, r2
 800cc20:	42ab      	cmp	r3, r5
 800cc22:	dc2b      	bgt.n	800cc7c <_printf_common+0xa0>
 800cc24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc28:	1e13      	subs	r3, r2, #0
 800cc2a:	6822      	ldr	r2, [r4, #0]
 800cc2c:	bf18      	it	ne
 800cc2e:	2301      	movne	r3, #1
 800cc30:	0692      	lsls	r2, r2, #26
 800cc32:	d430      	bmi.n	800cc96 <_printf_common+0xba>
 800cc34:	4649      	mov	r1, r9
 800cc36:	4638      	mov	r0, r7
 800cc38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc3c:	47c0      	blx	r8
 800cc3e:	3001      	adds	r0, #1
 800cc40:	d023      	beq.n	800cc8a <_printf_common+0xae>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	6922      	ldr	r2, [r4, #16]
 800cc46:	f003 0306 	and.w	r3, r3, #6
 800cc4a:	2b04      	cmp	r3, #4
 800cc4c:	bf14      	ite	ne
 800cc4e:	2500      	movne	r5, #0
 800cc50:	6833      	ldreq	r3, [r6, #0]
 800cc52:	f04f 0600 	mov.w	r6, #0
 800cc56:	bf08      	it	eq
 800cc58:	68e5      	ldreq	r5, [r4, #12]
 800cc5a:	f104 041a 	add.w	r4, r4, #26
 800cc5e:	bf08      	it	eq
 800cc60:	1aed      	subeq	r5, r5, r3
 800cc62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cc66:	bf08      	it	eq
 800cc68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	bfc4      	itt	gt
 800cc70:	1a9b      	subgt	r3, r3, r2
 800cc72:	18ed      	addgt	r5, r5, r3
 800cc74:	42b5      	cmp	r5, r6
 800cc76:	d11a      	bne.n	800ccae <_printf_common+0xd2>
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e008      	b.n	800cc8e <_printf_common+0xb2>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4652      	mov	r2, sl
 800cc80:	4649      	mov	r1, r9
 800cc82:	4638      	mov	r0, r7
 800cc84:	47c0      	blx	r8
 800cc86:	3001      	adds	r0, #1
 800cc88:	d103      	bne.n	800cc92 <_printf_common+0xb6>
 800cc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc92:	3501      	adds	r5, #1
 800cc94:	e7c1      	b.n	800cc1a <_printf_common+0x3e>
 800cc96:	2030      	movs	r0, #48	; 0x30
 800cc98:	18e1      	adds	r1, r4, r3
 800cc9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cca4:	4422      	add	r2, r4
 800cca6:	3302      	adds	r3, #2
 800cca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccac:	e7c2      	b.n	800cc34 <_printf_common+0x58>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	4622      	mov	r2, r4
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	47c0      	blx	r8
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d0e6      	beq.n	800cc8a <_printf_common+0xae>
 800ccbc:	3601      	adds	r6, #1
 800ccbe:	e7d9      	b.n	800cc74 <_printf_common+0x98>

0800ccc0 <_printf_i>:
 800ccc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	7e0f      	ldrb	r7, [r1, #24]
 800ccc6:	4691      	mov	r9, r2
 800ccc8:	2f78      	cmp	r7, #120	; 0x78
 800ccca:	4680      	mov	r8, r0
 800cccc:	460c      	mov	r4, r1
 800ccce:	469a      	mov	sl, r3
 800ccd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccd6:	d807      	bhi.n	800cce8 <_printf_i+0x28>
 800ccd8:	2f62      	cmp	r7, #98	; 0x62
 800ccda:	d80a      	bhi.n	800ccf2 <_printf_i+0x32>
 800ccdc:	2f00      	cmp	r7, #0
 800ccde:	f000 80d5 	beq.w	800ce8c <_printf_i+0x1cc>
 800cce2:	2f58      	cmp	r7, #88	; 0x58
 800cce4:	f000 80c1 	beq.w	800ce6a <_printf_i+0x1aa>
 800cce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccf0:	e03a      	b.n	800cd68 <_printf_i+0xa8>
 800ccf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccf6:	2b15      	cmp	r3, #21
 800ccf8:	d8f6      	bhi.n	800cce8 <_printf_i+0x28>
 800ccfa:	a101      	add	r1, pc, #4	; (adr r1, 800cd00 <_printf_i+0x40>)
 800ccfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd00:	0800cd59 	.word	0x0800cd59
 800cd04:	0800cd6d 	.word	0x0800cd6d
 800cd08:	0800cce9 	.word	0x0800cce9
 800cd0c:	0800cce9 	.word	0x0800cce9
 800cd10:	0800cce9 	.word	0x0800cce9
 800cd14:	0800cce9 	.word	0x0800cce9
 800cd18:	0800cd6d 	.word	0x0800cd6d
 800cd1c:	0800cce9 	.word	0x0800cce9
 800cd20:	0800cce9 	.word	0x0800cce9
 800cd24:	0800cce9 	.word	0x0800cce9
 800cd28:	0800cce9 	.word	0x0800cce9
 800cd2c:	0800ce73 	.word	0x0800ce73
 800cd30:	0800cd99 	.word	0x0800cd99
 800cd34:	0800ce2d 	.word	0x0800ce2d
 800cd38:	0800cce9 	.word	0x0800cce9
 800cd3c:	0800cce9 	.word	0x0800cce9
 800cd40:	0800ce95 	.word	0x0800ce95
 800cd44:	0800cce9 	.word	0x0800cce9
 800cd48:	0800cd99 	.word	0x0800cd99
 800cd4c:	0800cce9 	.word	0x0800cce9
 800cd50:	0800cce9 	.word	0x0800cce9
 800cd54:	0800ce35 	.word	0x0800ce35
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	1d1a      	adds	r2, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	602a      	str	r2, [r5, #0]
 800cd60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e0a0      	b.n	800ceae <_printf_i+0x1ee>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	0607      	lsls	r7, r0, #24
 800cd72:	f103 0104 	add.w	r1, r3, #4
 800cd76:	6029      	str	r1, [r5, #0]
 800cd78:	d501      	bpl.n	800cd7e <_printf_i+0xbe>
 800cd7a:	681e      	ldr	r6, [r3, #0]
 800cd7c:	e003      	b.n	800cd86 <_printf_i+0xc6>
 800cd7e:	0646      	lsls	r6, r0, #25
 800cd80:	d5fb      	bpl.n	800cd7a <_printf_i+0xba>
 800cd82:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	da03      	bge.n	800cd92 <_printf_i+0xd2>
 800cd8a:	232d      	movs	r3, #45	; 0x2d
 800cd8c:	4276      	negs	r6, r6
 800cd8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd92:	230a      	movs	r3, #10
 800cd94:	4859      	ldr	r0, [pc, #356]	; (800cefc <_printf_i+0x23c>)
 800cd96:	e012      	b.n	800cdbe <_printf_i+0xfe>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	6820      	ldr	r0, [r4, #0]
 800cd9c:	1d19      	adds	r1, r3, #4
 800cd9e:	6029      	str	r1, [r5, #0]
 800cda0:	0605      	lsls	r5, r0, #24
 800cda2:	d501      	bpl.n	800cda8 <_printf_i+0xe8>
 800cda4:	681e      	ldr	r6, [r3, #0]
 800cda6:	e002      	b.n	800cdae <_printf_i+0xee>
 800cda8:	0641      	lsls	r1, r0, #25
 800cdaa:	d5fb      	bpl.n	800cda4 <_printf_i+0xe4>
 800cdac:	881e      	ldrh	r6, [r3, #0]
 800cdae:	2f6f      	cmp	r7, #111	; 0x6f
 800cdb0:	bf0c      	ite	eq
 800cdb2:	2308      	moveq	r3, #8
 800cdb4:	230a      	movne	r3, #10
 800cdb6:	4851      	ldr	r0, [pc, #324]	; (800cefc <_printf_i+0x23c>)
 800cdb8:	2100      	movs	r1, #0
 800cdba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdbe:	6865      	ldr	r5, [r4, #4]
 800cdc0:	2d00      	cmp	r5, #0
 800cdc2:	bfa8      	it	ge
 800cdc4:	6821      	ldrge	r1, [r4, #0]
 800cdc6:	60a5      	str	r5, [r4, #8]
 800cdc8:	bfa4      	itt	ge
 800cdca:	f021 0104 	bicge.w	r1, r1, #4
 800cdce:	6021      	strge	r1, [r4, #0]
 800cdd0:	b90e      	cbnz	r6, 800cdd6 <_printf_i+0x116>
 800cdd2:	2d00      	cmp	r5, #0
 800cdd4:	d04b      	beq.n	800ce6e <_printf_i+0x1ae>
 800cdd6:	4615      	mov	r5, r2
 800cdd8:	fbb6 f1f3 	udiv	r1, r6, r3
 800cddc:	fb03 6711 	mls	r7, r3, r1, r6
 800cde0:	5dc7      	ldrb	r7, [r0, r7]
 800cde2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cde6:	4637      	mov	r7, r6
 800cde8:	42bb      	cmp	r3, r7
 800cdea:	460e      	mov	r6, r1
 800cdec:	d9f4      	bls.n	800cdd8 <_printf_i+0x118>
 800cdee:	2b08      	cmp	r3, #8
 800cdf0:	d10b      	bne.n	800ce0a <_printf_i+0x14a>
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	07de      	lsls	r6, r3, #31
 800cdf6:	d508      	bpl.n	800ce0a <_printf_i+0x14a>
 800cdf8:	6923      	ldr	r3, [r4, #16]
 800cdfa:	6861      	ldr	r1, [r4, #4]
 800cdfc:	4299      	cmp	r1, r3
 800cdfe:	bfde      	ittt	le
 800ce00:	2330      	movle	r3, #48	; 0x30
 800ce02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce0a:	1b52      	subs	r2, r2, r5
 800ce0c:	6122      	str	r2, [r4, #16]
 800ce0e:	464b      	mov	r3, r9
 800ce10:	4621      	mov	r1, r4
 800ce12:	4640      	mov	r0, r8
 800ce14:	f8cd a000 	str.w	sl, [sp]
 800ce18:	aa03      	add	r2, sp, #12
 800ce1a:	f7ff fedf 	bl	800cbdc <_printf_common>
 800ce1e:	3001      	adds	r0, #1
 800ce20:	d14a      	bne.n	800ceb8 <_printf_i+0x1f8>
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	b004      	add	sp, #16
 800ce28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	f043 0320 	orr.w	r3, r3, #32
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	2778      	movs	r7, #120	; 0x78
 800ce36:	4832      	ldr	r0, [pc, #200]	; (800cf00 <_printf_i+0x240>)
 800ce38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	6829      	ldr	r1, [r5, #0]
 800ce40:	061f      	lsls	r7, r3, #24
 800ce42:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce46:	d402      	bmi.n	800ce4e <_printf_i+0x18e>
 800ce48:	065f      	lsls	r7, r3, #25
 800ce4a:	bf48      	it	mi
 800ce4c:	b2b6      	uxthmi	r6, r6
 800ce4e:	07df      	lsls	r7, r3, #31
 800ce50:	bf48      	it	mi
 800ce52:	f043 0320 	orrmi.w	r3, r3, #32
 800ce56:	6029      	str	r1, [r5, #0]
 800ce58:	bf48      	it	mi
 800ce5a:	6023      	strmi	r3, [r4, #0]
 800ce5c:	b91e      	cbnz	r6, 800ce66 <_printf_i+0x1a6>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	f023 0320 	bic.w	r3, r3, #32
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	2310      	movs	r3, #16
 800ce68:	e7a6      	b.n	800cdb8 <_printf_i+0xf8>
 800ce6a:	4824      	ldr	r0, [pc, #144]	; (800cefc <_printf_i+0x23c>)
 800ce6c:	e7e4      	b.n	800ce38 <_printf_i+0x178>
 800ce6e:	4615      	mov	r5, r2
 800ce70:	e7bd      	b.n	800cdee <_printf_i+0x12e>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	6826      	ldr	r6, [r4, #0]
 800ce76:	1d18      	adds	r0, r3, #4
 800ce78:	6961      	ldr	r1, [r4, #20]
 800ce7a:	6028      	str	r0, [r5, #0]
 800ce7c:	0635      	lsls	r5, r6, #24
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	d501      	bpl.n	800ce86 <_printf_i+0x1c6>
 800ce82:	6019      	str	r1, [r3, #0]
 800ce84:	e002      	b.n	800ce8c <_printf_i+0x1cc>
 800ce86:	0670      	lsls	r0, r6, #25
 800ce88:	d5fb      	bpl.n	800ce82 <_printf_i+0x1c2>
 800ce8a:	8019      	strh	r1, [r3, #0]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4615      	mov	r5, r2
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	e7bc      	b.n	800ce0e <_printf_i+0x14e>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	2100      	movs	r1, #0
 800ce98:	1d1a      	adds	r2, r3, #4
 800ce9a:	602a      	str	r2, [r5, #0]
 800ce9c:	681d      	ldr	r5, [r3, #0]
 800ce9e:	6862      	ldr	r2, [r4, #4]
 800cea0:	4628      	mov	r0, r5
 800cea2:	f000 f9c3 	bl	800d22c <memchr>
 800cea6:	b108      	cbz	r0, 800ceac <_printf_i+0x1ec>
 800cea8:	1b40      	subs	r0, r0, r5
 800ceaa:	6060      	str	r0, [r4, #4]
 800ceac:	6863      	ldr	r3, [r4, #4]
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb6:	e7aa      	b.n	800ce0e <_printf_i+0x14e>
 800ceb8:	462a      	mov	r2, r5
 800ceba:	4649      	mov	r1, r9
 800cebc:	4640      	mov	r0, r8
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	47d0      	blx	sl
 800cec2:	3001      	adds	r0, #1
 800cec4:	d0ad      	beq.n	800ce22 <_printf_i+0x162>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	079b      	lsls	r3, r3, #30
 800ceca:	d413      	bmi.n	800cef4 <_printf_i+0x234>
 800cecc:	68e0      	ldr	r0, [r4, #12]
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	4298      	cmp	r0, r3
 800ced2:	bfb8      	it	lt
 800ced4:	4618      	movlt	r0, r3
 800ced6:	e7a6      	b.n	800ce26 <_printf_i+0x166>
 800ced8:	2301      	movs	r3, #1
 800ceda:	4632      	mov	r2, r6
 800cedc:	4649      	mov	r1, r9
 800cede:	4640      	mov	r0, r8
 800cee0:	47d0      	blx	sl
 800cee2:	3001      	adds	r0, #1
 800cee4:	d09d      	beq.n	800ce22 <_printf_i+0x162>
 800cee6:	3501      	adds	r5, #1
 800cee8:	68e3      	ldr	r3, [r4, #12]
 800ceea:	9903      	ldr	r1, [sp, #12]
 800ceec:	1a5b      	subs	r3, r3, r1
 800ceee:	42ab      	cmp	r3, r5
 800cef0:	dcf2      	bgt.n	800ced8 <_printf_i+0x218>
 800cef2:	e7eb      	b.n	800cecc <_printf_i+0x20c>
 800cef4:	2500      	movs	r5, #0
 800cef6:	f104 0619 	add.w	r6, r4, #25
 800cefa:	e7f5      	b.n	800cee8 <_printf_i+0x228>
 800cefc:	0800d6df 	.word	0x0800d6df
 800cf00:	0800d6f0 	.word	0x0800d6f0

0800cf04 <__sflush_r>:
 800cf04:	898a      	ldrh	r2, [r1, #12]
 800cf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf08:	4605      	mov	r5, r0
 800cf0a:	0710      	lsls	r0, r2, #28
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	d457      	bmi.n	800cfc0 <__sflush_r+0xbc>
 800cf10:	684b      	ldr	r3, [r1, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dc04      	bgt.n	800cf20 <__sflush_r+0x1c>
 800cf16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc01      	bgt.n	800cf20 <__sflush_r+0x1c>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf22:	2e00      	cmp	r6, #0
 800cf24:	d0fa      	beq.n	800cf1c <__sflush_r+0x18>
 800cf26:	2300      	movs	r3, #0
 800cf28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf2c:	682f      	ldr	r7, [r5, #0]
 800cf2e:	6a21      	ldr	r1, [r4, #32]
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	d032      	beq.n	800cf9a <__sflush_r+0x96>
 800cf34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	075a      	lsls	r2, r3, #29
 800cf3a:	d505      	bpl.n	800cf48 <__sflush_r+0x44>
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	1ac0      	subs	r0, r0, r3
 800cf40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf42:	b10b      	cbz	r3, 800cf48 <__sflush_r+0x44>
 800cf44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf46:	1ac0      	subs	r0, r0, r3
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf4e:	4628      	mov	r0, r5
 800cf50:	6a21      	ldr	r1, [r4, #32]
 800cf52:	47b0      	blx	r6
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	d106      	bne.n	800cf68 <__sflush_r+0x64>
 800cf5a:	6829      	ldr	r1, [r5, #0]
 800cf5c:	291d      	cmp	r1, #29
 800cf5e:	d82b      	bhi.n	800cfb8 <__sflush_r+0xb4>
 800cf60:	4a28      	ldr	r2, [pc, #160]	; (800d004 <__sflush_r+0x100>)
 800cf62:	410a      	asrs	r2, r1
 800cf64:	07d6      	lsls	r6, r2, #31
 800cf66:	d427      	bmi.n	800cfb8 <__sflush_r+0xb4>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	6062      	str	r2, [r4, #4]
 800cf6c:	6922      	ldr	r2, [r4, #16]
 800cf6e:	04d9      	lsls	r1, r3, #19
 800cf70:	6022      	str	r2, [r4, #0]
 800cf72:	d504      	bpl.n	800cf7e <__sflush_r+0x7a>
 800cf74:	1c42      	adds	r2, r0, #1
 800cf76:	d101      	bne.n	800cf7c <__sflush_r+0x78>
 800cf78:	682b      	ldr	r3, [r5, #0]
 800cf7a:	b903      	cbnz	r3, 800cf7e <__sflush_r+0x7a>
 800cf7c:	6560      	str	r0, [r4, #84]	; 0x54
 800cf7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf80:	602f      	str	r7, [r5, #0]
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d0ca      	beq.n	800cf1c <__sflush_r+0x18>
 800cf86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d002      	beq.n	800cf94 <__sflush_r+0x90>
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f7ff fbee 	bl	800c770 <_free_r>
 800cf94:	2000      	movs	r0, #0
 800cf96:	6360      	str	r0, [r4, #52]	; 0x34
 800cf98:	e7c1      	b.n	800cf1e <__sflush_r+0x1a>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	47b0      	blx	r6
 800cfa0:	1c41      	adds	r1, r0, #1
 800cfa2:	d1c8      	bne.n	800cf36 <__sflush_r+0x32>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0c5      	beq.n	800cf36 <__sflush_r+0x32>
 800cfaa:	2b1d      	cmp	r3, #29
 800cfac:	d001      	beq.n	800cfb2 <__sflush_r+0xae>
 800cfae:	2b16      	cmp	r3, #22
 800cfb0:	d101      	bne.n	800cfb6 <__sflush_r+0xb2>
 800cfb2:	602f      	str	r7, [r5, #0]
 800cfb4:	e7b2      	b.n	800cf1c <__sflush_r+0x18>
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7ae      	b.n	800cf1e <__sflush_r+0x1a>
 800cfc0:	690f      	ldr	r7, [r1, #16]
 800cfc2:	2f00      	cmp	r7, #0
 800cfc4:	d0aa      	beq.n	800cf1c <__sflush_r+0x18>
 800cfc6:	0793      	lsls	r3, r2, #30
 800cfc8:	bf18      	it	ne
 800cfca:	2300      	movne	r3, #0
 800cfcc:	680e      	ldr	r6, [r1, #0]
 800cfce:	bf08      	it	eq
 800cfd0:	694b      	ldreq	r3, [r1, #20]
 800cfd2:	1bf6      	subs	r6, r6, r7
 800cfd4:	600f      	str	r7, [r1, #0]
 800cfd6:	608b      	str	r3, [r1, #8]
 800cfd8:	2e00      	cmp	r6, #0
 800cfda:	dd9f      	ble.n	800cf1c <__sflush_r+0x18>
 800cfdc:	4633      	mov	r3, r6
 800cfde:	463a      	mov	r2, r7
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	6a21      	ldr	r1, [r4, #32]
 800cfe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cfe8:	47e0      	blx	ip
 800cfea:	2800      	cmp	r0, #0
 800cfec:	dc06      	bgt.n	800cffc <__sflush_r+0xf8>
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295
 800cff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	e790      	b.n	800cf1e <__sflush_r+0x1a>
 800cffc:	4407      	add	r7, r0
 800cffe:	1a36      	subs	r6, r6, r0
 800d000:	e7ea      	b.n	800cfd8 <__sflush_r+0xd4>
 800d002:	bf00      	nop
 800d004:	dfbffffe 	.word	0xdfbffffe

0800d008 <_fflush_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	690b      	ldr	r3, [r1, #16]
 800d00c:	4605      	mov	r5, r0
 800d00e:	460c      	mov	r4, r1
 800d010:	b913      	cbnz	r3, 800d018 <_fflush_r+0x10>
 800d012:	2500      	movs	r5, #0
 800d014:	4628      	mov	r0, r5
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	b118      	cbz	r0, 800d022 <_fflush_r+0x1a>
 800d01a:	6a03      	ldr	r3, [r0, #32]
 800d01c:	b90b      	cbnz	r3, 800d022 <_fflush_r+0x1a>
 800d01e:	f7ff fa7b 	bl	800c518 <__sinit>
 800d022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0f3      	beq.n	800d012 <_fflush_r+0xa>
 800d02a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d02c:	07d0      	lsls	r0, r2, #31
 800d02e:	d404      	bmi.n	800d03a <_fflush_r+0x32>
 800d030:	0599      	lsls	r1, r3, #22
 800d032:	d402      	bmi.n	800d03a <_fflush_r+0x32>
 800d034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d036:	f7ff fb84 	bl	800c742 <__retarget_lock_acquire_recursive>
 800d03a:	4628      	mov	r0, r5
 800d03c:	4621      	mov	r1, r4
 800d03e:	f7ff ff61 	bl	800cf04 <__sflush_r>
 800d042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d044:	4605      	mov	r5, r0
 800d046:	07da      	lsls	r2, r3, #31
 800d048:	d4e4      	bmi.n	800d014 <_fflush_r+0xc>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	059b      	lsls	r3, r3, #22
 800d04e:	d4e1      	bmi.n	800d014 <_fflush_r+0xc>
 800d050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d052:	f7ff fb77 	bl	800c744 <__retarget_lock_release_recursive>
 800d056:	e7dd      	b.n	800d014 <_fflush_r+0xc>

0800d058 <__swbuf_r>:
 800d058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d05a:	460e      	mov	r6, r1
 800d05c:	4614      	mov	r4, r2
 800d05e:	4605      	mov	r5, r0
 800d060:	b118      	cbz	r0, 800d06a <__swbuf_r+0x12>
 800d062:	6a03      	ldr	r3, [r0, #32]
 800d064:	b90b      	cbnz	r3, 800d06a <__swbuf_r+0x12>
 800d066:	f7ff fa57 	bl	800c518 <__sinit>
 800d06a:	69a3      	ldr	r3, [r4, #24]
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	071a      	lsls	r2, r3, #28
 800d072:	d525      	bpl.n	800d0c0 <__swbuf_r+0x68>
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	b31b      	cbz	r3, 800d0c0 <__swbuf_r+0x68>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	b2f6      	uxtb	r6, r6
 800d07e:	1a98      	subs	r0, r3, r2
 800d080:	6963      	ldr	r3, [r4, #20]
 800d082:	4637      	mov	r7, r6
 800d084:	4283      	cmp	r3, r0
 800d086:	dc04      	bgt.n	800d092 <__swbuf_r+0x3a>
 800d088:	4621      	mov	r1, r4
 800d08a:	4628      	mov	r0, r5
 800d08c:	f7ff ffbc 	bl	800d008 <_fflush_r>
 800d090:	b9e0      	cbnz	r0, 800d0cc <__swbuf_r+0x74>
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	3b01      	subs	r3, #1
 800d096:	60a3      	str	r3, [r4, #8]
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	701e      	strb	r6, [r3, #0]
 800d0a0:	6962      	ldr	r2, [r4, #20]
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d004      	beq.n	800d0b2 <__swbuf_r+0x5a>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	07db      	lsls	r3, r3, #31
 800d0ac:	d506      	bpl.n	800d0bc <__swbuf_r+0x64>
 800d0ae:	2e0a      	cmp	r6, #10
 800d0b0:	d104      	bne.n	800d0bc <__swbuf_r+0x64>
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f7ff ffa7 	bl	800d008 <_fflush_r>
 800d0ba:	b938      	cbnz	r0, 800d0cc <__swbuf_r+0x74>
 800d0bc:	4638      	mov	r0, r7
 800d0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 f806 	bl	800d0d4 <__swsetup_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0d5      	beq.n	800d078 <__swbuf_r+0x20>
 800d0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d0d0:	e7f4      	b.n	800d0bc <__swbuf_r+0x64>
	...

0800d0d4 <__swsetup_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4b2a      	ldr	r3, [pc, #168]	; (800d180 <__swsetup_r+0xac>)
 800d0d8:	4605      	mov	r5, r0
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	460c      	mov	r4, r1
 800d0de:	b118      	cbz	r0, 800d0e8 <__swsetup_r+0x14>
 800d0e0:	6a03      	ldr	r3, [r0, #32]
 800d0e2:	b90b      	cbnz	r3, 800d0e8 <__swsetup_r+0x14>
 800d0e4:	f7ff fa18 	bl	800c518 <__sinit>
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0ee:	0718      	lsls	r0, r3, #28
 800d0f0:	d422      	bmi.n	800d138 <__swsetup_r+0x64>
 800d0f2:	06d9      	lsls	r1, r3, #27
 800d0f4:	d407      	bmi.n	800d106 <__swsetup_r+0x32>
 800d0f6:	2309      	movs	r3, #9
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d102:	81a3      	strh	r3, [r4, #12]
 800d104:	e034      	b.n	800d170 <__swsetup_r+0x9c>
 800d106:	0758      	lsls	r0, r3, #29
 800d108:	d512      	bpl.n	800d130 <__swsetup_r+0x5c>
 800d10a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d10c:	b141      	cbz	r1, 800d120 <__swsetup_r+0x4c>
 800d10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d112:	4299      	cmp	r1, r3
 800d114:	d002      	beq.n	800d11c <__swsetup_r+0x48>
 800d116:	4628      	mov	r0, r5
 800d118:	f7ff fb2a 	bl	800c770 <_free_r>
 800d11c:	2300      	movs	r3, #0
 800d11e:	6363      	str	r3, [r4, #52]	; 0x34
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	2300      	movs	r3, #0
 800d12a:	6063      	str	r3, [r4, #4]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	6023      	str	r3, [r4, #0]
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f043 0308 	orr.w	r3, r3, #8
 800d136:	81a3      	strh	r3, [r4, #12]
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	b94b      	cbnz	r3, 800d150 <__swsetup_r+0x7c>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d146:	d003      	beq.n	800d150 <__swsetup_r+0x7c>
 800d148:	4621      	mov	r1, r4
 800d14a:	4628      	mov	r0, r5
 800d14c:	f000 f8a1 	bl	800d292 <__smakebuf_r>
 800d150:	89a0      	ldrh	r0, [r4, #12]
 800d152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d156:	f010 0301 	ands.w	r3, r0, #1
 800d15a:	d00a      	beq.n	800d172 <__swsetup_r+0x9e>
 800d15c:	2300      	movs	r3, #0
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	6963      	ldr	r3, [r4, #20]
 800d162:	425b      	negs	r3, r3
 800d164:	61a3      	str	r3, [r4, #24]
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	b943      	cbnz	r3, 800d17c <__swsetup_r+0xa8>
 800d16a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d16e:	d1c4      	bne.n	800d0fa <__swsetup_r+0x26>
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	0781      	lsls	r1, r0, #30
 800d174:	bf58      	it	pl
 800d176:	6963      	ldrpl	r3, [r4, #20]
 800d178:	60a3      	str	r3, [r4, #8]
 800d17a:	e7f4      	b.n	800d166 <__swsetup_r+0x92>
 800d17c:	2000      	movs	r0, #0
 800d17e:	e7f7      	b.n	800d170 <__swsetup_r+0x9c>
 800d180:	20000168 	.word	0x20000168

0800d184 <_raise_r>:
 800d184:	291f      	cmp	r1, #31
 800d186:	b538      	push	{r3, r4, r5, lr}
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	d904      	bls.n	800d198 <_raise_r+0x14>
 800d18e:	2316      	movs	r3, #22
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	f04f 30ff 	mov.w	r0, #4294967295
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d19a:	b112      	cbz	r2, 800d1a2 <_raise_r+0x1e>
 800d19c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1a0:	b94b      	cbnz	r3, 800d1b6 <_raise_r+0x32>
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 f830 	bl	800d208 <_getpid_r>
 800d1a8:	462a      	mov	r2, r5
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b2:	f000 b817 	b.w	800d1e4 <_kill_r>
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d00a      	beq.n	800d1d0 <_raise_r+0x4c>
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	d103      	bne.n	800d1c6 <_raise_r+0x42>
 800d1be:	2316      	movs	r3, #22
 800d1c0:	6003      	str	r3, [r0, #0]
 800d1c2:	2001      	movs	r0, #1
 800d1c4:	e7e7      	b.n	800d196 <_raise_r+0x12>
 800d1c6:	2400      	movs	r4, #0
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1ce:	4798      	blx	r3
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e7e0      	b.n	800d196 <_raise_r+0x12>

0800d1d4 <raise>:
 800d1d4:	4b02      	ldr	r3, [pc, #8]	; (800d1e0 <raise+0xc>)
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	f7ff bfd3 	b.w	800d184 <_raise_r>
 800d1de:	bf00      	nop
 800d1e0:	20000168 	.word	0x20000168

0800d1e4 <_kill_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4d06      	ldr	r5, [pc, #24]	; (800d204 <_kill_r+0x20>)
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f7f7 fcde 	bl	8004bb2 <_kill>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d102      	bne.n	800d200 <_kill_r+0x1c>
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	b103      	cbz	r3, 800d200 <_kill_r+0x1c>
 800d1fe:	6023      	str	r3, [r4, #0]
 800d200:	bd38      	pop	{r3, r4, r5, pc}
 800d202:	bf00      	nop
 800d204:	200006dc 	.word	0x200006dc

0800d208 <_getpid_r>:
 800d208:	f7f7 bccc 	b.w	8004ba4 <_getpid>

0800d20c <_sbrk_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	2300      	movs	r3, #0
 800d210:	4d05      	ldr	r5, [pc, #20]	; (800d228 <_sbrk_r+0x1c>)
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	f7f7 fd4e 	bl	8004cb8 <_sbrk>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_sbrk_r+0x1a>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_sbrk_r+0x1a>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	200006dc 	.word	0x200006dc

0800d22c <memchr>:
 800d22c:	4603      	mov	r3, r0
 800d22e:	b510      	push	{r4, lr}
 800d230:	b2c9      	uxtb	r1, r1
 800d232:	4402      	add	r2, r0
 800d234:	4293      	cmp	r3, r2
 800d236:	4618      	mov	r0, r3
 800d238:	d101      	bne.n	800d23e <memchr+0x12>
 800d23a:	2000      	movs	r0, #0
 800d23c:	e003      	b.n	800d246 <memchr+0x1a>
 800d23e:	7804      	ldrb	r4, [r0, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	428c      	cmp	r4, r1
 800d244:	d1f6      	bne.n	800d234 <memchr+0x8>
 800d246:	bd10      	pop	{r4, pc}

0800d248 <__swhatbuf_r>:
 800d248:	b570      	push	{r4, r5, r6, lr}
 800d24a:	460c      	mov	r4, r1
 800d24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d250:	4615      	mov	r5, r2
 800d252:	2900      	cmp	r1, #0
 800d254:	461e      	mov	r6, r3
 800d256:	b096      	sub	sp, #88	; 0x58
 800d258:	da0c      	bge.n	800d274 <__swhatbuf_r+0x2c>
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	2100      	movs	r1, #0
 800d25e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d262:	bf0c      	ite	eq
 800d264:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d268:	2340      	movne	r3, #64	; 0x40
 800d26a:	2000      	movs	r0, #0
 800d26c:	6031      	str	r1, [r6, #0]
 800d26e:	602b      	str	r3, [r5, #0]
 800d270:	b016      	add	sp, #88	; 0x58
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	466a      	mov	r2, sp
 800d276:	f000 f849 	bl	800d30c <_fstat_r>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	dbed      	blt.n	800d25a <__swhatbuf_r+0x12>
 800d27e:	9901      	ldr	r1, [sp, #4]
 800d280:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d284:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d288:	4259      	negs	r1, r3
 800d28a:	4159      	adcs	r1, r3
 800d28c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d290:	e7eb      	b.n	800d26a <__swhatbuf_r+0x22>

0800d292 <__smakebuf_r>:
 800d292:	898b      	ldrh	r3, [r1, #12]
 800d294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d296:	079d      	lsls	r5, r3, #30
 800d298:	4606      	mov	r6, r0
 800d29a:	460c      	mov	r4, r1
 800d29c:	d507      	bpl.n	800d2ae <__smakebuf_r+0x1c>
 800d29e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	6163      	str	r3, [r4, #20]
 800d2aa:	b002      	add	sp, #8
 800d2ac:	bd70      	pop	{r4, r5, r6, pc}
 800d2ae:	466a      	mov	r2, sp
 800d2b0:	ab01      	add	r3, sp, #4
 800d2b2:	f7ff ffc9 	bl	800d248 <__swhatbuf_r>
 800d2b6:	9900      	ldr	r1, [sp, #0]
 800d2b8:	4605      	mov	r5, r0
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f7ff fac0 	bl	800c840 <_malloc_r>
 800d2c0:	b948      	cbnz	r0, 800d2d6 <__smakebuf_r+0x44>
 800d2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2c6:	059a      	lsls	r2, r3, #22
 800d2c8:	d4ef      	bmi.n	800d2aa <__smakebuf_r+0x18>
 800d2ca:	f023 0303 	bic.w	r3, r3, #3
 800d2ce:	f043 0302 	orr.w	r3, r3, #2
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	e7e3      	b.n	800d29e <__smakebuf_r+0xc>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	6020      	str	r0, [r4, #0]
 800d2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2de:	81a3      	strh	r3, [r4, #12]
 800d2e0:	9b00      	ldr	r3, [sp, #0]
 800d2e2:	6120      	str	r0, [r4, #16]
 800d2e4:	6163      	str	r3, [r4, #20]
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	b15b      	cbz	r3, 800d302 <__smakebuf_r+0x70>
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2f0:	f000 f81e 	bl	800d330 <_isatty_r>
 800d2f4:	b128      	cbz	r0, 800d302 <__smakebuf_r+0x70>
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	f023 0303 	bic.w	r3, r3, #3
 800d2fc:	f043 0301 	orr.w	r3, r3, #1
 800d300:	81a3      	strh	r3, [r4, #12]
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	431d      	orrs	r5, r3
 800d306:	81a5      	strh	r5, [r4, #12]
 800d308:	e7cf      	b.n	800d2aa <__smakebuf_r+0x18>
	...

0800d30c <_fstat_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	2300      	movs	r3, #0
 800d310:	4d06      	ldr	r5, [pc, #24]	; (800d32c <_fstat_r+0x20>)
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	4611      	mov	r1, r2
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	f7f7 fca8 	bl	8004c6e <_fstat>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d102      	bne.n	800d328 <_fstat_r+0x1c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	b103      	cbz	r3, 800d328 <_fstat_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	200006dc 	.word	0x200006dc

0800d330 <_isatty_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	2300      	movs	r3, #0
 800d334:	4d05      	ldr	r5, [pc, #20]	; (800d34c <_isatty_r+0x1c>)
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f7 fca6 	bl	8004c8c <_isatty>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_isatty_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_isatty_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	200006dc 	.word	0x200006dc

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr
