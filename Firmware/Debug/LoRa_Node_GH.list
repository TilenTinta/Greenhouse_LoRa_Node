
LoRa_Node_GH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800cb90  0800cb90  0001cb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf2c  0800cf2c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf34  0800cf34  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf34  0800cf34  0001cf34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf38  0800cf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800cf3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000016c  0800d0a8  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800d0a8  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c01  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003678  00000000  00000000  00037dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0003b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121a  00000000  00000000  0003cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0b0  00000000  00000000  0003dd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf42  00000000  00000000  00058e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b14  00000000  00000000  00074d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006df4  00000000  00000000  0010e888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011567c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000016c 	.word	0x2000016c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb78 	.word	0x0800cb78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000170 	.word	0x20000170
 800014c:	0800cb78 	.word	0x0800cb78

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_d2f>:
 800075c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000764:	bf24      	itt	cs
 8000766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800076e:	d90d      	bls.n	800078c <__aeabi_d2f+0x30>
 8000770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800077c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000784:	bf08      	it	eq
 8000786:	f020 0001 	biceq.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000790:	d121      	bne.n	80007d6 <__aeabi_d2f+0x7a>
 8000792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000796:	bfbc      	itt	lt
 8000798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800079c:	4770      	bxlt	lr
 800079e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007a6:	f1c2 0218 	rsb	r2, r2, #24
 80007aa:	f1c2 0c20 	rsb	ip, r2, #32
 80007ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	bf18      	it	ne
 80007b8:	f040 0001 	orrne.w	r0, r0, #1
 80007bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c8:	ea40 000c 	orr.w	r0, r0, ip
 80007cc:	fa23 f302 	lsr.w	r3, r3, r2
 80007d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d4:	e7cc      	b.n	8000770 <__aeabi_d2f+0x14>
 80007d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007da:	d107      	bne.n	80007ec <__aeabi_d2f+0x90>
 80007dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e0:	bf1e      	ittt	ne
 80007e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ea:	4770      	bxne	lr
 80007ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_frsub>:
 80007fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000800:	e002      	b.n	8000808 <__addsf3>
 8000802:	bf00      	nop

08000804 <__aeabi_fsub>:
 8000804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000808 <__addsf3>:
 8000808:	0042      	lsls	r2, r0, #1
 800080a:	bf1f      	itttt	ne
 800080c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000810:	ea92 0f03 	teqne	r2, r3
 8000814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800081c:	d06a      	beq.n	80008f4 <__addsf3+0xec>
 800081e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000826:	bfc1      	itttt	gt
 8000828:	18d2      	addgt	r2, r2, r3
 800082a:	4041      	eorgt	r1, r0
 800082c:	4048      	eorgt	r0, r1
 800082e:	4041      	eorgt	r1, r0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	2b19      	cmp	r3, #25
 8000836:	bf88      	it	hi
 8000838:	4770      	bxhi	lr
 800083a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4240      	negne	r0, r0
 800084a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800084e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4249      	negne	r1, r1
 800085a:	ea92 0f03 	teq	r2, r3
 800085e:	d03f      	beq.n	80008e0 <__addsf3+0xd8>
 8000860:	f1a2 0201 	sub.w	r2, r2, #1
 8000864:	fa41 fc03 	asr.w	ip, r1, r3
 8000868:	eb10 000c 	adds.w	r0, r0, ip
 800086c:	f1c3 0320 	rsb	r3, r3, #32
 8000870:	fa01 f103 	lsl.w	r1, r1, r3
 8000874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000878:	d502      	bpl.n	8000880 <__addsf3+0x78>
 800087a:	4249      	negs	r1, r1
 800087c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000884:	d313      	bcc.n	80008ae <__addsf3+0xa6>
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d306      	bcc.n	800089a <__addsf3+0x92>
 800088c:	0840      	lsrs	r0, r0, #1
 800088e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000892:	f102 0201 	add.w	r2, r2, #1
 8000896:	2afe      	cmp	r2, #254	; 0xfe
 8000898:	d251      	bcs.n	800093e <__addsf3+0x136>
 800089a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	ea40 0003 	orr.w	r0, r0, r3
 80008ac:	4770      	bx	lr
 80008ae:	0049      	lsls	r1, r1, #1
 80008b0:	eb40 0000 	adc.w	r0, r0, r0
 80008b4:	3a01      	subs	r2, #1
 80008b6:	bf28      	it	cs
 80008b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008bc:	d2ed      	bcs.n	800089a <__addsf3+0x92>
 80008be:	fab0 fc80 	clz	ip, r0
 80008c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ce:	bfaa      	itet	ge
 80008d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d4:	4252      	neglt	r2, r2
 80008d6:	4318      	orrge	r0, r3
 80008d8:	bfbc      	itt	lt
 80008da:	40d0      	lsrlt	r0, r2
 80008dc:	4318      	orrlt	r0, r3
 80008de:	4770      	bx	lr
 80008e0:	f092 0f00 	teq	r2, #0
 80008e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008e8:	bf06      	itte	eq
 80008ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ee:	3201      	addeq	r2, #1
 80008f0:	3b01      	subne	r3, #1
 80008f2:	e7b5      	b.n	8000860 <__addsf3+0x58>
 80008f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008fc:	bf18      	it	ne
 80008fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000902:	d021      	beq.n	8000948 <__addsf3+0x140>
 8000904:	ea92 0f03 	teq	r2, r3
 8000908:	d004      	beq.n	8000914 <__addsf3+0x10c>
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	bf08      	it	eq
 8000910:	4608      	moveq	r0, r1
 8000912:	4770      	bx	lr
 8000914:	ea90 0f01 	teq	r0, r1
 8000918:	bf1c      	itt	ne
 800091a:	2000      	movne	r0, #0
 800091c:	4770      	bxne	lr
 800091e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000922:	d104      	bne.n	800092e <__addsf3+0x126>
 8000924:	0040      	lsls	r0, r0, #1
 8000926:	bf28      	it	cs
 8000928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000932:	bf3c      	itt	cc
 8000934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bxcc	lr
 800093a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800093e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000946:	4770      	bx	lr
 8000948:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800094c:	bf16      	itet	ne
 800094e:	4608      	movne	r0, r1
 8000950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000954:	4601      	movne	r1, r0
 8000956:	0242      	lsls	r2, r0, #9
 8000958:	bf06      	itte	eq
 800095a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095e:	ea90 0f01 	teqeq	r0, r1
 8000962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000966:	4770      	bx	lr

08000968 <__aeabi_ui2f>:
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e004      	b.n	8000978 <__aeabi_i2f+0x8>
 800096e:	bf00      	nop

08000970 <__aeabi_i2f>:
 8000970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000974:	bf48      	it	mi
 8000976:	4240      	negmi	r0, r0
 8000978:	ea5f 0c00 	movs.w	ip, r0
 800097c:	bf08      	it	eq
 800097e:	4770      	bxeq	lr
 8000980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000984:	4601      	mov	r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	e01c      	b.n	80009c6 <__aeabi_l2f+0x2a>

0800098c <__aeabi_ul2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e00a      	b.n	80009b0 <__aeabi_l2f+0x14>
 800099a:	bf00      	nop

0800099c <__aeabi_l2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__aeabi_l2f+0x14>
 80009aa:	4240      	negs	r0, r0
 80009ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b0:	ea5f 0c01 	movs.w	ip, r1
 80009b4:	bf02      	ittt	eq
 80009b6:	4684      	moveq	ip, r0
 80009b8:	4601      	moveq	r1, r0
 80009ba:	2000      	moveq	r0, #0
 80009bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c0:	bf08      	it	eq
 80009c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ca:	fabc f28c 	clz	r2, ip
 80009ce:	3a08      	subs	r2, #8
 80009d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d4:	db10      	blt.n	80009f8 <__aeabi_l2f+0x5c>
 80009d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009da:	4463      	add	r3, ip
 80009dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e0:	f1c2 0220 	rsb	r2, r2, #32
 80009e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	eb43 0002 	adc.w	r0, r3, r2
 80009f0:	bf08      	it	eq
 80009f2:	f020 0001 	biceq.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	f102 0220 	add.w	r2, r2, #32
 80009fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a08:	fa21 f202 	lsr.w	r2, r1, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_fmul>:
 8000a18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a20:	bf1e      	ittt	ne
 8000a22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a26:	ea92 0f0c 	teqne	r2, ip
 8000a2a:	ea93 0f0c 	teqne	r3, ip
 8000a2e:	d06f      	beq.n	8000b10 <__aeabi_fmul+0xf8>
 8000a30:	441a      	add	r2, r3
 8000a32:	ea80 0c01 	eor.w	ip, r0, r1
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3e:	d01e      	beq.n	8000a7e <__aeabi_fmul+0x66>
 8000a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a58:	bf3e      	ittt	cc
 8000a5a:	0049      	lslcc	r1, r1, #1
 8000a5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a60:	005b      	lslcc	r3, r3, #1
 8000a62:	ea40 0001 	orr.w	r0, r0, r1
 8000a66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a6a:	2afd      	cmp	r2, #253	; 0xfd
 8000a6c:	d81d      	bhi.n	8000aaa <__aeabi_fmul+0x92>
 8000a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	f090 0f00 	teq	r0, #0
 8000a82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	0249      	lsleq	r1, r1, #9
 8000a8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a92:	3a7f      	subs	r2, #127	; 0x7f
 8000a94:	bfc2      	ittt	gt
 8000a96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9e:	4770      	bxgt	lr
 8000aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	3a01      	subs	r2, #1
 8000aaa:	dc5d      	bgt.n	8000b68 <__aeabi_fmul+0x150>
 8000aac:	f112 0f19 	cmn.w	r2, #25
 8000ab0:	bfdc      	itt	le
 8000ab2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bxle	lr
 8000ab8:	f1c2 0200 	rsb	r2, r2, #0
 8000abc:	0041      	lsls	r1, r0, #1
 8000abe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ac2:	f1c2 0220 	rsb	r2, r2, #32
 8000ac6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ace:	f140 0000 	adc.w	r0, r0, #0
 8000ad2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad6:	bf08      	it	eq
 8000ad8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000adc:	4770      	bx	lr
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ae6:	bf02      	ittt	eq
 8000ae8:	0040      	lsleq	r0, r0, #1
 8000aea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aee:	3a01      	subeq	r2, #1
 8000af0:	d0f9      	beq.n	8000ae6 <__aeabi_fmul+0xce>
 8000af2:	ea40 000c 	orr.w	r0, r0, ip
 8000af6:	f093 0f00 	teq	r3, #0
 8000afa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afe:	bf02      	ittt	eq
 8000b00:	0049      	lsleq	r1, r1, #1
 8000b02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b06:	3b01      	subeq	r3, #1
 8000b08:	d0f9      	beq.n	8000afe <__aeabi_fmul+0xe6>
 8000b0a:	ea41 010c 	orr.w	r1, r1, ip
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fmul+0x18>
 8000b10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b14:	ea92 0f0c 	teq	r2, ip
 8000b18:	bf18      	it	ne
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d00a      	beq.n	8000b36 <__aeabi_fmul+0x11e>
 8000b20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b24:	bf18      	it	ne
 8000b26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b2a:	d1d8      	bne.n	8000ade <__aeabi_fmul+0xc6>
 8000b2c:	ea80 0001 	eor.w	r0, r0, r1
 8000b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f090 0f00 	teq	r0, #0
 8000b3a:	bf17      	itett	ne
 8000b3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b40:	4608      	moveq	r0, r1
 8000b42:	f091 0f00 	teqne	r1, #0
 8000b46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b4a:	d014      	beq.n	8000b76 <__aeabi_fmul+0x15e>
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	d101      	bne.n	8000b56 <__aeabi_fmul+0x13e>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d10f      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b56:	ea93 0f0c 	teq	r3, ip
 8000b5a:	d103      	bne.n	8000b64 <__aeabi_fmul+0x14c>
 8000b5c:	024b      	lsls	r3, r1, #9
 8000b5e:	bf18      	it	ne
 8000b60:	4608      	movne	r0, r1
 8000b62:	d108      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_fdiv>:
 8000b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b88:	bf1e      	ittt	ne
 8000b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8e:	ea92 0f0c 	teqne	r2, ip
 8000b92:	ea93 0f0c 	teqne	r3, ip
 8000b96:	d069      	beq.n	8000c6c <__aeabi_fdiv+0xec>
 8000b98:	eba2 0203 	sub.w	r2, r2, r3
 8000b9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba6:	d037      	beq.n	8000c18 <__aeabi_fdiv+0x98>
 8000ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf38      	it	cc
 8000bbc:	005b      	lslcc	r3, r3, #1
 8000bbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	bf24      	itt	cs
 8000bca:	1a5b      	subcs	r3, r3, r1
 8000bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000be2:	bf24      	itt	cs
 8000be4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bf0:	bf24      	itt	cs
 8000bf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c02:	d1e0      	bne.n	8000bc6 <__aeabi_fdiv+0x46>
 8000c04:	2afd      	cmp	r2, #253	; 0xfd
 8000c06:	f63f af50 	bhi.w	8000aaa <__aeabi_fmul+0x92>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c20:	327f      	adds	r2, #127	; 0x7f
 8000c22:	bfc2      	ittt	gt
 8000c24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2c:	4770      	bxgt	lr
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	3a01      	subs	r2, #1
 8000c38:	e737      	b.n	8000aaa <__aeabi_fmul+0x92>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0040      	lsleq	r0, r0, #1
 8000c46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4a:	3a01      	subeq	r2, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fdiv+0xc2>
 8000c4e:	ea40 000c 	orr.w	r0, r0, ip
 8000c52:	f093 0f00 	teq	r3, #0
 8000c56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	bf02      	ittt	eq
 8000c5c:	0049      	lsleq	r1, r1, #1
 8000c5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c62:	3b01      	subeq	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <__aeabi_fdiv+0xda>
 8000c66:	ea41 010c 	orr.w	r1, r1, ip
 8000c6a:	e795      	b.n	8000b98 <__aeabi_fdiv+0x18>
 8000c6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c70:	ea92 0f0c 	teq	r2, ip
 8000c74:	d108      	bne.n	8000c88 <__aeabi_fdiv+0x108>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	f47f af7d 	bne.w	8000b76 <__aeabi_fmul+0x15e>
 8000c7c:	ea93 0f0c 	teq	r3, ip
 8000c80:	f47f af70 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e776      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c88:	ea93 0f0c 	teq	r3, ip
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_fdiv+0x118>
 8000c8e:	024b      	lsls	r3, r1, #9
 8000c90:	f43f af4c 	beq.w	8000b2c <__aeabi_fmul+0x114>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e76e      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c9c:	bf18      	it	ne
 8000c9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	d1ca      	bne.n	8000c3a <__aeabi_fdiv+0xba>
 8000ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ca8:	f47f af5c 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000cac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	f47f af3c 	bne.w	8000b2c <__aeabi_fmul+0x114>
 8000cb4:	e75f      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000cb6:	bf00      	nop

08000cb8 <__gesf2>:
 8000cb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cbc:	e006      	b.n	8000ccc <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__lesf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	e002      	b.n	8000ccc <__cmpsf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__cmpsf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	bf18      	it	ne
 8000cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce2:	d011      	beq.n	8000d08 <__cmpsf2+0x40>
 8000ce4:	b001      	add	sp, #4
 8000ce6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cea:	bf18      	it	ne
 8000cec:	ea90 0f01 	teqne	r0, r1
 8000cf0:	bf58      	it	pl
 8000cf2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cf6:	bf88      	it	hi
 8000cf8:	17c8      	asrhi	r0, r1, #31
 8000cfa:	bf38      	it	cc
 8000cfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d00:	bf18      	it	ne
 8000d02:	f040 0001 	orrne.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	d102      	bne.n	8000d14 <__cmpsf2+0x4c>
 8000d0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d12:	d105      	bne.n	8000d20 <__cmpsf2+0x58>
 8000d14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d18:	d1e4      	bne.n	8000ce4 <__cmpsf2+0x1c>
 8000d1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d1e:	d0e1      	beq.n	8000ce4 <__cmpsf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d32:	f7ff ffc9 	bl	8000cc8 <__cmpsf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffd2 	bl	8000d28 <__aeabi_cfrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc8 	bl	8000d28 <__aeabi_cfrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_ldivmod>:
 8000de4:	b97b      	cbnz	r3, 8000e06 <__aeabi_ldivmod+0x22>
 8000de6:	b972      	cbnz	r2, 8000e06 <__aeabi_ldivmod+0x22>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bfbe      	ittt	lt
 8000dec:	2000      	movlt	r0, #0
 8000dee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000df2:	e006      	blt.n	8000e02 <__aeabi_ldivmod+0x1e>
 8000df4:	bf08      	it	eq
 8000df6:	2800      	cmpeq	r0, #0
 8000df8:	bf1c      	itt	ne
 8000dfa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8000e02:	f000 b9bd 	b.w	8001180 <__aeabi_idiv0>
 8000e06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	db09      	blt.n	8000e26 <__aeabi_ldivmod+0x42>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db1a      	blt.n	8000e4c <__aeabi_ldivmod+0x68>
 8000e16:	f000 f84d 	bl	8000eb4 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db1b      	blt.n	8000e68 <__aeabi_ldivmod+0x84>
 8000e30:	f000 f840 	bl	8000eb4 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	4252      	negs	r2, r2
 8000e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f82f 	bl	8000eb4 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4240      	negs	r0, r0
 8000e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e66:	4770      	bx	lr
 8000e68:	4252      	negs	r2, r2
 8000e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6e:	f000 f821 	bl	8000eb4 <__udivmoddi4>
 8000e72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7a:	b004      	add	sp, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b972 	b.w	8001180 <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f806 	bl	8000eb4 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9e08      	ldr	r6, [sp, #32]
 8000eba:	460d      	mov	r5, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	468e      	mov	lr, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14c      	bne.n	8000f5e <__udivmoddi4+0xaa>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	d967      	bls.n	8000f9a <__udivmoddi4+0xe6>
 8000eca:	fab2 f382 	clz	r3, r2
 8000ece:	b153      	cbz	r3, 8000ee6 <__udivmoddi4+0x32>
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	f1c3 0220 	rsb	r2, r3, #32
 8000ed8:	fa01 fe03 	lsl.w	lr, r1, r3
 8000edc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee0:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ee4:	409c      	lsls	r4, r3
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fbbe f1f7 	udiv	r1, lr, r7
 8000eee:	fa1f f58c 	uxth.w	r5, ip
 8000ef2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000ef6:	fb01 f005 	mul.w	r0, r1, r5
 8000efa:	0c22      	lsrs	r2, r4, #16
 8000efc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x66>
 8000f04:	eb1c 0202 	adds.w	r2, ip, r2
 8000f08:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f0c:	f080 8119 	bcs.w	8001142 <__udivmoddi4+0x28e>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f240 8116 	bls.w	8001142 <__udivmoddi4+0x28e>
 8000f16:	3902      	subs	r1, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a12      	subs	r2, r2, r0
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	fb00 f505 	mul.w	r5, r0, r5
 8000f28:	b2a4      	uxth	r4, r4
 8000f2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	d90a      	bls.n	8000f48 <__udivmoddi4+0x94>
 8000f32:	eb1c 0404 	adds.w	r4, ip, r4
 8000f36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f3a:	f080 8104 	bcs.w	8001146 <__udivmoddi4+0x292>
 8000f3e:	42a5      	cmp	r5, r4
 8000f40:	f240 8101 	bls.w	8001146 <__udivmoddi4+0x292>
 8000f44:	4464      	add	r4, ip
 8000f46:	3802      	subs	r0, #2
 8000f48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	b11e      	cbz	r6, 8000f5a <__udivmoddi4+0xa6>
 8000f52:	40dc      	lsrs	r4, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	e9c6 4300 	strd	r4, r3, [r6]
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0xc0>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80ea 	beq.w	800113c <__udivmoddi4+0x288>
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	fab3 f183 	clz	r1, r3
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d148      	bne.n	800100e <__udivmoddi4+0x15a>
 8000f7c:	42ab      	cmp	r3, r5
 8000f7e:	d302      	bcc.n	8000f86 <__udivmoddi4+0xd2>
 8000f80:	4282      	cmp	r2, r0
 8000f82:	f200 80f8 	bhi.w	8001176 <__udivmoddi4+0x2c2>
 8000f86:	1a84      	subs	r4, r0, r2
 8000f88:	eb65 0203 	sbc.w	r2, r5, r3
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4696      	mov	lr, r2
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d0e2      	beq.n	8000f5a <__udivmoddi4+0xa6>
 8000f94:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f98:	e7df      	b.n	8000f5a <__udivmoddi4+0xa6>
 8000f9a:	b902      	cbnz	r2, 8000f9e <__udivmoddi4+0xea>
 8000f9c:	deff      	udf	#255	; 0xff
 8000f9e:	fab2 f382 	clz	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 808e 	bne.w	80010c4 <__udivmoddi4+0x210>
 8000fa8:	1a88      	subs	r0, r1, r2
 8000faa:	2101      	movs	r1, #1
 8000fac:	0c17      	lsrs	r7, r2, #16
 8000fae:	fa1f fe82 	uxth.w	lr, r2
 8000fb2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000fb6:	fb07 0015 	mls	r0, r7, r5, r0
 8000fba:	0c22      	lsrs	r2, r4, #16
 8000fbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fc0:	fb0e f005 	mul.w	r0, lr, r5
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x126>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d202      	bcs.n	8000fd8 <__udivmoddi4+0x124>
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	f200 80cc 	bhi.w	8001170 <__udivmoddi4+0x2bc>
 8000fd8:	4645      	mov	r5, r8
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fe0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fe4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x150>
 8000ff2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x14e>
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	f200 80b4 	bhi.w	800116a <__udivmoddi4+0x2b6>
 8001002:	4610      	mov	r0, r2
 8001004:	eba4 040e 	sub.w	r4, r4, lr
 8001008:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800100c:	e7a0      	b.n	8000f50 <__udivmoddi4+0x9c>
 800100e:	f1c1 0720 	rsb	r7, r1, #32
 8001012:	408b      	lsls	r3, r1
 8001014:	fa22 fc07 	lsr.w	ip, r2, r7
 8001018:	ea4c 0c03 	orr.w	ip, ip, r3
 800101c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001020:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001024:	fbba f8f9 	udiv	r8, sl, r9
 8001028:	408d      	lsls	r5, r1
 800102a:	fa20 f307 	lsr.w	r3, r0, r7
 800102e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001032:	fa1f fe8c 	uxth.w	lr, ip
 8001036:	432b      	orrs	r3, r5
 8001038:	fa00 f501 	lsl.w	r5, r0, r1
 800103c:	fb08 f00e 	mul.w	r0, r8, lr
 8001040:	0c1c      	lsrs	r4, r3, #16
 8001042:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001046:	42a0      	cmp	r0, r4
 8001048:	fa02 f201 	lsl.w	r2, r2, r1
 800104c:	d90b      	bls.n	8001066 <__udivmoddi4+0x1b2>
 800104e:	eb1c 0404 	adds.w	r4, ip, r4
 8001052:	f108 3aff 	add.w	sl, r8, #4294967295
 8001056:	f080 8086 	bcs.w	8001166 <__udivmoddi4+0x2b2>
 800105a:	42a0      	cmp	r0, r4
 800105c:	f240 8083 	bls.w	8001166 <__udivmoddi4+0x2b2>
 8001060:	f1a8 0802 	sub.w	r8, r8, #2
 8001064:	4464      	add	r4, ip
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	b298      	uxth	r0, r3
 800106a:	fbb4 f3f9 	udiv	r3, r4, r9
 800106e:	fb09 4413 	mls	r4, r9, r3, r4
 8001072:	fb03 fe0e 	mul.w	lr, r3, lr
 8001076:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800107a:	45a6      	cmp	lr, r4
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x1dc>
 800107e:	eb1c 0404 	adds.w	r4, ip, r4
 8001082:	f103 30ff 	add.w	r0, r3, #4294967295
 8001086:	d26a      	bcs.n	800115e <__udivmoddi4+0x2aa>
 8001088:	45a6      	cmp	lr, r4
 800108a:	d968      	bls.n	800115e <__udivmoddi4+0x2aa>
 800108c:	3b02      	subs	r3, #2
 800108e:	4464      	add	r4, ip
 8001090:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001094:	fba0 9302 	umull	r9, r3, r0, r2
 8001098:	eba4 040e 	sub.w	r4, r4, lr
 800109c:	429c      	cmp	r4, r3
 800109e:	46c8      	mov	r8, r9
 80010a0:	469e      	mov	lr, r3
 80010a2:	d354      	bcc.n	800114e <__udivmoddi4+0x29a>
 80010a4:	d051      	beq.n	800114a <__udivmoddi4+0x296>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d067      	beq.n	800117a <__udivmoddi4+0x2c6>
 80010aa:	ebb5 0308 	subs.w	r3, r5, r8
 80010ae:	eb64 040e 	sbc.w	r4, r4, lr
 80010b2:	40cb      	lsrs	r3, r1
 80010b4:	fa04 f707 	lsl.w	r7, r4, r7
 80010b8:	431f      	orrs	r7, r3
 80010ba:	40cc      	lsrs	r4, r1
 80010bc:	e9c6 7400 	strd	r7, r4, [r6]
 80010c0:	2100      	movs	r1, #0
 80010c2:	e74a      	b.n	8000f5a <__udivmoddi4+0xa6>
 80010c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010c8:	f1c3 0020 	rsb	r0, r3, #32
 80010cc:	40c1      	lsrs	r1, r0
 80010ce:	409d      	lsls	r5, r3
 80010d0:	fa24 f000 	lsr.w	r0, r4, r0
 80010d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d8:	4328      	orrs	r0, r5
 80010da:	fbb1 f5f7 	udiv	r5, r1, r7
 80010de:	fb07 1115 	mls	r1, r7, r5, r1
 80010e2:	fa1f fe8c 	uxth.w	lr, ip
 80010e6:	0c02      	lsrs	r2, r0, #16
 80010e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010ec:	fb05 f10e 	mul.w	r1, r5, lr
 80010f0:	4291      	cmp	r1, r2
 80010f2:	fa04 f403 	lsl.w	r4, r4, r3
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x256>
 80010f8:	eb1c 0202 	adds.w	r2, ip, r2
 80010fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8001100:	d22f      	bcs.n	8001162 <__udivmoddi4+0x2ae>
 8001102:	4291      	cmp	r1, r2
 8001104:	d92d      	bls.n	8001162 <__udivmoddi4+0x2ae>
 8001106:	3d02      	subs	r5, #2
 8001108:	4462      	add	r2, ip
 800110a:	1a52      	subs	r2, r2, r1
 800110c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001110:	fb07 2211 	mls	r2, r7, r1, r2
 8001114:	b280      	uxth	r0, r0
 8001116:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800111a:	fb01 f20e 	mul.w	r2, r1, lr
 800111e:	4282      	cmp	r2, r0
 8001120:	d908      	bls.n	8001134 <__udivmoddi4+0x280>
 8001122:	eb1c 0000 	adds.w	r0, ip, r0
 8001126:	f101 38ff 	add.w	r8, r1, #4294967295
 800112a:	d216      	bcs.n	800115a <__udivmoddi4+0x2a6>
 800112c:	4282      	cmp	r2, r0
 800112e:	d914      	bls.n	800115a <__udivmoddi4+0x2a6>
 8001130:	3902      	subs	r1, #2
 8001132:	4460      	add	r0, ip
 8001134:	1a80      	subs	r0, r0, r2
 8001136:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800113a:	e73a      	b.n	8000fb2 <__udivmoddi4+0xfe>
 800113c:	4631      	mov	r1, r6
 800113e:	4630      	mov	r0, r6
 8001140:	e70b      	b.n	8000f5a <__udivmoddi4+0xa6>
 8001142:	4671      	mov	r1, lr
 8001144:	e6e9      	b.n	8000f1a <__udivmoddi4+0x66>
 8001146:	4610      	mov	r0, r2
 8001148:	e6fe      	b.n	8000f48 <__udivmoddi4+0x94>
 800114a:	454d      	cmp	r5, r9
 800114c:	d2ab      	bcs.n	80010a6 <__udivmoddi4+0x1f2>
 800114e:	ebb9 0802 	subs.w	r8, r9, r2
 8001152:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001156:	3801      	subs	r0, #1
 8001158:	e7a5      	b.n	80010a6 <__udivmoddi4+0x1f2>
 800115a:	4641      	mov	r1, r8
 800115c:	e7ea      	b.n	8001134 <__udivmoddi4+0x280>
 800115e:	4603      	mov	r3, r0
 8001160:	e796      	b.n	8001090 <__udivmoddi4+0x1dc>
 8001162:	4645      	mov	r5, r8
 8001164:	e7d1      	b.n	800110a <__udivmoddi4+0x256>
 8001166:	46d0      	mov	r8, sl
 8001168:	e77d      	b.n	8001066 <__udivmoddi4+0x1b2>
 800116a:	4464      	add	r4, ip
 800116c:	3802      	subs	r0, #2
 800116e:	e749      	b.n	8001004 <__udivmoddi4+0x150>
 8001170:	3d02      	subs	r5, #2
 8001172:	4462      	add	r2, ip
 8001174:	e731      	b.n	8000fda <__udivmoddi4+0x126>
 8001176:	4608      	mov	r0, r1
 8001178:	e70a      	b.n	8000f90 <__udivmoddi4+0xdc>
 800117a:	4631      	mov	r1, r6
 800117c:	e6ed      	b.n	8000f5a <__udivmoddi4+0xa6>
 800117e:	bf00      	nop

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001194:	f107 030e 	add.w	r3, r7, #14
 8001198:	461a      	mov	r2, r3
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fd66 	bl	8001c6e <BME280_ReadRegister>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 80011ac:	2301      	movs	r3, #1
 80011ae:	e005      	b.n	80011bc <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b76      	cmp	r3, #118	; 0x76
 80011b4:	d101      	bne.n	80011ba <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 80011b6:	2302      	movs	r3, #2
 80011b8:	e000      	b.n	80011bc <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 80011ba:	2300      	movs	r3, #0
		}
	}
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->dig_H2 = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->dig_H3 = 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->dig_H4 = 0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->dig_H5 = 0;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->dig_H6 = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dev->dig_P1 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->dig_P6 = 0;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->dig_P7 = 0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	84da      	strh	r2, [r3, #38]	; 0x26
	dev->dig_P8 = 0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	851a      	strh	r2, [r3, #40]	; 0x28
	dev->dig_P9 = 0;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	855a      	strh	r2, [r3, #42]	; 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 8001262:	22b6      	movs	r2, #182	; 0xb6
 8001264:	21e0      	movs	r1, #224	; 0xe0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fd39 	bl	8001cde <BME280_WriteRegister>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <BME280_Reset+0xb6>
	{
		return 1;	// NOK
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <BME280_Reset+0xb8>
	}
	else
	{
		return 0; // OK
 800127a:	2300      	movs	r3, #0
	}
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	// Humidity; Set value: 011 = oversampling x4
	static const uint8_t ctrl_humData = 0x03;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <BME280_Init+0x70>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	21f2      	movs	r1, #242	; 0xf2
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fd1e 	bl	8001cde <BME280_WriteRegister>
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 80012ac:	2301      	movs	r3, #1
 80012ae:	e01c      	b.n	80012ea <BME280_Init+0x66>
	}

	// Temp, Press, Mode; Set value: 01101111 = oversampling x4, oversampling x4, normal mode
	static const uint8_t scrl_meadData = 0x6F;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <BME280_Init+0x74>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	21f4      	movs	r1, #244	; 0xf4
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fd10 	bl	8001cde <BME280_WriteRegister>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <BME280_Init+0x48>
	{
		return 1;	// NOK
 80012c8:	2301      	movs	r3, #1
 80012ca:	e00e      	b.n	80012ea <BME280_Init+0x66>
	}

	// Standbay, time IIR filter, 3-wire SPI, Mode; Set value: 0000010 = standbay 0.5ms, IIR 2, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <BME280_Init+0x78>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	21f5      	movs	r1, #245	; 0xf5
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fd02 	bl	8001cde <BME280_WriteRegister>
 80012da:	4603      	mov	r3, r0
 80012dc:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <BME280_Init+0x64>
	{
		return 1;	// NOK
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 80012e8:	2300      	movs	r3, #0
	}
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800ce10 	.word	0x0800ce10
 80012f8:	0800ce11 	.word	0x0800ce11
 80012fc:	0800ce12 	.word	0x0800ce12

08001300 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	751a      	strb	r2, [r3, #20]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 8001326:	f107 0214 	add.w	r2, r7, #20
 800132a:	2319      	movs	r3, #25
 800132c:	2188      	movs	r1, #136	; 0x88
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fcb7 	bl	8001ca2 <BME280_ReadRegisters>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 800133a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <BME280_ReadCalibData+0x46>
	{
		return 1;	// NOK
 8001342:	2301      	movs	r3, #1
 8001344:	e0d0      	b.n	80014e8 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b29b      	uxth	r3, r3
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b29a      	uxth	r2, r3
 800134e:	7d3b      	ldrb	r3, [r7, #20]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b29b      	uxth	r3, r3
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b29a      	uxth	r2, r3
 8001362:	7dbb      	ldrb	r3, [r7, #22]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 8001370:	7e7b      	ldrb	r3, [r7, #25]
 8001372:	b29b      	uxth	r3, r3
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b29a      	uxth	r2, r3
 8001378:	7e3b      	ldrb	r3, [r7, #24]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 8001386:	7efb      	ldrb	r3, [r7, #27]
 8001388:	b29b      	uxth	r3, r3
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b29a      	uxth	r2, r3
 800138e:	7ebb      	ldrb	r3, [r7, #26]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800139a:	7f7b      	ldrb	r3, [r7, #29]
 800139c:	b29b      	uxth	r3, r3
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	7f3b      	ldrb	r3, [r7, #28]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7fbb      	ldrb	r3, [r7, #30]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 80013c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80013e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80013fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013fe:	b29b      	uxth	r3, r3
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b29a      	uxth	r2, r3
 8001404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001408:	b29b      	uxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	b21a      	sxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 8001414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001418:	b29b      	uxth	r3, r3
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b29a      	uxth	r2, r3
 800141e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001422:	b29b      	uxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21a      	sxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 800142e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001432:	b29b      	uxth	r3, r3
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b29a      	uxth	r2, r3
 8001438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800143c:	b29b      	uxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	b21a      	sxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 8001448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800144c:	b29b      	uxth	r3, r3
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b29a      	uxth	r2, r3
 8001452:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	b21a      	sxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 8001462:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 800146c:	f107 020c 	add.w	r2, r7, #12
 8001470:	2307      	movs	r3, #7
 8001472:	21e1      	movs	r1, #225	; 0xe1
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fc14 	bl	8001ca2 <BME280_ReadRegisters>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <BME280_ReadCalibData+0x18c>
	{
		return 1;	// NOK
 8001488:	2301      	movs	r3, #1
 800148a:	e02d      	b.n	80014e8 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 800148c:	7b7b      	ldrb	r3, [r7, #13]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 800149e:	7bba      	ldrb	r2, [r7, #14]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21a      	sxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 80014c2:	7c7b      	ldrb	r3, [r7, #17]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	7c3b      	ldrb	r3, [r7, #16]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 80014dc:	7cbb      	ldrb	r3, [r7, #18]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	10da      	asrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	8a9b      	ldrh	r3, [r3, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	12db      	asrs	r3, r3, #11
 8001512:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	111b      	asrs	r3, r3, #4
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	8a92      	ldrh	r2, [r2, #20]
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	1112      	asrs	r2, r2, #4
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	8a89      	ldrh	r1, [r1, #20]
 8001526:	1a52      	subs	r2, r2, r1
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	131b      	asrs	r3, r3, #12
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	139b      	asrs	r3, r3, #14
 800153a:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3380      	adds	r3, #128	; 0x80
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8001562:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001566:	b0ca      	sub	sp, #296	; 0x128
 8001568:	af00      	add	r7, sp, #0
 800156a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800156e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8001572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	17da      	asrs	r2, r3, #31
 800157a:	461c      	mov	r4, r3
 800157c:	4615      	mov	r5, r2
 800157e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001582:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001586:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800158a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800158e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001592:	fb03 f102 	mul.w	r1, r3, r2
 8001596:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800159a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	18ca      	adds	r2, r1, r3
 80015a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a8:	fba3 8903 	umull	r8, r9, r3, r3
 80015ac:	eb02 0309 	add.w	r3, r2, r9
 80015b0:	4699      	mov	r9, r3
 80015b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015b6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	17da      	asrs	r2, r3, #31
 80015be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015c2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015ca:	4603      	mov	r3, r0
 80015cc:	fb03 f209 	mul.w	r2, r3, r9
 80015d0:	460b      	mov	r3, r1
 80015d2:	fb08 f303 	mul.w	r3, r8, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	4602      	mov	r2, r0
 80015da:	fba8 2102 	umull	r2, r1, r8, r2
 80015de:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80015e2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ea:	4413      	add	r3, r2
 80015ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015f0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015f4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80015fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001600:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001604:	b21b      	sxth	r3, r3
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800160c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001614:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001618:	462a      	mov	r2, r5
 800161a:	fb02 f203 	mul.w	r2, r2, r3
 800161e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001622:	4621      	mov	r1, r4
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	441a      	add	r2, r3
 800162a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800162e:	4621      	mov	r1, r4
 8001630:	fba3 3101 	umull	r3, r1, r3, r1
 8001634:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001638:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800163c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001640:	18d3      	adds	r3, r2, r3
 8001642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001652:	462b      	mov	r3, r5
 8001654:	0459      	lsls	r1, r3, #17
 8001656:	4622      	mov	r2, r4
 8001658:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800165c:	4623      	mov	r3, r4
 800165e:	0458      	lsls	r0, r3, #17
 8001660:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001664:	1814      	adds	r4, r2, r0
 8001666:	643c      	str	r4, [r7, #64]	; 0x40
 8001668:	414b      	adcs	r3, r1
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
 800166c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001670:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001678:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800167c:	b21b      	sxth	r3, r3
 800167e:	17da      	asrs	r2, r3, #31
 8001680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001684:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001688:	f04f 0000 	mov.w	r0, #0
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001694:	00d9      	lsls	r1, r3, #3
 8001696:	2000      	movs	r0, #0
 8001698:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800169c:	1814      	adds	r4, r2, r0
 800169e:	63bc      	str	r4, [r7, #56]	; 0x38
 80016a0:	414b      	adcs	r3, r1
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b4:	fb03 f102 	mul.w	r1, r3, r2
 80016b8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	18ca      	adds	r2, r1, r3
 80016c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ca:	fba3 3103 	umull	r3, r1, r3, r3
 80016ce:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80016d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016da:	18d3      	adds	r3, r2, r3
 80016dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	17da      	asrs	r2, r3, #31
 80016ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016f4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80016f8:	4622      	mov	r2, r4
 80016fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016fe:	4641      	mov	r1, r8
 8001700:	fb01 f202 	mul.w	r2, r1, r2
 8001704:	464d      	mov	r5, r9
 8001706:	4618      	mov	r0, r3
 8001708:	4621      	mov	r1, r4
 800170a:	4603      	mov	r3, r0
 800170c:	fb03 f305 	mul.w	r3, r3, r5
 8001710:	4413      	add	r3, r2
 8001712:	4602      	mov	r2, r0
 8001714:	4641      	mov	r1, r8
 8001716:	fba2 2101 	umull	r2, r1, r2, r1
 800171a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800171e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001722:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001726:	4413      	add	r3, r2
 8001728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001738:	4623      	mov	r3, r4
 800173a:	0a18      	lsrs	r0, r3, #8
 800173c:	462a      	mov	r2, r5
 800173e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001742:	462b      	mov	r3, r5
 8001744:	1219      	asrs	r1, r3, #8
 8001746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800174a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800174e:	b21b      	sxth	r3, r3
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001756:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800175a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800175e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001762:	464a      	mov	r2, r9
 8001764:	fb02 f203 	mul.w	r2, r2, r3
 8001768:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800176c:	4644      	mov	r4, r8
 800176e:	fb04 f303 	mul.w	r3, r4, r3
 8001772:	441a      	add	r2, r3
 8001774:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001778:	4644      	mov	r4, r8
 800177a:	fba3 3404 	umull	r3, r4, r3, r4
 800177e:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001782:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800178a:	18d3      	adds	r3, r2, r3
 800178c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800179c:	464c      	mov	r4, r9
 800179e:	0323      	lsls	r3, r4, #12
 80017a0:	46c4      	mov	ip, r8
 80017a2:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80017a6:	4644      	mov	r4, r8
 80017a8:	0322      	lsls	r2, r4, #12
 80017aa:	1884      	adds	r4, r0, r2
 80017ac:	633c      	str	r4, [r7, #48]	; 0x30
 80017ae:	eb41 0303 	adc.w	r3, r1, r3
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
 80017b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 80017bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017c0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017c4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017d0:	8b5b      	ldrh	r3, [r3, #26]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017da:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017de:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80017e2:	4622      	mov	r2, r4
 80017e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017e8:	4641      	mov	r1, r8
 80017ea:	fb01 f202 	mul.w	r2, r1, r2
 80017ee:	464d      	mov	r5, r9
 80017f0:	4618      	mov	r0, r3
 80017f2:	4621      	mov	r1, r4
 80017f4:	4603      	mov	r3, r0
 80017f6:	fb03 f305 	mul.w	r3, r3, r5
 80017fa:	4413      	add	r3, r2
 80017fc:	4602      	mov	r2, r0
 80017fe:	4641      	mov	r1, r8
 8001800:	fba2 2101 	umull	r2, r1, r2, r1
 8001804:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001808:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800180c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001810:	4413      	add	r3, r2
 8001812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001822:	4629      	mov	r1, r5
 8001824:	104a      	asrs	r2, r1, #1
 8001826:	4629      	mov	r1, r5
 8001828:	17cb      	asrs	r3, r1, #31
 800182a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 800182e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001832:	4313      	orrs	r3, r2
 8001834:	d101      	bne.n	800183a <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e146      	b.n	8001ac8 <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 800183a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800183e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001842:	17da      	asrs	r2, r3, #31
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
 8001846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001848:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800184c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001854:	105b      	asrs	r3, r3, #1
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800185a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800185e:	07db      	lsls	r3, r3, #31
 8001860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001864:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001868:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800186c:	4604      	mov	r4, r0
 800186e:	1aa4      	subs	r4, r4, r2
 8001870:	67bc      	str	r4, [r7, #120]	; 0x78
 8001872:	eb61 0303 	sbc.w	r3, r1, r3
 8001876:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001878:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800187c:	4622      	mov	r2, r4
 800187e:	462b      	mov	r3, r5
 8001880:	1891      	adds	r1, r2, r2
 8001882:	6239      	str	r1, [r7, #32]
 8001884:	415b      	adcs	r3, r3
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800188c:	4621      	mov	r1, r4
 800188e:	1851      	adds	r1, r2, r1
 8001890:	61b9      	str	r1, [r7, #24]
 8001892:	4629      	mov	r1, r5
 8001894:	414b      	adcs	r3, r1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018a4:	4649      	mov	r1, r9
 80018a6:	018b      	lsls	r3, r1, #6
 80018a8:	4641      	mov	r1, r8
 80018aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ae:	4641      	mov	r1, r8
 80018b0:	018a      	lsls	r2, r1, #6
 80018b2:	4641      	mov	r1, r8
 80018b4:	1889      	adds	r1, r1, r2
 80018b6:	6139      	str	r1, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	eb43 0101 	adc.w	r1, r3, r1
 80018be:	6179      	str	r1, [r7, #20]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	008b      	lsls	r3, r1, #2
 80018d0:	46c4      	mov	ip, r8
 80018d2:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80018d6:	4641      	mov	r1, r8
 80018d8:	008a      	lsls	r2, r1, #2
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	4622      	mov	r2, r4
 80018e2:	189b      	adds	r3, r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	460b      	mov	r3, r1
 80018e8:	462a      	mov	r2, r5
 80018ea:	eb42 0303 	adc.w	r3, r2, r3
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018fc:	4649      	mov	r1, r9
 80018fe:	008b      	lsls	r3, r1, #2
 8001900:	46c4      	mov	ip, r8
 8001902:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001906:	4641      	mov	r1, r8
 8001908:	008a      	lsls	r2, r1, #2
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	4603      	mov	r3, r0
 8001910:	4622      	mov	r2, r4
 8001912:	189b      	adds	r3, r3, r2
 8001914:	673b      	str	r3, [r7, #112]	; 0x70
 8001916:	462b      	mov	r3, r5
 8001918:	460a      	mov	r2, r1
 800191a:	eb42 0303 	adc.w	r3, r2, r3
 800191e:	677b      	str	r3, [r7, #116]	; 0x74
 8001920:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001924:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001928:	f7ff fa5c 	bl	8000de4 <__aeabi_ldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001938:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800193c:	b21b      	sxth	r3, r3
 800193e:	17da      	asrs	r2, r3, #31
 8001940:	66bb      	str	r3, [r7, #104]	; 0x68
 8001942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001944:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0b50      	lsrs	r0, r2, #13
 8001952:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001956:	1359      	asrs	r1, r3, #13
 8001958:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800195c:	462b      	mov	r3, r5
 800195e:	fb00 f203 	mul.w	r2, r0, r3
 8001962:	4623      	mov	r3, r4
 8001964:	fb03 f301 	mul.w	r3, r3, r1
 8001968:	4413      	add	r3, r2
 800196a:	4622      	mov	r2, r4
 800196c:	fba2 2100 	umull	r2, r1, r2, r0
 8001970:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001974:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001978:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800197c:	4413      	add	r3, r2
 800197e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001982:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0b50      	lsrs	r0, r2, #13
 8001990:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001994:	1359      	asrs	r1, r3, #13
 8001996:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800199a:	462b      	mov	r3, r5
 800199c:	fb00 f203 	mul.w	r2, r0, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	fb03 f301 	mul.w	r3, r3, r1
 80019a6:	4413      	add	r3, r2
 80019a8:	4622      	mov	r2, r4
 80019aa:	fba2 2100 	umull	r2, r1, r2, r0
 80019ae:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80019b2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019ba:	4413      	add	r3, r2
 80019bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019cc:	4621      	mov	r1, r4
 80019ce:	0e4a      	lsrs	r2, r1, #25
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	460c      	mov	r4, r1
 80019d6:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 80019da:	164b      	asrs	r3, r1, #25
 80019dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 80019e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019e4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	17da      	asrs	r2, r3, #31
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
 80019ee:	667a      	str	r2, [r7, #100]	; 0x64
 80019f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019f8:	462a      	mov	r2, r5
 80019fa:	fb02 f203 	mul.w	r2, r2, r3
 80019fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a02:	4621      	mov	r1, r4
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a0e:	4621      	mov	r1, r4
 8001a10:	fba2 2101 	umull	r2, r1, r2, r1
 8001a14:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001a18:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a1c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a20:	4413      	add	r3, r2
 8001a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a32:	4621      	mov	r1, r4
 8001a34:	0cca      	lsrs	r2, r1, #19
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001a40:	14cb      	asrs	r3, r1, #19
 8001a42:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001a46:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a4a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a4e:	1884      	adds	r4, r0, r2
 8001a50:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a52:	eb41 0303 	adc.w	r3, r1, r3
 8001a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a58:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a5c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a60:	4621      	mov	r1, r4
 8001a62:	1889      	adds	r1, r1, r2
 8001a64:	6539      	str	r1, [r7, #80]	; 0x50
 8001a66:	4629      	mov	r1, r5
 8001a68:	eb43 0101 	adc.w	r1, r3, r1
 8001a6c:	6579      	str	r1, [r7, #84]	; 0x54
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	0a18      	lsrs	r0, r3, #8
 8001a7e:	462a      	mov	r2, r5
 8001a80:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001a84:	462b      	mov	r3, r5
 8001a86:	1219      	asrs	r1, r3, #8
 8001a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a8c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	17da      	asrs	r2, r3, #31
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a96:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aa4:	464c      	mov	r4, r9
 8001aa6:	0123      	lsls	r3, r4, #4
 8001aa8:	46c4      	mov	ip, r8
 8001aaa:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001aae:	4644      	mov	r4, r8
 8001ab0:	0122      	lsls	r2, r4, #4
 8001ab2:	1884      	adds	r4, r0, r2
 8001ab4:	603c      	str	r4, [r7, #0]
 8001ab6:	eb41 0303 	adc.w	r3, r1, r3
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)pressure;
 8001ac4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ad4 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ae6:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	039a      	lsls	r2, r3, #14
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001af2:	051b      	lsls	r3, r3, #20
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001afc:	4619      	mov	r1, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b0a:	13db      	asrs	r3, r3, #15
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	f992 2036 	ldrsb.w	r2, [r2, #54]	; 0x36
 8001b12:	4611      	mov	r1, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	fb01 f202 	mul.w	r2, r1, r2
 8001b1a:	1292      	asrs	r2, r2, #10
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001b22:	4608      	mov	r0, r1
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	fb00 f101 	mul.w	r1, r0, r1
 8001b2a:	12c9      	asrs	r1, r1, #11
 8001b2c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	1292      	asrs	r2, r2, #10
 8001b36:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	; 0x2e
 8001b40:	fb01 f202 	mul.w	r2, r1, r2
 8001b44:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b48:	1392      	asrs	r2, r2, #14
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	13db      	asrs	r3, r3, #15
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	13d2      	asrs	r2, r2, #15
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	11db      	asrs	r3, r3, #7
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	111b      	asrs	r3, r3, #4
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b76:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b7e:	bfa8      	it	ge
 8001b80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b84:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	131b      	asrs	r3, r3, #12
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t Data[8] = {};
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
	int32_t RawTemp = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t RawPressure = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t RawHumidity = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001bbe:	f107 020c 	add.w	r2, r7, #12
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	21f7      	movs	r1, #247	; 0xf7
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f86b 	bl	8001ca2 <BME280_ReadRegisters>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (status != HAL_OK)
 8001bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <BME280_ReadAllData+0x4a>
	{
		return 1;	// NOK
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e043      	b.n	8001c66 <BME280_ReadAllData+0xd2>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	031b      	lsls	r3, r3, #12
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001be4:	7c3b      	ldrb	r3, [r7, #16]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001bea:	7c7b      	ldrb	r3, [r7, #17]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001bfe:	7b3b      	ldrb	r3, [r7, #12]
 8001c00:	031b      	lsls	r3, r3, #12
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001c04:	7b7b      	ldrb	r3, [r7, #13]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001c1e:	7cbb      	ldrb	r3, [r7, #18]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[7];
 8001c24:	7cfb      	ldrb	r3, [r7, #19]
 8001c26:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fc5c 	bl	80014f0 <BME280_TemperatureCompesation>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fc8d 	bl	8001562 <BME280_PressureCompesation>
 8001c48:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	0a1a      	lsrs	r2, r3, #8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff3d 	bl	8001ad4 <BME280_HumidityCompesation>
 8001c5a:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	0a9a      	lsrs	r2, r3, #10
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b088      	sub	sp, #32
 8001c72:	af04      	add	r7, sp, #16
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	460b      	mov	r3, r1
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2364      	movs	r3, #100	; 0x64
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	21ec      	movs	r1, #236	; 0xec
 8001c94:	f004 f96a 	bl	8005f6c <HAL_I2C_Mem_Read>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b088      	sub	sp, #32
 8001ca6:	af04      	add	r7, sp, #16
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	461a      	mov	r2, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	72fb      	strb	r3, [r7, #11]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	7abb      	ldrb	r3, [r7, #10]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2164      	movs	r1, #100	; 0x64
 8001cc4:	9102      	str	r1, [sp, #8]
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	21ec      	movs	r1, #236	; 0xec
 8001cd0:	f004 f94c 	bl	8005f6c <HAL_I2C_Mem_Read>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af04      	add	r7, sp, #16
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	4613      	mov	r3, r2
 8001cec:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	2364      	movs	r3, #100	; 0x64
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	1cbb      	adds	r3, r7, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2301      	movs	r3, #1
 8001d04:	21ec      	movs	r1, #236	; 0xec
 8001d06:	f004 f837 	bl	8005d78 <HAL_I2C_Mem_Write>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d1a:	f002 feb9 	bl	8004a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1e:	f000 fb21 	bl	8002364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d22:	f000 fdbf 	bl	80028a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d26:	f000 fbcb 	bl	80024c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d2a:	f000 fbf7 	bl	800251c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001d2e:	f000 fc87 	bl	8002640 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d32:	f000 fd8d 	bl	8002850 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001d36:	f000 fcb9 	bl	80026ac <MX_SPI2_Init>
  MX_ADC1_Init();
 8001d3a:	f000 fb73 	bl	8002424 <MX_ADC1_Init>
  MX_RTC_Init();
 8001d3e:	f000 fc1b 	bl	8002578 <MX_RTC_Init>
  MX_TIM2_Init();
 8001d42:	f000 fce9 	bl	8002718 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d46:	f000 fd35 	bl	80027b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100 / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value to decrease power consumption
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t status = 0;											// error counter
 8001d50:	2300      	movs	r3, #0
 8001d52:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8001d54:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <main+0x270>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	f200 82ea 	bhi.w	8002332 <main+0x61e>
 8001d5e:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <main+0x50>)
 8001d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001f55 	.word	0x08001f55
 8001d6c:	08001fb9 	.word	0x08001fb9
 8001d70:	080021dd 	.word	0x080021dd
 8001d74:	08002297 	.word	0x08002297
 8001d78:	08002333 	.word	0x08002333

	  case STATE_INIT:

		  ////////* DEVICE BOOT *////////

		  if (measurements.ADC_read_cnt == 0)
 8001d7c:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <main+0x274>)
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d138      	bne.n	8001df6 <main+0xe2>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 8001d84:	4981      	ldr	r1, [pc, #516]	; (8001f8c <main+0x278>)
 8001d86:	4882      	ldr	r0, [pc, #520]	; (8001f90 <main+0x27c>)
 8001d88:	f7ff fa1c 	bl	80011c4 <BME280_Reset>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	4413      	add	r3, r2
 8001d94:	77fb      	strb	r3, [r7, #31]
			  HAL_Delay(200);
 8001d96:	20c8      	movs	r0, #200	; 0xc8
 8001d98:	f002 fedc 	bl	8004b54 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8001d9c:	497b      	ldr	r1, [pc, #492]	; (8001f8c <main+0x278>)
 8001d9e:	487c      	ldr	r0, [pc, #496]	; (8001f90 <main+0x27c>)
 8001da0:	f7ff f9f0 	bl	8001184 <BME280_ReadDeviceID>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	4413      	add	r3, r2
 8001dac:	77fb      	strb	r3, [r7, #31]
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 8001dae:	4977      	ldr	r1, [pc, #476]	; (8001f8c <main+0x278>)
 8001db0:	4877      	ldr	r0, [pc, #476]	; (8001f90 <main+0x27c>)
 8001db2:	f7ff faa5 	bl	8001300 <BME280_ReadCalibData>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	77fb      	strb	r3, [r7, #31]
			  status += BME280_Init(&bme280, &hi2c2);
 8001dc0:	4972      	ldr	r1, [pc, #456]	; (8001f8c <main+0x278>)
 8001dc2:	4873      	ldr	r0, [pc, #460]	; (8001f90 <main+0x27c>)
 8001dc4:	f7ff fa5e 	bl	8001284 <BME280_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	4413      	add	r3, r2
 8001dd0:	77fb      	strb	r3, [r7, #31]

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001dd2:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <main+0x280>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4b6e      	ldr	r3, [pc, #440]	; (8001f94 <main+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0202 	bic.w	r2, r2, #2
 8001de0:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001de2:	2100      	movs	r1, #0
 8001de4:	486b      	ldr	r0, [pc, #428]	; (8001f94 <main+0x280>)
 8001de6:	f007 fbc9 	bl	800957c <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8001dea:	486b      	ldr	r0, [pc, #428]	; (8001f98 <main+0x284>)
 8001dec:	f008 fcca 	bl	800a784 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8001df0:	486a      	ldr	r0, [pc, #424]	; (8001f9c <main+0x288>)
 8001df2:	f008 fcc7 	bl	800a784 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <main+0x274>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 829b 	bne.w	8002336 <main+0x622>
 8001e00:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <main+0x274>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	f040 8296 	bne.w	8002336 <main+0x622>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <main+0x274>)
 8001e0c:	789b      	ldrb	r3, [r3, #2]
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4863      	ldr	r0, [pc, #396]	; (8001fa0 <main+0x28c>)
 8001e12:	f000 fe7d 	bl	8002b10 <ADC_Read_Battery>
 8001e16:	4602      	mov	r2, r0
 8001e18:	495b      	ldr	r1, [pc, #364]	; (8001f88 <main+0x274>)
 8001e1a:	f104 0308 	add.w	r3, r4, #8
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	4619      	mov	r1, r3
 8001e2a:	485e      	ldr	r0, [pc, #376]	; (8001fa4 <main+0x290>)
 8001e2c:	f000 ff4e 	bl	8002ccc <ADC_Read_EHum>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <main+0x274>)
 8001e36:	789b      	ldrb	r3, [r3, #2]
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f7fe fd94 	bl	8000968 <__aeabi_ui2f>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4951      	ldr	r1, [pc, #324]	; (8001f88 <main+0x274>)
 8001e44:	1ca3      	adds	r3, r4, #2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <main+0x274>)
 8001e4e:	789b      	ldrb	r3, [r3, #2]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <main+0x274>)
 8001e56:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 8001e58:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <main+0x274>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 		// reset timer read flag
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <main+0x274>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 8001e64:	484c      	ldr	r0, [pc, #304]	; (8001f98 <main+0x284>)
 8001e66:	f008 fc8d 	bl	800a784 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <main+0x274>)
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	f040 8261 	bne.w	8002336 <main+0x622>
			  {
				  measurements.ADC_read_cnt = 0;
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <main+0x274>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	709a      	strb	r2, [r3, #2]
				  HAL_TIM_Base_Stop_IT(&htim2);
 8001e7a:	4847      	ldr	r0, [pc, #284]	; (8001f98 <main+0x284>)
 8001e7c:	f008 fcd4 	bl	800a828 <HAL_TIM_Base_Stop_IT>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 8001e80:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <main+0x274>)
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <main+0x274>)
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	e022      	b.n	8001edc <main+0x1c8>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <main+0x274>)
 8001e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9a:	493b      	ldr	r1, [pc, #236]	; (8001f88 <main+0x274>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f7fe fcad 	bl	8000808 <__addsf3>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <main+0x274>)
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <main+0x274>)
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	4933      	ldr	r1, [pc, #204]	; (8001f88 <main+0x274>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f7fe fc9d 	bl	8000808 <__addsf3>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <main+0x274>)
 8001ed4:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	ddd9      	ble.n	8001e96 <main+0x182>
				  }

				  measurements.battery_voltage /= 5;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <main+0x274>)
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	4930      	ldr	r1, [pc, #192]	; (8001fa8 <main+0x294>)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fe49 	bl	8000b80 <__aeabi_fdiv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <main+0x274>)
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <main+0x274>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	492b      	ldr	r1, [pc, #172]	; (8001fa8 <main+0x294>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fe3f 	bl	8000b80 <__aeabi_fdiv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <main+0x274>)
 8001f08:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_ReadAllData(&bme280, &hi2c2);
 8001f0a:	4920      	ldr	r1, [pc, #128]	; (8001f8c <main+0x278>)
 8001f0c:	4820      	ldr	r0, [pc, #128]	; (8001f90 <main+0x27c>)
 8001f0e:	f7ff fe41 	bl	8001b94 <BME280_ReadAllData>

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <main+0x298>)
 8001f14:	f000 fe2a 	bl	8002b6c <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 8001f18:	4824      	ldr	r0, [pc, #144]	; (8001fac <main+0x298>)
 8001f1a:	f001 f94f 	bl	80031bc <rfm95_init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <main+0x21c>
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	77fb      	strb	r3, [r7, #31]

				  // Check if everthing is OK (voltage and sensors)
				  //if (measurements.battery_voltage < 3.5f) status++; //Vbat NEEDS TO BE SET

				  lora_data.errSendCnt += status;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <main+0x29c>)
 8001f32:	785a      	ldrb	r2, [r3, #1]
 8001f34:	7ffb      	ldrb	r3, [r7, #31]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x29c>)
 8001f3c:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <main+0x238>
				  {
					  state = STATE_FIRST_CONN;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <main+0x270>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 8001f4a:	e1f4      	b.n	8002336 <main+0x622>
					  state = STATE_ERROR;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <main+0x270>)
 8001f4e:	2205      	movs	r2, #5
 8001f50:	701a      	strb	r2, [r3, #0]
		  break;
 8001f52:	e1f0      	b.n	8002336 <main+0x622>
	  case STATE_FIRST_CONN:

		  ////////* FIRST LoRa/SIM CONNECTION TEST *////////

		  // Create data packet that will be send
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <main+0x2a0>)
 8001f56:	60fb      	str	r3, [r7, #12]

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <main+0x298>)
 8001f62:	f002 f911 	bl	8004188 <rfm95_send_receive_cycle>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <main+0x266>
		  {
			  state = STATE_ERROR;
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <main+0x270>)
 8001f74:	2205      	movs	r2, #5
 8001f76:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  state = STATE_GO_SLEEP;
		  }

		  break;
 8001f78:	e1e0      	b.n	800233c <main+0x628>
			  state = STATE_GO_SLEEP;
 8001f7a:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <main+0x270>)
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	701a      	strb	r2, [r3, #0]
		  break;
 8001f80:	e1dc      	b.n	800233c <main+0x628>
 8001f82:	bf00      	nop
 8001f84:	20000544 	.word	0x20000544
 8001f88:	200001c0 	.word	0x200001c0
 8001f8c:	20000354 	.word	0x20000354
 8001f90:	20000188 	.word	0x20000188
 8001f94:	200003a8 	.word	0x200003a8
 8001f98:	2000046c 	.word	0x2000046c
 8001f9c:	200004b4 	.word	0x200004b4
 8001fa0:	200001c4 	.word	0x200001c4
 8001fa4:	200001c8 	.word	0x200001c8
 8001fa8:	40a00000 	.word	0x40a00000
 8001fac:	20000208 	.word	0x20000208
 8001fb0:	200001fc 	.word	0x200001fc
 8001fb4:	04030201 	.word	0x04030201
	  case STATE_RUN:

		  ////////* DEVICE WAKEUP ROUTINE *////////

		  // Start all clocks
		  if (awake == 1)
 8001fb8:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <main+0x490>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d112      	bne.n	8001fe6 <main+0x2d2>
		  {
			  awake = 0;
 8001fc0:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <main+0x490>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 8001fc6:	f000 f9cd 	bl	8002364 <SystemClock_Config>
			  HAL_ResumeTick();
 8001fca:	f002 fdf5 	bl	8004bb8 <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <main+0x494>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <main+0x494>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4871      	ldr	r0, [pc, #452]	; (80021a8 <main+0x494>)
 8001fe2:	f007 facb 	bl	800957c <HAL_RTC_DeactivateAlarm>
		  }

		  if (measurements.ADC_read_cnt == 0)
 8001fe6:	4b71      	ldr	r3, [pc, #452]	; (80021ac <main+0x498>)
 8001fe8:	789b      	ldrb	r3, [r3, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d12c      	bne.n	8002048 <main+0x334>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 8001fee:	4970      	ldr	r1, [pc, #448]	; (80021b0 <main+0x49c>)
 8001ff0:	4870      	ldr	r0, [pc, #448]	; (80021b4 <main+0x4a0>)
 8001ff2:	f7ff f8e7 	bl	80011c4 <BME280_Reset>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	77fb      	strb	r3, [r7, #31]
			  HAL_Delay(200);
 8002000:	20c8      	movs	r0, #200	; 0xc8
 8002002:	f002 fda7 	bl	8004b54 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8002006:	496a      	ldr	r1, [pc, #424]	; (80021b0 <main+0x49c>)
 8002008:	486a      	ldr	r0, [pc, #424]	; (80021b4 <main+0x4a0>)
 800200a:	f7ff f8bb 	bl	8001184 <BME280_ReadDeviceID>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	7ffb      	ldrb	r3, [r7, #31]
 8002014:	4413      	add	r3, r2
 8002016:	77fb      	strb	r3, [r7, #31]
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 8002018:	4965      	ldr	r1, [pc, #404]	; (80021b0 <main+0x49c>)
 800201a:	4866      	ldr	r0, [pc, #408]	; (80021b4 <main+0x4a0>)
 800201c:	f7ff f970 	bl	8001300 <BME280_ReadCalibData>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	4413      	add	r3, r2
 8002028:	77fb      	strb	r3, [r7, #31]
			  status += BME280_Init(&bme280, &hi2c2);
 800202a:	4961      	ldr	r1, [pc, #388]	; (80021b0 <main+0x49c>)
 800202c:	4861      	ldr	r0, [pc, #388]	; (80021b4 <main+0x4a0>)
 800202e:	f7ff f929 	bl	8001284 <BME280_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	4413      	add	r3, r2
 800203a:	77fb      	strb	r3, [r7, #31]

			  HAL_TIM_Base_Start_IT(&htim2);
 800203c:	485e      	ldr	r0, [pc, #376]	; (80021b8 <main+0x4a4>)
 800203e:	f008 fba1 	bl	800a784 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002042:	485e      	ldr	r0, [pc, #376]	; (80021bc <main+0x4a8>)
 8002044:	f008 fb9e 	bl	800a784 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <main+0x498>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	2b01      	cmp	r3, #1
 800204e:	f040 8174 	bne.w	800233a <main+0x626>
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <main+0x498>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f040 816f 	bne.w	800233a <main+0x626>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <main+0x498>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	461c      	mov	r4, r3
 8002062:	4857      	ldr	r0, [pc, #348]	; (80021c0 <main+0x4ac>)
 8002064:	f000 fd54 	bl	8002b10 <ADC_Read_Battery>
 8002068:	4602      	mov	r2, r0
 800206a:	4950      	ldr	r1, [pc, #320]	; (80021ac <main+0x498>)
 800206c:	f104 0308 	add.w	r3, r4, #8
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4619      	mov	r1, r3
 800207c:	4851      	ldr	r0, [pc, #324]	; (80021c4 <main+0x4b0>)
 800207e:	f000 fe25 	bl	8002ccc <ADC_Read_EHum>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <main+0x498>)
 8002088:	789b      	ldrb	r3, [r3, #2]
 800208a:	461c      	mov	r4, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f7fe fc6b 	bl	8000968 <__aeabi_ui2f>
 8002092:	4602      	mov	r2, r0
 8002094:	4945      	ldr	r1, [pc, #276]	; (80021ac <main+0x498>)
 8002096:	1ca3      	adds	r3, r4, #2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <main+0x498>)
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <main+0x498>)
 80020a8:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 80020aa:	4b40      	ldr	r3, [pc, #256]	; (80021ac <main+0x498>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 			// reset timer read flag
 80020b0:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <main+0x498>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <main+0x498>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	f040 813d 	bne.w	800233a <main+0x626>
			  {
				  measurements.ADC_read_cnt = 0;
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <main+0x498>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	709a      	strb	r2, [r3, #2]

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <main+0x498>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <main+0x498>)
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e022      	b.n	8002122 <main+0x40e>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <main+0x498>)
 80020de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e0:	4932      	ldr	r1, [pc, #200]	; (80021ac <main+0x498>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3308      	adds	r3, #8
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f7fe fb8a 	bl	8000808 <__addsf3>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <main+0x498>)
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <main+0x498>)
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	492a      	ldr	r1, [pc, #168]	; (80021ac <main+0x498>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3302      	adds	r3, #2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7fe fb7a 	bl	8000808 <__addsf3>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <main+0x498>)
 800211a:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b04      	cmp	r3, #4
 8002126:	ddd9      	ble.n	80020dc <main+0x3c8>
				  }

				  measurements.battery_voltage /= 5;
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <main+0x498>)
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	4926      	ldr	r1, [pc, #152]	; (80021c8 <main+0x4b4>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd26 	bl	8000b80 <__aeabi_fdiv>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <main+0x498>)
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <main+0x498>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4921      	ldr	r1, [pc, #132]	; (80021c8 <main+0x4b4>)
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fd1c 	bl	8000b80 <__aeabi_fdiv>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <main+0x498>)
 800214e:	621a      	str	r2, [r3, #32]

				  BME280_ReadAllData(&bme280, &hi2c2);
 8002150:	4917      	ldr	r1, [pc, #92]	; (80021b0 <main+0x49c>)
 8002152:	4818      	ldr	r0, [pc, #96]	; (80021b4 <main+0x4a0>)
 8002154:	f7ff fd1e 	bl	8001b94 <BME280_ReadAllData>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status + 10; // Increase error counter for 10 to detect LoRa error (data can't be send)
 8002158:	481c      	ldr	r0, [pc, #112]	; (80021cc <main+0x4b8>)
 800215a:	f001 f82f 	bl	80031bc <rfm95_init>
 800215e:	4603      	mov	r3, r0
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 3.5f) status++; //Vbat NEED TO BE SET
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <main+0x498>)
 800216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216c:	4918      	ldr	r1, [pc, #96]	; (80021d0 <main+0x4bc>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fdf0 	bl	8000d54 <__aeabi_fcmplt>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <main+0x46c>
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	3301      	adds	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]

				  lora_data.errSendCnt += status;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <main+0x4c0>)
 8002182:	785a      	ldrb	r2, [r3, #1]
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	4413      	add	r3, r2
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <main+0x4c0>)
 800218c:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	2b09      	cmp	r3, #9
 8002192:	d803      	bhi.n	800219c <main+0x488>
				  {
					  state = STATE_SEND;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <main+0x4c4>)
 8002196:	2203      	movs	r2, #3
 8002198:	701a      	strb	r2, [r3, #0]
				  {
					  state = STATE_ERROR;
				  }
			  }
		  }
		  break;
 800219a:	e0ce      	b.n	800233a <main+0x626>
					  state = STATE_ERROR;
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <main+0x4c4>)
 800219e:	2205      	movs	r2, #5
 80021a0:	701a      	strb	r2, [r3, #0]
		  break;
 80021a2:	e0ca      	b.n	800233a <main+0x626>
 80021a4:	20000000 	.word	0x20000000
 80021a8:	200003a8 	.word	0x200003a8
 80021ac:	200001c0 	.word	0x200001c0
 80021b0:	20000354 	.word	0x20000354
 80021b4:	20000188 	.word	0x20000188
 80021b8:	2000046c 	.word	0x2000046c
 80021bc:	200004b4 	.word	0x200004b4
 80021c0:	200001c4 	.word	0x200001c4
 80021c4:	200001c8 	.word	0x200001c8
 80021c8:	40a00000 	.word	0x40a00000
 80021cc:	20000208 	.word	0x20000208
 80021d0:	40600000 	.word	0x40600000
 80021d4:	200001fc 	.word	0x200001fc
 80021d8:	20000544 	.word	0x20000544
	  case STATE_SEND:

	  	  ////////* SEND DATA *////////

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <main+0x62c>)
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <main+0x4d6>
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <main+0x62c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t) measurements.battery_voltage * 10;		// Battery voltage [3.5V -> 35V, no float]
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <main+0x630>)
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fdd8 	bl	8000da4 <__aeabi_f2uiz>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b4f      	ldr	r3, [pc, #316]	; (8002340 <main+0x62c>)
 8002204:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int16_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <main+0x634>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	b25a      	sxtb	r2, r3
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <main+0x62c>)
 800220e:	70da      	strb	r2, [r3, #3]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in perscents [0-100%]
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <main+0x634>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <main+0x62c>)
 8002218:	711a      	strb	r2, [r3, #4]
		  lora_data.air_pressure = (uint16_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_ts]
 800221a:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <main+0x634>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	b29a      	uxth	r2, r3
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <main+0x62c>)
 8002222:	80da      	strh	r2, [r3, #6]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 8002224:	4b47      	ldr	r3, [pc, #284]	; (8002344 <main+0x630>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fdbb 	bl	8000da4 <__aeabi_f2uiz>
 800222e:	4603      	mov	r3, r0
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <main+0x62c>)
 8002234:	721a      	strb	r2, [r3, #8]

		  // Create data packet that will be send
		  uint8_t data_packet[] = {DEVICE_ID, lora_data.error, lora_data.errSendCnt, lora_data.battery, lora_data.air_temperature, lora_data.air_humidity, lora_data.air_pressure, lora_data.earth_humudity};
 8002236:	2301      	movs	r3, #1
 8002238:	713b      	strb	r3, [r7, #4]
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <main+0x62c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	717b      	strb	r3, [r7, #5]
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <main+0x62c>)
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	71bb      	strb	r3, [r7, #6]
 8002246:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <main+0x62c>)
 8002248:	789b      	ldrb	r3, [r3, #2]
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <main+0x62c>)
 800224e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	723b      	strb	r3, [r7, #8]
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <main+0x62c>)
 8002258:	791b      	ldrb	r3, [r3, #4]
 800225a:	727b      	strb	r3, [r7, #9]
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <main+0x62c>)
 800225e:	88db      	ldrh	r3, [r3, #6]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	72bb      	strb	r3, [r7, #10]
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <main+0x62c>)
 8002266:	7a1b      	ldrb	r3, [r3, #8]
 8002268:	72fb      	strb	r3, [r7, #11]

		  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet)))
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2208      	movs	r2, #8
 800226e:	4619      	mov	r1, r3
 8002270:	4836      	ldr	r0, [pc, #216]	; (800234c <main+0x638>)
 8002272:	f001 ff89 	bl	8004188 <rfm95_send_receive_cycle>
 8002276:	4603      	mov	r3, r0
 8002278:	f083 0301 	eor.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <main+0x57a>
		  {
			  lora_data.errSendCnt++;
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <main+0x62c>)
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	3301      	adds	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <main+0x62c>)
 800228c:	705a      	strb	r2, [r3, #1]
		  }

		  state = STATE_GO_SLEEP;
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <main+0x63c>)
 8002290:	2204      	movs	r2, #4
 8002292:	701a      	strb	r2, [r3, #0]

		  break;
 8002294:	e052      	b.n	800233c <main+0x628>

	  case STATE_GO_SLEEP:

		  ////////* PUT DEVICE TO SLEEP *////////

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002296:	2200      	movs	r2, #0
 8002298:	492e      	ldr	r1, [pc, #184]	; (8002354 <main+0x640>)
 800229a:	482f      	ldr	r0, [pc, #188]	; (8002358 <main+0x644>)
 800229c:	f006 fed4 	bl	8009048 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80022a0:	2200      	movs	r2, #0
 80022a2:	492e      	ldr	r1, [pc, #184]	; (800235c <main+0x648>)
 80022a4:	482c      	ldr	r0, [pc, #176]	; (8002358 <main+0x644>)
 80022a6:	f007 f85d 	bl	8009364 <HAL_RTC_GetDate>

		  //time.Hours += 1; // Next wake up after one hours
		  time.Minutes += 1; //test
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <main+0x640>)
 80022ac:	785b      	ldrb	r3, [r3, #1]
 80022ae:	3301      	adds	r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <main+0x640>)
 80022b4:	705a      	strb	r2, [r3, #1]

		  if(time.Seconds>=60)
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <main+0x640>)
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	2b3b      	cmp	r3, #59	; 0x3b
 80022bc:	d90b      	bls.n	80022d6 <main+0x5c2>
		  {
			  time.Minutes ++;
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <main+0x640>)
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	3301      	adds	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <main+0x640>)
 80022c8:	705a      	strb	r2, [r3, #1]
			  time.Seconds = time.Seconds - 60;
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <main+0x640>)
 80022cc:	789b      	ldrb	r3, [r3, #2]
 80022ce:	3b3c      	subs	r3, #60	; 0x3c
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <main+0x640>)
 80022d4:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <main+0x640>)
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b3b      	cmp	r3, #59	; 0x3b
 80022dc:	d90b      	bls.n	80022f6 <main+0x5e2>
		  {
			  time.Hours++;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <main+0x640>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <main+0x640>)
 80022e8:	701a      	strb	r2, [r3, #0]
			  time.Minutes = time.Minutes - 60;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <main+0x640>)
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	3b3c      	subs	r3, #60	; 0x3c
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <main+0x640>)
 80022f4:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <main+0x640>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b17      	cmp	r3, #23
 80022fc:	d902      	bls.n	8002304 <main+0x5f0>
		  {
			  time.Hours = 0;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <main+0x640>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm = RTC_ALARM_A;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <main+0x64c>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
		  sAlarm.AlarmTime.Hours = time.Hours;
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <main+0x640>)
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <main+0x64c>)
 8002310:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes = time.Minutes;
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <main+0x640>)
 8002314:	785a      	ldrb	r2, [r3, #1]
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <main+0x64c>)
 8002318:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds = time.Seconds;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <main+0x640>)
 800231c:	789a      	ldrb	r2, [r3, #2]
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <main+0x64c>)
 8002320:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002322:	2200      	movs	r2, #0
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <main+0x64c>)
 8002326:	480c      	ldr	r0, [pc, #48]	; (8002358 <main+0x644>)
 8002328:	f007 f870 	bl	800940c <HAL_RTC_SetAlarm_IT>

		  HAL_SuspendTick();
 800232c:	f002 fc36 	bl	8004b9c <HAL_SuspendTick>

		  // Set sleep mode
		  //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
		  //HAL_PWR_EnterSTANDBYMode();

		  break;
 8002330:	e004      	b.n	800233c <main+0x628>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 8002332:	bf00      	nop
 8002334:	e50e      	b.n	8001d54 <main+0x40>
		  break;
 8002336:	bf00      	nop
 8002338:	e50c      	b.n	8001d54 <main+0x40>
		  break;
 800233a:	bf00      	nop
	  switch(state)
 800233c:	e50a      	b.n	8001d54 <main+0x40>
 800233e:	bf00      	nop
 8002340:	200001fc 	.word	0x200001fc
 8002344:	200001c0 	.word	0x200001c0
 8002348:	20000188 	.word	0x20000188
 800234c:	20000208 	.word	0x20000208
 8002350:	20000544 	.word	0x20000544
 8002354:	200002c0 	.word	0x200002c0
 8002358:	200003a8 	.word	0x200003a8
 800235c:	200002c4 	.word	0x200002c4
 8002360:	200002c8 	.word	0x200002c8

08002364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b094      	sub	sp, #80	; 0x50
 8002368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236e:	2228      	movs	r2, #40	; 0x28
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f009 fd7f 	bl	800be76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002394:	2305      	movs	r3, #5
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023a2:	2301      	movs	r3, #1
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a6:	2301      	movs	r3, #1
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023aa:	2302      	movs	r3, #2
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80023b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 ffa0 	bl	8008304 <HAL_RCC_OscConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80023ca:	f000 fca7 	bl	8002d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ce:	230f      	movs	r3, #15
 80023d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2102      	movs	r1, #2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f006 fa0c 	bl	8008808 <HAL_RCC_ClockConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023f6:	f000 fc91 	bl	8002d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80023fa:	2303      	movs	r3, #3
 80023fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002402:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002408:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4618      	mov	r0, r3
 800240e:	f006 fb8b 	bl	8008b28 <HAL_RCCEx_PeriphCLKConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002418:	f000 fc80 	bl	8002d1c <Error_Handler>
  }
}
 800241c:	bf00      	nop
 800241e:	3750      	adds	r7, #80	; 0x50
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <MX_ADC1_Init+0x98>)
 8002438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_ADC1_Init+0x94>)
 800243c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002440:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002444:	2201      	movs	r2, #1
 8002446:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_ADC1_Init+0x94>)
 800244a:	2200      	movs	r2, #0
 800244c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002450:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_ADC1_Init+0x94>)
 800245e:	2202      	movs	r2, #2
 8002460:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002462:	4815      	ldr	r0, [pc, #84]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002464:	f002 fbb6 	bl	8004bd4 <HAL_ADC_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800246e:	f000 fc55 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002472:	2301      	movs	r3, #1
 8002474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002476:	2301      	movs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_ADC1_Init+0x94>)
 8002484:	f002 fe3c 	bl	8005100 <HAL_ADC_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800248e:	f000 fc45 	bl	8002d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002492:	2302      	movs	r3, #2
 8002494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002496:	2302      	movs	r3, #2
 8002498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <MX_ADC1_Init+0x94>)
 80024a0:	f002 fe2e 	bl	8005100 <HAL_ADC_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80024aa:	f000 fc37 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200002d0 	.word	0x200002d0
 80024bc:	40012400 	.word	0x40012400

080024c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_I2C1_Init+0x50>)
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <MX_I2C1_Init+0x54>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_I2C1_Init+0x50>)
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <MX_I2C1_Init+0x58>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_I2C1_Init+0x50>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_I2C1_Init+0x50>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_I2C1_Init+0x50>)
 80024de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_I2C1_Init+0x50>)
 80024fe:	f003 fae3 	bl	8005ac8 <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002508:	f000 fc08 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000300 	.word	0x20000300
 8002514:	40005400 	.word	0x40005400
 8002518:	000186a0 	.word	0x000186a0

0800251c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_I2C2_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MX_I2C2_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_I2C2_Init+0x50>)
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_I2C2_Init+0x58>)
 800252a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_I2C2_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_I2C2_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_I2C2_Init+0x50>)
 800253a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_I2C2_Init+0x50>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_I2C2_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_I2C2_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_I2C2_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_I2C2_Init+0x50>)
 800255a:	f003 fab5 	bl	8005ac8 <HAL_I2C_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 fbda 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000354 	.word	0x20000354
 8002570:	40005800 	.word	0x40005800
 8002574:	000186a0 	.word	0x000186a0

08002578 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	2100      	movs	r1, #0
 8002584:	460a      	mov	r2, r1
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	460a      	mov	r2, r1
 800258a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002590:	463b      	mov	r3, r7
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <MX_RTC_Init+0xc0>)
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <MX_RTC_Init+0xc4>)
 800259c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <MX_RTC_Init+0xc0>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <MX_RTC_Init+0xc0>)
 80025a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ac:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025ae:	4822      	ldr	r0, [pc, #136]	; (8002638 <MX_RTC_Init+0xc0>)
 80025b0:	f006 fc26 	bl	8008e00 <HAL_RTC_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80025ba:	f000 fbaf 	bl	8002d1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80025be:	2300      	movs	r3, #0
 80025c0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2201      	movs	r2, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	4819      	ldr	r0, [pc, #100]	; (8002638 <MX_RTC_Init+0xc0>)
 80025d4:	f006 fca0 	bl	8008f18 <HAL_RTC_SetTime>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80025de:	f000 fb9d 	bl	8002d1c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025e2:	2301      	movs	r3, #1
 80025e4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80025e6:	2301      	movs	r3, #1
 80025e8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2201      	movs	r2, #1
 80025f8:	4619      	mov	r1, r3
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <MX_RTC_Init+0xc0>)
 80025fc:	f006 fdfc 	bl	80091f8 <HAL_RTC_SetDate>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002606:	f000 fb89 	bl	8002d1c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800260a:	2300      	movs	r3, #0
 800260c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800260e:	2300      	movs	r3, #0
 8002610:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002612:	2300      	movs	r3, #0
 8002614:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800261a:	463b      	mov	r3, r7
 800261c:	2201      	movs	r2, #1
 800261e:	4619      	mov	r1, r3
 8002620:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_RTC_Init+0xc0>)
 8002622:	f006 fef3 	bl	800940c <HAL_RTC_SetAlarm_IT>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800262c:	f000 fb76 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200003a8 	.word	0x200003a8
 800263c:	40002800 	.word	0x40002800

08002640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <MX_SPI1_Init+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <MX_SPI1_Init+0x64>)
 800264c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <MX_SPI1_Init+0x64>)
 800266c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002670:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002674:	2210      	movs	r2, #16
 8002676:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <MX_SPI1_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <MX_SPI1_Init+0x64>)
 800268c:	220a      	movs	r2, #10
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <MX_SPI1_Init+0x64>)
 8002692:	f007 fa9f 	bl	8009bd4 <HAL_SPI_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800269c:	f000 fb3e 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200003bc 	.word	0x200003bc
 80026a8:	40013000 	.word	0x40013000

080026ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_SPI2_Init+0x64>)
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <MX_SPI2_Init+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MX_SPI2_Init+0x64>)
 80026b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MX_SPI2_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MX_SPI2_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <MX_SPI2_Init+0x64>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <MX_SPI2_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MX_SPI2_Init+0x64>)
 80026d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <MX_SPI2_Init+0x64>)
 80026e0:	2208      	movs	r2, #8
 80026e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <MX_SPI2_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <MX_SPI2_Init+0x64>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <MX_SPI2_Init+0x64>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MX_SPI2_Init+0x64>)
 80026f8:	220a      	movs	r2, #10
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <MX_SPI2_Init+0x64>)
 80026fe:	f007 fa69 	bl	8009bd4 <HAL_SPI_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002708:	f000 fb08 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000414 	.word	0x20000414
 8002714:	40003800 	.word	0x40003800

08002718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	463b      	mov	r3, r7
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <MX_TIM2_Init+0x98>)
 8002736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800273a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM2_Init+0x98>)
 800273e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <MX_TIM2_Init+0x98>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <MX_TIM2_Init+0x98>)
 800274c:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <MX_TIM2_Init+0x98>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_TIM2_Init+0x98>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800275e:	4814      	ldr	r0, [pc, #80]	; (80027b0 <MX_TIM2_Init+0x98>)
 8002760:	f007 ffc0 	bl	800a6e4 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800276a:	f000 fad7 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM2_Init+0x98>)
 800277c:	f008 f98a 	bl	800aa94 <HAL_TIM_ConfigClockSource>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002786:	f000 fac9 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002792:	463b      	mov	r3, r7
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_TIM2_Init+0x98>)
 8002798:	f008 fb60 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027a2:	f000 fabb 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000046c 	.word	0x2000046c

080027b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ba:	f107 0308 	add.w	r3, r7, #8
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c8:	463b      	mov	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_TIM3_Init+0x94>)
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <MX_TIM3_Init+0x98>)
 80027d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_TIM3_Init+0x94>)
 80027d8:	2201      	movs	r2, #1
 80027da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_TIM3_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35999;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <MX_TIM3_Init+0x94>)
 80027e4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80027e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <MX_TIM3_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_TIM3_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027f6:	4814      	ldr	r0, [pc, #80]	; (8002848 <MX_TIM3_Init+0x94>)
 80027f8:	f007 ff74 	bl	800a6e4 <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002802:	f000 fa8b 	bl	8002d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4619      	mov	r1, r3
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <MX_TIM3_Init+0x94>)
 8002814:	f008 f93e 	bl	800aa94 <HAL_TIM_ConfigClockSource>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800281e:	f000 fa7d 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <MX_TIM3_Init+0x94>)
 8002830:	f008 fb14 	bl	800ae5c <HAL_TIMEx_MasterConfigSynchronization>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800283a:	f000 fa6f 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200004b4 	.word	0x200004b4
 800284c:	40000400 	.word	0x40000400

08002850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_USART1_UART_Init+0x50>)
 8002858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800285c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_USART1_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_USART1_UART_Init+0x4c>)
 8002888:	f008 fb58 	bl	800af3c <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002892:	f000 fa43 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004fc 	.word	0x200004fc
 80028a0:	40013800 	.word	0x40013800

080028a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b8:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d0:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a53      	ldr	r2, [pc, #332]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6193      	str	r3, [r2, #24]
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <MX_GPIO_Init+0x180>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <MX_GPIO_Init+0x180>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <MX_GPIO_Init+0x180>)
 8002906:	f043 0308 	orr.w	r3, r3, #8
 800290a:	6193      	str	r3, [r2, #24]
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MX_GPIO_Init+0x180>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_EX_Pin|RESET_Pin, GPIO_PIN_SET);
 8002918:	2201      	movs	r2, #1
 800291a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800291e:	4842      	ldr	r0, [pc, #264]	; (8002a28 <MX_GPIO_Init+0x184>)
 8002920:	f003 f8a2 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002924:	2201      	movs	r2, #1
 8002926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292a:	4840      	ldr	r0, [pc, #256]	; (8002a2c <MX_GPIO_Init+0x188>)
 800292c:	f003 f89c 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_SLP_GPIO_Port, SIM_SLP_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002936:	483d      	ldr	r0, [pc, #244]	; (8002a2c <MX_GPIO_Init+0x188>)
 8002938:	f003 f896 	bl	8005a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_EX_Pin */
  GPIO_InitStruct.Pin = SPI_CS_EX_Pin;
 800293c:	2310      	movs	r3, #16
 800293e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_EX_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4619      	mov	r1, r3
 8002952:	4835      	ldr	r0, [pc, #212]	; (8002a28 <MX_GPIO_Init+0x184>)
 8002954:	f002 ff04 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin SIM_ISR_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin|SIM_ISR_Pin;
 8002958:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800295c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800295e:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <MX_GPIO_Init+0x18c>)
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	4619      	mov	r1, r3
 800296c:	482f      	ldr	r0, [pc, #188]	; (8002a2c <MX_GPIO_Init+0x188>)
 800296e:	f002 fef7 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin SIM_SLP_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|SIM_SLP_Pin;
 8002972:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2302      	movs	r3, #2
 8002982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	4619      	mov	r1, r3
 800298a:	4828      	ldr	r0, [pc, #160]	; (8002a2c <MX_GPIO_Init+0x188>)
 800298c:	f002 fee8 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2302      	movs	r3, #2
 80029a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	4619      	mov	r1, r3
 80029a8:	481f      	ldr	r0, [pc, #124]	; (8002a28 <MX_GPIO_Init+0x184>)
 80029aa:	f002 fed9 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 80029ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	4619      	mov	r1, r3
 80029c2:	4819      	ldr	r0, [pc, #100]	; (8002a28 <MX_GPIO_Init+0x184>)
 80029c4:	f002 fecc 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_RST_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin|DIO1_Pin;
 80029c8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80029cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_GPIO_Init+0x18c>)
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	4619      	mov	r1, r3
 80029dc:	4812      	ldr	r0, [pc, #72]	; (8002a28 <MX_GPIO_Init+0x184>)
 80029de:	f002 febf 	bl	8005760 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 80029e2:	2330      	movs	r3, #48	; 0x30
 80029e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4619      	mov	r1, r3
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <MX_GPIO_Init+0x188>)
 80029f6:	f002 feb3 	bl	8005760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2009      	movs	r0, #9
 8002a00:	f002 fdf1 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a04:	2009      	movs	r0, #9
 8002a06:	f002 fe0a 	bl	800561e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2028      	movs	r0, #40	; 0x28
 8002a10:	f002 fde9 	bl	80055e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a14:	2028      	movs	r0, #40	; 0x28
 8002a16:	f002 fe02 	bl	800561e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40010c00 	.word	0x40010c00
 8002a30:	10110000 	.word	0x10110000

08002a34 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

// Wake up interrupt //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	awake = 1;
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_RTC_AlarmAEventCallback+0x28>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_RTC_AlarmAEventCallback+0x1c>
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000544 	.word	0x20000544

08002a64 <HAL_TIM_PeriodElapsedCallback>:


// TIMER 2 Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d10c      	bne.n	8002a90 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (measurements.ADC_read == 0)
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8002a7e:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a80:	f007 fed2 	bl	800a828 <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Start_IT(&hadc1);
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a86:	f002 f97d 	bl	8004d84 <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM2) // Check if this is TIM1's callback
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d108      	bne.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM1 overflows
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002aa4:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8002aa6:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002aa8:	f007 fe6c 	bl	800a784 <HAL_TIM_Base_Start_IT>
	}
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200001c0 	.word	0x200001c0
 8002ab8:	2000046c 	.word	0x2000046c
 8002abc:	200002d0 	.word	0x200002d0
 8002ac0:	20000548 	.word	0x20000548

08002ac4 <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_ADC_ConvCpltCallback+0x40>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d111      	bne.n	8002afa <HAL_ADC_ConvCpltCallback+0x36>
    {
    	measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f002 fa3e 	bl	8004f58 <HAL_ADC_GetValue>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_ADC_ConvCpltCallback+0x44>)
 8002ae0:	6053      	str	r3, [r2, #4]
    	measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f002 fa38 	bl	8004f58 <HAL_ADC_GetValue>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_ADC_ConvCpltCallback+0x44>)
 8002aec:	6093      	str	r3, [r2, #8]
    	HAL_ADC_Stop_IT(&hadc1);
 8002aee:	4807      	ldr	r0, [pc, #28]	; (8002b0c <HAL_ADC_ConvCpltCallback+0x48>)
 8002af0:	f002 f9fe 	bl	8004ef0 <HAL_ADC_Stop_IT>
    	measurements.ADC_read_end = 1;
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_ADC_ConvCpltCallback+0x44>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	705a      	strb	r2, [r3, #1]
    }
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40012400 	.word	0x40012400
 8002b08:	200001c0 	.word	0x200001c0
 8002b0c:	200002d0 	.word	0x200002d0

08002b10 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	float temp = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd83 	bl	8000628 <__aeabi_ui2d>
 8002b22:	a30f      	add	r3, pc, #60	; (adr r3, 8002b60 <ADC_Read_Battery+0x50>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fb12 	bl	8000150 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fd fe12 	bl	800075c <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	490b      	ldr	r1, [pc, #44]	; (8002b68 <ADC_Read_Battery+0x58>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f81f 	bl	8000b80 <__aeabi_fdiv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	60fb      	str	r3, [r7, #12]
	float voltage = (((BAT_R1+BAT_R2)/BAT_R2) * temp);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fe5c 	bl	8000808 <__addsf3>
 8002b50:	4603      	mov	r3, r0
 8002b52:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 8002b54:	68bb      	ldr	r3, [r7, #8]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	33333333 	.word	0x33333333
 8002b64:	40093333 	.word	0x40093333
 8002b68:	457ff000 	.word	0x457ff000

08002b6c <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 8002b6c:	b4b0      	push	{r4, r5, r7}
 8002b6e:	b08d      	sub	sp, #52	; 0x34
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <RFM95W_Struct_Init+0xa4>)
 8002b78:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <RFM95W_Struct_Init+0xa8>)
 8002b7e:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b86:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <RFM95W_Struct_Init+0xac>)
 8002b8c:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <RFM95W_Struct_Init+0xb0>)
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <RFM95W_Struct_Init+0xb4>)
 8002bb8:	64da      	str	r2, [r3, #76]	; 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <RFM95W_Struct_Init+0xb8>)
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3312      	adds	r3, #18
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <RFM95W_Struct_Init+0xbc>)
 8002bc8:	f107 041c 	add.w	r4, r7, #28
 8002bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3326      	adds	r3, #38	; 0x26
 8002bd6:	461d      	mov	r5, r3
 8002bd8:	f107 041c 	add.w	r4, r7, #28
 8002bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bde:	6028      	str	r0, [r5, #0]
 8002be0:	6069      	str	r1, [r5, #4]
 8002be2:	60aa      	str	r2, [r5, #8]
 8002be4:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <RFM95W_Struct_Init+0xc0>)
 8002be8:	f107 040c 	add.w	r4, r7, #12
 8002bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3316      	adds	r3, #22
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	f107 040c 	add.w	r4, r7, #12
 8002bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfe:	6028      	str	r0, [r5, #0]
 8002c00:	6069      	str	r1, [r5, #4]
 8002c02:	60aa      	str	r2, [r5, #8]
 8002c04:	60eb      	str	r3, [r5, #12]
}
 8002c06:	bf00      	nop
 8002c08:	3734      	adds	r7, #52	; 0x34
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bcb0      	pop	{r4, r5, r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000414 	.word	0x20000414
 8002c14:	40010c00 	.word	0x40010c00
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	08002c9d 	.word	0x08002c9d
 8002c20:	08002c79 	.word	0x08002c79
 8002c24:	e9780b26 	.word	0xe9780b26
 8002c28:	0800cb90 	.word	0x0800cb90
 8002c2c:	0800cba0 	.word	0x0800cba0

08002c30 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DIO0_Pin) {
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d104      	bne.n	8002c4a <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8002c40:	2100      	movs	r1, #0
 8002c42:	480c      	ldr	r0, [pc, #48]	; (8002c74 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c44:	f001 fb8d 	bl	8004362 <rfm95_on_interrupt>
    } else if (GPIO_Pin == DIO1_Pin) {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
    } else if (GPIO_Pin == DIO5_Pin) {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
    }
}
 8002c48:	e00f      	b.n	8002c6a <HAL_GPIO_EXTI_Callback+0x3a>
    } else if (GPIO_Pin == DIO1_Pin) {
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c50:	d104      	bne.n	8002c5c <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 8002c52:	2101      	movs	r1, #1
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c56:	f001 fb84 	bl	8004362 <rfm95_on_interrupt>
}
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_EXTI_Callback+0x3a>
    } else if (GPIO_Pin == DIO5_Pin) {
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d103      	bne.n	8002c6a <HAL_GPIO_EXTI_Callback+0x3a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8002c62:	2102      	movs	r1, #2
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c66:	f001 fb7c 	bl	8004362 <rfm95_on_interrupt>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000208 	.word	0x20000208

08002c78 <random_int>:

static uint8_t random_int(uint8_t max)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <random_int+0x20>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	b2db      	uxtb	r3, r3
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	200001c0 	.word	0x200001c0

08002c9c <get_precision_tick>:

static uint32_t get_precision_tick()
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca2:	b672      	cpsid	i
}
 8002ca4:	bf00      	nop
    __disable_irq(); // Disable interrupts to ensure atomic access to tick variables

    // Combine the upper part (MSB) with the current counter value from TIM1
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <get_precision_tick+0x28>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <get_precision_tick+0x2c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cb4:	b662      	cpsie	i
}
 8002cb6:	bf00      	nop

    __enable_irq(); // Re-enable interrupts
    return precision_tick;
 8002cb8:	687b      	ldr	r3, [r7, #4]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	200004b4 	.word	0x200004b4
 8002cc8:	20000548 	.word	0x20000548

08002ccc <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	uint8_t humidity = (uint8_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3bf0      	subs	r3, #240	; 0xf0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fca3 	bl	8000628 <__aeabi_ui2d>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd fd17 	bl	800071c <__aeabi_d2uiz>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fe3c 	bl	8000970 <__aeabi_i2f>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f7fd fe89 	bl	8000a18 <__aeabi_fmul>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe f84b 	bl	8000da4 <__aeabi_f2uiz>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	73fb      	strb	r3, [r7, #15]
	return humidity;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d20:	b672      	cpsid	i
}
 8002d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <Error_Handler+0x8>

08002d26 <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	460b      	mov	r3, r1
 8002d34:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6858      	ldr	r0, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	891b      	ldrh	r3, [r3, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	f002 fe91 	bl	8005a68 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	f107 0117 	add.w	r1, r7, #23
 8002d58:	2364      	movs	r3, #100	; 0x64
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f006 ffbe 	bl	8009cdc <HAL_SPI_Transmit>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <read_register+0x44>
		return false;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e015      	b.n	8002d96 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	2364      	movs	r3, #100	; 0x64
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	f007 f8f4 	bl	8009f62 <HAL_SPI_Receive>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <read_register+0x5e>
		return false;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e008      	b.n	8002d96 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	891b      	ldrh	r3, [r3, #8]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f002 fe6a 	bl	8005a68 <HAL_GPIO_WritePin>

	return true;
 8002d94:	2301      	movs	r3, #1

}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
 8002daa:	4613      	mov	r3, r2
 8002dac:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6858      	ldr	r0, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	891b      	ldrh	r3, [r3, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	f002 fe55 	bl	8005a68 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	733b      	strb	r3, [r7, #12]
 8002dc8:	78bb      	ldrb	r3, [r7, #2]
 8002dca:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	f107 010c 	add.w	r1, r7, #12
 8002dd4:	2364      	movs	r3, #100	; 0x64
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f006 ff80 	bl	8009cdc <HAL_SPI_Transmit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <write_register+0x48>
		return false;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e008      	b.n	8002df8 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6858      	ldr	r0, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	891b      	ldrh	r3, [r3, #8]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4619      	mov	r1, r3
 8002df2:	f002 fe39 	bl	8005a68 <HAL_GPIO_WritePin>

	return true;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d905      	bls.n	8002e20 <config_set_channel+0x20>
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <config_set_channel+0x54>)
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <config_set_channel+0x58>)
 8002e18:	2175      	movs	r1, #117	; 0x75
 8002e1a:	4810      	ldr	r0, [pc, #64]	; (8002e5c <config_set_channel+0x5c>)
 8002e1c:	f008 fee6 	bl	800bbec <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8002e20:	7afa      	ldrb	r2, [r7, #11]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	321a      	adds	r2, #26
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	7afb      	ldrb	r3, [r7, #11]
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0800cbb0 	.word	0x0800cbb0
 8002e58:	0800ce14 	.word	0x0800ce14
 8002e5c:	0800cbc4 	.word	0x0800cbc4

08002e60 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f64a 3267 	movw	r2, #43879	; 0xab67
 8002e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <config_load_default+0x58>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ffb2 	bl	8002e00 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <config_load_default+0x5c>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffad 	bl	8002e00 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 8002ea6:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <config_load_default+0x60>)
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffa8 	bl	8002e00 <config_set_channel>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	33be27a0 	.word	0x33be27a0
 8002ebc:	33c134e0 	.word	0x33c134e0
 8002ec0:	33c44220 	.word	0x33c44220

08002ec4 <reset>:


static void reset(rfm95_handle_t *handle)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68d8      	ldr	r0, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8a1b      	ldrh	r3, [r3, #16]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f002 fdc6 	bl	8005a68 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8002edc:	2001      	movs	r0, #1
 8002ede:	f001 fe39 	bl	8004b54 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68d8      	ldr	r0, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8a1b      	ldrh	r3, [r3, #16]
 8002eea:	2201      	movs	r2, #1
 8002eec:	4619      	mov	r1, r3
 8002eee:	f002 fdbb 	bl	8005a68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002ef2:	2005      	movs	r0, #5
 8002ef4:	f001 fe2e 	bl	8004b54 <HAL_Delay>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002f0a:	6839      	ldr	r1, [r7, #0]
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	460a      	mov	r2, r1
 8002f10:	4603      	mov	r3, r0
 8002f12:	0b55      	lsrs	r5, r2, #13
 8002f14:	04d4      	lsls	r4, r2, #19
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <configure_frequency+0xb4>)
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f7fd ffb0 	bl	8000e84 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8002f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	0c02      	lsrs	r2, r0, #16
 8002f3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f3e:	0c0b      	lsrs	r3, r1, #16
 8002f40:	b2d3      	uxtb	r3, r2
 8002f42:	461a      	mov	r2, r3
 8002f44:	2106      	movs	r1, #6
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff29 	bl	8002d9e <write_register>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <configure_frequency+0x5c>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e026      	b.n	8002faa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8002f5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	0a02      	lsrs	r2, r0, #8
 8002f6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f6e:	0a0b      	lsrs	r3, r1, #8
 8002f70:	b2d3      	uxtb	r3, r2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2107      	movs	r1, #7
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff11 	bl	8002d9e <write_register>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f083 0301 	eor.w	r3, r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <configure_frequency+0x8c>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e00e      	b.n	8002faa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8002f8c:	7a3b      	ldrb	r3, [r7, #8]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2108      	movs	r1, #8
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff03 	bl	8002d9e <write_register>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <configure_frequency+0xa8>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <configure_frequency+0xaa>

	return true;
 8002fa8:	2301      	movs	r3, #1
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	01e84800 	.word	0x01e84800

08002fb8 <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002fc8:	461a      	mov	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	fa42 f303 	asr.w	r3, r2, r3
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <configure_channel+0x2c>
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <configure_channel+0x48>)
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <configure_channel+0x4c>)
 8002fdc:	21a1      	movs	r1, #161	; 0xa1
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <configure_channel+0x50>)
 8002fe0:	f008 fe04 	bl	800bbec <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	321a      	adds	r2, #26
 8002fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff85 	bl	8002f00 <configure_frequency>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0800cbd8 	.word	0x0800cbd8
 8003004:	0800ce28 	.word	0x0800ce28
 8003008:	0800cbc4 	.word	0x0800cbc4

0800300c <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	460b      	mov	r3, r1
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4798      	blx	r3
 8003020:	4601      	mov	r1, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <wait_for_irq+0x5c>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	440b      	add	r3, r1
 8003036:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8003038:	e008      	b.n	800304c <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4798      	blx	r3
 8003040:	4602      	mov	r2, r0
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4293      	cmp	r3, r2
 8003046:	d801      	bhi.n	800304c <wait_for_irq+0x40>
			return false;
 8003048:	2300      	movs	r3, #0
 800304a:	e008      	b.n	800305e <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	332a      	adds	r3, #42	; 0x2a
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <wait_for_irq+0x2e>
		}
	}
	return true;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	10624dd3 	.word	0x10624dd3

0800306c <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	4798      	blx	r3
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4912      	ldr	r1, [pc, #72]	; (80030d4 <wait_for_rx_irqs+0x68>)
 800308a:	fba1 1303 	umull	r1, r3, r1, r3
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	4413      	add	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8003094:	e008      	b.n	80030a8 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4798      	blx	r3
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d801      	bhi.n	80030a8 <wait_for_rx_irqs+0x3c>
			return false;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e011      	b.n	80030cc <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <wait_for_rx_irqs+0x50>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ec      	beq.n	8003096 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	10624dd3 	.word	0x10624dd3

080030d8 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80030e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	dd03      	ble.n	80030f4 <rfm95_set_power+0x1c>
 80030ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	dd09      	ble.n	8003108 <rfm95_set_power+0x30>
 80030f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f8:	2b14      	cmp	r3, #20
 80030fa:	d005      	beq.n	8003108 <rfm95_set_power+0x30>
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <rfm95_set_power+0xd8>)
 80030fe:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <rfm95_set_power+0xdc>)
 8003100:	21c2      	movs	r1, #194	; 0xc2
 8003102:	482d      	ldr	r0, [pc, #180]	; (80031b8 <rfm95_set_power+0xe0>)
 8003104:	f008 fd72 	bl	800bbec <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8003108:	2300      	movs	r3, #0
 800310a:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003114:	2b01      	cmp	r3, #1
 8003116:	dd18      	ble.n	800314a <rfm95_set_power+0x72>
 8003118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311c:	2b11      	cmp	r3, #17
 800311e:	dc14      	bgt.n	800314a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8003120:	7b3b      	ldrb	r3, [r7, #12]
 8003122:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003126:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003128:	7b3b      	ldrb	r3, [r7, #12]
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	3b02      	subs	r3, #2
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7b3b      	ldrb	r3, [r7, #12]
 800313e:	f362 0303 	bfi	r3, r2, #0, #4
 8003142:	733b      	strb	r3, [r7, #12]
		pa_dac_config = 0x14; //RFM95_REGISTER_PA_DAC_LOW_POWER;
 8003144:	2314      	movs	r3, #20
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e011      	b.n	800316e <rfm95_set_power+0x96>

	} else if (power == 20) {
 800314a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800314e:	2b14      	cmp	r3, #20
 8003150:	d10d      	bne.n	800316e <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8003152:	7b3b      	ldrb	r3, [r7, #12]
 8003154:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003158:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800315a:	7b3b      	ldrb	r3, [r7, #12]
 800315c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003160:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8003162:	7b3b      	ldrb	r3, [r7, #12]
 8003164:	f043 030f 	orr.w	r3, r3, #15
 8003168:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800316a:	2387      	movs	r3, #135	; 0x87
 800316c:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 800316e:	7b3b      	ldrb	r3, [r7, #12]
 8003170:	461a      	mov	r2, r3
 8003172:	2109      	movs	r1, #9
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe12 	bl	8002d9e <write_register>
 800317a:	4603      	mov	r3, r0
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <rfm95_set_power+0xb2>
 8003186:	2300      	movs	r3, #0
 8003188:	e00e      	b.n	80031a8 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	461a      	mov	r2, r3
 800318e:	214d      	movs	r1, #77	; 0x4d
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fe04 	bl	8002d9e <write_register>
 8003196:	4603      	mov	r3, r0
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <rfm95_set_power+0xce>
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <rfm95_set_power+0xd0>

	return true;
 80031a6:	2301      	movs	r3, #1
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	0800cc0c 	.word	0x0800cc0c
 80031b4:	0800ce3c 	.word	0x0800ce3c
 80031b8:	0800cbc4 	.word	0x0800cbc4

080031bc <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ce:	d005      	beq.n	80031dc <rfm95_init+0x20>
 80031d0:	4b94      	ldr	r3, [pc, #592]	; (8003424 <rfm95_init+0x268>)
 80031d2:	4a95      	ldr	r2, [pc, #596]	; (8003428 <rfm95_init+0x26c>)
 80031d4:	21dd      	movs	r1, #221	; 0xdd
 80031d6:	4895      	ldr	r0, [pc, #596]	; (800342c <rfm95_init+0x270>)
 80031d8:	f008 fd08 	bl	800bbec <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <rfm95_init+0x36>
 80031e6:	4b92      	ldr	r3, [pc, #584]	; (8003430 <rfm95_init+0x274>)
 80031e8:	4a8f      	ldr	r2, [pc, #572]	; (8003428 <rfm95_init+0x26c>)
 80031ea:	21de      	movs	r1, #222	; 0xde
 80031ec:	488f      	ldr	r0, [pc, #572]	; (800342c <rfm95_init+0x270>)
 80031ee:	f008 fcfd 	bl	800bbec <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <rfm95_init+0x4c>
 80031fc:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <rfm95_init+0x278>)
 80031fe:	4a8a      	ldr	r2, [pc, #552]	; (8003428 <rfm95_init+0x26c>)
 8003200:	21df      	movs	r1, #223	; 0xdf
 8003202:	488a      	ldr	r0, [pc, #552]	; (800342c <rfm95_init+0x270>)
 8003204:	f008 fcf2 	bl	800bbec <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <rfm95_init+0x62>
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <rfm95_init+0x27c>)
 8003214:	4a84      	ldr	r2, [pc, #528]	; (8003428 <rfm95_init+0x26c>)
 8003216:	21e0      	movs	r1, #224	; 0xe0
 8003218:	4884      	ldr	r0, [pc, #528]	; (800342c <rfm95_init+0x270>)
 800321a:	f008 fce7 	bl	800bbec <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <rfm95_init+0x78>
 8003228:	4b84      	ldr	r3, [pc, #528]	; (800343c <rfm95_init+0x280>)
 800322a:	4a7f      	ldr	r2, [pc, #508]	; (8003428 <rfm95_init+0x26c>)
 800322c:	21e1      	movs	r1, #225	; 0xe1
 800322e:	487f      	ldr	r0, [pc, #508]	; (800342c <rfm95_init+0x270>)
 8003230:	f008 fcdc 	bl	800bbec <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <rfm95_init+0x8c>
 800323c:	4b80      	ldr	r3, [pc, #512]	; (8003440 <rfm95_init+0x284>)
 800323e:	4a7a      	ldr	r2, [pc, #488]	; (8003428 <rfm95_init+0x26c>)
 8003240:	21e2      	movs	r1, #226	; 0xe2
 8003242:	487a      	ldr	r0, [pc, #488]	; (800342c <rfm95_init+0x270>)
 8003244:	f008 fcd2 	bl	800bbec <__assert_func>
	assert(handle->random_int != NULL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <rfm95_init+0xa0>
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <rfm95_init+0x288>)
 8003252:	4a75      	ldr	r2, [pc, #468]	; (8003428 <rfm95_init+0x26c>)
 8003254:	21e3      	movs	r1, #227	; 0xe3
 8003256:	4875      	ldr	r0, [pc, #468]	; (800342c <rfm95_init+0x270>)
 8003258:	f008 fcc8 	bl	800bbec <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	f242 7210 	movw	r2, #10000	; 0x2710
 8003264:	4293      	cmp	r3, r2
 8003266:	d805      	bhi.n	8003274 <rfm95_init+0xb8>
 8003268:	4b77      	ldr	r3, [pc, #476]	; (8003448 <rfm95_init+0x28c>)
 800326a:	4a6f      	ldr	r2, [pc, #444]	; (8003428 <rfm95_init+0x26c>)
 800326c:	21e5      	movs	r1, #229	; 0xe5
 800326e:	486f      	ldr	r0, [pc, #444]	; (800342c <rfm95_init+0x270>)
 8003270:	f008 fcbc 	bl	800bbec <__assert_func>

	reset(handle);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fe25 	bl	8002ec4 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <rfm95_init+0xec>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	3260      	adds	r2, #96	; 0x60
 800328a:	4610      	mov	r0, r2
 800328c:	4798      	blx	r3
 800328e:	4603      	mov	r3, r0
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80032a0:	f64a 3267 	movw	r2, #43879	; 0xab67
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d002      	beq.n	80032ae <rfm95_init+0xf2>
		config_load_default(handle);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fdd9 	bl	8002e60 <config_load_default>
	}

	// Check for correct version.
	// check
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80032ae:	f107 020f 	add.w	r2, r7, #15
 80032b2:	2301      	movs	r3, #1
 80032b4:	2142      	movs	r1, #66	; 0x42
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fd35 	bl	8002d26 <read_register>
 80032bc:	4603      	mov	r3, r0
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <rfm95_init+0x110>
 80032c8:	2300      	movs	r3, #0
 80032ca:	e0a7      	b.n	800341c <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b12      	cmp	r3, #18
 80032d0:	d001      	beq.n	80032d6 <rfm95_init+0x11a>
 80032d2:	2300      	movs	r3, #0
 80032d4:	e0a2      	b.n	800341c <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 80032d6:	2200      	movs	r2, #0
 80032d8:	2101      	movs	r1, #1
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff fd5f 	bl	8002d9e <write_register>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f083 0301 	eor.w	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <rfm95_init+0x134>
 80032ec:	2300      	movs	r3, #0
 80032ee:	e095      	b.n	800341c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	2101      	movs	r1, #1
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fd52 	bl	8002d9e <write_register>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <rfm95_init+0x14e>
 8003306:	2300      	movs	r3, #0
 8003308:	e088      	b.n	800341c <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	// check
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800330a:	2200      	movs	r2, #0
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fd45 	bl	8002d9e <write_register>
 8003314:	4603      	mov	r3, r0
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <rfm95_init+0x168>
 8003320:	2300      	movs	r3, #0
 8003322:	e07b      	b.n	800341c <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 8003332:	2111      	movs	r1, #17
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fecf 	bl	80030d8 <rfm95_set_power>
 800333a:	4603      	mov	r3, r0
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <rfm95_init+0x18e>
 8003346:	2300      	movs	r3, #0
 8003348:	e068      	b.n	800341c <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 800334a:	2223      	movs	r2, #35	; 0x23
 800334c:	210c      	movs	r1, #12
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd25 	bl	8002d9e <write_register>
 8003354:	4603      	mov	r3, r0
 8003356:	f083 0301 	eor.w	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <rfm95_init+0x1a8>
 8003360:	2300      	movs	r3, #0
 8003362:	e05b      	b.n	800341c <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8003364:	2200      	movs	r2, #0
 8003366:	2120      	movs	r1, #32
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fd18 	bl	8002d9e <write_register>
 800336e:	4603      	mov	r3, r0
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <rfm95_init+0x1c2>
 800337a:	2300      	movs	r3, #0
 800337c:	e04e      	b.n	800341c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 800337e:	2208      	movs	r2, #8
 8003380:	2121      	movs	r1, #33	; 0x21
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fd0b 	bl	8002d9e <write_register>
 8003388:	4603      	mov	r3, r0
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <rfm95_init+0x1dc>
 8003394:	2300      	movs	r3, #0
 8003396:	e041      	b.n	800341c <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8003398:	2234      	movs	r2, #52	; 0x34
 800339a:	2139      	movs	r1, #57	; 0x39
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fcfe 	bl	8002d9e <write_register>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <rfm95_init+0x1f6>
 80033ae:	2300      	movs	r3, #0
 80033b0:	e034      	b.n	800341c <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses. - OK
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	210e      	movs	r1, #14
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fcf1 	bl	8002d9e <write_register>
 80033bc:	4603      	mov	r3, r0
 80033be:	f083 0301 	eor.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <rfm95_init+0x210>
 80033c8:	2300      	movs	r3, #0
 80033ca:	e027      	b.n	800341c <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80033cc:	2200      	movs	r2, #0
 80033ce:	210f      	movs	r1, #15
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fce4 	bl	8002d9e <write_register>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f083 0301 	eor.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <rfm95_init+0x22a>
 80033e2:	2300      	movs	r3, #0
 80033e4:	e01a      	b.n	800341c <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64. - OK
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	2123      	movs	r1, #35	; 0x23
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fcd7 	bl	8002d9e <write_register>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <rfm95_init+0x244>
 80033fc:	2300      	movs	r3, #0
 80033fe:	e00d      	b.n	800341c <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	2101      	movs	r1, #1
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fcca 	bl	8002d9e <write_register>
 800340a:	4603      	mov	r3, r0
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <rfm95_init+0x25e>
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <rfm95_init+0x260>

	return true;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	0800cc38 	.word	0x0800cc38
 8003428:	0800ce4c 	.word	0x0800ce4c
 800342c:	0800cbc4 	.word	0x0800cbc4
 8003430:	0800cc6c 	.word	0x0800cc6c
 8003434:	0800cca8 	.word	0x0800cca8
 8003438:	0800cce0 	.word	0x0800cce0
 800343c:	0800cd1c 	.word	0x0800cd1c
 8003440:	0800cd54 	.word	0x0800cd54
 8003444:	0800cd78 	.word	0x0800cd78
 8003448:	0800cd94 	.word	0x0800cd94

0800344c <process_mac_commands>:
	return true;
}


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t answer_index = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while (index < frame_payload_length) {
 8003466:	bf00      	nop
 8003468:	e19b      	b.n	80037a2 <process_mac_commands+0x356>
		switch (frame_payload[index++])
 800346a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003474:	461a      	mov	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	2b0c      	cmp	r3, #12
 8003480:	f200 818f 	bhi.w	80037a2 <process_mac_commands+0x356>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <process_mac_commands+0x40>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034db 	.word	0x080034db
 8003494:	080034f9 	.word	0x080034f9
 8003498:	08003517 	.word	0x08003517
 800349c:	08003531 	.word	0x08003531
 80034a0:	08003579 	.word	0x08003579
 80034a4:	080035e3 	.word	0x080035e3
 80034a8:	08003705 	.word	0x08003705
 80034ac:	08003765 	.word	0x08003765
 80034b0:	08003773 	.word	0x08003773
 80034b4:	08003785 	.word	0x08003785
 80034b8:	08003793 	.word	0x08003793
 80034bc:	080037a1 	.word	0x080037a1
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 80034c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d801      	bhi.n	80034ce <process_mac_commands+0x82>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e174      	b.n	80037b8 <process_mac_commands+0x36c>

				index += 1;
 80034ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d2:	3301      	adds	r3, #1
 80034d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80034d8:	e163      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 80034da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034de:	3301      	adds	r3, #1
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d801      	bhi.n	80034ec <process_mac_commands+0xa0>
 80034e8:	2300      	movs	r3, #0
 80034ea:	e165      	b.n	80037b8 <process_mac_commands+0x36c>

				index += 2;
 80034ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f0:	3302      	adds	r3, #2
 80034f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80034f6:	e154      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034fc:	3303      	adds	r3, #3
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4293      	cmp	r3, r2
 8003504:	d801      	bhi.n	800350a <process_mac_commands+0xbe>
 8003506:	2300      	movs	r3, #0
 8003508:	e156      	b.n	80037b8 <process_mac_commands+0x36c>

				index += 4;
 800350a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350e:	3304      	adds	r3, #4
 8003510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003514:	e145      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8003516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d801      	bhi.n	8003524 <process_mac_commands+0xd8>
 8003520:	2300      	movs	r3, #0
 8003522:	e149      	b.n	80037b8 <process_mac_commands+0x36c>

				index += 1;
 8003524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003528:	3301      	adds	r3, #1
 800352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800352e:	e138      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003534:	3304      	adds	r3, #4
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4293      	cmp	r3, r2
 800353c:	d801      	bhi.n	8003542 <process_mac_commands+0xf6>
 800353e:	2300      	movs	r3, #0
 8003540:	e13a      	b.n	80037b8 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003542:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003546:	2b30      	cmp	r3, #48	; 0x30
 8003548:	d901      	bls.n	800354e <process_mac_commands+0x102>
 800354a:	2300      	movs	r3, #0
 800354c:	e134      	b.n	80037b8 <process_mac_commands+0x36c>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 800354e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003558:	461a      	mov	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4413      	add	r3, r2
 800355e:	2205      	movs	r2, #5
 8003560:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8003562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800356c:	461a      	mov	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	2207      	movs	r2, #7
 8003574:	701a      	strb	r2, [r3, #0]
				break;
 8003576:	e114      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8003578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800357c:	2b2f      	cmp	r3, #47	; 0x2f
 800357e:	d901      	bls.n	8003584 <process_mac_commands+0x138>
 8003580:	2300      	movs	r3, #0
 8003582:	e119      	b.n	80037b8 <process_mac_commands+0x36c>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8003584:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <process_mac_commands+0x154>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	4798      	blx	r3
 800359c:	4603      	mov	r3, r0
 800359e:	e000      	b.n	80035a2 <process_mac_commands+0x156>
 80035a0:	23ff      	movs	r3, #255	; 0xff
 80035a2:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 80035a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80035ae:	461a      	mov	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	2206      	movs	r2, #6
 80035b6:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 80035b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80035c2:	461a      	mov	r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	7dfa      	ldrb	r2, [r7, #23]
 80035ca:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 80035cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80035d6:	461a      	mov	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	7e3a      	ldrb	r2, [r7, #24]
 80035de:	701a      	strb	r2, [r3, #0]
				break;
 80035e0:	e0df      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 80035e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035e6:	3304      	adds	r3, #4
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d801      	bhi.n	80035f4 <process_mac_commands+0x1a8>
 80035f0:	2300      	movs	r3, #0
 80035f2:	e0e1      	b.n	80037b8 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 80035f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d901      	bls.n	8003600 <process_mac_commands+0x1b4>
 80035fc:	2300      	movs	r3, #0
 80035fe:	e0db      	b.n	80037b8 <process_mac_commands+0x36c>

				uint8_t channel_index = frame_payload[index++];
 8003600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 8003616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint8_t frequency_msb = frame_payload[index++];
 800362c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 8003642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 800366e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	431a      	orrs	r2, r3
 800367a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	4313      	orrs	r3, r2
 8003682:	2264      	movs	r2, #100	; 0x64
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 800368a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8003694:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 800369c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d906      	bls.n	80036b2 <process_mac_commands+0x266>
					config_set_channel(handle, channel_index, frequency);
 80036a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fba7 	bl	8002e00 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 80036b2:	7efb      	ldrb	r3, [r7, #27]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d902      	bls.n	80036be <process_mac_commands+0x272>
 80036b8:	7ebb      	ldrb	r3, [r7, #26]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d901      	bls.n	80036c2 <process_mac_commands+0x276>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <process_mac_commands+0x278>
 80036c2:	2300      	movs	r3, #0
 80036c4:	767b      	strb	r3, [r7, #25]
 80036c6:	7e7b      	ldrb	r3, [r7, #25]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 80036ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80036d8:	461a      	mov	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	2207      	movs	r2, #7
 80036e0:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 80036e2:	7e7b      	ldrb	r3, [r7, #25]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	b25a      	sxtb	r2, r3
 80036ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
 80036f8:	4619      	mov	r1, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	440b      	add	r3, r1
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
				break;
 8003702:	e04e      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d801      	bhi.n	8003712 <process_mac_commands+0x2c6>
 800370e:	2300      	movs	r3, #0
 8003710:	e052      	b.n	80037b8 <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003716:	2b30      	cmp	r3, #48	; 0x30
 8003718:	d901      	bls.n	800371e <process_mac_commands+0x2d2>
 800371a:	2300      	movs	r3, #0
 800371c:	e04c      	b.n	80037b8 <process_mac_commands+0x36c>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 800371e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4413      	add	r3, r2
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <process_mac_commands+0x302>
					handle->config.rx1_delay = 1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 800374e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003758:	461a      	mov	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	4413      	add	r3, r2
 800375e:	2208      	movs	r2, #8
 8003760:	701a      	strb	r2, [r3, #0]
				break;
 8003762:	e01e      	b.n	80037a2 <process_mac_commands+0x356>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d819      	bhi.n	80037a2 <process_mac_commands+0x356>
 800376e:	2300      	movs	r3, #0
 8003770:	e022      	b.n	80037b8 <process_mac_commands+0x36c>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003776:	3304      	adds	r3, #4
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4293      	cmp	r3, r2
 800377e:	d810      	bhi.n	80037a2 <process_mac_commands+0x356>
 8003780:	2300      	movs	r3, #0
 8003782:	e019      	b.n	80037b8 <process_mac_commands+0x36c>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d809      	bhi.n	80037a2 <process_mac_commands+0x356>
 800378e:	2300      	movs	r3, #0
 8003790:	e012      	b.n	80037b8 <process_mac_commands+0x36c>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	429a      	cmp	r2, r3
 800379a:	d802      	bhi.n	80037a2 <process_mac_commands+0x356>
 800379c:	2300      	movs	r3, #0
 800379e:	e00b      	b.n	80037b8 <process_mac_commands+0x36c>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 80037a0:	bf00      	nop
	while (index < frame_payload_length) {
 80037a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	f63f ae5e 	bhi.w	800346a <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80037b4:	701a      	strb	r2, [r3, #0]
	return true;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3728      	adds	r7, #40	; 0x28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037d2:	492b      	ldr	r1, [pc, #172]	; (8003880 <receive_at_scheduled_time+0xc0>)
 80037d4:	fba1 1202 	umull	r1, r2, r1, r2
 80037d8:	0992      	lsrs	r2, r2, #6
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	1a8a      	subs	r2, r1, r2
 80037de:	4610      	mov	r0, r2
 80037e0:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80037e2:	2200      	movs	r2, #0
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fad9 	bl	8002d9e <write_register>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f083 0301 	eor.w	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <receive_at_scheduled_time+0x3c>
 80037f8:	2300      	movs	r3, #0
 80037fa:	e03c      	b.n	8003876 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80037fc:	22ff      	movs	r2, #255	; 0xff
 80037fe:	2112      	movs	r1, #18
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff facc 	bl	8002d9e <write_register>
 8003806:	4603      	mov	r3, r0
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <receive_at_scheduled_time+0x56>
 8003812:	2300      	movs	r3, #0
 8003814:	e02f      	b.n	8003876 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800382e:	2281      	movs	r2, #129	; 0x81
 8003830:	2101      	movs	r1, #1
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fab3 	bl	8002d9e <write_register>
 8003838:	4603      	mov	r3, r0
 800383a:	f083 0301 	eor.w	r3, r3, #1
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <receive_at_scheduled_time+0x88>
 8003844:	2300      	movs	r3, #0
 8003846:	e016      	b.n	8003876 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003848:	220a      	movs	r2, #10
 800384a:	2102      	movs	r1, #2
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fbdd 	bl	800300c <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	6838      	ldr	r0, [r7, #0]
 8003858:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 800385a:	2286      	movs	r2, #134	; 0x86
 800385c:	2101      	movs	r1, #1
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fa9d 	bl	8002d9e <write_register>
 8003864:	4603      	mov	r3, r0
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <receive_at_scheduled_time+0xb4>
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <receive_at_scheduled_time+0xb6>

	return true;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	10624dd3 	.word	0x10624dd3

08003884 <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8003884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003888:	b08a      	sub	sp, #40	; 0x28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	3b01      	subs	r3, #1
 800389a:	2202      	movs	r2, #2
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	4a29      	ldr	r2, [pc, #164]	; (8003948 <calculate_rx_timings+0xc4>)
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	4413      	add	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0fd9      	lsrs	r1, r3, #31
 80038d2:	440b      	add	r3, r1
 80038d4:	105b      	asrs	r3, r3, #1
 80038d6:	425b      	negs	r3, r3
 80038d8:	4413      	add	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	17da      	asrs	r2, r3, #31
 80038e0:	469a      	mov	sl, r3
 80038e2:	4693      	mov	fp, r2
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	2200      	movs	r2, #0
 80038ea:	4698      	mov	r8, r3
 80038ec:	4691      	mov	r9, r2
 80038ee:	fb08 f20b 	mul.w	r2, r8, fp
 80038f2:	fb0a f309 	mul.w	r3, sl, r9
 80038f6:	4413      	add	r3, r2
 80038f8:	fbaa 4508 	umull	r4, r5, sl, r8
 80038fc:	442b      	add	r3, r5
 80038fe:	461d      	mov	r5, r3
 8003900:	4a11      	ldr	r2, [pc, #68]	; (8003948 <calculate_rx_timings+0xc4>)
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	4620      	mov	r0, r4
 8003908:	4629      	mov	r1, r5
 800390a:	f7fd fa6b 	bl	8000de4 <__aeabi_ldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4613      	mov	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8003920:	fb03 f202 	mul.w	r2, r3, r2
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4413      	add	r3, r2
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	441a      	add	r2, r3
 800392c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392e:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	fb92 f3f3 	sdiv	r3, r2, r3
 8003938:	461a      	mov	r2, r3
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	; 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003948:	000f4240 	.word	0x000f4240

0800394c <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08c      	sub	sp, #48	; 0x30
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8003960:	f107 0320 	add.w	r3, r7, #32
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2207      	movs	r2, #7
 8003970:	49ab      	ldr	r1, [pc, #684]	; (8003c20 <receive_package+0x2d4>)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ff86 	bl	8003884 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d306      	bcc.n	800398e <receive_package+0x42>
 8003980:	4ba8      	ldr	r3, [pc, #672]	; (8003c24 <receive_package+0x2d8>)
 8003982:	4aa9      	ldr	r2, [pc, #676]	; (8003c28 <receive_package+0x2dc>)
 8003984:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003988:	48a8      	ldr	r0, [pc, #672]	; (8003c2c <receive_package+0x2e0>)
 800398a:	f008 f92f 	bl	800bbec <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800398e:	2272      	movs	r2, #114	; 0x72
 8003990:	211d      	movs	r1, #29
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fa03 	bl	8002d9e <write_register>
 8003998:	4603      	mov	r3, r0
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <receive_package+0x5c>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e136      	b.n	8003c16 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	211e      	movs	r1, #30
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff f9ed 	bl	8002d9e <write_register>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <receive_package+0x88>
 80039d0:	2300      	movs	r3, #0
 80039d2:	e120      	b.n	8003c16 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80039d4:	2204      	movs	r2, #4
 80039d6:	2126      	movs	r1, #38	; 0x26
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff f9e0 	bl	8002d9e <write_register>
 80039de:	4603      	mov	r3, r0
 80039e0:	f083 0301 	eor.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <receive_package+0xa2>
 80039ea:	2300      	movs	r3, #0
 80039ec:	e113      	b.n	8003c16 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	211f      	movs	r1, #31
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff f9d1 	bl	8002d9e <write_register>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f083 0301 	eor.w	r3, r3, #1
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <receive_package+0xc0>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e104      	b.n	8003c16 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8003a0c:	2267      	movs	r2, #103	; 0x67
 8003a0e:	2133      	movs	r1, #51	; 0x33
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff f9c4 	bl	8002d9e <write_register>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <receive_package+0xda>
 8003a22:	2300      	movs	r3, #0
 8003a24:	e0f7      	b.n	8003c16 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8003a26:	2219      	movs	r2, #25
 8003a28:	213b      	movs	r1, #59	; 0x3b
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff f9b7 	bl	8002d9e <write_register>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f083 0301 	eor.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <receive_package+0xf4>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e0ea      	b.n	8003c16 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	4619      	mov	r1, r3
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff febb 	bl	80037c0 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff fb0e 	bl	800306c <wait_for_rx_irqs>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d07a      	beq.n	8003b52 <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	2101      	movs	r1, #1
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff f99c 	bl	8002d9e <write_register>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <receive_package+0x12a>
 8003a72:	2300      	movs	r3, #0
 8003a74:	e0cf      	b.n	8003c16 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d166      	bne.n	8003b4e <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f107 0318 	add.w	r3, r7, #24
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	220c      	movs	r2, #12
 8003a90:	4963      	ldr	r1, [pc, #396]	; (8003c20 <receive_package+0x2d4>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff fef6 	bl	8003884 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8003a98:	4965      	ldr	r1, [pc, #404]	; (8003c30 <receive_package+0x2e4>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fa30 	bl	8002f00 <configure_frequency>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <receive_package+0x164>
 8003aac:	2300      	movs	r3, #0
 8003aae:	e0b2      	b.n	8003c16 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8003ab0:	22c2      	movs	r2, #194	; 0xc2
 8003ab2:	211d      	movs	r1, #29
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff f972 	bl	8002d9e <write_register>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f083 0301 	eor.w	r3, r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <receive_package+0x17e>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e0a5      	b.n	8003c16 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	211e      	movs	r1, #30
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff f95c 	bl	8002d9e <write_register>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f083 0301 	eor.w	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <receive_package+0x1aa>
 8003af2:	2300      	movs	r3, #0
 8003af4:	e08f      	b.n	8003c16 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003af6:	2204      	movs	r2, #4
 8003af8:	2126      	movs	r1, #38	; 0x26
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff f94f 	bl	8002d9e <write_register>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <receive_package+0x1c4>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e082      	b.n	8003c16 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	211f      	movs	r1, #31
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff f940 	bl	8002d9e <write_register>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f083 0301 	eor.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <receive_package+0x1e2>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e073      	b.n	8003c16 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4619      	mov	r1, r3
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fe44 	bl	80037c0 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fa97 	bl	800306c <wait_for_rx_irqs>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e063      	b.n	8003c16 <receive_package+0x2ca>
			}
		}

		return true;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e061      	b.n	8003c16 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8003b52:	f107 021f 	add.w	r2, r7, #31
 8003b56:	2301      	movs	r3, #1
 8003b58:	2112      	movs	r1, #18
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff f8e3 	bl	8002d26 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <receive_package+0x222>
		return true;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e053      	b.n	8003c16 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8003b6e:	f107 021e 	add.w	r2, r7, #30
 8003b72:	2301      	movs	r3, #1
 8003b74:	2119      	movs	r1, #25
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff f8d5 	bl	8002d26 <read_register>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <receive_package+0x240>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e044      	b.n	8003c16 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8003b8c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da00      	bge.n	8003b96 <receive_package+0x24a>
 8003b94:	3303      	adds	r3, #3
 8003b96:	109b      	asrs	r3, r3, #2
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8003b9e:	f107 021d 	add.w	r2, r7, #29
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	2113      	movs	r1, #19
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff f8bd 	bl	8002d26 <read_register>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f083 0301 	eor.w	r3, r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <receive_package+0x270>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e02c      	b.n	8003c16 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	210d      	movs	r1, #13
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff f8ec 	bl	8002d9e <write_register>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f083 0301 	eor.w	r3, r3, #1
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <receive_package+0x28a>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e01f      	b.n	8003c16 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8003bd6:	7f7b      	ldrb	r3, [r7, #29]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	2100      	movs	r1, #0
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff f8a2 	bl	8002d26 <read_register>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <receive_package+0x2a6>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e011      	b.n	8003c16 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7ff f8d1 	bl	8002d9e <write_register>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f083 0301 	eor.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <receive_package+0x2c0>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e004      	b.n	8003c16 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8003c0c:	7f7b      	ldrb	r3, [r7, #29]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]
	return true;
 8003c14:	2301      	movs	r3, #1
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	0001e848 	.word	0x0001e848
 8003c24:	0800cdc0 	.word	0x0800cdc0
 8003c28:	0800ce58 	.word	0x0800ce58
 8003c2c:	0800cbc4 	.word	0x0800cbc4
 8003c30:	33d3e608 	.word	0x33d3e608

08003c34 <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff f9b6 	bl	8002fb8 <configure_channel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <send_package+0x28>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e0d8      	b.n	8003e0e <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8003c5c:	2272      	movs	r2, #114	; 0x72
 8003c5e:	211d      	movs	r1, #29
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff f89c 	bl	8002d9e <write_register>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f083 0301 	eor.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <send_package+0x42>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e0cb      	b.n	8003e0e <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8003c76:	2274      	movs	r2, #116	; 0x74
 8003c78:	211e      	movs	r1, #30
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff f88f 	bl	8002d9e <write_register>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <send_package+0x5c>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e0be      	b.n	8003e0e <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003c90:	2204      	movs	r2, #4
 8003c92:	2126      	movs	r1, #38	; 0x26
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff f882 	bl	8002d9e <write_register>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f083 0301 	eor.w	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <send_package+0x76>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e0b1      	b.n	8003e0e <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8003caa:	2227      	movs	r2, #39	; 0x27
 8003cac:	2133      	movs	r1, #51	; 0x33
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff f875 	bl	8002d9e <write_register>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f083 0301 	eor.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <send_package+0x90>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e0a4      	b.n	8003e0e <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8003cc4:	221d      	movs	r2, #29
 8003cc6:	213b      	movs	r1, #59	; 0x3b
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff f868 	bl	8002d9e <write_register>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f083 0301 	eor.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <send_package+0xaa>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e097      	b.n	8003e0e <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2122      	movs	r1, #34	; 0x22
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff f859 	bl	8002d9e <write_register>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f083 0301 	eor.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <send_package+0xc8>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e088      	b.n	8003e0e <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003cfc:	2240      	movs	r2, #64	; 0x40
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff f84c 	bl	8002d9e <write_register>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f083 0301 	eor.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <send_package+0xe2>
 8003d12:	2300      	movs	r3, #0
 8003d14:	e07b      	b.n	8003e0e <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8003d16:	22ff      	movs	r2, #255	; 0xff
 8003d18:	2112      	movs	r1, #18
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff f83f 	bl	8002d9e <write_register>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f083 0301 	eor.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <send_package+0xfc>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e06e      	b.n	8003e0e <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8003d40:	2281      	movs	r2, #129	; 0x81
 8003d42:	2101      	movs	r1, #1
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff f82a 	bl	8002d9e <write_register>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <send_package+0x126>
 8003d56:	2300      	movs	r3, #0
 8003d58:	e059      	b.n	8003e0e <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff f954 	bl	800300c <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	210d      	movs	r1, #13
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff f818 	bl	8002d9e <write_register>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f083 0301 	eor.w	r3, r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <send_package+0x14a>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e047      	b.n	8003e0e <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e00b      	b.n	8003d9c <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2100      	movs	r1, #0
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff f804 	bl	8002d9e <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3ef      	bcc.n	8003d84 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8003da4:	2283      	movs	r2, #131	; 0x83
 8003da6:	2101      	movs	r1, #1
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe fff8 	bl	8002d9e <write_register>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f083 0301 	eor.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <send_package+0x18a>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e027      	b.n	8003e0e <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8003dbe:	2264      	movs	r2, #100	; 0x64
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff f922 	bl	800300c <wait_for_irq>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <send_package+0x1a4>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e01a      	b.n	8003e0e <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	2101      	movs	r1, #1
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7fe ffd9 	bl	8002d9e <write_register>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <send_package+0x1c8>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e008      	b.n	8003e0e <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003e02:	3301      	adds	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 8003e0c:	2301      	movs	r3, #1
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b08d      	sub	sp, #52	; 0x34
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	330d      	adds	r3, #13
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d906      	bls.n	8003e40 <encode_phy_payload+0x28>
 8003e32:	4b51      	ldr	r3, [pc, #324]	; (8003f78 <encode_phy_payload+0x160>)
 8003e34:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <encode_phy_payload+0x164>)
 8003e36:	f240 216b 	movw	r1, #619	; 0x26b
 8003e3a:	4851      	ldr	r0, [pc, #324]	; (8003f80 <encode_phy_payload+0x168>)
 8003e3c:	f007 fed6 	bl	800bbec <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2240      	movs	r2, #64	; 0x40
 8003e44:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	7d52      	ldrb	r2, [r2, #21]
 8003e4e:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	3302      	adds	r3, #2
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	7d12      	ldrb	r2, [r2, #20]
 8003e58:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3303      	adds	r3, #3
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	7cd2      	ldrb	r2, [r2, #19]
 8003e62:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3304      	adds	r3, #4
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	7c92      	ldrb	r2, [r2, #18]
 8003e6c:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3305      	adds	r3, #5
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3306      	adds	r3, #6
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3307      	adds	r3, #7
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003e9e:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3309      	adds	r3, #9
 8003ea4:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f008 f85c 	bl	800bf6e <memcpy>
	if (port == 0) {
 8003eb6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d113      	bne.n	8003ee6 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	18d0      	adds	r0, r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2d9      	uxtb	r1, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ece:	461c      	mov	r4, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3316      	adds	r3, #22
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	3212      	adds	r2, #18
 8003ed8:	9201      	str	r2, [sp, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2300      	movs	r3, #0
 8003ede:	4622      	mov	r2, r4
 8003ee0:	f007 fba5 	bl	800b62e <Encrypt_Payload>
 8003ee4:	e012      	b.n	8003f0c <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	18d0      	adds	r0, r2, r3
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3326      	adds	r3, #38	; 0x26
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	3212      	adds	r2, #18
 8003f00:	9201      	str	r2, [sp, #4]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	4622      	mov	r2, r4
 8003f08:	f007 fb91 	bl	800b62e <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	b2d8      	uxtb	r0, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003f1e:	461c      	mov	r4, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3316      	adds	r3, #22
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	3212      	adds	r2, #18
 8003f28:	f107 0114 	add.w	r1, r7, #20
 8003f2c:	9202      	str	r2, [sp, #8]
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4623      	mov	r3, r4
 8003f36:	4602      	mov	r2, r0
 8003f38:	68b8      	ldr	r0, [r7, #8]
 8003f3a:	f007 fc2d 	bl	800b798 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8003f3e:	2300      	movs	r3, #0
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e00d      	b.n	8003f60 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8003f44:	7ffa      	ldrb	r2, [r7, #31]
 8003f46:	7ff9      	ldrb	r1, [r7, #31]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	440b      	add	r3, r1
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	440b      	add	r3, r1
 8003f50:	3220      	adds	r2, #32
 8003f52:	443a      	add	r2, r7
 8003f54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003f58:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8003f5a:	7ffb      	ldrb	r3, [r7, #31]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	7ffb      	ldrb	r3, [r7, #31]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d9ee      	bls.n	8003f44 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	0800cddc 	.word	0x0800cddc
 8003f7c:	0800ce68 	.word	0x0800ce68
 8003f80:	0800cbc4 	.word	0x0800cbc4

08003f84 <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b08d      	sub	sp, #52	; 0x34
 8003f88:	af04      	add	r7, sp, #16
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d001      	beq.n	8003fa0 <decode_phy_payload+0x1c>
		return false;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e0aa      	b.n	80040f6 <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	7d5b      	ldrb	r3, [r3, #21]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d114      	bne.n	8003fd8 <decode_phy_payload+0x54>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	7d1b      	ldrb	r3, [r3, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d10d      	bne.n	8003fd8 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3303      	adds	r3, #3
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d106      	bne.n	8003fd8 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	7c9b      	ldrb	r3, [r3, #18]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <decode_phy_payload+0x58>
		return false;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e08c      	b.n	80040f6 <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	795b      	ldrb	r3, [r3, #5]
 8003fe0:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8003fe2:	7ffb      	ldrb	r3, [r7, #31]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3307      	adds	r3, #7
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	b21a      	sxth	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	3306      	adds	r3, #6
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004008:	8bba      	ldrh	r2, [r7, #28]
 800400a:	429a      	cmp	r2, r3
 800400c:	d201      	bcs.n	8004012 <decode_phy_payload+0x8e>
		return false;
 800400e:	2300      	movs	r3, #0
 8004010:	e071      	b.n	80040f6 <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8bba      	ldrh	r2, [r7, #28]
 8004016:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	3b04      	subs	r3, #4
 800401e:	b2d8      	uxtb	r0, r3
 8004020:	8bbc      	ldrh	r4, [r7, #28]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3316      	adds	r3, #22
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	3212      	adds	r2, #18
 800402a:	f107 0114 	add.w	r1, r7, #20
 800402e:	9202      	str	r2, [sp, #8]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2301      	movs	r3, #1
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4623      	mov	r3, r4
 8004038:	4602      	mov	r2, r0
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f007 fbac 	bl	800b798 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	3b04      	subs	r3, #4
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	18d1      	adds	r1, r2, r3
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2204      	movs	r2, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f007 ff01 	bl	800be56 <memcmp>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <decode_phy_payload+0xda>
		return false;
 800405a:	2300      	movs	r3, #0
 800405c:	e04b      	b.n	80040f6 <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f1a3 020c 	sub.w	r2, r3, #12
 8004064:	7fbb      	ldrb	r3, [r7, #30]
 8004066:	429a      	cmp	r2, r3
 8004068:	d10b      	bne.n	8004082 <decode_phy_payload+0xfe>
		*frame_port = 0;
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f103 0208 	add.w	r2, r3, #8
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	7fba      	ldrb	r2, [r7, #30]
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e038      	b.n	80040f4 <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	7a1a      	ldrb	r2, [r3, #8]
 8004086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004088:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 800408a:	7fbb      	ldrb	r3, [r7, #30]
 800408c:	3309      	adds	r3, #9
 800408e:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	3b04      	subs	r3, #4
 8004094:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8004096:	7eba      	ldrb	r2, [r7, #26]
 8004098:	7efb      	ldrb	r3, [r7, #27]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 800409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 80040a6:	7efb      	ldrb	r3, [r7, #27]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	18d0      	adds	r0, r2, r3
 80040ac:	8bbc      	ldrh	r4, [r7, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3316      	adds	r3, #22
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	3212      	adds	r2, #18
 80040b6:	7e79      	ldrb	r1, [r7, #25]
 80040b8:	9201      	str	r2, [sp, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	4622      	mov	r2, r4
 80040c0:	f007 fab5 	bl	800b62e <Encrypt_Payload>
 80040c4:	e00e      	b.n	80040e4 <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 80040c6:	7efb      	ldrb	r3, [r7, #27]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	18d0      	adds	r0, r2, r3
 80040cc:	8bbc      	ldrh	r4, [r7, #28]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3326      	adds	r3, #38	; 0x26
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	3212      	adds	r2, #18
 80040d6:	7e79      	ldrb	r1, [r7, #25]
 80040d8:	9201      	str	r2, [sp, #4]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2301      	movs	r3, #1
 80040de:	4622      	mov	r2, r4
 80040e0:	f007 faa5 	bl	800b62e <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 80040e4:	7efb      	ldrb	r3, [r7, #27]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	441a      	add	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	7e7a      	ldrb	r2, [r7, #25]
 80040f2:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80040f4:	2301      	movs	r3, #1
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd90      	pop	{r4, r7, pc}

080040fe <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 800410a:	2300      	movs	r3, #0
 800410c:	73bb      	strb	r3, [r7, #14]
 800410e:	e010      	b.n	8004132 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8004116:	461a      	mov	r2, r3
 8004118:	7bbb      	ldrb	r3, [r7, #14]
 800411a:	fa42 f303 	asr.w	r3, r2, r3
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <select_random_channel+0x2e>
			channel_count++;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3301      	adds	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	3301      	adds	r3, #1
 8004130:	73bb      	strb	r3, [r7, #14]
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	2b0f      	cmp	r3, #15
 8004136:	d9eb      	bls.n	8004110 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	4610      	mov	r0, r2
 8004140:	4798      	blx	r3
 8004142:	4603      	mov	r3, r0
 8004144:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8004146:	2300      	movs	r3, #0
 8004148:	733b      	strb	r3, [r7, #12]
 800414a:	e015      	b.n	8004178 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8004152:	461a      	mov	r2, r3
 8004154:	7b3b      	ldrb	r3, [r7, #12]
 8004156:	fa42 f303 	asr.w	r3, r2, r3
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <select_random_channel+0x74>
			if (random_channel == 0) {
 8004162:	7b7b      	ldrb	r3, [r7, #13]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <select_random_channel+0x6e>
				return i;
 8004168:	7b3b      	ldrb	r3, [r7, #12]
 800416a:	e009      	b.n	8004180 <select_random_channel+0x82>
			} else {
				random_channel--;
 800416c:	7b7b      	ldrb	r3, [r7, #13]
 800416e:	3b01      	subs	r3, #1
 8004170:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8004172:	7b3b      	ldrb	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	733b      	strb	r3, [r7, #12]
 8004178:	7b3b      	ldrb	r3, [r7, #12]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d9e6      	bls.n	800414c <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b0aa      	sub	sp, #168	; 0xa8
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8004194:	2300      	movs	r3, #0
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004198:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800419c:	223c      	movs	r2, #60	; 0x3c
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f007 fe68 	bl	800be76 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 80041a6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80041aa:	2301      	movs	r3, #1
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff fe30 	bl	8003e18 <encode_phy_payload>
 80041b8:	4603      	mov	r3, r0
 80041ba:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff9e 	bl	80040fe <select_random_channel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 80041c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ca:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80041ce:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80041d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4603      	mov	r3, r0
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fd2a 	bl	8003c34 <send_package>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f083 0301 	eor.w	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80041ec:	2280      	movs	r2, #128	; 0x80
 80041ee:	2101      	movs	r1, #1
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7fe fdd4 	bl	8002d9e <write_register>
		return false;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e0af      	b.n	800435a <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 80041fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041fe:	2240      	movs	r2, #64	; 0x40
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f007 fe37 	bl	800be76 <memset>
	phy_payload_len = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8096 	beq.w	8004344 <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8004218:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800421a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800421e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004222:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fb8e 	bl	800394c <receive_package>
 8004230:	4603      	mov	r3, r0
 8004232:	f083 0301 	eor.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	2101      	movs	r1, #1
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7fe fdac 	bl	8002d9e <write_register>
			if (handle->save_config) {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	3260      	adds	r2, #96	; 0x60
 8004256:	4610      	mov	r0, r2
 8004258:	4798      	blx	r3
			}
			return false;
 800425a:	2300      	movs	r3, #0
 800425c:	e07d      	b.n	800435a <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 800425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004260:	2b00      	cmp	r3, #0
 8004262:	d06f      	beq.n	8004344 <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 800426a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426c:	b2da      	uxtb	r2, r3
 800426e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004272:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004276:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4603      	mov	r3, r0
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff fe7d 	bl	8003f84 <decode_phy_payload>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d059      	beq.n	8004344 <rfm95_send_receive_cycle+0x1bc>

				// Process Mac Commands
				if (frame_port == 0) {
 8004290:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004294:	2b00      	cmp	r3, #0
 8004296:	d155      	bne.n	8004344 <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	f107 0318 	add.w	r3, r7, #24
 80042a0:	222f      	movs	r2, #47	; 0x2f
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f007 fde6 	bl	800be76 <memset>
					uint8_t mac_response_len = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 80042b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80042b6:	4618      	mov	r0, r3
 80042b8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80042bc:	f107 0214 	add.w	r2, r7, #20
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	f107 0349 	add.w	r3, r7, #73	; 0x49
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	4602      	mov	r2, r0
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff f8bd 	bl	800344c <process_mac_commands>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d035      	beq.n	8004344 <rfm95_send_receive_cycle+0x1bc>
 80042d8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d031      	beq.n	8004344 <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 80042e0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80042e4:	4618      	mov	r0, r3
 80042e6:	f107 0214 	add.w	r2, r7, #20
 80042ea:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80042ee:	2300      	movs	r3, #0
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4603      	mov	r3, r0
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7ff fd8f 	bl	8003e18 <encode_phy_payload>
 80042fa:	4603      	mov	r3, r0
 80042fc:	65bb      	str	r3, [r7, #88]	; 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 80042fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004300:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8004304:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004308:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fc8f 	bl	8003c34 <send_package>
 8004316:	4603      	mov	r3, r0
 8004318:	f083 0301 	eor.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d010      	beq.n	8004344 <rfm95_send_receive_cycle+0x1bc>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	2101      	movs	r1, #1
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7fe fd39 	bl	8002d9e <write_register>
							if (handle->save_config) {
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	3260      	adds	r2, #96	; 0x60
 800433c:	4610      	mov	r0, r2
 800433e:	4798      	blx	r3
							}
							return false;
 8004340:	2300      	movs	r3, #0
			return false;
 8004342:	e00a      	b.n	800435a <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	3260      	adds	r2, #96	; 0x60
 8004354:	4610      	mov	r0, r2
 8004356:	4798      	blx	r3
	}

	return true;
 8004358:	2301      	movs	r3, #1
}
 800435a:	4618      	mov	r0, r3
 800435c:	37a0      	adds	r7, #160	; 0xa0
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 8004362:	b590      	push	{r4, r7, lr}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	78fc      	ldrb	r4, [r7, #3]
 8004374:	4798      	blx	r3
 8004376:	4601      	mov	r1, r0
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	6059      	str	r1, [r3, #4]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}

0800438c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_MspInit+0x5c>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <HAL_MspInit+0x5c>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6193      	str	r3, [r2, #24]
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_MspInit+0x5c>)
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_MspInit+0x5c>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_MspInit+0x5c>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	61d3      	str	r3, [r2, #28]
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_MspInit+0x5c>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_MspInit+0x60>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_MspInit+0x60>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40010000 	.word	0x40010000

080043f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <HAL_ADC_MspInit+0x7c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d129      	bne.n	8004464 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_ADC_MspInit+0x80>)
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_ADC_MspInit+0x80>)
 8004416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800441a:	6193      	str	r3, [r2, #24]
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_ADC_MspInit+0x80>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_ADC_MspInit+0x80>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	4a10      	ldr	r2, [pc, #64]	; (8004470 <HAL_ADC_MspInit+0x80>)
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	6193      	str	r3, [r2, #24]
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_ADC_MspInit+0x80>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004440:	2306      	movs	r3, #6
 8004442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004444:	2303      	movs	r3, #3
 8004446:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004448:	f107 0310 	add.w	r3, r7, #16
 800444c:	4619      	mov	r1, r3
 800444e:	4809      	ldr	r0, [pc, #36]	; (8004474 <HAL_ADC_MspInit+0x84>)
 8004450:	f001 f986 	bl	8005760 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004454:	2200      	movs	r2, #0
 8004456:	2100      	movs	r1, #0
 8004458:	2012      	movs	r0, #18
 800445a:	f001 f8c4 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800445e:	2012      	movs	r0, #18
 8004460:	f001 f8dd 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004464:	bf00      	nop
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40012400 	.word	0x40012400
 8004470:	40021000 	.word	0x40021000
 8004474:	40010800 	.word	0x40010800

08004478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 0318 	add.w	r3, r7, #24
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <HAL_I2C_MspInit+0xd8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d12c      	bne.n	80044f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004498:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	6193      	str	r3, [r2, #24]
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044b0:	23c0      	movs	r3, #192	; 0xc0
 80044b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044b4:	2312      	movs	r3, #18
 80044b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b8:	2303      	movs	r3, #3
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044bc:	f107 0318 	add.w	r3, r7, #24
 80044c0:	4619      	mov	r1, r3
 80044c2:	4825      	ldr	r0, [pc, #148]	; (8004558 <HAL_I2C_MspInit+0xe0>)
 80044c4:	f001 f94c 	bl	8005760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 80044ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d2:	61d3      	str	r3, [r2, #28]
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	201f      	movs	r0, #31
 80044e6:	f001 f87e 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80044ea:	201f      	movs	r0, #31
 80044ec:	f001 f897 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044f0:	e029      	b.n	8004546 <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_I2C_MspInit+0xe4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d124      	bne.n	8004546 <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	4a14      	ldr	r2, [pc, #80]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 8004502:	f043 0308 	orr.w	r3, r3, #8
 8004506:	6193      	str	r3, [r2, #24]
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004514:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800451a:	2312      	movs	r3, #18
 800451c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800451e:	2303      	movs	r3, #3
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004522:	f107 0318 	add.w	r3, r7, #24
 8004526:	4619      	mov	r1, r3
 8004528:	480b      	ldr	r0, [pc, #44]	; (8004558 <HAL_I2C_MspInit+0xe0>)
 800452a:	f001 f919 	bl	8005760 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 8004534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004538:	61d3      	str	r3, [r2, #28]
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_I2C_MspInit+0xdc>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	; 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40005400 	.word	0x40005400
 8004554:	40021000 	.word	0x40021000
 8004558:	40010c00 	.word	0x40010c00
 800455c:	40005800 	.word	0x40005800

08004560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_RTC_MspInit+0x4c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d118      	bne.n	80045a4 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004572:	f003 febb 	bl	80082ec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_RTC_MspInit+0x50>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <HAL_RTC_MspInit+0x50>)
 800457c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004580:	61d3      	str	r3, [r2, #28]
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RTC_MspInit+0x50>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RTC_MspInit+0x54>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2029      	movs	r0, #41	; 0x29
 800459a:	f001 f824 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800459e:	2029      	movs	r0, #41	; 0x29
 80045a0:	f001 f83d 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40002800 	.word	0x40002800
 80045b0:	40021000 	.word	0x40021000
 80045b4:	4242043c 	.word	0x4242043c

080045b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	f107 0318 	add.w	r3, r7, #24
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <HAL_SPI_MspInit+0xf8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d130      	bne.n	800463a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6193      	str	r3, [r2, #24]
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004608:	23a0      	movs	r3, #160	; 0xa0
 800460a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004610:	2303      	movs	r3, #3
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f107 0318 	add.w	r3, r7, #24
 8004618:	4619      	mov	r1, r3
 800461a:	4827      	ldr	r0, [pc, #156]	; (80046b8 <HAL_SPI_MspInit+0x100>)
 800461c:	f001 f8a0 	bl	8005760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462c:	f107 0318 	add.w	r3, r7, #24
 8004630:	4619      	mov	r1, r3
 8004632:	4821      	ldr	r0, [pc, #132]	; (80046b8 <HAL_SPI_MspInit+0x100>)
 8004634:	f001 f894 	bl	8005760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004638:	e036      	b.n	80046a8 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_SPI_MspInit+0x104>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d131      	bne.n	80046a8 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 800464a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464e:	61d3      	str	r3, [r2, #28]
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 8004662:	f043 0308 	orr.w	r3, r3, #8
 8004666:	6193      	str	r3, [r2, #24]
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_SPI_MspInit+0xfc>)
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004674:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467a:	2302      	movs	r3, #2
 800467c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004682:	f107 0318 	add.w	r3, r7, #24
 8004686:	4619      	mov	r1, r3
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <HAL_SPI_MspInit+0x108>)
 800468a:	f001 f869 	bl	8005760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800468e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469c:	f107 0318 	add.w	r3, r7, #24
 80046a0:	4619      	mov	r1, r3
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <HAL_SPI_MspInit+0x108>)
 80046a4:	f001 f85c 	bl	8005760 <HAL_GPIO_Init>
}
 80046a8:	bf00      	nop
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013000 	.word	0x40013000
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40010800 	.word	0x40010800
 80046bc:	40003800 	.word	0x40003800
 80046c0:	40010c00 	.word	0x40010c00

080046c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d114      	bne.n	8004700 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	61d3      	str	r3, [r2, #28]
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	201c      	movs	r0, #28
 80046f4:	f000 ff77 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046f8:	201c      	movs	r0, #28
 80046fa:	f000 ff90 	bl	800561e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046fe:	e018      	b.n	8004732 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_TIM_Base_MspInit+0x7c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d113      	bne.n	8004732 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a0b      	ldr	r2, [pc, #44]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	61d3      	str	r3, [r2, #28]
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_TIM_Base_MspInit+0x78>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	201d      	movs	r0, #29
 8004728:	f000 ff5d 	bl	80055e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800472c:	201d      	movs	r0, #29
 800472e:	f000 ff76 	bl	800561e <HAL_NVIC_EnableIRQ>
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	40000400 	.word	0x40000400

08004744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 0310 	add.w	r3, r7, #16
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_UART_MspInit+0x8c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d131      	bne.n	80047c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_UART_MspInit+0x90>)
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_UART_MspInit+0x90>)
 800476a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800476e:	6193      	str	r3, [r2, #24]
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <HAL_UART_MspInit+0x90>)
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_UART_MspInit+0x90>)
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_UART_MspInit+0x90>)
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	6193      	str	r3, [r2, #24]
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_UART_MspInit+0x90>)
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8004794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800479e:	2303      	movs	r3, #3
 80047a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	4619      	mov	r1, r3
 80047a8:	480b      	ldr	r0, [pc, #44]	; (80047d8 <HAL_UART_MspInit+0x94>)
 80047aa:	f000 ffd9 	bl	8005760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 80047ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	4619      	mov	r1, r3
 80047c2:	4805      	ldr	r0, [pc, #20]	; (80047d8 <HAL_UART_MspInit+0x94>)
 80047c4:	f000 ffcc 	bl	8005760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80047c8:	bf00      	nop
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40010800 	.word	0x40010800

080047dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047e0:	e7fe      	b.n	80047e0 <NMI_Handler+0x4>

080047e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	#ifdef DEBUG
     __BKPT(0);
 80047e6:	be00      	bkpt	0x0000
   	#endif

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047e8:	e7fe      	b.n	80047e8 <HardFault_Handler+0x6>

080047ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047ee:	e7fe      	b.n	80047ee <MemManage_Handler+0x4>

080047f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <BusFault_Handler+0x4>

080047f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047f6:	b480      	push	{r7}
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047fa:	e7fe      	b.n	80047fa <UsageFault_Handler+0x4>

080047fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004824:	f000 f97a 	bl	8004b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004828:	bf00      	nop
 800482a:	bd80      	pop	{r7, pc}

0800482c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8004830:	2008      	movs	r0, #8
 8004832:	f001 f931 	bl	8005a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <ADC1_2_IRQHandler+0x10>)
 8004842:	f000 fb95 	bl	8004f70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200002d0 	.word	0x200002d0

08004850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <TIM2_IRQHandler+0x10>)
 8004856:	f006 f815 	bl	800a884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2000046c 	.word	0x2000046c

08004864 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <TIM3_IRQHandler+0x10>)
 800486a:	f006 f80b 	bl	800a884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	200004b4 	.word	0x200004b4

08004878 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <I2C1_EV_IRQHandler+0x10>)
 800487e:	f001 fddd 	bl	800643c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000300 	.word	0x20000300

0800488c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIM_RST_Pin);
 8004890:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004894:	f001 f900 	bl	8005a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8004898:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800489c:	f001 f8fc 	bl	8005a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80048a0:	bf00      	nop
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <RTC_Alarm_IRQHandler+0x10>)
 80048aa:	f004 fec7 	bl	800963c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200003a8 	.word	0x200003a8

080048b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return 1;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <_kill>:

int _kill(int pid, int sig)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048d0:	f007 fb20 	bl	800bf14 <__errno>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2216      	movs	r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
  return -1;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <_exit>:

void _exit (int status)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048ee:	f04f 31ff 	mov.w	r1, #4294967295
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffe7 	bl	80048c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048f8:	e7fe      	b.n	80048f8 <_exit+0x12>

080048fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e00a      	b.n	8004922 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800490c:	f3af 8000 	nop.w
 8004910:	4601      	mov	r1, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	60ba      	str	r2, [r7, #8]
 8004918:	b2ca      	uxtb	r2, r1
 800491a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3301      	adds	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	dbf0      	blt.n	800490c <_read+0x12>
  }

  return len;
 800492a:	687b      	ldr	r3, [r7, #4]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e009      	b.n	800495a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	60ba      	str	r2, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3301      	adds	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	429a      	cmp	r2, r3
 8004960:	dbf1      	blt.n	8004946 <_write+0x12>
  }
  return len;
 8004962:	687b      	ldr	r3, [r7, #4]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_close>:

int _close(int file)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004992:	605a      	str	r2, [r3, #4]
  return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <_isatty>:

int _isatty(int file)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049a8:	2301      	movs	r3, #1
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <_sbrk+0x5c>)
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <_sbrk+0x60>)
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <_sbrk+0x64>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <_sbrk+0x64>)
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <_sbrk+0x68>)
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <_sbrk+0x64>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d207      	bcs.n	8004a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049fc:	f007 fa8a 	bl	800bf14 <__errno>
 8004a00:	4603      	mov	r3, r0
 8004a02:	220c      	movs	r2, #12
 8004a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	e009      	b.n	8004a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <_sbrk+0x64>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <_sbrk+0x64>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <_sbrk+0x64>)
 8004a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20005000 	.word	0x20005000
 8004a2c:	00000400 	.word	0x00000400
 8004a30:	2000054c 	.word	0x2000054c
 8004a34:	200006b0 	.word	0x200006b0

08004a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a44:	f7ff fff8 	bl	8004a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a48:	480b      	ldr	r0, [pc, #44]	; (8004a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004a4a:	490c      	ldr	r1, [pc, #48]	; (8004a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a50:	e002      	b.n	8004a58 <LoopCopyDataInit>

08004a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a56:	3304      	adds	r3, #4

08004a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a5c:	d3f9      	bcc.n	8004a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004a60:	4c09      	ldr	r4, [pc, #36]	; (8004a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a64:	e001      	b.n	8004a6a <LoopFillZerobss>

08004a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a68:	3204      	adds	r2, #4

08004a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a6c:	d3fb      	bcc.n	8004a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a6e:	f007 fa57 	bl	800bf20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a72:	f7fd f94f 	bl	8001d14 <main>
  bx lr
 8004a76:	4770      	bx	lr
  ldr r0, =_sdata
 8004a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a7c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004a80:	0800cf3c 	.word	0x0800cf3c
  ldr r2, =_sbss
 8004a84:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8004a88:	200006b0 	.word	0x200006b0

08004a8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <CAN1_RX1_IRQHandler>
	...

08004a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_Init+0x28>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <HAL_Init+0x28>)
 8004a9a:	f043 0310 	orr.w	r3, r3, #16
 8004a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aa0:	2003      	movs	r0, #3
 8004aa2:	f000 fd95 	bl	80055d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aa6:	200f      	movs	r0, #15
 8004aa8:	f000 f808 	bl	8004abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004aac:	f7ff fc6e 	bl	800438c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40022000 	.word	0x40022000

08004abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ac4:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_InitTick+0x54>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_InitTick+0x58>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fdad 	bl	800563a <HAL_SYSTICK_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e00e      	b.n	8004b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d80a      	bhi.n	8004b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af0:	2200      	movs	r2, #0
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f000 fd75 	bl	80055e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <HAL_InitTick+0x5c>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000004 	.word	0x20000004
 8004b14:	2000000c 	.word	0x2000000c
 8004b18:	20000008 	.word	0x20000008

08004b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_IncTick+0x1c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_IncTick+0x20>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	4a03      	ldr	r2, [pc, #12]	; (8004b3c <HAL_IncTick+0x20>)
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	20000550 	.word	0x20000550

08004b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return uwTick;
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <HAL_GetTick+0x10>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000550 	.word	0x20000550

08004b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b5c:	f7ff fff0 	bl	8004b40 <HAL_GetTick>
 8004b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d005      	beq.n	8004b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_Delay+0x44>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b7a:	bf00      	nop
 8004b7c:	f7ff ffe0 	bl	8004b40 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d8f7      	bhi.n	8004b7c <HAL_Delay+0x28>
  {
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	2000000c 	.word	0x2000000c

08004b9c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_SuspendTick+0x18>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <HAL_SuspendTick+0x18>)
 8004ba6:	f023 0302 	bic.w	r3, r3, #2
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e010 	.word	0xe000e010

08004bb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <HAL_ResumeTick+0x18>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <HAL_ResumeTick+0x18>)
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	6013      	str	r3, [r2, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0be      	b.n	8004d74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fbec 	bl	80043f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fbc3 	bl	80053a4 <ADC_ConversionStop_Disable>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8099 	bne.w	8004d62 <HAL_ADC_Init+0x18e>
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f040 8095 	bne.w	8004d62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c40:	f023 0302 	bic.w	r3, r3, #2
 8004c44:	f043 0202 	orr.w	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7b1b      	ldrb	r3, [r3, #12]
 8004c5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d003      	beq.n	8004c76 <HAL_ADC_Init+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_ADC_Init+0xa8>
 8004c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c7a:	e000      	b.n	8004c7e <HAL_ADC_Init+0xaa>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7d1b      	ldrb	r3, [r3, #20]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d119      	bne.n	8004cc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7b1b      	ldrb	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	035a      	lsls	r2, r3, #13
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e00b      	b.n	8004cc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f043 0201 	orr.w	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <HAL_ADC_Init+0x1a8>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d003      	beq.n	8004cfa <HAL_ADC_Init+0x126>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d104      	bne.n	8004d04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <HAL_ADC_Init+0x1ac>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d10b      	bne.n	8004d40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d3e:	e018      	b.n	8004d72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	f023 0312 	bic.w	r3, r3, #18
 8004d48:	f043 0210 	orr.w	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d60:	e007      	b.n	8004d72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	f043 0210 	orr.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	ffe1f7fd 	.word	0xffe1f7fd
 8004d80:	ff1f0efe 	.word	0xff1f0efe

08004d84 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_ADC_Start_IT+0x1a>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0a0      	b.n	8004ee0 <HAL_ADC_Start_IT+0x15c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 faa2 	bl	80052f0 <ADC_Enable>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 808f 	bne.w	8004ed6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <HAL_ADC_Start_IT+0x164>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d105      	bne.n	8004de2 <HAL_ADC_Start_IT+0x5e>
 8004dd6:	4b45      	ldr	r3, [pc, #276]	; (8004eec <HAL_ADC_Start_IT+0x168>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d115      	bne.n	8004e0e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d026      	beq.n	8004e4a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e0c:	e01d      	b.n	8004e4a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a33      	ldr	r2, [pc, #204]	; (8004eec <HAL_ADC_Start_IT+0x168>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_ADC_Start_IT+0xaa>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_ADC_Start_IT+0x164>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10d      	bne.n	8004e4a <HAL_ADC_Start_IT+0xc6>
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_ADC_Start_IT+0x168>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f023 0206 	bic.w	r2, r3, #6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e62:	e002      	b.n	8004e6a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f06f 0202 	mvn.w	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0220 	orr.w	r2, r2, #32
 8004e8a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004e96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004e9a:	d113      	bne.n	8004ec4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004ea0:	4a11      	ldr	r2, [pc, #68]	; (8004ee8 <HAL_ADC_Start_IT+0x164>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d105      	bne.n	8004eb2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <HAL_ADC_Start_IT+0x168>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d108      	bne.n	8004ec4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	e00c      	b.n	8004ede <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	e003      	b.n	8004ede <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40012800 	.word	0x40012800
 8004eec:	40012400 	.word	0x40012400

08004ef0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_Stop_IT+0x1a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e022      	b.n	8004f50 <HAL_ADC_Stop_IT+0x60>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa46 	bl	80053a4 <ADC_ConversionStop_Disable>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d111      	bne.n	8004f46 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0220 	bic.w	r2, r2, #32
 8004f30:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f3a:	f023 0301 	bic.w	r3, r3, #1
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d03e      	beq.n	8005010 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d039      	beq.n	8005010 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004fbe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004fc2:	d11d      	bne.n	8005000 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d119      	bne.n	8005000 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0220 	bic.w	r2, r2, #32
 8004fda:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f043 0201 	orr.w	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fd fd5f 	bl	8002ac4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0212 	mvn.w	r2, #18
 800500e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d04d      	beq.n	80050b6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d048      	beq.n	80050b6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005046:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800504a:	d012      	beq.n	8005072 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005056:	2b00      	cmp	r3, #0
 8005058:	d125      	bne.n	80050a6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005064:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005068:	d11d      	bne.n	80050a6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800506e:	2b00      	cmp	r3, #0
 8005070:	d119      	bne.n	80050a6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005080:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d105      	bne.n	80050a6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9bd 	bl	8005426 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 020c 	mvn.w	r2, #12
 80050b4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f809 	bl	80050ee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0201 	mvn.w	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x20>
 800511c:	2302      	movs	r3, #2
 800511e:	e0dc      	b.n	80052da <HAL_ADC_ConfigChannel+0x1da>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b06      	cmp	r3, #6
 800512e:	d81c      	bhi.n	800516a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	3b05      	subs	r3, #5
 8005142:	221f      	movs	r2, #31
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	43db      	mvns	r3, r3
 800514a:	4019      	ands	r1, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	3b05      	subs	r3, #5
 800515c:	fa00 f203 	lsl.w	r2, r0, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	635a      	str	r2, [r3, #52]	; 0x34
 8005168:	e03c      	b.n	80051e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d81c      	bhi.n	80051ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	3b23      	subs	r3, #35	; 0x23
 8005184:	221f      	movs	r2, #31
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	4019      	ands	r1, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b23      	subs	r3, #35	; 0x23
 800519e:	fa00 f203 	lsl.w	r2, r0, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
 80051aa:	e01b      	b.n	80051e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	3b41      	subs	r3, #65	; 0x41
 80051be:	221f      	movs	r2, #31
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	4019      	ands	r1, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	3b41      	subs	r3, #65	; 0x41
 80051d8:	fa00 f203 	lsl.w	r2, r0, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d91c      	bls.n	8005226 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	3b1e      	subs	r3, #30
 80051fe:	2207      	movs	r2, #7
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	4019      	ands	r1, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6898      	ldr	r0, [r3, #8]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	3b1e      	subs	r3, #30
 8005218:	fa00 f203 	lsl.w	r2, r0, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	e019      	b.n	800525a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6919      	ldr	r1, [r3, #16]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	2207      	movs	r2, #7
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	4019      	ands	r1, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6898      	ldr	r0, [r3, #8]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	fa00 f203 	lsl.w	r2, r0, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b10      	cmp	r3, #16
 8005260:	d003      	beq.n	800526a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005266:	2b11      	cmp	r3, #17
 8005268:	d132      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d125      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d126      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005290:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b10      	cmp	r3, #16
 8005298:	d11a      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a13      	ldr	r2, [pc, #76]	; (80052ec <HAL_ADC_ConfigChannel+0x1ec>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	0c9a      	lsrs	r2, r3, #18
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052b0:	e002      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f9      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x1b2>
 80052be:	e007      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f043 0220 	orr.w	r2, r3, #32
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	40012400 	.word	0x40012400
 80052e8:	20000004 	.word	0x20000004
 80052ec:	431bde83 	.word	0x431bde83

080052f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d040      	beq.n	8005390 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <ADC_Enable+0xac>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <ADC_Enable+0xb0>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	0c9b      	lsrs	r3, r3, #18
 800532a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800532c:	e002      	b.n	8005334 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3b01      	subs	r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f9      	bne.n	800532e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800533a:	f7ff fc01 	bl	8004b40 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005340:	e01f      	b.n	8005382 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005342:	f7ff fbfd 	bl	8004b40 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d918      	bls.n	8005382 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d011      	beq.n	8005382 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f043 0210 	orr.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e007      	b.n	8005392 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d1d8      	bne.n	8005342 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000004 	.word	0x20000004
 80053a0:	431bde83 	.word	0x431bde83

080053a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d12e      	bne.n	800541c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053ce:	f7ff fbb7 	bl	8004b40 <HAL_GetTick>
 80053d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053d4:	e01b      	b.n	800540e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053d6:	f7ff fbb3 	bl	8004b40 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d914      	bls.n	800540e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10d      	bne.n	800540e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f043 0201 	orr.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e007      	b.n	800541e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d0dc      	beq.n	80053d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005448:	4b0c      	ldr	r3, [pc, #48]	; (800547c <__NVIC_SetPriorityGrouping+0x44>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800546a:	4a04      	ldr	r2, [pc, #16]	; (800547c <__NVIC_SetPriorityGrouping+0x44>)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	60d3      	str	r3, [r2, #12]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <__NVIC_GetPriorityGrouping+0x18>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	f003 0307 	and.w	r3, r3, #7
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	e000ed00 	.word	0xe000ed00

0800549c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	db0b      	blt.n	80054c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	f003 021f 	and.w	r2, r3, #31
 80054b4:	4906      	ldr	r1, [pc, #24]	; (80054d0 <__NVIC_EnableIRQ+0x34>)
 80054b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2001      	movs	r0, #1
 80054be:	fa00 f202 	lsl.w	r2, r0, r2
 80054c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	; (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
         );
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	; 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800559c:	d301      	bcc.n	80055a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800559e:	2301      	movs	r3, #1
 80055a0:	e00f      	b.n	80055c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <SysTick_Config+0x40>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055aa:	210f      	movs	r1, #15
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	f7ff ff90 	bl	80054d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <SysTick_Config+0x40>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <SysTick_Config+0x40>)
 80055bc:	2207      	movs	r2, #7
 80055be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000e010 	.word	0xe000e010

080055d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff2d 	bl	8005438 <__NVIC_SetPriorityGrouping>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055f8:	f7ff ff42 	bl	8005480 <__NVIC_GetPriorityGrouping>
 80055fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	6978      	ldr	r0, [r7, #20]
 8005604:	f7ff ff90 	bl	8005528 <NVIC_EncodePriority>
 8005608:	4602      	mov	r2, r0
 800560a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff5f 	bl	80054d4 <__NVIC_SetPriority>
}
 8005616:	bf00      	nop
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	4603      	mov	r3, r0
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ff35 	bl	800549c <__NVIC_EnableIRQ>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ffa2 	bl	800558c <SysTick_Config>
 8005648:	4603      	mov	r3, r0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d005      	beq.n	8005678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2204      	movs	r2, #4
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e051      	b.n	800571c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 020e 	bic.w	r2, r2, #14
 8005686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a22      	ldr	r2, [pc, #136]	; (8005728 <HAL_DMA_Abort_IT+0xd4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d029      	beq.n	80056f6 <HAL_DMA_Abort_IT+0xa2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a21      	ldr	r2, [pc, #132]	; (800572c <HAL_DMA_Abort_IT+0xd8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d022      	beq.n	80056f2 <HAL_DMA_Abort_IT+0x9e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <HAL_DMA_Abort_IT+0xdc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01a      	beq.n	80056ec <HAL_DMA_Abort_IT+0x98>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <HAL_DMA_Abort_IT+0xe0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d012      	beq.n	80056e6 <HAL_DMA_Abort_IT+0x92>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_DMA_Abort_IT+0xe4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00a      	beq.n	80056e0 <HAL_DMA_Abort_IT+0x8c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_DMA_Abort_IT+0xe8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d102      	bne.n	80056da <HAL_DMA_Abort_IT+0x86>
 80056d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056d8:	e00e      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056de:	e00b      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056e4:	e008      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ea:	e005      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056f0:	e002      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056f2:	2310      	movs	r3, #16
 80056f4:	e000      	b.n	80056f8 <HAL_DMA_Abort_IT+0xa4>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <HAL_DMA_Abort_IT+0xec>)
 80056fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
    } 
  }
  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40020008 	.word	0x40020008
 800572c:	4002001c 	.word	0x4002001c
 8005730:	40020030 	.word	0x40020030
 8005734:	40020044 	.word	0x40020044
 8005738:	40020058 	.word	0x40020058
 800573c:	4002006c 	.word	0x4002006c
 8005740:	40020000 	.word	0x40020000

08005744 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005752:	b2db      	uxtb	r3, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
	...

08005760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005760:	b480      	push	{r7}
 8005762:	b08b      	sub	sp, #44	; 0x2c
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800576e:	2300      	movs	r3, #0
 8005770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005772:	e169      	b.n	8005a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005774:	2201      	movs	r2, #1
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	429a      	cmp	r2, r3
 800578e:	f040 8158 	bne.w	8005a42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a9a      	ldr	r2, [pc, #616]	; (8005a00 <HAL_GPIO_Init+0x2a0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d05e      	beq.n	800585a <HAL_GPIO_Init+0xfa>
 800579c:	4a98      	ldr	r2, [pc, #608]	; (8005a00 <HAL_GPIO_Init+0x2a0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d875      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057a2:	4a98      	ldr	r2, [pc, #608]	; (8005a04 <HAL_GPIO_Init+0x2a4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d058      	beq.n	800585a <HAL_GPIO_Init+0xfa>
 80057a8:	4a96      	ldr	r2, [pc, #600]	; (8005a04 <HAL_GPIO_Init+0x2a4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d86f      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057ae:	4a96      	ldr	r2, [pc, #600]	; (8005a08 <HAL_GPIO_Init+0x2a8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d052      	beq.n	800585a <HAL_GPIO_Init+0xfa>
 80057b4:	4a94      	ldr	r2, [pc, #592]	; (8005a08 <HAL_GPIO_Init+0x2a8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d869      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057ba:	4a94      	ldr	r2, [pc, #592]	; (8005a0c <HAL_GPIO_Init+0x2ac>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d04c      	beq.n	800585a <HAL_GPIO_Init+0xfa>
 80057c0:	4a92      	ldr	r2, [pc, #584]	; (8005a0c <HAL_GPIO_Init+0x2ac>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d863      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057c6:	4a92      	ldr	r2, [pc, #584]	; (8005a10 <HAL_GPIO_Init+0x2b0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d046      	beq.n	800585a <HAL_GPIO_Init+0xfa>
 80057cc:	4a90      	ldr	r2, [pc, #576]	; (8005a10 <HAL_GPIO_Init+0x2b0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d85d      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057d2:	2b12      	cmp	r3, #18
 80057d4:	d82a      	bhi.n	800582c <HAL_GPIO_Init+0xcc>
 80057d6:	2b12      	cmp	r3, #18
 80057d8:	d859      	bhi.n	800588e <HAL_GPIO_Init+0x12e>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_GPIO_Init+0x80>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	0800585b 	.word	0x0800585b
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005847 	.word	0x08005847
 80057ec:	08005889 	.word	0x08005889
 80057f0:	0800588f 	.word	0x0800588f
 80057f4:	0800588f 	.word	0x0800588f
 80057f8:	0800588f 	.word	0x0800588f
 80057fc:	0800588f 	.word	0x0800588f
 8005800:	0800588f 	.word	0x0800588f
 8005804:	0800588f 	.word	0x0800588f
 8005808:	0800588f 	.word	0x0800588f
 800580c:	0800588f 	.word	0x0800588f
 8005810:	0800588f 	.word	0x0800588f
 8005814:	0800588f 	.word	0x0800588f
 8005818:	0800588f 	.word	0x0800588f
 800581c:	0800588f 	.word	0x0800588f
 8005820:	0800588f 	.word	0x0800588f
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005851 	.word	0x08005851
 800582c:	4a79      	ldr	r2, [pc, #484]	; (8005a14 <HAL_GPIO_Init+0x2b4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005832:	e02c      	b.n	800588e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	623b      	str	r3, [r7, #32]
          break;
 800583a:	e029      	b.n	8005890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	3304      	adds	r3, #4
 8005842:	623b      	str	r3, [r7, #32]
          break;
 8005844:	e024      	b.n	8005890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	3308      	adds	r3, #8
 800584c:	623b      	str	r3, [r7, #32]
          break;
 800584e:	e01f      	b.n	8005890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	330c      	adds	r3, #12
 8005856:	623b      	str	r3, [r7, #32]
          break;
 8005858:	e01a      	b.n	8005890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005862:	2304      	movs	r3, #4
 8005864:	623b      	str	r3, [r7, #32]
          break;
 8005866:	e013      	b.n	8005890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005870:	2308      	movs	r3, #8
 8005872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	611a      	str	r2, [r3, #16]
          break;
 800587a:	e009      	b.n	8005890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800587c:	2308      	movs	r3, #8
 800587e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	615a      	str	r2, [r3, #20]
          break;
 8005886:	e003      	b.n	8005890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005888:	2300      	movs	r3, #0
 800588a:	623b      	str	r3, [r7, #32]
          break;
 800588c:	e000      	b.n	8005890 <HAL_GPIO_Init+0x130>
          break;
 800588e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2bff      	cmp	r3, #255	; 0xff
 8005894:	d801      	bhi.n	800589a <HAL_GPIO_Init+0x13a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	e001      	b.n	800589e <HAL_GPIO_Init+0x13e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2bff      	cmp	r3, #255	; 0xff
 80058a4:	d802      	bhi.n	80058ac <HAL_GPIO_Init+0x14c>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	e002      	b.n	80058b2 <HAL_GPIO_Init+0x152>
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3b08      	subs	r3, #8
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	210f      	movs	r1, #15
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	401a      	ands	r2, r3
 80058c4:	6a39      	ldr	r1, [r7, #32]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	431a      	orrs	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80b1 	beq.w	8005a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80058e0:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <HAL_GPIO_Init+0x2b8>)
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	4a4c      	ldr	r2, [pc, #304]	; (8005a18 <HAL_GPIO_Init+0x2b8>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6193      	str	r3, [r2, #24]
 80058ec:	4b4a      	ldr	r3, [pc, #296]	; (8005a18 <HAL_GPIO_Init+0x2b8>)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80058f8:	4a48      	ldr	r2, [pc, #288]	; (8005a1c <HAL_GPIO_Init+0x2bc>)
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	089b      	lsrs	r3, r3, #2
 80058fe:	3302      	adds	r3, #2
 8005900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	220f      	movs	r2, #15
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a40      	ldr	r2, [pc, #256]	; (8005a20 <HAL_GPIO_Init+0x2c0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_GPIO_Init+0x1ec>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3f      	ldr	r2, [pc, #252]	; (8005a24 <HAL_GPIO_Init+0x2c4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00d      	beq.n	8005948 <HAL_GPIO_Init+0x1e8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a3e      	ldr	r2, [pc, #248]	; (8005a28 <HAL_GPIO_Init+0x2c8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <HAL_GPIO_Init+0x1e4>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3d      	ldr	r2, [pc, #244]	; (8005a2c <HAL_GPIO_Init+0x2cc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_GPIO_Init+0x1e0>
 800593c:	2303      	movs	r3, #3
 800593e:	e006      	b.n	800594e <HAL_GPIO_Init+0x1ee>
 8005940:	2304      	movs	r3, #4
 8005942:	e004      	b.n	800594e <HAL_GPIO_Init+0x1ee>
 8005944:	2302      	movs	r3, #2
 8005946:	e002      	b.n	800594e <HAL_GPIO_Init+0x1ee>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_GPIO_Init+0x1ee>
 800594c:	2300      	movs	r3, #0
 800594e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005950:	f002 0203 	and.w	r2, r2, #3
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	4093      	lsls	r3, r2
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800595e:	492f      	ldr	r1, [pc, #188]	; (8005a1c <HAL_GPIO_Init+0x2bc>)
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	089b      	lsrs	r3, r3, #2
 8005964:	3302      	adds	r3, #2
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005978:	4b2d      	ldr	r3, [pc, #180]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	492c      	ldr	r1, [pc, #176]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]
 8005984:	e006      	b.n	8005994 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	43db      	mvns	r3, r3
 800598e:	4928      	ldr	r1, [pc, #160]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 8005990:	4013      	ands	r3, r2
 8005992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80059a0:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	4922      	ldr	r1, [pc, #136]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60cb      	str	r3, [r1, #12]
 80059ac:	e006      	b.n	80059bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	491e      	ldr	r1, [pc, #120]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80059c8:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4918      	ldr	r1, [pc, #96]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
 80059d4:	e006      	b.n	80059e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80059d6:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	43db      	mvns	r3, r3
 80059de:	4914      	ldr	r1, [pc, #80]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d021      	beq.n	8005a34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	490e      	ldr	r1, [pc, #56]	; (8005a30 <HAL_GPIO_Init+0x2d0>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	600b      	str	r3, [r1, #0]
 80059fc:	e021      	b.n	8005a42 <HAL_GPIO_Init+0x2e2>
 80059fe:	bf00      	nop
 8005a00:	10320000 	.word	0x10320000
 8005a04:	10310000 	.word	0x10310000
 8005a08:	10220000 	.word	0x10220000
 8005a0c:	10210000 	.word	0x10210000
 8005a10:	10120000 	.word	0x10120000
 8005a14:	10110000 	.word	0x10110000
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40010800 	.word	0x40010800
 8005a24:	40010c00 	.word	0x40010c00
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	40011400 	.word	0x40011400
 8005a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_GPIO_Init+0x304>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	4909      	ldr	r1, [pc, #36]	; (8005a64 <HAL_GPIO_Init+0x304>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	3301      	adds	r3, #1
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f ae8e 	bne.w	8005774 <HAL_GPIO_Init+0x14>
  }
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	372c      	adds	r7, #44	; 0x2c
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	40010400 	.word	0x40010400

08005a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
 8005a74:	4613      	mov	r3, r2
 8005a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a78:	787b      	ldrb	r3, [r7, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a84:	e003      	b.n	8005a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a86:	887b      	ldrh	r3, [r7, #2]
 8005a88:	041a      	lsls	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	611a      	str	r2, [r3, #16]
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aae:	4a05      	ldr	r2, [pc, #20]	; (8005ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd f8ba 	bl	8002c30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005abc:	bf00      	nop
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e12b      	b.n	8005d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fe fcc2 	bl	8004478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	; 0x24
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f002 ffb6 	bl	8008a9c <HAL_RCC_GetPCLK1Freq>
 8005b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4a81      	ldr	r2, [pc, #516]	; (8005d3c <HAL_I2C_Init+0x274>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d807      	bhi.n	8005b4c <HAL_I2C_Init+0x84>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <HAL_I2C_Init+0x278>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf94      	ite	ls
 8005b44:	2301      	movls	r3, #1
 8005b46:	2300      	movhi	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e006      	b.n	8005b5a <HAL_I2C_Init+0x92>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a7d      	ldr	r2, [pc, #500]	; (8005d44 <HAL_I2C_Init+0x27c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bf94      	ite	ls
 8005b54:	2301      	movls	r3, #1
 8005b56:	2300      	movhi	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0e7      	b.n	8005d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4a78      	ldr	r2, [pc, #480]	; (8005d48 <HAL_I2C_Init+0x280>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	0c9b      	lsrs	r3, r3, #18
 8005b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4a6a      	ldr	r2, [pc, #424]	; (8005d3c <HAL_I2C_Init+0x274>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d802      	bhi.n	8005b9c <HAL_I2C_Init+0xd4>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	e009      	b.n	8005bb0 <HAL_I2C_Init+0xe8>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <HAL_I2C_Init+0x284>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	099b      	lsrs	r3, r3, #6
 8005bae:	3301      	adds	r3, #1
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	495c      	ldr	r1, [pc, #368]	; (8005d3c <HAL_I2C_Init+0x274>)
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	d819      	bhi.n	8005c04 <HAL_I2C_Init+0x13c>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1e59      	subs	r1, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005be4:	400b      	ands	r3, r1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_I2C_Init+0x138>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1e59      	subs	r1, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfe:	e051      	b.n	8005ca4 <HAL_I2C_Init+0x1dc>
 8005c00:	2304      	movs	r3, #4
 8005c02:	e04f      	b.n	8005ca4 <HAL_I2C_Init+0x1dc>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d111      	bne.n	8005c30 <HAL_I2C_Init+0x168>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e58      	subs	r0, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	440b      	add	r3, r1
 8005c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e012      	b.n	8005c56 <HAL_I2C_Init+0x18e>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1e58      	subs	r0, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	0099      	lsls	r1, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Init+0x196>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e022      	b.n	8005ca4 <HAL_I2C_Init+0x1dc>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10e      	bne.n	8005c84 <HAL_I2C_Init+0x1bc>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1e58      	subs	r0, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	440b      	add	r3, r1
 8005c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c78:	3301      	adds	r3, #1
 8005c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c82:	e00f      	b.n	8005ca4 <HAL_I2C_Init+0x1dc>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1e58      	subs	r0, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6859      	ldr	r1, [r3, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	0099      	lsls	r1, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	6809      	ldr	r1, [r1, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6911      	ldr	r1, [r2, #16]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	68d2      	ldr	r2, [r2, #12]
 8005cde:	4311      	orrs	r1, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	000186a0 	.word	0x000186a0
 8005d40:	001e847f 	.word	0x001e847f
 8005d44:	003d08ff 	.word	0x003d08ff
 8005d48:	431bde83 	.word	0x431bde83
 8005d4c:	10624dd3 	.word	0x10624dd3

08005d50 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d103      	bne.n	8005d6e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	611a      	str	r2, [r3, #16]
  }
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	817b      	strh	r3, [r7, #10]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	813b      	strh	r3, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d92:	f7fe fed5 	bl	8004b40 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	f040 80d9 	bne.w	8005f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	2319      	movs	r3, #25
 8005dac:	2201      	movs	r2, #1
 8005dae:	496d      	ldr	r1, [pc, #436]	; (8005f64 <HAL_I2C_Mem_Write+0x1ec>)
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f002 f819 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e0cc      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_I2C_Mem_Write+0x56>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e0c5      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d007      	beq.n	8005df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2221      	movs	r2, #33	; 0x21
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2240      	movs	r2, #64	; 0x40
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4a4d      	ldr	r2, [pc, #308]	; (8005f68 <HAL_I2C_Mem_Write+0x1f0>)
 8005e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e36:	88f8      	ldrh	r0, [r7, #6]
 8005e38:	893a      	ldrh	r2, [r7, #8]
 8005e3a:	8979      	ldrh	r1, [r7, #10]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	4603      	mov	r3, r0
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f001 fda8 	bl	800799c <I2C_RequestMemoryWrite>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d052      	beq.n	8005ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e081      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f002 f8de 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d107      	bne.n	8005e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e06b      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_I2C_Mem_Write+0x180>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d017      	beq.n	8005ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1aa      	bne.n	8005e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f002 f8d1 	bl	80080ac <I2C_WaitOnBTFFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d107      	bne.n	8005f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e016      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	00100002 	.word	0x00100002
 8005f68:	ffff0000 	.word	0xffff0000

08005f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	817b      	strh	r3, [r7, #10]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	813b      	strh	r3, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f8a:	f7fe fdd9 	bl	8004b40 <HAL_GetTick>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	f040 8244 	bne.w	8006426 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2319      	movs	r3, #25
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4982      	ldr	r1, [pc, #520]	; (80061b0 <HAL_I2C_Mem_Read+0x244>)
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f001 ff1d 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e237      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2C_Mem_Read+0x5a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e230      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d007      	beq.n	8005fec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2222      	movs	r2, #34	; 0x22
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a62      	ldr	r2, [pc, #392]	; (80061b4 <HAL_I2C_Mem_Read+0x248>)
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800602e:	88f8      	ldrh	r0, [r7, #6]
 8006030:	893a      	ldrh	r2, [r7, #8]
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4603      	mov	r3, r0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f001 fd42 	bl	8007ac8 <I2C_RequestMemoryRead>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e1ec      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e1c0      	b.n	8006400 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	2b01      	cmp	r3, #1
 8006084:	d11e      	bne.n	80060c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006096:	b672      	cpsid	i
}
 8006098:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80060c0:	b662      	cpsie	i
}
 80060c2:	e035      	b.n	8006130 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d11e      	bne.n	800610a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80060dc:	b672      	cpsid	i
}
 80060de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006106:	b662      	cpsie	i
}
 8006108:	e012      	b.n	8006130 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006118:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006130:	e166      	b.n	8006400 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	2b03      	cmp	r3, #3
 8006138:	f200 811f 	bhi.w	800637a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	2b01      	cmp	r3, #1
 8006142:	d123      	bne.n	800618c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f002 f829 	bl	80081a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e167      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800618a:	e139      	b.n	8006400 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006190:	2b02      	cmp	r3, #2
 8006192:	d152      	bne.n	800623a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	2200      	movs	r2, #0
 800619c:	4906      	ldr	r1, [pc, #24]	; (80061b8 <HAL_I2C_Mem_Read+0x24c>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 fe22 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e13c      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
 80061ae:	bf00      	nop
 80061b0:	00100002 	.word	0x00100002
 80061b4:	ffff0000 	.word	0xffff0000
 80061b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80061bc:	b672      	cpsid	i
}
 80061be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006202:	b662      	cpsie	i
}
 8006204:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006238:	e0e2      	b.n	8006400 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	497b      	ldr	r1, [pc, #492]	; (8006430 <HAL_I2C_Mem_Read+0x4c4>)
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f001 fdcf 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0e9      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006264:	b672      	cpsid	i
}
 8006266:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800629a:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_I2C_Mem_Read+0x4c8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	08db      	lsrs	r3, r3, #3
 80062a0:	4a65      	ldr	r2, [pc, #404]	; (8006438 <HAL_I2C_Mem_Read+0x4cc>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0a1a      	lsrs	r2, r3, #8
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00da      	lsls	r2, r3, #3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d118      	bne.n	80062f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80062e2:	b662      	cpsie	i
}
 80062e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e09a      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d1d9      	bne.n	80062b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006342:	b662      	cpsie	i
}
 8006344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006378:	e042      	b.n	8006400 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f001 ff0e 	bl	80081a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e04c      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d118      	bne.n	8006400 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	f47f ae94 	bne.w	8006132 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	00010004 	.word	0x00010004
 8006434:	20000004 	.word	0x20000004
 8006438:	14f8b589 	.word	0x14f8b589

0800643c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006464:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b10      	cmp	r3, #16
 800646a:	d003      	beq.n	8006474 <HAL_I2C_EV_IRQHandler+0x38>
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	f040 80b1 	bne.w	80065d6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10d      	bne.n	80064aa <HAL_I2C_EV_IRQHandler+0x6e>
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006494:	d003      	beq.n	800649e <HAL_I2C_EV_IRQHandler+0x62>
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_EV_IRQHandler+0x66>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x68>
 80064a2:	2300      	movs	r3, #0
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f000 8114 	beq.w	80066d2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x90>
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d006      	beq.n	80064cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fef9 	bl	80082b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fcb9 	bl	8006e3c <I2C_Master_SB>
 80064ca:	e083      	b.n	80065d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_I2C_EV_IRQHandler+0xac>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fd30 	bl	8006f46 <I2C_Master_ADD10>
 80064e6:	e075      	b.n	80065d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_I2C_EV_IRQHandler+0xc8>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fd4b 	bl	8006f98 <I2C_Master_ADDR>
 8006502:	e067      	b.n	80065d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d036      	beq.n	800657c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651c:	f000 80db 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_I2C_EV_IRQHandler+0x10a>
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_I2C_EV_IRQHandler+0x10a>
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f92d 	bl	800679e <I2C_MasterTransmit_TXE>
 8006544:	e046      	b.n	80065d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80c2 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80bc 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b21      	cmp	r3, #33	; 0x21
 8006562:	d103      	bne.n	800656c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9b6 	bl	80068d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800656a:	e0b4      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b40      	cmp	r3, #64	; 0x40
 8006570:	f040 80b1 	bne.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa24 	bl	80069c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800657a:	e0ac      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658a:	f000 80a4 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <HAL_I2C_EV_IRQHandler+0x178>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <HAL_I2C_EV_IRQHandler+0x178>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 faa0 	bl	8006af2 <I2C_MasterReceive_RXNE>
 80065b2:	e00f      	b.n	80065d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808b 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8085 	beq.w	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb4b 	bl	8006c68 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065d2:	e080      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80065d4:	e07f      	b.n	80066d6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e007      	b.n	80065f8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d011      	beq.n	8006626 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00c      	beq.n	8006626 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800661c:	69b9      	ldr	r1, [r7, #24]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ff11 	bl	8007446 <I2C_Slave_ADDR>
 8006624:	e05a      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_I2C_EV_IRQHandler+0x206>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 ff4c 	bl	80074d8 <I2C_Slave_STOPF>
 8006640:	e04c      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b21      	cmp	r3, #33	; 0x21
 8006646:	d002      	beq.n	800664e <HAL_I2C_EV_IRQHandler+0x212>
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	2b29      	cmp	r3, #41	; 0x29
 800664c:	d120      	bne.n	8006690 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00d      	beq.n	8006674 <HAL_I2C_EV_IRQHandler+0x238>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	2b00      	cmp	r3, #0
 8006660:	d008      	beq.n	8006674 <HAL_I2C_EV_IRQHandler+0x238>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fe2e 	bl	80072ce <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006672:	e032      	b.n	80066da <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d02d      	beq.n	80066da <HAL_I2C_EV_IRQHandler+0x29e>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	2b00      	cmp	r3, #0
 8006686:	d028      	beq.n	80066da <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fe5d 	bl	8007348 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800668e:	e024      	b.n	80066da <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00d      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x27a>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_I2C_EV_IRQHandler+0x27a>
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fe6a 	bl	8007388 <I2C_SlaveReceive_RXNE>
 80066b4:	e012      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fe9a 	bl	8007404 <I2C_SlaveReceive_BTF>
 80066d0:	e004      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80066d2:	bf00      	nop
 80066d4:	e002      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d6:	bf00      	nop
 80066d8:	e000      	b.n	80066dc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
 8006736:	4613      	mov	r3, r2
 8006738:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr

08006756 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d150      	bne.n	8006866 <I2C_MasterTransmit_TXE+0xc8>
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b21      	cmp	r3, #33	; 0x21
 80067c8:	d14d      	bne.n	8006866 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d01d      	beq.n	800680c <I2C_MasterTransmit_TXE+0x6e>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	d01a      	beq.n	800680c <I2C_MasterTransmit_TXE+0x6e>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067dc:	d016      	beq.n	800680c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2211      	movs	r2, #17
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff6c 	bl	80066e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800680a:	e060      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800681a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d107      	bne.n	8006856 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff81 	bl	8006756 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006854:	e03b      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ff3f 	bl	80066e2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006864:	e033      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	2b21      	cmp	r3, #33	; 0x21
 800686a:	d005      	beq.n	8006878 <I2C_MasterTransmit_TXE+0xda>
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d12d      	bne.n	80068ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b22      	cmp	r3, #34	; 0x22
 8006876:	d12a      	bne.n	80068ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d108      	bne.n	8006894 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006890:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006892:	e01c      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d103      	bne.n	80068a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f88e 	bl	80069c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80068a6:	e012      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068cc:	e7ff      	b.n	80068ce <I2C_MasterTransmit_TXE+0x130>
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b21      	cmp	r3, #33	; 0x21
 80068ee:	d164      	bne.n	80069ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d012      	beq.n	8006920 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800691e:	e04c      	b.n	80069ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b08      	cmp	r3, #8
 8006924:	d01d      	beq.n	8006962 <I2C_MasterTransmit_BTF+0x8c>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b20      	cmp	r3, #32
 800692a:	d01a      	beq.n	8006962 <I2C_MasterTransmit_BTF+0x8c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006932:	d016      	beq.n	8006962 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006942:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2211      	movs	r2, #17
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fec1 	bl	80066e2 <HAL_I2C_MasterTxCpltCallback>
}
 8006960:	e02b      	b.n	80069ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006970:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006980:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d107      	bne.n	80069ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff fed6 	bl	8006756 <HAL_I2C_MemTxCpltCallback>
}
 80069aa:	e006      	b.n	80069ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe94 	bl	80066e2 <HAL_I2C_MasterTxCpltCallback>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11d      	bne.n	8006a16 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d10b      	bne.n	80069fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80069f8:	e077      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	121b      	asrs	r3, r3, #8
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a14:	e069      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10b      	bne.n	8006a36 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a34:	e059      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d152      	bne.n	8006ae4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b22      	cmp	r3, #34	; 0x22
 8006a42:	d10d      	bne.n	8006a60 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a52:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006a5e:	e044      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d015      	beq.n	8006a96 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	2b21      	cmp	r3, #33	; 0x21
 8006a6e:	d112      	bne.n	8006a96 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006a94:	e029      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d124      	bne.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b21      	cmp	r3, #33	; 0x21
 8006aa4:	d121      	bne.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ab4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fe3a 	bl	8006756 <HAL_I2C_MemTxCpltCallback>
}
 8006ae2:	e002      	b.n	8006aea <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff f933 	bl	8005d50 <I2C_Flush_DR>
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b22      	cmp	r3, #34	; 0x22
 8006b04:	f040 80ac 	bne.w	8006c60 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d921      	bls.n	8006b5a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	f040 808c 	bne.w	8006c60 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b56:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006b58:	e082      	b.n	8006c60 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d075      	beq.n	8006c4e <I2C_MasterReceive_RXNE+0x15c>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d002      	beq.n	8006b6e <I2C_MasterReceive_RXNE+0x7c>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d16f      	bne.n	8006c4e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fae4 	bl	800813c <I2C_WaitOnSTOPRequestThroughIT>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d142      	bne.n	8006c00 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b88:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d10a      	bne.n	8006bea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fdc0 	bl	8006768 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006be8:	e03a      	b.n	8006c60 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2212      	movs	r2, #18
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fd7b 	bl	80066f4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006bfe:	e02f      	b.n	8006c60 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fd97 	bl	800677a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c4c:	e008      	b.n	8006c60 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5c:	605a      	str	r2, [r3, #4]
}
 8006c5e:	e7ff      	b.n	8006c60 <I2C_MasterReceive_RXNE+0x16e>
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d11b      	bne.n	8006cb8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006cb6:	e0bd      	b.n	8006e34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d129      	bne.n	8006d16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d00a      	beq.n	8006cee <I2C_MasterReceive_BTF+0x86>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d007      	beq.n	8006cee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d14:	e08e      	b.n	8006e34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d176      	bne.n	8006e0e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d002      	beq.n	8006d2c <I2C_MasterReceive_BTF+0xc4>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d108      	bne.n	8006d3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e019      	b.n	8006d72 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d002      	beq.n	8006d4a <I2C_MasterReceive_BTF+0xe2>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d108      	bne.n	8006d5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e00a      	b.n	8006d72 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d007      	beq.n	8006d72 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006dcc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d10a      	bne.n	8006df8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff fcb9 	bl	8006768 <HAL_I2C_MemRxCpltCallback>
}
 8006df6:	e01d      	b.n	8006e34 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2212      	movs	r2, #18
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fc74 	bl	80066f4 <HAL_I2C_MasterRxCpltCallback>
}
 8006e0c:	e012      	b.n	8006e34 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d117      	bne.n	8006e80 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e68:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006e6a:	e067      	b.n	8006f3c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	611a      	str	r2, [r3, #16]
}
 8006e7e:	e05d      	b.n	8006f3c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e88:	d133      	bne.n	8006ef2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b21      	cmp	r3, #33	; 0x21
 8006e94:	d109      	bne.n	8006eaa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ea6:	611a      	str	r2, [r3, #16]
 8006ea8:	e008      	b.n	8006ebc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <I2C_Master_SB+0x92>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d032      	beq.n	8006f3c <I2C_Master_SB+0x100>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02d      	beq.n	8006f3c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eee:	605a      	str	r2, [r3, #4]
}
 8006ef0:	e024      	b.n	8006f3c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10e      	bne.n	8006f18 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	11db      	asrs	r3, r3, #7
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0306 	and.w	r3, r3, #6
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f063 030f 	orn	r3, r3, #15
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	611a      	str	r2, [r3, #16]
}
 8006f16:	e011      	b.n	8006f3c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10d      	bne.n	8006f3c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	11db      	asrs	r3, r3, #7
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 0306 	and.w	r3, r3, #6
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f063 030e 	orn	r3, r3, #14
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	611a      	str	r2, [r3, #16]
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <I2C_Master_ADD10+0x26>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d108      	bne.n	8006f7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00c      	beq.n	8006f8e <I2C_Master_ADD10+0x48>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d007      	beq.n	8006f8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f8c:	605a      	str	r2, [r3, #4]
  }
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b091      	sub	sp, #68	; 0x44
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b22      	cmp	r3, #34	; 0x22
 8006fc0:	f040 8174 	bne.w	80072ac <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10f      	bne.n	8006fec <I2C_Master_ADDR+0x54>
 8006fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d10b      	bne.n	8006fec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	e16b      	b.n	80072c4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11d      	bne.n	8007030 <I2C_Master_ADDR+0x98>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ffc:	d118      	bne.n	8007030 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffe:	2300      	movs	r3, #0
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007022:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	651a      	str	r2, [r3, #80]	; 0x50
 800702e:	e149      	b.n	80072c4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d113      	bne.n	8007062 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800703a:	2300      	movs	r3, #0
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e120      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	f040 808a 	bne.w	8007182 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007074:	d137      	bne.n	80070e6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007084:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007094:	d113      	bne.n	80070be <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a6:	2300      	movs	r3, #0
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	e0f2      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070be:	2300      	movs	r3, #0
 80070c0:	623b      	str	r3, [r7, #32]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e0de      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d02e      	beq.n	800714a <I2C_Master_ADDR+0x1b2>
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d02b      	beq.n	800714a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80070f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f4:	2b12      	cmp	r3, #18
 80070f6:	d102      	bne.n	80070fe <I2C_Master_ADDR+0x166>
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d125      	bne.n	800714a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	2b04      	cmp	r3, #4
 8007102:	d00e      	beq.n	8007122 <I2C_Master_ADDR+0x18a>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	2b02      	cmp	r3, #2
 8007108:	d00b      	beq.n	8007122 <I2C_Master_ADDR+0x18a>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b10      	cmp	r3, #16
 800710e:	d008      	beq.n	8007122 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e007      	b.n	8007132 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007130:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	61fb      	str	r3, [r7, #28]
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	e0ac      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007158:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e090      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d158      	bne.n	800723e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	2b04      	cmp	r3, #4
 8007190:	d021      	beq.n	80071d6 <I2C_Master_ADDR+0x23e>
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2b02      	cmp	r3, #2
 8007196:	d01e      	beq.n	80071d6 <I2C_Master_ADDR+0x23e>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	2b10      	cmp	r3, #16
 800719c:	d01b      	beq.n	80071d6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e012      	b.n	80071fc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d14b      	bne.n	80072a4 <I2C_Master_ADDR+0x30c>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007212:	d00b      	beq.n	800722c <I2C_Master_ADDR+0x294>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b01      	cmp	r3, #1
 8007218:	d008      	beq.n	800722c <I2C_Master_ADDR+0x294>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	2b08      	cmp	r3, #8
 800721e:	d005      	beq.n	800722c <I2C_Master_ADDR+0x294>
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b10      	cmp	r3, #16
 8007224:	d002      	beq.n	800722c <I2C_Master_ADDR+0x294>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2b20      	cmp	r3, #32
 800722a:	d13b      	bne.n	80072a4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	e032      	b.n	80072a4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800725c:	d117      	bne.n	800728e <I2C_Master_ADDR+0x2f6>
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007264:	d00b      	beq.n	800727e <I2C_Master_ADDR+0x2e6>
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	2b01      	cmp	r3, #1
 800726a:	d008      	beq.n	800727e <I2C_Master_ADDR+0x2e6>
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	2b08      	cmp	r3, #8
 8007270:	d005      	beq.n	800727e <I2C_Master_ADDR+0x2e6>
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b10      	cmp	r3, #16
 8007276:	d002      	beq.n	800727e <I2C_Master_ADDR+0x2e6>
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	2b20      	cmp	r3, #32
 800727c:	d107      	bne.n	800728e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800728c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80072aa:	e00b      	b.n	80072c4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ac:	2300      	movs	r3, #0
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	68bb      	ldr	r3, [r7, #8]
}
 80072c2:	e7ff      	b.n	80072c4 <I2C_Master_ADDR+0x32c>
 80072c4:	bf00      	nop
 80072c6:	3744      	adds	r7, #68	; 0x44
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d02b      	beq.n	8007340 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d114      	bne.n	8007340 <I2C_SlaveTransmit_TXE+0x72>
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b29      	cmp	r3, #41	; 0x29
 800731a:	d111      	bne.n	8007340 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2221      	movs	r2, #33	; 0x21
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2228      	movs	r2, #40	; 0x28
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff f9e3 	bl	8006706 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d011      	beq.n	800737e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007396:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d02c      	beq.n	80073fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d114      	bne.n	80073fc <I2C_SlaveReceive_RXNE+0x74>
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b2a      	cmp	r3, #42	; 0x2a
 80073d6:	d111      	bne.n	80073fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2222      	movs	r2, #34	; 0x22
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2228      	movs	r2, #40	; 0x28
 80073f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff f98e 	bl	8006718 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d012      	beq.n	800743c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007460:	2b28      	cmp	r3, #40	; 0x28
 8007462:	d125      	bne.n	80074b0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007472:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	81bb      	strh	r3, [r7, #12]
 8007492:	e002      	b.n	800749a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80074a2:	89ba      	ldrh	r2, [r7, #12]
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff f93e 	bl	800672a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80074ae:	e00e      	b.n	80074ce <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b0:	2300      	movs	r3, #0
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80074f8:	2300      	movs	r3, #0
 80074fa:	60bb      	str	r3, [r7, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	60bb      	str	r3, [r7, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007524:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d172      	bne.n	800761c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b22      	cmp	r3, #34	; 0x22
 800753a:	d002      	beq.n	8007542 <I2C_Slave_STOPF+0x6a>
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b2a      	cmp	r3, #42	; 0x2a
 8007540:	d135      	bne.n	80075ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f043 0204 	orr.w	r2, r3, #4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007574:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe f8e2 	bl	8005744 <HAL_DMA_GetState>
 8007580:	4603      	mov	r3, r0
 8007582:	2b01      	cmp	r3, #1
 8007584:	d049      	beq.n	800761a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	4a69      	ldr	r2, [pc, #420]	; (8007730 <I2C_Slave_STOPF+0x258>)
 800758c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f85e 	bl	8005654 <HAL_DMA_Abort_IT>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d03d      	beq.n	800761a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075ac:	e035      	b.n	800761a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f043 0204 	orr.w	r2, r3, #4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe f8ac 	bl	8005744 <HAL_DMA_GetState>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d014      	beq.n	800761c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	4a4e      	ldr	r2, [pc, #312]	; (8007730 <I2C_Slave_STOPF+0x258>)
 80075f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe f828 	bl	8005654 <HAL_DMA_Abort_IT>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	e000      	b.n	800761c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800761a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d03e      	beq.n	80076a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b04      	cmp	r3, #4
 8007632:	d112      	bne.n	800765a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d112      	bne.n	800768e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	f043 0204 	orr.w	r2, r3, #4
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f843 	bl	8007738 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80076b2:	e039      	b.n	8007728 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b2a      	cmp	r3, #42	; 0x2a
 80076b8:	d109      	bne.n	80076ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2228      	movs	r2, #40	; 0x28
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff f825 	bl	8006718 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b28      	cmp	r3, #40	; 0x28
 80076d8:	d111      	bne.n	80076fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a15      	ldr	r2, [pc, #84]	; (8007734 <I2C_Slave_STOPF+0x25c>)
 80076de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff f824 	bl	8006744 <HAL_I2C_ListenCpltCallback>
}
 80076fc:	e014      	b.n	8007728 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	2b22      	cmp	r3, #34	; 0x22
 8007704:	d002      	beq.n	800770c <I2C_Slave_STOPF+0x234>
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b22      	cmp	r3, #34	; 0x22
 800770a:	d10d      	bne.n	8007728 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fe fff8 	bl	8006718 <HAL_I2C_SlaveRxCpltCallback>
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	08007c99 	.word	0x08007c99
 8007734:	ffff0000 	.word	0xffff0000

08007738 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007746:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800774e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b10      	cmp	r3, #16
 8007754:	d002      	beq.n	800775c <I2C_ITError+0x24>
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d10a      	bne.n	8007772 <I2C_ITError+0x3a>
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b22      	cmp	r3, #34	; 0x22
 8007760:	d107      	bne.n	8007772 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007770:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007778:	2b28      	cmp	r3, #40	; 0x28
 800777a:	d107      	bne.n	800778c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2228      	movs	r2, #40	; 0x28
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800778a:	e015      	b.n	80077b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	d00a      	beq.n	80077b2 <I2C_ITError+0x7a>
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	2b60      	cmp	r3, #96	; 0x60
 80077a0:	d007      	beq.n	80077b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c6:	d162      	bne.n	800788e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d020      	beq.n	8007828 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	4a6a      	ldr	r2, [pc, #424]	; (8007994 <I2C_ITError+0x25c>)
 80077ec:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd ff2e 	bl	8005654 <HAL_DMA_Abort_IT>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8089 	beq.w	8007912 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007822:	4610      	mov	r0, r2
 8007824:	4798      	blx	r3
 8007826:	e074      	b.n	8007912 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	4a59      	ldr	r2, [pc, #356]	; (8007994 <I2C_ITError+0x25c>)
 800782e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd ff0d 	bl	8005654 <HAL_DMA_Abort_IT>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d068      	beq.n	8007912 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d10b      	bne.n	8007866 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	e041      	b.n	8007912 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b60      	cmp	r3, #96	; 0x60
 8007898:	d125      	bne.n	80078e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d10b      	bne.n	80078ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe ff54 	bl	800678c <HAL_I2C_AbortCpltCallback>
 80078e4:	e015      	b.n	8007912 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d10b      	bne.n	800790c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fe ff34 	bl	800677a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10e      	bne.n	8007940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007956:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b04      	cmp	r3, #4
 8007962:	d113      	bne.n	800798c <I2C_ITError+0x254>
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b28      	cmp	r3, #40	; 0x28
 8007968:	d110      	bne.n	800798c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a0a      	ldr	r2, [pc, #40]	; (8007998 <I2C_ITError+0x260>)
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fe fedc 	bl	8006744 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08007c99 	.word	0x08007c99
 8007998:	ffff0000 	.word	0xffff0000

0800799c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	817b      	strh	r3, [r7, #10]
 80079ae:	460b      	mov	r3, r1
 80079b0:	813b      	strh	r3, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fa08 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00d      	beq.n	80079fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ec:	d103      	bne.n	80079f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e05f      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079fa:	897b      	ldrh	r3, [r7, #10]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	492d      	ldr	r1, [pc, #180]	; (8007ac4 <I2C_RequestMemoryWrite+0x128>)
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 fa63 	bl	8007edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e04c      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a20:	2300      	movs	r3, #0
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a38:	6a39      	ldr	r1, [r7, #32]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 faee 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d107      	bne.n	8007a5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e02b      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	611a      	str	r2, [r3, #16]
 8007a72:	e021      	b.n	8007ab8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a74:	893b      	ldrh	r3, [r7, #8]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a84:	6a39      	ldr	r1, [r7, #32]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fac8 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00d      	beq.n	8007aae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d107      	bne.n	8007aaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e005      	b.n	8007aba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aae:	893b      	ldrh	r3, [r7, #8]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	00010002 	.word	0x00010002

08007ac8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	817b      	strh	r3, [r7, #10]
 8007ada:	460b      	mov	r3, r1
 8007adc:	813b      	strh	r3, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f96a 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b28:	d103      	bne.n	8007b32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e0aa      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b36:	897b      	ldrh	r3, [r7, #10]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	4952      	ldr	r1, [pc, #328]	; (8007c94 <I2C_RequestMemoryRead+0x1cc>)
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f9c5 	bl	8007edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e097      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b74:	6a39      	ldr	r1, [r7, #32]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fa50 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d107      	bne.n	8007b9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e076      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d105      	bne.n	8007bb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	611a      	str	r2, [r3, #16]
 8007bae:	e021      	b.n	8007bf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc0:	6a39      	ldr	r1, [r7, #32]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fa2a 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d107      	bne.n	8007be6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e050      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bea:	893b      	ldrh	r3, [r7, #8]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	6a39      	ldr	r1, [r7, #32]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fa0f 	bl	800801c <I2C_WaitOnTXEFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00d      	beq.n	8007c20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d107      	bne.n	8007c1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e035      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f8d3 	bl	8007de8 <I2C_WaitOnFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c56:	d103      	bne.n	8007c60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e013      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c64:	897b      	ldrh	r3, [r7, #10]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	4906      	ldr	r1, [pc, #24]	; (8007c94 <I2C_RequestMemoryRead+0x1cc>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f92e 	bl	8007edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	00010002 	.word	0x00010002

08007c98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007cb2:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <I2C_DMAAbort+0x148>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	4a4a      	ldr	r2, [pc, #296]	; (8007de4 <I2C_DMAAbort+0x14c>)
 8007cba:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbe:	0a1a      	lsrs	r2, r3, #8
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00da      	lsls	r2, r3, #3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f043 0220 	orr.w	r2, r3, #32
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007cde:	e00a      	b.n	8007cf6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf4:	d0ea      	beq.n	8007ccc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	2200      	movs	r2, #0
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	2200      	movs	r2, #0
 8007d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	2200      	movs	r2, #0
 8007d3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	2200      	movs	r2, #0
 8007d4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b60      	cmp	r3, #96	; 0x60
 8007d66:	d10e      	bne.n	8007d86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d7e:	6978      	ldr	r0, [r7, #20]
 8007d80:	f7fe fd04 	bl	800678c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d84:	e027      	b.n	8007dd6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d86:	7cfb      	ldrb	r3, [r7, #19]
 8007d88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d8c:	2b28      	cmp	r3, #40	; 0x28
 8007d8e:	d117      	bne.n	8007dc0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2228      	movs	r2, #40	; 0x28
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dbe:	e007      	b.n	8007dd0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f7fe fcd2 	bl	800677a <HAL_I2C_ErrorCallback>
}
 8007dd6:	bf00      	nop
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000004 	.word	0x20000004
 8007de4:	14f8b589 	.word	0x14f8b589

08007de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007df8:	e048      	b.n	8007e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d044      	beq.n	8007e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e02:	f7fc fe9d 	bl	8004b40 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d302      	bcc.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d139      	bne.n	8007e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d10d      	bne.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	43da      	mvns	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bf0c      	ite	eq
 8007e34:	2301      	moveq	r3, #1
 8007e36:	2300      	movne	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	e00c      	b.n	8007e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	43da      	mvns	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d116      	bne.n	8007e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e023      	b.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	0c1b      	lsrs	r3, r3, #16
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d10d      	bne.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	43da      	mvns	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	e00c      	b.n	8007ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	43da      	mvns	r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d093      	beq.n	8007dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007eea:	e071      	b.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efa:	d123      	bne.n	8007f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	f043 0204 	orr.w	r2, r3, #4
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e067      	b.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d041      	beq.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4c:	f7fc fdf8 	bl	8004b40 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d302      	bcc.n	8007f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d136      	bne.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	0c1b      	lsrs	r3, r3, #16
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10c      	bne.n	8007f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	43da      	mvns	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4013      	ands	r3, r2
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bf14      	ite	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	2300      	moveq	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	e00b      	b.n	8007f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	43da      	mvns	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4013      	ands	r3, r2
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d016      	beq.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	f043 0220 	orr.w	r2, r3, #32
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e021      	b.n	8008014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d10c      	bne.n	8007ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	43da      	mvns	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	e00b      	b.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	43da      	mvns	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4013      	ands	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	bf14      	ite	ne
 8008006:	2301      	movne	r3, #1
 8008008:	2300      	moveq	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f af6d 	bne.w	8007eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008028:	e034      	b.n	8008094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 f915 	bl	800825a <I2C_IsAcknowledgeFailed>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e034      	b.n	80080a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d028      	beq.n	8008094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008042:	f7fc fd7d 	bl	8004b40 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	429a      	cmp	r2, r3
 8008050:	d302      	bcc.n	8008058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d11d      	bne.n	8008094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d016      	beq.n	8008094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	f043 0220 	orr.w	r2, r3, #32
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e007      	b.n	80080a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d1c3      	bne.n	800802a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080b8:	e034      	b.n	8008124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f8cd 	bl	800825a <I2C_IsAcknowledgeFailed>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e034      	b.n	8008134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d028      	beq.n	8008124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d2:	f7fc fd35 	bl	8004b40 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11d      	bne.n	8008124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d016      	beq.n	8008124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e007      	b.n	8008134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b04      	cmp	r3, #4
 8008130:	d1c3      	bne.n	80080ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008148:	4b13      	ldr	r3, [pc, #76]	; (8008198 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	08db      	lsrs	r3, r3, #3
 800814e:	4a13      	ldr	r2, [pc, #76]	; (800819c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008150:	fba2 2303 	umull	r2, r3, r2, r3
 8008154:	0a1a      	lsrs	r2, r3, #8
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3b01      	subs	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d107      	bne.n	800817a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e008      	b.n	800818c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008188:	d0e9      	beq.n	800815e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000004 	.word	0x20000004
 800819c:	14f8b589 	.word	0x14f8b589

080081a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081ac:	e049      	b.n	8008242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d119      	bne.n	80081f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0210 	mvn.w	r2, #16
 80081c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e030      	b.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f0:	f7fc fca6 	bl	8004b40 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d302      	bcc.n	8008206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d11d      	bne.n	8008242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d016      	beq.n	8008242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e007      	b.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b40      	cmp	r3, #64	; 0x40
 800824e:	d1ae      	bne.n	80081ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008270:	d11b      	bne.n	80082aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800827a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0204 	orr.w	r2, r3, #4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr

080082b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80082c6:	d103      	bne.n	80082d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80082ce:	e007      	b.n	80082e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80082d8:	d102      	bne.n	80082e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2208      	movs	r2, #8
 80082de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
	...

080082ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80082f0:	4b03      	ldr	r3, [pc, #12]	; (8008300 <HAL_PWR_EnableBkUpAccess+0x14>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	420e0020 	.word	0x420e0020

08008304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e272      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8087 	beq.w	8008432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008324:	4b92      	ldr	r3, [pc, #584]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f003 030c 	and.w	r3, r3, #12
 800832c:	2b04      	cmp	r3, #4
 800832e:	d00c      	beq.n	800834a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008330:	4b8f      	ldr	r3, [pc, #572]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f003 030c 	and.w	r3, r3, #12
 8008338:	2b08      	cmp	r3, #8
 800833a:	d112      	bne.n	8008362 <HAL_RCC_OscConfig+0x5e>
 800833c:	4b8c      	ldr	r3, [pc, #560]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d10b      	bne.n	8008362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800834a:	4b89      	ldr	r3, [pc, #548]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d06c      	beq.n	8008430 <HAL_RCC_OscConfig+0x12c>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d168      	bne.n	8008430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e24c      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836a:	d106      	bne.n	800837a <HAL_RCC_OscConfig+0x76>
 800836c:	4b80      	ldr	r3, [pc, #512]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7f      	ldr	r2, [pc, #508]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e02e      	b.n	80083d8 <HAL_RCC_OscConfig+0xd4>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10c      	bne.n	800839c <HAL_RCC_OscConfig+0x98>
 8008382:	4b7b      	ldr	r3, [pc, #492]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a7a      	ldr	r2, [pc, #488]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4b78      	ldr	r3, [pc, #480]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a77      	ldr	r2, [pc, #476]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e01d      	b.n	80083d8 <HAL_RCC_OscConfig+0xd4>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a4:	d10c      	bne.n	80083c0 <HAL_RCC_OscConfig+0xbc>
 80083a6:	4b72      	ldr	r3, [pc, #456]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a71      	ldr	r2, [pc, #452]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	4b6f      	ldr	r3, [pc, #444]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a6e      	ldr	r2, [pc, #440]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e00b      	b.n	80083d8 <HAL_RCC_OscConfig+0xd4>
 80083c0:	4b6b      	ldr	r3, [pc, #428]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a6a      	ldr	r2, [pc, #424]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	4b68      	ldr	r3, [pc, #416]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a67      	ldr	r2, [pc, #412]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d013      	beq.n	8008408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fc fbae 	bl	8004b40 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083e8:	f7fc fbaa 	bl	8004b40 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b64      	cmp	r3, #100	; 0x64
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e200      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	4b5d      	ldr	r3, [pc, #372]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f0      	beq.n	80083e8 <HAL_RCC_OscConfig+0xe4>
 8008406:	e014      	b.n	8008432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008408:	f7fc fb9a 	bl	8004b40 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008410:	f7fc fb96 	bl	8004b40 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b64      	cmp	r3, #100	; 0x64
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e1ec      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008422:	4b53      	ldr	r3, [pc, #332]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f0      	bne.n	8008410 <HAL_RCC_OscConfig+0x10c>
 800842e:	e000      	b.n	8008432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d063      	beq.n	8008506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800843e:	4b4c      	ldr	r3, [pc, #304]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f003 030c 	and.w	r3, r3, #12
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800844a:	4b49      	ldr	r3, [pc, #292]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f003 030c 	and.w	r3, r3, #12
 8008452:	2b08      	cmp	r3, #8
 8008454:	d11c      	bne.n	8008490 <HAL_RCC_OscConfig+0x18c>
 8008456:	4b46      	ldr	r3, [pc, #280]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d116      	bne.n	8008490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008462:	4b43      	ldr	r3, [pc, #268]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_RCC_OscConfig+0x176>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d001      	beq.n	800847a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e1c0      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847a:	4b3d      	ldr	r3, [pc, #244]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	4939      	ldr	r1, [pc, #228]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800848a:	4313      	orrs	r3, r2
 800848c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800848e:	e03a      	b.n	8008506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d020      	beq.n	80084da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <HAL_RCC_OscConfig+0x270>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800849e:	f7fc fb4f 	bl	8004b40 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a6:	f7fc fb4b 	bl	8004b40 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e1a1      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b8:	4b2d      	ldr	r3, [pc, #180]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c4:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4927      	ldr	r1, [pc, #156]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]
 80084d8:	e015      	b.n	8008506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <HAL_RCC_OscConfig+0x270>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e0:	f7fc fb2e 	bl	8004b40 <HAL_GetTick>
 80084e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e8:	f7fc fb2a 	bl	8004b40 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e180      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084fa:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d03a      	beq.n	8008588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d019      	beq.n	800854e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800851a:	4b17      	ldr	r3, [pc, #92]	; (8008578 <HAL_RCC_OscConfig+0x274>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008520:	f7fc fb0e 	bl	8004b40 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008528:	f7fc fb0a 	bl	8004b40 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e160      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <HAL_RCC_OscConfig+0x26c>)
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f0      	beq.n	8008528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008546:	2001      	movs	r0, #1
 8008548:	f000 fad0 	bl	8008aec <RCC_Delay>
 800854c:	e01c      	b.n	8008588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800854e:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <HAL_RCC_OscConfig+0x274>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008554:	f7fc faf4 	bl	8004b40 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800855a:	e00f      	b.n	800857c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800855c:	f7fc faf0 	bl	8004b40 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d908      	bls.n	800857c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e146      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
 800856e:	bf00      	nop
 8008570:	40021000 	.word	0x40021000
 8008574:	42420000 	.word	0x42420000
 8008578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800857c:	4b92      	ldr	r3, [pc, #584]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e9      	bne.n	800855c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 80a6 	beq.w	80086e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859a:	4b8b      	ldr	r3, [pc, #556]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085a6:	4b88      	ldr	r3, [pc, #544]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4a87      	ldr	r2, [pc, #540]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80085ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b0:	61d3      	str	r3, [r2, #28]
 80085b2:	4b85      	ldr	r3, [pc, #532]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ba:	60bb      	str	r3, [r7, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c2:	4b82      	ldr	r3, [pc, #520]	; (80087cc <HAL_RCC_OscConfig+0x4c8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d118      	bne.n	8008600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085ce:	4b7f      	ldr	r3, [pc, #508]	; (80087cc <HAL_RCC_OscConfig+0x4c8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a7e      	ldr	r2, [pc, #504]	; (80087cc <HAL_RCC_OscConfig+0x4c8>)
 80085d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085da:	f7fc fab1 	bl	8004b40 <HAL_GetTick>
 80085de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e0:	e008      	b.n	80085f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e2:	f7fc faad 	bl	8004b40 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b64      	cmp	r3, #100	; 0x64
 80085ee:	d901      	bls.n	80085f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e103      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085f4:	4b75      	ldr	r3, [pc, #468]	; (80087cc <HAL_RCC_OscConfig+0x4c8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0f0      	beq.n	80085e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d106      	bne.n	8008616 <HAL_RCC_OscConfig+0x312>
 8008608:	4b6f      	ldr	r3, [pc, #444]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	4a6e      	ldr	r2, [pc, #440]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800860e:	f043 0301 	orr.w	r3, r3, #1
 8008612:	6213      	str	r3, [r2, #32]
 8008614:	e02d      	b.n	8008672 <HAL_RCC_OscConfig+0x36e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10c      	bne.n	8008638 <HAL_RCC_OscConfig+0x334>
 800861e:	4b6a      	ldr	r3, [pc, #424]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	4a69      	ldr	r2, [pc, #420]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	6213      	str	r3, [r2, #32]
 800862a:	4b67      	ldr	r3, [pc, #412]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	4a66      	ldr	r2, [pc, #408]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008630:	f023 0304 	bic.w	r3, r3, #4
 8008634:	6213      	str	r3, [r2, #32]
 8008636:	e01c      	b.n	8008672 <HAL_RCC_OscConfig+0x36e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b05      	cmp	r3, #5
 800863e:	d10c      	bne.n	800865a <HAL_RCC_OscConfig+0x356>
 8008640:	4b61      	ldr	r3, [pc, #388]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	4a60      	ldr	r2, [pc, #384]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008646:	f043 0304 	orr.w	r3, r3, #4
 800864a:	6213      	str	r3, [r2, #32]
 800864c:	4b5e      	ldr	r3, [pc, #376]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	4a5d      	ldr	r2, [pc, #372]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6213      	str	r3, [r2, #32]
 8008658:	e00b      	b.n	8008672 <HAL_RCC_OscConfig+0x36e>
 800865a:	4b5b      	ldr	r3, [pc, #364]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	4a5a      	ldr	r2, [pc, #360]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	6213      	str	r3, [r2, #32]
 8008666:	4b58      	ldr	r3, [pc, #352]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	4a57      	ldr	r2, [pc, #348]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800866c:	f023 0304 	bic.w	r3, r3, #4
 8008670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d015      	beq.n	80086a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800867a:	f7fc fa61 	bl	8004b40 <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008680:	e00a      	b.n	8008698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008682:	f7fc fa5d 	bl	8004b40 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008690:	4293      	cmp	r3, r2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e0b1      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008698:	4b4b      	ldr	r3, [pc, #300]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0ee      	beq.n	8008682 <HAL_RCC_OscConfig+0x37e>
 80086a4:	e014      	b.n	80086d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086a6:	f7fc fa4b 	bl	8004b40 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086ac:	e00a      	b.n	80086c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ae:	f7fc fa47 	bl	8004b40 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086bc:	4293      	cmp	r3, r2
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e09b      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c4:	4b40      	ldr	r3, [pc, #256]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ee      	bne.n	80086ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d105      	bne.n	80086e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d6:	4b3c      	ldr	r3, [pc, #240]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	4a3b      	ldr	r2, [pc, #236]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80086dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 8087 	beq.w	80087fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f003 030c 	and.w	r3, r3, #12
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d061      	beq.n	80087bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d146      	bne.n	800878e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008700:	4b33      	ldr	r3, [pc, #204]	; (80087d0 <HAL_RCC_OscConfig+0x4cc>)
 8008702:	2200      	movs	r2, #0
 8008704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008706:	f7fc fa1b 	bl	8004b40 <HAL_GetTick>
 800870a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800870e:	f7fc fa17 	bl	8004b40 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e06d      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008720:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008734:	d108      	bne.n	8008748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	4921      	ldr	r1, [pc, #132]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008744:	4313      	orrs	r3, r2
 8008746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008748:	4b1f      	ldr	r3, [pc, #124]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a19      	ldr	r1, [r3, #32]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	430b      	orrs	r3, r1
 800875a:	491b      	ldr	r1, [pc, #108]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 800875c:	4313      	orrs	r3, r2
 800875e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008760:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <HAL_RCC_OscConfig+0x4cc>)
 8008762:	2201      	movs	r2, #1
 8008764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008766:	f7fc f9eb 	bl	8004b40 <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800876c:	e008      	b.n	8008780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876e:	f7fc f9e7 	bl	8004b40 <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d901      	bls.n	8008780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e03d      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008780:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0f0      	beq.n	800876e <HAL_RCC_OscConfig+0x46a>
 800878c:	e035      	b.n	80087fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <HAL_RCC_OscConfig+0x4cc>)
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008794:	f7fc f9d4 	bl	8004b40 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800879c:	f7fc f9d0 	bl	8004b40 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e026      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <HAL_RCC_OscConfig+0x4c4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f0      	bne.n	800879c <HAL_RCC_OscConfig+0x498>
 80087ba:	e01e      	b.n	80087fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d107      	bne.n	80087d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e019      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
 80087c8:	40021000 	.word	0x40021000
 80087cc:	40007000 	.word	0x40007000
 80087d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087d4:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <HAL_RCC_OscConfig+0x500>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d106      	bne.n	80087f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d001      	beq.n	80087fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40021000 	.word	0x40021000

08008808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e0d0      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800881c:	4b6a      	ldr	r3, [pc, #424]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d910      	bls.n	800884c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882a:	4b67      	ldr	r3, [pc, #412]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f023 0207 	bic.w	r2, r3, #7
 8008832:	4965      	ldr	r1, [pc, #404]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	4313      	orrs	r3, r2
 8008838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800883a:	4b63      	ldr	r3, [pc, #396]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e0b8      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d020      	beq.n	800889a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008864:	4b59      	ldr	r3, [pc, #356]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a58      	ldr	r2, [pc, #352]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 800886a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800886e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800887c:	4b53      	ldr	r3, [pc, #332]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a52      	ldr	r2, [pc, #328]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008888:	4b50      	ldr	r3, [pc, #320]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	494d      	ldr	r1, [pc, #308]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008896:	4313      	orrs	r3, r2
 8008898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d040      	beq.n	8008928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d107      	bne.n	80088be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ae:	4b47      	ldr	r3, [pc, #284]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d115      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e07f      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d107      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c6:	4b41      	ldr	r3, [pc, #260]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e073      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088d6:	4b3d      	ldr	r3, [pc, #244]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e06b      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f023 0203 	bic.w	r2, r3, #3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	4936      	ldr	r1, [pc, #216]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088f8:	f7fc f922 	bl	8004b40 <HAL_GetTick>
 80088fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fe:	e00a      	b.n	8008916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008900:	f7fc f91e 	bl	8004b40 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	f241 3288 	movw	r2, #5000	; 0x1388
 800890e:	4293      	cmp	r3, r2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e053      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008916:	4b2d      	ldr	r3, [pc, #180]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f003 020c 	and.w	r2, r3, #12
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	429a      	cmp	r2, r3
 8008926:	d1eb      	bne.n	8008900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008928:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d210      	bcs.n	8008958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f023 0207 	bic.w	r2, r3, #7
 800893e:	4922      	ldr	r1, [pc, #136]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	4313      	orrs	r3, r2
 8008944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008946:	4b20      	ldr	r3, [pc, #128]	; (80089c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d001      	beq.n	8008958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e032      	b.n	80089be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008964:	4b19      	ldr	r3, [pc, #100]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	4916      	ldr	r1, [pc, #88]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008972:	4313      	orrs	r3, r2
 8008974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008982:	4b12      	ldr	r3, [pc, #72]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	490e      	ldr	r1, [pc, #56]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 8008992:	4313      	orrs	r3, r2
 8008994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008996:	f000 f821 	bl	80089dc <HAL_RCC_GetSysClockFreq>
 800899a:	4602      	mov	r2, r0
 800899c:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <HAL_RCC_ClockConfig+0x1c4>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	091b      	lsrs	r3, r3, #4
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	490a      	ldr	r1, [pc, #40]	; (80089d0 <HAL_RCC_ClockConfig+0x1c8>)
 80089a8:	5ccb      	ldrb	r3, [r1, r3]
 80089aa:	fa22 f303 	lsr.w	r3, r2, r3
 80089ae:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <HAL_RCC_ClockConfig+0x1cc>)
 80089b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089b2:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <HAL_RCC_ClockConfig+0x1d0>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fc f880 	bl	8004abc <HAL_InitTick>

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40022000 	.word	0x40022000
 80089cc:	40021000 	.word	0x40021000
 80089d0:	0800ce7c 	.word	0x0800ce7c
 80089d4:	20000004 	.word	0x20000004
 80089d8:	20000008 	.word	0x20000008

080089dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80089f6:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <HAL_RCC_GetSysClockFreq+0x94>)
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 030c 	and.w	r3, r3, #12
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d002      	beq.n	8008a0c <HAL_RCC_GetSysClockFreq+0x30>
 8008a06:	2b08      	cmp	r3, #8
 8008a08:	d003      	beq.n	8008a12 <HAL_RCC_GetSysClockFreq+0x36>
 8008a0a:	e027      	b.n	8008a5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008a0c:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a0e:	613b      	str	r3, [r7, #16]
      break;
 8008a10:	e027      	b.n	8008a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	0c9b      	lsrs	r3, r3, #18
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008a1c:	5cd3      	ldrb	r3, [r2, r3]
 8008a1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <HAL_RCC_GetSysClockFreq+0x94>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	0c5b      	lsrs	r3, r3, #17
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	4a11      	ldr	r2, [pc, #68]	; (8008a7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a36:	5cd3      	ldrb	r3, [r2, r3]
 8008a38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a0d      	ldr	r2, [pc, #52]	; (8008a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8008a3e:	fb03 f202 	mul.w	r2, r3, r2
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e004      	b.n	8008a56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	; (8008a80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008a50:	fb02 f303 	mul.w	r3, r2, r3
 8008a54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	613b      	str	r3, [r7, #16]
      break;
 8008a5a:	e002      	b.n	8008a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008a5c:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008a5e:	613b      	str	r3, [r7, #16]
      break;
 8008a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a62:	693b      	ldr	r3, [r7, #16]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40021000 	.word	0x40021000
 8008a74:	00b71b00 	.word	0x00b71b00
 8008a78:	0800ce94 	.word	0x0800ce94
 8008a7c:	0800cea4 	.word	0x0800cea4
 8008a80:	003d0900 	.word	0x003d0900
 8008a84:	007a1200 	.word	0x007a1200

08008a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr
 8008a98:	20000004 	.word	0x20000004

08008a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008aa0:	f7ff fff2 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	4903      	ldr	r1, [pc, #12]	; (8008ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ab2:	5ccb      	ldrb	r3, [r1, r3]
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40021000 	.word	0x40021000
 8008ac0:	0800ce8c 	.word	0x0800ce8c

08008ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ac8:	f7ff ffde 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	0adb      	lsrs	r3, r3, #11
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4903      	ldr	r1, [pc, #12]	; (8008ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	0800ce8c 	.word	0x0800ce8c

08008aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <RCC_Delay+0x34>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <RCC_Delay+0x38>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	0a5b      	lsrs	r3, r3, #9
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008b08:	bf00      	nop
  }
  while (Delay --);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1e5a      	subs	r2, r3, #1
 8008b0e:	60fa      	str	r2, [r7, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f9      	bne.n	8008b08 <RCC_Delay+0x1c>
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr
 8008b20:	20000004 	.word	0x20000004
 8008b24:	10624dd3 	.word	0x10624dd3

08008b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d07d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b48:	4b4f      	ldr	r3, [pc, #316]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10d      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b54:	4b4c      	ldr	r3, [pc, #304]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	4a4b      	ldr	r2, [pc, #300]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b5e:	61d3      	str	r3, [r2, #28]
 8008b60:	4b49      	ldr	r3, [pc, #292]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b68:	60bb      	str	r3, [r7, #8]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b70:	4b46      	ldr	r3, [pc, #280]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d118      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b7c:	4b43      	ldr	r3, [pc, #268]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a42      	ldr	r2, [pc, #264]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b88:	f7fb ffda 	bl	8004b40 <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b90:	f7fb ffd6 	bl	8004b40 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b64      	cmp	r3, #100	; 0x64
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e06d      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba2:	4b3a      	ldr	r3, [pc, #232]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0f0      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bae:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d02e      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d027      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bcc:	4b2e      	ldr	r3, [pc, #184]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bd6:	4b2e      	ldr	r3, [pc, #184]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008bd8:	2201      	movs	r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bdc:	4b2c      	ldr	r3, [pc, #176]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008be2:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d014      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf2:	f7fb ffa5 	bl	8004b40 <HAL_GetTick>
 8008bf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bf8:	e00a      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bfa:	f7fb ffa1 	bl	8004b40 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d901      	bls.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e036      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0ee      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4917      	ldr	r1, [pc, #92]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d105      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c34:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	490b      	ldr	r1, [pc, #44]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0310 	and.w	r3, r3, #16
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4904      	ldr	r1, [pc, #16]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	40007000 	.word	0x40007000
 8008c90:	42420440 	.word	0x42420440

08008c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	2300      	movs	r3, #0
 8008cae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	d00a      	beq.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b10      	cmp	r3, #16
 8008cba:	f200 8089 	bhi.w	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d045      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d074      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008cca:	e081      	b.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8008ccc:	4b45      	ldr	r3, [pc, #276]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008cd2:	4b44      	ldr	r3, [pc, #272]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d07a      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	0c9b      	lsrs	r3, r3, #18
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	4a40      	ldr	r2, [pc, #256]	; (8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8008ce8:	5cd3      	ldrb	r3, [r2, r3]
 8008cea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d015      	beq.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008cf6:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	0c5b      	lsrs	r3, r3, #17
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	4a3a      	ldr	r2, [pc, #232]	; (8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8008d02:	5cd3      	ldrb	r3, [r2, r3]
 8008d04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00d      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008d10:	4a37      	ldr	r2, [pc, #220]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e004      	b.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	4a33      	ldr	r2, [pc, #204]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008d2c:	4b2d      	ldr	r3, [pc, #180]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d38:	d102      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	61bb      	str	r3, [r7, #24]
      break;
 8008d3e:	e049      	b.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4a2c      	ldr	r2, [pc, #176]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8008d46:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	61bb      	str	r3, [r7, #24]
      break;
 8008d4e:	e041      	b.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8008d50:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d60:	d108      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8008d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	e01e      	b.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d7e:	d109      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008d80:	4b18      	ldr	r3, [pc, #96]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8008d8c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e00e      	b.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d9e:	d11b      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8008da0:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d015      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8008dac:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8008dae:	61bb      	str	r3, [r7, #24]
      break;
 8008db0:	e012      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8008db2:	e011      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008db4:	f7ff fe86 	bl	8008ac4 <HAL_RCC_GetPCLK2Freq>
 8008db8:	4602      	mov	r2, r0
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	0b9b      	lsrs	r3, r3, #14
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dcc:	61bb      	str	r3, [r7, #24]
      break;
 8008dce:	e004      	b.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8008dd0:	bf00      	nop
 8008dd2:	e002      	b.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e000      	b.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8008dd8:	bf00      	nop
    }
  }
  return (frequency);
 8008dda:	69bb      	ldr	r3, [r7, #24]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3720      	adds	r7, #32
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	40021000 	.word	0x40021000
 8008de8:	0800cea8 	.word	0x0800cea8
 8008dec:	0800ceb8 	.word	0x0800ceb8
 8008df0:	00b71b00 	.word	0x00b71b00
 8008df4:	003d0900 	.word	0x003d0900
 8008df8:	aaaaaaab 	.word	0xaaaaaaab
 8008dfc:	00016e36 	.word	0x00016e36

08008e00 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e07a      	b.n	8008f0c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7c5b      	ldrb	r3, [r3, #17]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fb fb9a 	bl	8004560 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fc2c 	bl	8009690 <HAL_RTC_WaitForSynchro>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d004      	beq.n	8008e48 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2204      	movs	r2, #4
 8008e42:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e061      	b.n	8008f0c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fce5 	bl	8009818 <RTC_EnterInitMode>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d004      	beq.n	8008e5e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2204      	movs	r2, #4
 8008e58:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e056      	b.n	8008f0c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0207 	bic.w	r2, r2, #7
 8008e6c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8008e76:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <HAL_RTC_Init+0x114>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <HAL_RTC_Init+0x114>)
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008e82:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <HAL_RTC_Init+0x114>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e86:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4921      	ldr	r1, [pc, #132]	; (8008f14 <HAL_RTC_Init+0x114>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d003      	beq.n	8008ea6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e00e      	b.n	8008ec4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	f7ff fef4 	bl	8008c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e026      	b.n	8008f0c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	0c1a      	lsrs	r2, r3, #16
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f002 020f 	and.w	r2, r2, #15
 8008ed0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fcc3 	bl	8009868 <RTC_ExitInitMode>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d004      	beq.n	8008ef2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2204      	movs	r2, #4
 8008eec:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e00c      	b.n	8008f0c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
  }
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40006c00 	.word	0x40006c00

08008f18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <HAL_RTC_SetTime+0x20>
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e080      	b.n	800903e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7c1b      	ldrb	r3, [r3, #16]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_RTC_SetTime+0x30>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e07a      	b.n	800903e <HAL_RTC_SetTime+0x126>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d113      	bne.n	8008f82 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f64:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	460b      	mov	r3, r1
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	1a5b      	subs	r3, r3, r1
 8008f74:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008f76:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008f7c:	4413      	add	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	e01e      	b.n	8008fc0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fcb3 	bl	80098f2 <RTC_Bcd2ToByte>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f94:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fca8 	bl	80098f2 <RTC_Bcd2ToByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008fae:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	789b      	ldrb	r3, [r3, #2]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fc9c 	bl	80098f2 <RTC_Bcd2ToByte>
 8008fba:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008fbc:	4423      	add	r3, r4
 8008fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008fc0:	6979      	ldr	r1, [r7, #20]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fbc1 	bl	800974a <RTC_WriteTimeCounter>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e02f      	b.n	800903e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0205 	bic.w	r2, r2, #5
 8008fec:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fbd2 	bl	8009798 <RTC_ReadAlarmCounter>
 8008ff4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d018      	beq.n	8009030 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	429a      	cmp	r2, r3
 8009004:	d214      	bcs.n	8009030 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800900c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009010:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009012:	6939      	ldr	r1, [r7, #16]
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fbd8 	bl	80097ca <RTC_WriteAlarmCounter>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2204      	movs	r2, #4
 8009024:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e006      	b.n	800903e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800903c:	2300      	movs	r3, #0
  }
}
 800903e:	4618      	mov	r0, r3
 8009040:	371c      	adds	r7, #28
 8009042:	46bd      	mov	sp, r7
 8009044:	bd90      	pop	{r4, r7, pc}
	...

08009048 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	2300      	movs	r3, #0
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_RTC_GetTime+0x28>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0b5      	b.n	80091e0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e0ac      	b.n	80091e0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fb2f 	bl	80096ea <RTC_ReadTimeCounter>
 800908c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	4a55      	ldr	r2, [pc, #340]	; (80091e8 <HAL_RTC_GetTime+0x1a0>)
 8009092:	fba2 2303 	umull	r2, r3, r2, r3
 8009096:	0adb      	lsrs	r3, r3, #11
 8009098:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	4b52      	ldr	r3, [pc, #328]	; (80091e8 <HAL_RTC_GetTime+0x1a0>)
 800909e:	fba3 1302 	umull	r1, r3, r3, r2
 80090a2:	0adb      	lsrs	r3, r3, #11
 80090a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80090a8:	fb01 f303 	mul.w	r3, r1, r3
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	4a4f      	ldr	r2, [pc, #316]	; (80091ec <HAL_RTC_GetTime+0x1a4>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	095b      	lsrs	r3, r3, #5
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	4a4a      	ldr	r2, [pc, #296]	; (80091e8 <HAL_RTC_GetTime+0x1a0>)
 80090c0:	fba2 1203 	umull	r1, r2, r2, r3
 80090c4:	0ad2      	lsrs	r2, r2, #11
 80090c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80090ca:	fb01 f202 	mul.w	r2, r1, r2
 80090ce:	1a9a      	subs	r2, r3, r2
 80090d0:	4b46      	ldr	r3, [pc, #280]	; (80091ec <HAL_RTC_GetTime+0x1a4>)
 80090d2:	fba3 1302 	umull	r1, r3, r3, r2
 80090d6:	0959      	lsrs	r1, r3, #5
 80090d8:	460b      	mov	r3, r1
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	1a5b      	subs	r3, r3, r1
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	1ad1      	subs	r1, r2, r3
 80090e2:	b2ca      	uxtb	r2, r1
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2b17      	cmp	r3, #23
 80090ec:	d955      	bls.n	800919a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	4a3f      	ldr	r2, [pc, #252]	; (80091f0 <HAL_RTC_GetTime+0x1a8>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80090fa:	6939      	ldr	r1, [r7, #16]
 80090fc:	4b3c      	ldr	r3, [pc, #240]	; (80091f0 <HAL_RTC_GetTime+0x1a8>)
 80090fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009102:	091a      	lsrs	r2, r3, #4
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	1aca      	subs	r2, r1, r3
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fb3f 	bl	8009798 <RTC_ReadAlarmCounter>
 800911a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009122:	d008      	beq.n	8009136 <HAL_RTC_GetTime+0xee>
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d904      	bls.n	8009136 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800912c:	69fa      	ldr	r2, [r7, #28]
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	e002      	b.n	800913c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
 800913a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	4a2d      	ldr	r2, [pc, #180]	; (80091f4 <HAL_RTC_GetTime+0x1ac>)
 8009140:	fb02 f303 	mul.w	r3, r2, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800914a:	69b9      	ldr	r1, [r7, #24]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fafc 	bl	800974a <RTC_WriteTimeCounter>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e041      	b.n	80091e0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d00c      	beq.n	800917e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	4413      	add	r3, r2
 800916a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fb2b 	bl	80097ca <RTC_WriteAlarmCounter>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e030      	b.n	80091e0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800917e:	69f9      	ldr	r1, [r7, #28]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fb22 	bl	80097ca <RTC_WriteAlarmCounter>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e027      	b.n	80091e0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009190:	6979      	ldr	r1, [r7, #20]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fbca 	bl	800992c <RTC_DateUpdate>
 8009198:	e003      	b.n	80091a2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	b2da      	uxtb	r2, r3
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01a      	beq.n	80091de <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 fb83 	bl	80098b8 <RTC_ByteToBcd2>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fb7a 	bl	80098b8 <RTC_ByteToBcd2>
 80091c4:	4603      	mov	r3, r0
 80091c6:	461a      	mov	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	789b      	ldrb	r3, [r3, #2]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fb71 	bl	80098b8 <RTC_ByteToBcd2>
 80091d6:	4603      	mov	r3, r0
 80091d8:	461a      	mov	r2, r3
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	91a2b3c5 	.word	0x91a2b3c5
 80091ec:	88888889 	.word	0x88888889
 80091f0:	aaaaaaab 	.word	0xaaaaaaab
 80091f4:	00015180 	.word	0x00015180

080091f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	2300      	movs	r3, #0
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_RTC_SetDate+0x24>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e097      	b.n	8009350 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	7c1b      	ldrb	r3, [r3, #16]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_RTC_SetDate+0x34>
 8009228:	2302      	movs	r3, #2
 800922a:	e091      	b.n	8009350 <HAL_RTC_SetDate+0x158>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2201      	movs	r2, #1
 8009230:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2202      	movs	r2, #2
 8009236:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10c      	bne.n	8009258 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78da      	ldrb	r2, [r3, #3]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	785a      	ldrb	r2, [r3, #1]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	789a      	ldrb	r2, [r3, #2]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	739a      	strb	r2, [r3, #14]
 8009256:	e01a      	b.n	800928e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	78db      	ldrb	r3, [r3, #3]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fb48 	bl	80098f2 <RTC_Bcd2ToByte>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fb3f 	bl	80098f2 <RTC_Bcd2ToByte>
 8009274:	4603      	mov	r3, r0
 8009276:	461a      	mov	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	789b      	ldrb	r3, [r3, #2]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fb36 	bl	80098f2 <RTC_Bcd2ToByte>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	7bdb      	ldrb	r3, [r3, #15]
 8009292:	4618      	mov	r0, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	7b59      	ldrb	r1, [r3, #13]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	7b9b      	ldrb	r3, [r3, #14]
 800929c:	461a      	mov	r2, r3
 800929e:	f000 fc21 	bl	8009ae4 <RTC_WeekDayNum>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	7b1a      	ldrb	r2, [r3, #12]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fa19 	bl	80096ea <RTC_ReadTimeCounter>
 80092b8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4a26      	ldr	r2, [pc, #152]	; (8009358 <HAL_RTC_SetDate+0x160>)
 80092be:	fba2 2303 	umull	r2, r3, r2, r3
 80092c2:	0adb      	lsrs	r3, r3, #11
 80092c4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b18      	cmp	r3, #24
 80092ca:	d93a      	bls.n	8009342 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	4a23      	ldr	r2, [pc, #140]	; (800935c <HAL_RTC_SetDate+0x164>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	091b      	lsrs	r3, r3, #4
 80092d6:	4a22      	ldr	r2, [pc, #136]	; (8009360 <HAL_RTC_SetDate+0x168>)
 80092d8:	fb02 f303 	mul.w	r3, r2, r3
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80092e2:	69f9      	ldr	r1, [r7, #28]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fa30 	bl	800974a <RTC_WriteTimeCounter>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2204      	movs	r2, #4
 80092f4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e027      	b.n	8009350 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fa49 	bl	8009798 <RTC_ReadAlarmCounter>
 8009306:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930e:	d018      	beq.n	8009342 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	429a      	cmp	r2, r3
 8009316:	d214      	bcs.n	8009342 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800931e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009322:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009324:	69b9      	ldr	r1, [r7, #24]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fa4f 	bl	80097ca <RTC_WriteAlarmCounter>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d007      	beq.n	8009342 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2204      	movs	r2, #4
 8009336:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e006      	b.n	8009350 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3720      	adds	r7, #32
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	91a2b3c5 	.word	0x91a2b3c5
 800935c:	aaaaaaab 	.word	0xaaaaaaab
 8009360:	00015180 	.word	0x00015180

08009364 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8009370:	f107 0314 	add.w	r3, r7, #20
 8009374:	2100      	movs	r1, #0
 8009376:	460a      	mov	r2, r1
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	460a      	mov	r2, r1
 800937c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_RTC_GetDate+0x26>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e03a      	b.n	8009404 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800938e:	f107 0314 	add.w	r3, r7, #20
 8009392:	2200      	movs	r2, #0
 8009394:	4619      	mov	r1, r3
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff fe56 	bl	8009048 <HAL_RTC_GetTime>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e02e      	b.n	8009404 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	7b1a      	ldrb	r2, [r3, #12]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	7bda      	ldrb	r2, [r3, #15]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7b5a      	ldrb	r2, [r3, #13]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	7b9a      	ldrb	r2, [r3, #14]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01a      	beq.n	8009402 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	78db      	ldrb	r3, [r3, #3]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fa71 	bl	80098b8 <RTC_ByteToBcd2>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	785b      	ldrb	r3, [r3, #1]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 fa68 	bl	80098b8 <RTC_ByteToBcd2>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	789b      	ldrb	r3, [r3, #2]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 fa5f 	bl	80098b8 <RTC_ByteToBcd2>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b089      	sub	sp, #36	; 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8009418:	2300      	movs	r3, #0
 800941a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800941c:	f107 0314 	add.w	r3, r7, #20
 8009420:	2100      	movs	r1, #0
 8009422:	460a      	mov	r2, r1
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	460a      	mov	r2, r1
 8009428:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <HAL_RTC_SetAlarm_IT+0x2a>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e099      	b.n	800956e <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	7c1b      	ldrb	r3, [r3, #16]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_RTC_SetAlarm_IT+0x3a>
 8009442:	2302      	movs	r3, #2
 8009444:	e093      	b.n	800956e <HAL_RTC_SetAlarm_IT+0x162>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2202      	movs	r2, #2
 8009450:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8009452:	f107 0314 	add.w	r3, r7, #20
 8009456:	2200      	movs	r2, #0
 8009458:	4619      	mov	r1, r3
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fdf4 	bl	8009048 <HAL_RTC_GetTime>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e081      	b.n	800956e <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800946a:	7d3b      	ldrb	r3, [r7, #20]
 800946c:	461a      	mov	r2, r3
 800946e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009472:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8009476:	7d7b      	ldrb	r3, [r7, #21]
 8009478:	4619      	mov	r1, r3
 800947a:	460b      	mov	r3, r1
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	1a5b      	subs	r3, r3, r1
 8009480:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009482:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8009484:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8009486:	4413      	add	r3, r2
 8009488:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d113      	bne.n	80094b8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800949a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	4619      	mov	r1, r3
 80094a4:	460b      	mov	r3, r1
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	1a5b      	subs	r3, r3, r1
 80094aa:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80094ac:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80094b2:	4413      	add	r3, r2
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	e01e      	b.n	80094f6 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fa18 	bl	80098f2 <RTC_Bcd2ToByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80094ca:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fa0d 	bl	80098f2 <RTC_Bcd2ToByte>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	4613      	mov	r3, r2
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80094e4:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	789b      	ldrb	r3, [r3, #2]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fa01 	bl	80098f2 <RTC_Bcd2ToByte>
 80094f0:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80094f2:	4423      	add	r3, r4
 80094f4:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d205      	bcs.n	800950a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009504:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009508:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800950a:	69f9      	ldr	r1, [r7, #28]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 f95c 	bl	80097ca <RTC_WriteAlarmCounter>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d007      	beq.n	8009528 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2204      	movs	r2, #4
 800951c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e022      	b.n	800956e <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0202 	bic.w	r2, r2, #2
 8009536:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f042 0202 	orr.w	r2, r2, #2
 8009546:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <HAL_RTC_SetAlarm_IT+0x16c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_RTC_SetAlarm_IT+0x16c>)
 800954e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009552:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_RTC_SetAlarm_IT+0x16c>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	4a07      	ldr	r2, [pc, #28]	; (8009578 <HAL_RTC_SetAlarm_IT+0x16c>)
 800955a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800955e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800956c:	2300      	movs	r3, #0
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	3724      	adds	r7, #36	; 0x24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd90      	pop	{r4, r7, pc}
 8009576:	bf00      	nop
 8009578:	40010400 	.word	0x40010400

0800957c <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e04e      	b.n	800962e <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7c1b      	ldrb	r3, [r3, #16]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_RTC_DeactivateAlarm+0x20>
 8009598:	2302      	movs	r3, #2
 800959a:	e048      	b.n	800962e <HAL_RTC_DeactivateAlarm+0xb2>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0202 	bic.w	r2, r2, #2
 80095b6:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f92d 	bl	8009818 <RTC_EnterInitMode>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d007      	beq.n	80095d4 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2204      	movs	r2, #4
 80095c8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e02c      	b.n	800962e <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0202 	bic.w	r2, r2, #2
 80095e2:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ec:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 80095f8:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <HAL_RTC_DeactivateAlarm+0xbc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <HAL_RTC_DeactivateAlarm+0xbc>)
 80095fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009602:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f92f 	bl	8009868 <RTC_ExitInitMode>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e006      	b.n	800962e <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	40010400 	.word	0x40010400

0800963c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d011      	beq.n	8009676 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f003 0302 	and.w	r3, r3, #2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00a      	beq.n	8009676 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7f9 f9e7 	bl	8002a34 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0202 	bic.w	r2, r2, #2
 8009674:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800967c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	745a      	strb	r2, [r3, #17]
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	40010400 	.word	0x40010400

08009690 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e01d      	b.n	80096e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0208 	bic.w	r2, r2, #8
 80096b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80096b6:	f7fb fa43 	bl	8004b40 <HAL_GetTick>
 80096ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80096bc:	e009      	b.n	80096d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80096be:	f7fb fa3f 	bl	8004b40 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096cc:	d901      	bls.n	80096d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e007      	b.n	80096e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f003 0308 	and.w	r3, r3, #8
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0ee      	beq.n	80096be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b087      	sub	sp, #28
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	827b      	strh	r3, [r7, #18]
 80096f6:	2300      	movs	r3, #0
 80096f8:	823b      	strh	r3, [r7, #16]
 80096fa:	2300      	movs	r3, #0
 80096fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800971a:	8a7a      	ldrh	r2, [r7, #18]
 800971c:	8a3b      	ldrh	r3, [r7, #16]
 800971e:	429a      	cmp	r2, r3
 8009720:	d008      	beq.n	8009734 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8009722:	8a3b      	ldrh	r3, [r7, #16]
 8009724:	041a      	lsls	r2, r3, #16
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	b29b      	uxth	r3, r3
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	e004      	b.n	800973e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8009734:	8a7b      	ldrh	r3, [r7, #18]
 8009736:	041a      	lsls	r2, r3, #16
 8009738:	89fb      	ldrh	r3, [r7, #14]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800973e:	697b      	ldr	r3, [r7, #20]
}
 8009740:	4618      	mov	r0, r3
 8009742:	371c      	adds	r7, #28
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr

0800974a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f85d 	bl	8009818 <RTC_EnterInitMode>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
 8009768:	e011      	b.n	800978e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	0c12      	lsrs	r2, r2, #16
 8009772:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	b292      	uxth	r2, r2
 800977c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f872 	bl	8009868 <RTC_ExitInitMode>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	81fb      	strh	r3, [r7, #14]
 80097a4:	2300      	movs	r3, #0
 80097a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80097b8:	89fb      	ldrh	r3, [r7, #14]
 80097ba:	041a      	lsls	r2, r3, #16
 80097bc:	89bb      	ldrh	r3, [r7, #12]
 80097be:	4313      	orrs	r3, r2
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bc80      	pop	{r7}
 80097c8:	4770      	bx	lr

080097ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f81d 	bl	8009818 <RTC_EnterInitMode>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
 80097e8:	e011      	b.n	800980e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	0c12      	lsrs	r2, r2, #16
 80097f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	b292      	uxth	r2, r2
 80097fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f832 	bl	8009868 <RTC_ExitInitMode>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009824:	f7fb f98c 	bl	8004b40 <HAL_GetTick>
 8009828:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800982a:	e009      	b.n	8009840 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800982c:	f7fb f988 	bl	8004b40 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800983a:	d901      	bls.n	8009840 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e00f      	b.n	8009860 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0ee      	beq.n	800982c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0210 	orr.w	r2, r2, #16
 800985c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0210 	bic.w	r2, r2, #16
 8009882:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009884:	f7fb f95c 	bl	8004b40 <HAL_GetTick>
 8009888:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800988a:	e009      	b.n	80098a0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800988c:	f7fb f958 	bl	8004b40 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800989a:	d901      	bls.n	80098a0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e007      	b.n	80098b0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0ee      	beq.n	800988c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80098c6:	e005      	b.n	80098d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	3b0a      	subs	r3, #10
 80098d2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	2b09      	cmp	r3, #9
 80098d8:	d8f6      	bhi.n	80098c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	b2db      	uxtb	r3, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr

080098f2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	4603      	mov	r3, r0
 80098fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	091b      	lsrs	r3, r3, #4
 8009904:	b2db      	uxtb	r3, r3
 8009906:	461a      	mov	r2, r3
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	b2da      	uxtb	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4413      	add	r3, r2
 8009920:	b2db      	uxtb	r3, r3
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	2300      	movs	r3, #0
 800993c:	613b      	str	r3, [r7, #16]
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	7bdb      	ldrb	r3, [r3, #15]
 800994a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7b5b      	ldrb	r3, [r3, #13]
 8009950:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	7b9b      	ldrb	r3, [r3, #14]
 8009956:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8009958:	2300      	movs	r3, #0
 800995a:	60bb      	str	r3, [r7, #8]
 800995c:	e06f      	b.n	8009a3e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d011      	beq.n	8009988 <RTC_DateUpdate+0x5c>
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b03      	cmp	r3, #3
 8009968:	d00e      	beq.n	8009988 <RTC_DateUpdate+0x5c>
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2b05      	cmp	r3, #5
 800996e:	d00b      	beq.n	8009988 <RTC_DateUpdate+0x5c>
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b07      	cmp	r3, #7
 8009974:	d008      	beq.n	8009988 <RTC_DateUpdate+0x5c>
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b08      	cmp	r3, #8
 800997a:	d005      	beq.n	8009988 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b0a      	cmp	r3, #10
 8009980:	d002      	beq.n	8009988 <RTC_DateUpdate+0x5c>
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b0c      	cmp	r3, #12
 8009986:	d117      	bne.n	80099b8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b1e      	cmp	r3, #30
 800998c:	d803      	bhi.n	8009996 <RTC_DateUpdate+0x6a>
      {
        day++;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3301      	adds	r3, #1
 8009992:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8009994:	e050      	b.n	8009a38 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b0c      	cmp	r3, #12
 800999a:	d005      	beq.n	80099a8 <RTC_DateUpdate+0x7c>
        {
          month++;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	3301      	adds	r3, #1
 80099a0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80099a2:	2301      	movs	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80099a6:	e047      	b.n	8009a38 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80099a8:	2301      	movs	r3, #1
 80099aa:	613b      	str	r3, [r7, #16]
          day = 1U;
 80099ac:	2301      	movs	r3, #1
 80099ae:	60fb      	str	r3, [r7, #12]
          year++;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80099b6:	e03f      	b.n	8009a38 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d008      	beq.n	80099d0 <RTC_DateUpdate+0xa4>
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	2b06      	cmp	r3, #6
 80099c2:	d005      	beq.n	80099d0 <RTC_DateUpdate+0xa4>
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d002      	beq.n	80099d0 <RTC_DateUpdate+0xa4>
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b0b      	cmp	r3, #11
 80099ce:	d10c      	bne.n	80099ea <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b1d      	cmp	r3, #29
 80099d4:	d803      	bhi.n	80099de <RTC_DateUpdate+0xb2>
      {
        day++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80099dc:	e02c      	b.n	8009a38 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80099e4:	2301      	movs	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80099e8:	e026      	b.n	8009a38 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d123      	bne.n	8009a38 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b1b      	cmp	r3, #27
 80099f4:	d803      	bhi.n	80099fe <RTC_DateUpdate+0xd2>
      {
        day++;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	e01c      	b.n	8009a38 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b1c      	cmp	r3, #28
 8009a02:	d111      	bne.n	8009a28 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f839 	bl	8009a80 <RTC_IsLeapYear>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <RTC_DateUpdate+0xf0>
        {
          day++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e00d      	b.n	8009a38 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	613b      	str	r3, [r7, #16]
          day = 1U;
 8009a22:	2301      	movs	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e007      	b.n	8009a38 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b1d      	cmp	r3, #29
 8009a2c:	d104      	bne.n	8009a38 <RTC_DateUpdate+0x10c>
      {
        month++;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3301      	adds	r3, #1
 8009a32:	613b      	str	r3, [r7, #16]
        day = 1U;
 8009a34:	2301      	movs	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60bb      	str	r3, [r7, #8]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d38b      	bcc.n	800995e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	4619      	mov	r1, r3
 8009a68:	6978      	ldr	r0, [r7, #20]
 8009a6a:	f000 f83b 	bl	8009ae4 <RTC_WeekDayNum>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	731a      	strb	r2, [r3, #12]
}
 8009a76:	bf00      	nop
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	f003 0303 	and.w	r3, r3, #3
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e01d      	b.n	8009ad6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8009a9a:	88fb      	ldrh	r3, [r7, #6]
 8009a9c:	4a10      	ldr	r2, [pc, #64]	; (8009ae0 <RTC_IsLeapYear+0x60>)
 8009a9e:	fba2 1203 	umull	r1, r2, r2, r3
 8009aa2:	0952      	lsrs	r2, r2, #5
 8009aa4:	2164      	movs	r1, #100	; 0x64
 8009aa6:	fb01 f202 	mul.w	r2, r1, r2
 8009aaa:	1a9b      	subs	r3, r3, r2
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e00f      	b.n	8009ad6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	4a09      	ldr	r2, [pc, #36]	; (8009ae0 <RTC_IsLeapYear+0x60>)
 8009aba:	fba2 1203 	umull	r1, r2, r2, r3
 8009abe:	09d2      	lsrs	r2, r2, #7
 8009ac0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009ac4:	fb01 f202 	mul.w	r2, r1, r2
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e000      	b.n	8009ad6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8009ad4:	2300      	movs	r3, #0
  }
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr
 8009ae0:	51eb851f 	.word	0x51eb851f

08009ae4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
 8009af0:	4613      	mov	r3, r2
 8009af2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60bb      	str	r3, [r7, #8]
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009b02:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d82d      	bhi.n	8009b66 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8009b0a:	78fa      	ldrb	r2, [r7, #3]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	4a2c      	ldr	r2, [pc, #176]	; (8009bc8 <RTC_WeekDayNum+0xe4>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	085a      	lsrs	r2, r3, #1
 8009b1e:	78bb      	ldrb	r3, [r7, #2]
 8009b20:	441a      	add	r2, r3
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	441a      	add	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	441a      	add	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	4926      	ldr	r1, [pc, #152]	; (8009bcc <RTC_WeekDayNum+0xe8>)
 8009b34:	fba1 1303 	umull	r1, r3, r1, r3
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	1ad2      	subs	r2, r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4922      	ldr	r1, [pc, #136]	; (8009bcc <RTC_WeekDayNum+0xe8>)
 8009b42:	fba1 1303 	umull	r1, r3, r1, r3
 8009b46:	09db      	lsrs	r3, r3, #7
 8009b48:	4413      	add	r3, r2
 8009b4a:	1d1a      	adds	r2, r3, #4
 8009b4c:	4b20      	ldr	r3, [pc, #128]	; (8009bd0 <RTC_WeekDayNum+0xec>)
 8009b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b52:	1ad1      	subs	r1, r2, r3
 8009b54:	0849      	lsrs	r1, r1, #1
 8009b56:	440b      	add	r3, r1
 8009b58:	0899      	lsrs	r1, r3, #2
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	1a5b      	subs	r3, r3, r1
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	e029      	b.n	8009bba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	4413      	add	r3, r2
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <RTC_WeekDayNum+0xe4>)
 8009b74:	fba2 2303 	umull	r2, r3, r2, r3
 8009b78:	085a      	lsrs	r2, r3, #1
 8009b7a:	78bb      	ldrb	r3, [r7, #2]
 8009b7c:	441a      	add	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	441a      	add	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	089b      	lsrs	r3, r3, #2
 8009b86:	441a      	add	r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4910      	ldr	r1, [pc, #64]	; (8009bcc <RTC_WeekDayNum+0xe8>)
 8009b8c:	fba1 1303 	umull	r1, r3, r1, r3
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	1ad2      	subs	r2, r2, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	490d      	ldr	r1, [pc, #52]	; (8009bcc <RTC_WeekDayNum+0xe8>)
 8009b98:	fba1 1303 	umull	r1, r3, r1, r3
 8009b9c:	09db      	lsrs	r3, r3, #7
 8009b9e:	4413      	add	r3, r2
 8009ba0:	1c9a      	adds	r2, r3, #2
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <RTC_WeekDayNum+0xec>)
 8009ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ba8:	1ad1      	subs	r1, r2, r3
 8009baa:	0849      	lsrs	r1, r1, #1
 8009bac:	440b      	add	r3, r1
 8009bae:	0899      	lsrs	r1, r3, #2
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	1a5b      	subs	r3, r3, r1
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	b2db      	uxtb	r3, r3
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3714      	adds	r7, #20
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr
 8009bc8:	38e38e39 	.word	0x38e38e39
 8009bcc:	51eb851f 	.word	0x51eb851f
 8009bd0:	24924925 	.word	0x24924925

08009bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e076      	b.n	8009cd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d108      	bne.n	8009c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bf6:	d009      	beq.n	8009c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	61da      	str	r2, [r3, #28]
 8009bfe:	e005      	b.n	8009c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7fa fcc6 	bl	80045b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009c54:	431a      	orrs	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	431a      	orrs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c86:	431a      	orrs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c90:	ea42 0103 	orr.w	r1, r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	0c1a      	lsrs	r2, r3, #16
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f002 0204 	and.w	r2, r2, #4
 8009cb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	69da      	ldr	r2, [r3, #28]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d101      	bne.n	8009cfe <HAL_SPI_Transmit+0x22>
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	e12d      	b.n	8009f5a <HAL_SPI_Transmit+0x27e>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d06:	f7fa ff1b 	bl	8004b40 <HAL_GetTick>
 8009d0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d002      	beq.n	8009d22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d20:	e116      	b.n	8009f50 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_SPI_Transmit+0x52>
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d32:	e10d      	b.n	8009f50 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2203      	movs	r2, #3
 8009d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	88fa      	ldrh	r2, [r7, #6]
 8009d4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	88fa      	ldrh	r2, [r7, #6]
 8009d52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7a:	d10f      	bne.n	8009d9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b40      	cmp	r3, #64	; 0x40
 8009da8:	d007      	beq.n	8009dba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dc2:	d14f      	bne.n	8009e64 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <HAL_SPI_Transmit+0xf6>
 8009dcc:	8afb      	ldrh	r3, [r7, #22]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d142      	bne.n	8009e58 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd6:	881a      	ldrh	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de2:	1c9a      	adds	r2, r3, #2
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009df6:	e02f      	b.n	8009e58 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d112      	bne.n	8009e2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	881a      	ldrh	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	1c9a      	adds	r2, r3, #2
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b01      	subs	r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e2a:	e015      	b.n	8009e58 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e2c:	f7fa fe88 	bl	8004b40 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d803      	bhi.n	8009e44 <HAL_SPI_Transmit+0x168>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d102      	bne.n	8009e4a <HAL_SPI_Transmit+0x16e>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009e56:	e07b      	b.n	8009f50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1ca      	bne.n	8009df8 <HAL_SPI_Transmit+0x11c>
 8009e62:	e050      	b.n	8009f06 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <HAL_SPI_Transmit+0x196>
 8009e6c:	8afb      	ldrh	r3, [r7, #22]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d144      	bne.n	8009efc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	330c      	adds	r3, #12
 8009e7c:	7812      	ldrb	r2, [r2, #0]
 8009e7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009e98:	e030      	b.n	8009efc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f003 0302 	and.w	r3, r3, #2
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d113      	bne.n	8009ed0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ece:	e015      	b.n	8009efc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ed0:	f7fa fe36 	bl	8004b40 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d803      	bhi.n	8009ee8 <HAL_SPI_Transmit+0x20c>
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee6:	d102      	bne.n	8009eee <HAL_SPI_Transmit+0x212>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009efa:	e029      	b.n	8009f50 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1c9      	bne.n	8009e9a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fbcc 	bl	800a6a8 <SPI_EndRxTxTransaction>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f24:	2300      	movs	r3, #0
 8009f26:	613b      	str	r3, [r7, #16]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	77fb      	strb	r3, [r7, #31]
 8009f46:	e003      	b.n	8009f50 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af02      	add	r7, sp, #8
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	603b      	str	r3, [r7, #0]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d002      	beq.n	8009f88 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8009f82:	2302      	movs	r3, #2
 8009f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009f86:	e0fb      	b.n	800a180 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f90:	d112      	bne.n	8009fb8 <HAL_SPI_Receive+0x56>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10e      	bne.n	8009fb8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 f8ef 	bl	800a192 <HAL_SPI_TransmitReceive>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	e0e8      	b.n	800a18a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d101      	bne.n	8009fc6 <HAL_SPI_Receive+0x64>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e0e1      	b.n	800a18a <HAL_SPI_Receive+0x228>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fce:	f7fa fdb7 	bl	8004b40 <HAL_GetTick>
 8009fd2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <HAL_SPI_Receive+0x7e>
 8009fda:	88fb      	ldrh	r3, [r7, #6]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009fe4:	e0cc      	b.n	800a180 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2204      	movs	r2, #4
 8009fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	88fa      	ldrh	r2, [r7, #6]
 8009ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	88fa      	ldrh	r2, [r7, #6]
 800a004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a02c:	d10f      	bne.n	800a04e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a03c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a04c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d007      	beq.n	800a06c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a06a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d16a      	bne.n	800a14a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a074:	e032      	b.n	800a0dc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b01      	cmp	r3, #1
 800a082:	d115      	bne.n	800a0b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f103 020c 	add.w	r2, r3, #12
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0ae:	e015      	b.n	800a0dc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0b0:	f7fa fd46 	bl	8004b40 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d803      	bhi.n	800a0c8 <HAL_SPI_Receive+0x166>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d102      	bne.n	800a0ce <HAL_SPI_Receive+0x16c>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a0da:	e051      	b.n	800a180 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1c7      	bne.n	800a076 <HAL_SPI_Receive+0x114>
 800a0e6:	e035      	b.n	800a154 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d113      	bne.n	800a11e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	b292      	uxth	r2, r2
 800a102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	1c9a      	adds	r2, r3, #2
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a11c:	e015      	b.n	800a14a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a11e:	f7fa fd0f 	bl	8004b40 <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d803      	bhi.n	800a136 <HAL_SPI_Receive+0x1d4>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a134:	d102      	bne.n	800a13c <HAL_SPI_Receive+0x1da>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a148:	e01a      	b.n	800a180 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1c9      	bne.n	800a0e8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fa53 	bl	800a604 <SPI_EndRxTransaction>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2220      	movs	r2, #32
 800a168:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	75fb      	strb	r3, [r7, #23]
 800a176:	e003      	b.n	800a180 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b08c      	sub	sp, #48	; 0x30
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_SPI_TransmitReceive+0x26>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e198      	b.n	800a4ea <HAL_SPI_TransmitReceive+0x358>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1c0:	f7fa fcbe 	bl	8004b40 <HAL_GetTick>
 800a1c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1d6:	887b      	ldrh	r3, [r7, #2]
 800a1d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d00f      	beq.n	800a202 <HAL_SPI_TransmitReceive+0x70>
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1e8:	d107      	bne.n	800a1fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <HAL_SPI_TransmitReceive+0x68>
 800a1f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d003      	beq.n	800a202 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a200:	e16d      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <HAL_SPI_TransmitReceive+0x82>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <HAL_SPI_TransmitReceive+0x82>
 800a20e:	887b      	ldrh	r3, [r7, #2]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a21a:	e160      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b04      	cmp	r3, #4
 800a226:	d003      	beq.n	800a230 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2205      	movs	r2, #5
 800a22c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	887a      	ldrh	r2, [r7, #2]
 800a240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	887a      	ldrh	r2, [r7, #2]
 800a246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	887a      	ldrh	r2, [r7, #2]
 800a252:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	887a      	ldrh	r2, [r7, #2]
 800a258:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d007      	beq.n	800a284 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a28c:	d17c      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <HAL_SPI_TransmitReceive+0x10a>
 800a296:	8b7b      	ldrh	r3, [r7, #26]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d16a      	bne.n	800a372 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a0:	881a      	ldrh	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ac:	1c9a      	adds	r2, r3, #2
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2c0:	e057      	b.n	800a372 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d11b      	bne.n	800a308 <HAL_SPI_TransmitReceive+0x176>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d016      	beq.n	800a308 <HAL_SPI_TransmitReceive+0x176>
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d113      	bne.n	800a308 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e4:	881a      	ldrh	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f0:	1c9a      	adds	r2, r3, #2
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b01      	cmp	r3, #1
 800a314:	d119      	bne.n	800a34a <HAL_SPI_TransmitReceive+0x1b8>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d014      	beq.n	800a34a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32a:	b292      	uxth	r2, r2
 800a32c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	1c9a      	adds	r2, r3, #2
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	b29a      	uxth	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a346:	2301      	movs	r3, #1
 800a348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a34a:	f7fa fbf9 	bl	8004b40 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a356:	429a      	cmp	r2, r3
 800a358:	d80b      	bhi.n	800a372 <HAL_SPI_TransmitReceive+0x1e0>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d007      	beq.n	800a372 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a370:	e0b5      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a376:	b29b      	uxth	r3, r3
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1a2      	bne.n	800a2c2 <HAL_SPI_TransmitReceive+0x130>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d19d      	bne.n	800a2c2 <HAL_SPI_TransmitReceive+0x130>
 800a386:	e080      	b.n	800a48a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <HAL_SPI_TransmitReceive+0x204>
 800a390:	8b7b      	ldrh	r3, [r7, #26]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d16f      	bne.n	800a476 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	7812      	ldrb	r2, [r2, #0]
 800a3a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3bc:	e05b      	b.n	800a476 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f003 0302 	and.w	r3, r3, #2
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d11c      	bne.n	800a406 <HAL_SPI_TransmitReceive+0x274>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d017      	beq.n	800a406 <HAL_SPI_TransmitReceive+0x274>
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d114      	bne.n	800a406 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	330c      	adds	r3, #12
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b01      	cmp	r3, #1
 800a412:	d119      	bne.n	800a448 <HAL_SPI_TransmitReceive+0x2b6>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d014      	beq.n	800a448 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68da      	ldr	r2, [r3, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a444:	2301      	movs	r3, #1
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a448:	f7fa fb7a 	bl	8004b40 <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a454:	429a      	cmp	r2, r3
 800a456:	d803      	bhi.n	800a460 <HAL_SPI_TransmitReceive+0x2ce>
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d102      	bne.n	800a466 <HAL_SPI_TransmitReceive+0x2d4>
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d107      	bne.n	800a476 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a474:	e033      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d19e      	bne.n	800a3be <HAL_SPI_TransmitReceive+0x22c>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d199      	bne.n	800a3be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 f90a 	bl	800a6a8 <SPI_EndRxTxTransaction>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d006      	beq.n	800a4a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a4a6:	e01a      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	617b      	str	r3, [r7, #20]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4d4:	e003      	b.n	800a4de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a4e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3730      	adds	r7, #48	; 0x30
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a504:	f7fa fb1c 	bl	8004b40 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4413      	add	r3, r2
 800a512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a514:	f7fa fb14 	bl	8004b40 <HAL_GetTick>
 800a518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a51a:	4b39      	ldr	r3, [pc, #228]	; (800a600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	015b      	lsls	r3, r3, #5
 800a520:	0d1b      	lsrs	r3, r3, #20
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	fb02 f303 	mul.w	r3, r2, r3
 800a528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a52a:	e054      	b.n	800a5d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d050      	beq.n	800a5d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a534:	f7fa fb04 	bl	8004b40 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	429a      	cmp	r2, r3
 800a542:	d902      	bls.n	800a54a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d13d      	bne.n	800a5c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a562:	d111      	bne.n	800a588 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56c:	d004      	beq.n	800a578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a576:	d107      	bne.n	800a588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a590:	d10f      	bne.n	800a5b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5a0:	601a      	str	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e017      	b.n	800a5f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	bf0c      	ite	eq
 800a5e6:	2301      	moveq	r3, #1
 800a5e8:	2300      	movne	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d19b      	bne.n	800a52c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000004 	.word	0x20000004

0800a604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a618:	d111      	bne.n	800a63e <SPI_EndRxTransaction+0x3a>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a622:	d004      	beq.n	800a62e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62c:	d107      	bne.n	800a63e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a63c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a646:	d117      	bne.n	800a678 <SPI_EndRxTransaction+0x74>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a650:	d112      	bne.n	800a678 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2200      	movs	r2, #0
 800a65a:	2101      	movs	r1, #1
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f7ff ff49 	bl	800a4f4 <SPI_WaitFlagStateUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01a      	beq.n	800a69e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66c:	f043 0220 	orr.w	r2, r3, #32
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	e013      	b.n	800a6a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2200      	movs	r2, #0
 800a680:	2180      	movs	r1, #128	; 0x80
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff ff36 	bl	800a4f4 <SPI_WaitFlagStateUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	f043 0220 	orr.w	r2, r3, #32
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e000      	b.n	800a6a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2180      	movs	r1, #128	; 0x80
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff ff18 	bl	800a4f4 <SPI_WaitFlagStateUntilTimeout>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	f043 0220 	orr.w	r2, r3, #32
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e000      	b.n	800a6dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e041      	b.n	800a77a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d106      	bne.n	800a710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7f9 ffda 	bl	80046c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3304      	adds	r3, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f000 faa2 	bl	800ac6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d001      	beq.n	800a79c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e03a      	b.n	800a812 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f042 0201 	orr.w	r2, r2, #1
 800a7b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a18      	ldr	r2, [pc, #96]	; (800a81c <HAL_TIM_Base_Start_IT+0x98>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00e      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x58>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d009      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x58>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a14      	ldr	r2, [pc, #80]	; (800a820 <HAL_TIM_Base_Start_IT+0x9c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d004      	beq.n	800a7dc <HAL_TIM_Base_Start_IT+0x58>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a13      	ldr	r2, [pc, #76]	; (800a824 <HAL_TIM_Base_Start_IT+0xa0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d111      	bne.n	800a800 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b06      	cmp	r3, #6
 800a7ec:	d010      	beq.n	800a810 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f042 0201 	orr.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fe:	e007      	b.n	800a810 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	40012c00 	.word	0x40012c00
 800a820:	40000400 	.word	0x40000400
 800a824:	40000800 	.word	0x40000800

0800a828 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0201 	bic.w	r2, r2, #1
 800a83e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6a1a      	ldr	r2, [r3, #32]
 800a846:	f241 1311 	movw	r3, #4369	; 0x1111
 800a84a:	4013      	ands	r3, r2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10f      	bne.n	800a870 <HAL_TIM_Base_Stop_IT+0x48>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	f240 4344 	movw	r3, #1092	; 0x444
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d107      	bne.n	800a870 <HAL_TIM_Base_Stop_IT+0x48>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b02      	cmp	r3, #2
 800a898:	d122      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0202 	mvn.w	r2, #2
 800a8b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9b4 	bl	800ac34 <HAL_TIM_IC_CaptureCallback>
 800a8cc:	e005      	b.n	800a8da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f9a7 	bl	800ac22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9b6 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b04      	cmp	r3, #4
 800a8ec:	d122      	bne.n	800a934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d11b      	bne.n	800a934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0204 	mvn.w	r2, #4
 800a904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2202      	movs	r2, #2
 800a90a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f98a 	bl	800ac34 <HAL_TIM_IC_CaptureCallback>
 800a920:	e005      	b.n	800a92e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f97d 	bl	800ac22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f98c 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b08      	cmp	r3, #8
 800a940:	d122      	bne.n	800a988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0308 	and.w	r3, r3, #8
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d11b      	bne.n	800a988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0208 	mvn.w	r2, #8
 800a958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2204      	movs	r2, #4
 800a95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f960 	bl	800ac34 <HAL_TIM_IC_CaptureCallback>
 800a974:	e005      	b.n	800a982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f953 	bl	800ac22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f962 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0310 	and.w	r3, r3, #16
 800a992:	2b10      	cmp	r3, #16
 800a994:	d122      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0310 	and.w	r3, r3, #16
 800a9a0:	2b10      	cmp	r3, #16
 800a9a2:	d11b      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0210 	mvn.w	r2, #16
 800a9ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f936 	bl	800ac34 <HAL_TIM_IC_CaptureCallback>
 800a9c8:	e005      	b.n	800a9d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f929 	bl	800ac22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f938 	bl	800ac46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d10e      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d107      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f06f 0201 	mvn.w	r2, #1
 800aa00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7f8 f82e 	bl	8002a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa12:	2b80      	cmp	r3, #128	; 0x80
 800aa14:	d10e      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa20:	2b80      	cmp	r3, #128	; 0x80
 800aa22:	d107      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fa7b 	bl	800af2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3e:	2b40      	cmp	r3, #64	; 0x40
 800aa40:	d10e      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b40      	cmp	r3, #64	; 0x40
 800aa4e:	d107      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f8fc 	bl	800ac58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b20      	cmp	r3, #32
 800aa6c:	d10e      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d107      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0220 	mvn.w	r2, #32
 800aa84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa46 	bl	800af18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <HAL_TIM_ConfigClockSource+0x1c>
 800aaac:	2302      	movs	r3, #2
 800aaae:	e0b4      	b.n	800ac1a <HAL_TIM_ConfigClockSource+0x186>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aae8:	d03e      	beq.n	800ab68 <HAL_TIM_ConfigClockSource+0xd4>
 800aaea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaee:	f200 8087 	bhi.w	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800aaf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf6:	f000 8086 	beq.w	800ac06 <HAL_TIM_ConfigClockSource+0x172>
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafe:	d87f      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab00:	2b70      	cmp	r3, #112	; 0x70
 800ab02:	d01a      	beq.n	800ab3a <HAL_TIM_ConfigClockSource+0xa6>
 800ab04:	2b70      	cmp	r3, #112	; 0x70
 800ab06:	d87b      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab08:	2b60      	cmp	r3, #96	; 0x60
 800ab0a:	d050      	beq.n	800abae <HAL_TIM_ConfigClockSource+0x11a>
 800ab0c:	2b60      	cmp	r3, #96	; 0x60
 800ab0e:	d877      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab10:	2b50      	cmp	r3, #80	; 0x50
 800ab12:	d03c      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0xfa>
 800ab14:	2b50      	cmp	r3, #80	; 0x50
 800ab16:	d873      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab18:	2b40      	cmp	r3, #64	; 0x40
 800ab1a:	d058      	beq.n	800abce <HAL_TIM_ConfigClockSource+0x13a>
 800ab1c:	2b40      	cmp	r3, #64	; 0x40
 800ab1e:	d86f      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab20:	2b30      	cmp	r3, #48	; 0x30
 800ab22:	d064      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x15a>
 800ab24:	2b30      	cmp	r3, #48	; 0x30
 800ab26:	d86b      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d060      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x15a>
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d867      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d05c      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x15a>
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d05a      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x15a>
 800ab38:	e062      	b.n	800ac00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab4a:	f000 f968 	bl	800ae1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	609a      	str	r2, [r3, #8]
      break;
 800ab66:	e04f      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab78:	f000 f951 	bl	800ae1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab8a:	609a      	str	r2, [r3, #8]
      break;
 800ab8c:	e03c      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f000 f8c8 	bl	800ad30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2150      	movs	r1, #80	; 0x50
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 f91f 	bl	800adea <TIM_ITRx_SetConfig>
      break;
 800abac:	e02c      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abba:	461a      	mov	r2, r3
 800abbc:	f000 f8e6 	bl	800ad8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2160      	movs	r1, #96	; 0x60
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f90f 	bl	800adea <TIM_ITRx_SetConfig>
      break;
 800abcc:	e01c      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abda:	461a      	mov	r2, r3
 800abdc:	f000 f8a8 	bl	800ad30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2140      	movs	r1, #64	; 0x40
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f8ff 	bl	800adea <TIM_ITRx_SetConfig>
      break;
 800abec:	e00c      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4619      	mov	r1, r3
 800abf8:	4610      	mov	r0, r2
 800abfa:	f000 f8f6 	bl	800adea <TIM_ITRx_SetConfig>
      break;
 800abfe:	e003      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	73fb      	strb	r3, [r7, #15]
      break;
 800ac04:	e000      	b.n	800ac08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac2a:	bf00      	nop
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bc80      	pop	{r7}
 800ac32:	4770      	bx	lr

0800ac34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc80      	pop	{r7}
 800ac44:	4770      	bx	lr

0800ac46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bc80      	pop	{r7}
 800ac68:	4770      	bx	lr
	...

0800ac6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a29      	ldr	r2, [pc, #164]	; (800ad24 <TIM_Base_SetConfig+0xb8>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d00b      	beq.n	800ac9c <TIM_Base_SetConfig+0x30>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac8a:	d007      	beq.n	800ac9c <TIM_Base_SetConfig+0x30>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <TIM_Base_SetConfig+0xbc>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_Base_SetConfig+0x30>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a25      	ldr	r2, [pc, #148]	; (800ad2c <TIM_Base_SetConfig+0xc0>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d108      	bne.n	800acae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a1c      	ldr	r2, [pc, #112]	; (800ad24 <TIM_Base_SetConfig+0xb8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d00b      	beq.n	800acce <TIM_Base_SetConfig+0x62>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acbc:	d007      	beq.n	800acce <TIM_Base_SetConfig+0x62>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a19      	ldr	r2, [pc, #100]	; (800ad28 <TIM_Base_SetConfig+0xbc>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d003      	beq.n	800acce <TIM_Base_SetConfig+0x62>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a18      	ldr	r2, [pc, #96]	; (800ad2c <TIM_Base_SetConfig+0xc0>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d108      	bne.n	800ace0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a07      	ldr	r2, [pc, #28]	; (800ad24 <TIM_Base_SetConfig+0xb8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d103      	bne.n	800ad14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	691a      	ldr	r2, [r3, #16]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	615a      	str	r2, [r3, #20]
}
 800ad1a:	bf00      	nop
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bc80      	pop	{r7}
 800ad22:	4770      	bx	lr
 800ad24:	40012c00 	.word	0x40012c00
 800ad28:	40000400 	.word	0x40000400
 800ad2c:	40000800 	.word	0x40000800

0800ad30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f023 0201 	bic.w	r2, r3, #1
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	699b      	ldr	r3, [r3, #24]
 800ad52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	011b      	lsls	r3, r3, #4
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f023 030a 	bic.w	r3, r3, #10
 800ad6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	621a      	str	r2, [r3, #32]
}
 800ad82:	bf00      	nop
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bc80      	pop	{r7}
 800ad8a:	4770      	bx	lr

0800ad8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	f023 0210 	bic.w	r2, r3, #16
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	031b      	lsls	r3, r3, #12
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	621a      	str	r2, [r3, #32]
}
 800ade0:	bf00      	nop
 800ade2:	371c      	adds	r7, #28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bc80      	pop	{r7}
 800ade8:	4770      	bx	lr

0800adea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adea:	b480      	push	{r7}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f043 0307 	orr.w	r3, r3, #7
 800ae0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	609a      	str	r2, [r3, #8]
}
 800ae14:	bf00      	nop
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr

0800ae1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b087      	sub	sp, #28
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
 800ae2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	021a      	lsls	r2, r3, #8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	609a      	str	r2, [r3, #8]
}
 800ae52:	bf00      	nop
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d101      	bne.n	800ae74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae70:	2302      	movs	r3, #2
 800ae72:	e046      	b.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a16      	ldr	r2, [pc, #88]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00e      	beq.n	800aed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec0:	d009      	beq.n	800aed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a12      	ldr	r2, [pc, #72]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d004      	beq.n	800aed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a10      	ldr	r2, [pc, #64]	; (800af14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d10c      	bne.n	800aef0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aedc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr
 800af0c:	40012c00 	.word	0x40012c00
 800af10:	40000400 	.word	0x40000400
 800af14:	40000800 	.word	0x40000800

0800af18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr

0800af2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af32:	bf00      	nop
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr

0800af3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e042      	b.n	800afd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7f9 fbee 	bl	8004744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f82b 	bl	800afdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695a      	ldr	r2, [r3, #20]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68da      	ldr	r2, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	431a      	orrs	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b016:	f023 030c 	bic.w	r3, r3, #12
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6812      	ldr	r2, [r2, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	430b      	orrs	r3, r1
 800b022:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699a      	ldr	r2, [r3, #24]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	430a      	orrs	r2, r1
 800b038:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a2c      	ldr	r2, [pc, #176]	; (800b0f0 <UART_SetConfig+0x114>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d103      	bne.n	800b04c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b044:	f7fd fd3e 	bl	8008ac4 <HAL_RCC_GetPCLK2Freq>
 800b048:	60f8      	str	r0, [r7, #12]
 800b04a:	e002      	b.n	800b052 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b04c:	f7fd fd26 	bl	8008a9c <HAL_RCC_GetPCLK1Freq>
 800b050:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009a      	lsls	r2, r3, #2
 800b05c:	441a      	add	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	fbb2 f3f3 	udiv	r3, r2, r3
 800b068:	4a22      	ldr	r2, [pc, #136]	; (800b0f4 <UART_SetConfig+0x118>)
 800b06a:	fba2 2303 	umull	r2, r3, r2, r3
 800b06e:	095b      	lsrs	r3, r3, #5
 800b070:	0119      	lsls	r1, r3, #4
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4613      	mov	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	009a      	lsls	r2, r3, #2
 800b07c:	441a      	add	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	fbb2 f2f3 	udiv	r2, r2, r3
 800b088:	4b1a      	ldr	r3, [pc, #104]	; (800b0f4 <UART_SetConfig+0x118>)
 800b08a:	fba3 0302 	umull	r0, r3, r3, r2
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	2064      	movs	r0, #100	; 0x64
 800b092:	fb00 f303 	mul.w	r3, r0, r3
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	011b      	lsls	r3, r3, #4
 800b09a:	3332      	adds	r3, #50	; 0x32
 800b09c:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <UART_SetConfig+0x118>)
 800b09e:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a2:	095b      	lsrs	r3, r3, #5
 800b0a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0a8:	4419      	add	r1, r3
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009a      	lsls	r2, r3, #2
 800b0b4:	441a      	add	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0c0:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <UART_SetConfig+0x118>)
 800b0c2:	fba3 0302 	umull	r0, r3, r3, r2
 800b0c6:	095b      	lsrs	r3, r3, #5
 800b0c8:	2064      	movs	r0, #100	; 0x64
 800b0ca:	fb00 f303 	mul.w	r3, r0, r3
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	3332      	adds	r3, #50	; 0x32
 800b0d4:	4a07      	ldr	r2, [pc, #28]	; (800b0f4 <UART_SetConfig+0x118>)
 800b0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0da:	095b      	lsrs	r3, r3, #5
 800b0dc:	f003 020f 	and.w	r2, r3, #15
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b0e8:	bf00      	nop
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	40013800 	.word	0x40013800
 800b0f4:	51eb851f 	.word	0x51eb851f

0800b0f8 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800b0f8:	b5b0      	push	{r4, r5, r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800b102:	2300      	movs	r3, #0
 800b104:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800b106:	2300      	movs	r3, #0
 800b108:	777b      	strb	r3, [r7, #29]
 800b10a:	e01b      	b.n	800b144 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800b10c:	2300      	movs	r3, #0
 800b10e:	77bb      	strb	r3, [r7, #30]
 800b110:	e012      	b.n	800b138 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800b112:	7fba      	ldrb	r2, [r7, #30]
 800b114:	7f7b      	ldrb	r3, [r7, #29]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	461a      	mov	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	1899      	adds	r1, r3, r2
 800b120:	7fba      	ldrb	r2, [r7, #30]
 800b122:	7f7b      	ldrb	r3, [r7, #29]
 800b124:	7808      	ldrb	r0, [r1, #0]
 800b126:	4961      	ldr	r1, [pc, #388]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b128:	0092      	lsls	r2, r2, #2
 800b12a:	440a      	add	r2, r1
 800b12c:	4413      	add	r3, r2
 800b12e:	4602      	mov	r2, r0
 800b130:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800b132:	7fbb      	ldrb	r3, [r7, #30]
 800b134:	3301      	adds	r3, #1
 800b136:	77bb      	strb	r3, [r7, #30]
 800b138:	7fbb      	ldrb	r3, [r7, #30]
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d9e9      	bls.n	800b112 <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800b13e:	7f7b      	ldrb	r3, [r7, #29]
 800b140:	3301      	adds	r3, #1
 800b142:	777b      	strb	r3, [r7, #29]
 800b144:	7f7b      	ldrb	r3, [r7, #29]
 800b146:	2b03      	cmp	r3, #3
 800b148:	d9e0      	bls.n	800b10c <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e00b      	b.n	800b168 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800b150:	7ffb      	ldrb	r3, [r7, #31]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	441a      	add	r2, r3
 800b156:	7ffb      	ldrb	r3, [r7, #31]
 800b158:	7812      	ldrb	r2, [r2, #0]
 800b15a:	3320      	adds	r3, #32
 800b15c:	443b      	add	r3, r7
 800b15e:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800b162:	7ffb      	ldrb	r3, [r7, #31]
 800b164:	3301      	adds	r3, #1
 800b166:	77fb      	strb	r3, [r7, #31]
 800b168:	7ffb      	ldrb	r3, [r7, #31]
 800b16a:	2b0f      	cmp	r3, #15
 800b16c:	d9f0      	bls.n	800b150 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f89c 	bl	800b2b0 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800b178:	2301      	movs	r3, #1
 800b17a:	773b      	strb	r3, [r7, #28]
 800b17c:	e038      	b.n	800b1f0 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800b17e:	2300      	movs	r3, #0
 800b180:	777b      	strb	r3, [r7, #29]
 800b182:	e01f      	b.n	800b1c4 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800b184:	2300      	movs	r3, #0
 800b186:	77bb      	strb	r3, [r7, #30]
 800b188:	e016      	b.n	800b1b8 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800b18a:	7fba      	ldrb	r2, [r7, #30]
 800b18c:	7f7b      	ldrb	r3, [r7, #29]
 800b18e:	4947      	ldr	r1, [pc, #284]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b190:	0092      	lsls	r2, r2, #2
 800b192:	440a      	add	r2, r1
 800b194:	4413      	add	r3, r2
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	7fbd      	ldrb	r5, [r7, #30]
 800b19a:	7f7c      	ldrb	r4, [r7, #29]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 f8bf 	bl	800b320 <AES_Sub_Byte>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4a41      	ldr	r2, [pc, #260]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b1a8:	00ab      	lsls	r3, r5, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	4423      	add	r3, r4
 800b1ae:	460a      	mov	r2, r1
 800b1b0:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800b1b2:	7fbb      	ldrb	r3, [r7, #30]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	77bb      	strb	r3, [r7, #30]
 800b1b8:	7fbb      	ldrb	r3, [r7, #30]
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d9e5      	bls.n	800b18a <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800b1be:	7f7b      	ldrb	r3, [r7, #29]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	777b      	strb	r3, [r7, #29]
 800b1c4:	7f7b      	ldrb	r3, [r7, #29]
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d9dc      	bls.n	800b184 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800b1ca:	f000 f8c5 	bl	800b358 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800b1ce:	f000 f905 	bl	800b3dc <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800b1d2:	f107 020c 	add.w	r2, r7, #12
 800b1d6:	7f3b      	ldrb	r3, [r7, #28]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 f994 	bl	800b508 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800b1e0:	f107 030c 	add.w	r3, r7, #12
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 f863 	bl	800b2b0 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800b1ea:	7f3b      	ldrb	r3, [r7, #28]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	773b      	strb	r3, [r7, #28]
 800b1f0:	7f3b      	ldrb	r3, [r7, #28]
 800b1f2:	2b09      	cmp	r3, #9
 800b1f4:	d9c3      	bls.n	800b17e <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	777b      	strb	r3, [r7, #29]
 800b1fa:	e01f      	b.n	800b23c <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	77bb      	strb	r3, [r7, #30]
 800b200:	e016      	b.n	800b230 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800b202:	7fba      	ldrb	r2, [r7, #30]
 800b204:	7f7b      	ldrb	r3, [r7, #29]
 800b206:	4929      	ldr	r1, [pc, #164]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b208:	0092      	lsls	r2, r2, #2
 800b20a:	440a      	add	r2, r1
 800b20c:	4413      	add	r3, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	7fbd      	ldrb	r5, [r7, #30]
 800b212:	7f7c      	ldrb	r4, [r7, #29]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f883 	bl	800b320 <AES_Sub_Byte>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4619      	mov	r1, r3
 800b21e:	4a23      	ldr	r2, [pc, #140]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b220:	00ab      	lsls	r3, r5, #2
 800b222:	4413      	add	r3, r2
 800b224:	4423      	add	r3, r4
 800b226:	460a      	mov	r2, r1
 800b228:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800b22a:	7fbb      	ldrb	r3, [r7, #30]
 800b22c:	3301      	adds	r3, #1
 800b22e:	77bb      	strb	r3, [r7, #30]
 800b230:	7fbb      	ldrb	r3, [r7, #30]
 800b232:	2b03      	cmp	r3, #3
 800b234:	d9e5      	bls.n	800b202 <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800b236:	7f7b      	ldrb	r3, [r7, #29]
 800b238:	3301      	adds	r3, #1
 800b23a:	777b      	strb	r3, [r7, #29]
 800b23c:	7f7b      	ldrb	r3, [r7, #29]
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d9dc      	bls.n	800b1fc <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800b242:	f000 f889 	bl	800b358 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800b246:	f107 020c 	add.w	r2, r7, #12
 800b24a:	7f3b      	ldrb	r3, [r7, #28]
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 f95a 	bl	800b508 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800b254:	f107 030c 	add.w	r3, r7, #12
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f829 	bl	800b2b0 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800b25e:	2300      	movs	r3, #0
 800b260:	777b      	strb	r3, [r7, #29]
 800b262:	e01a      	b.n	800b29a <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800b264:	2300      	movs	r3, #0
 800b266:	77bb      	strb	r3, [r7, #30]
 800b268:	e011      	b.n	800b28e <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800b26a:	7fb9      	ldrb	r1, [r7, #30]
 800b26c:	7f7a      	ldrb	r2, [r7, #29]
 800b26e:	7fb8      	ldrb	r0, [r7, #30]
 800b270:	7f7b      	ldrb	r3, [r7, #29]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4403      	add	r3, r0
 800b276:	4618      	mov	r0, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4403      	add	r3, r0
 800b27c:	480b      	ldr	r0, [pc, #44]	; (800b2ac <AES_Encrypt+0x1b4>)
 800b27e:	0089      	lsls	r1, r1, #2
 800b280:	4401      	add	r1, r0
 800b282:	440a      	add	r2, r1
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800b288:	7fbb      	ldrb	r3, [r7, #30]
 800b28a:	3301      	adds	r3, #1
 800b28c:	77bb      	strb	r3, [r7, #30]
 800b28e:	7fbb      	ldrb	r3, [r7, #30]
 800b290:	2b03      	cmp	r3, #3
 800b292:	d9ea      	bls.n	800b26a <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800b294:	7f7b      	ldrb	r3, [r7, #29]
 800b296:	3301      	adds	r3, #1
 800b298:	777b      	strb	r3, [r7, #29]
 800b29a:	7f7b      	ldrb	r3, [r7, #29]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d9e1      	bls.n	800b264 <AES_Encrypt+0x16c>
		}
	}

}
 800b2a0:	bf00      	nop
 800b2a2:	bf00      	nop
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000554 	.word	0x20000554

0800b2b0 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73bb      	strb	r3, [r7, #14]
 800b2bc:	e024      	b.n	800b308 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
 800b2c2:	e01b      	b.n	800b2fc <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800b2c4:	7bfa      	ldrb	r2, [r7, #15]
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	4914      	ldr	r1, [pc, #80]	; (800b31c <AES_Add_Round_Key+0x6c>)
 800b2ca:	0092      	lsls	r2, r2, #2
 800b2cc:	440a      	add	r2, r1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	7818      	ldrb	r0, [r3, #0]
 800b2d2:	7bfa      	ldrb	r2, [r7, #15]
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	461a      	mov	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4413      	add	r3, r2
 800b2e0:	7819      	ldrb	r1, [r3, #0]
 800b2e2:	7bfa      	ldrb	r2, [r7, #15]
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	4041      	eors	r1, r0
 800b2e8:	b2c8      	uxtb	r0, r1
 800b2ea:	490c      	ldr	r1, [pc, #48]	; (800b31c <AES_Add_Round_Key+0x6c>)
 800b2ec:	0092      	lsls	r2, r2, #2
 800b2ee:	440a      	add	r2, r1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d9e0      	bls.n	800b2c4 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	3301      	adds	r3, #1
 800b306:	73bb      	strb	r3, [r7, #14]
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d9d7      	bls.n	800b2be <AES_Add_Round_Key+0xe>
		}
	}
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20000554 	.word	0x20000554

0800b320 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	091b      	lsrs	r3, r3, #4
 800b32e:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	f003 030f 	and.w	r3, r3, #15
 800b336:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	4905      	ldr	r1, [pc, #20]	; (800b354 <AES_Sub_Byte+0x34>)
 800b33e:	0112      	lsls	r2, r2, #4
 800b340:	440a      	add	r2, r1
 800b342:	4413      	add	r3, r2
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800b348:	7b7b      	ldrb	r3, [r7, #13]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	bc80      	pop	{r7}
 800b352:	4770      	bx	lr
 800b354:	20000010 	.word	0x20000010

0800b358 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800b35e:	4b1e      	ldr	r3, [pc, #120]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b360:	791b      	ldrb	r3, [r3, #4]
 800b362:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800b364:	4b1c      	ldr	r3, [pc, #112]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b366:	795a      	ldrb	r2, [r3, #5]
 800b368:	4b1b      	ldr	r3, [pc, #108]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b36a:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800b36c:	4b1a      	ldr	r3, [pc, #104]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b36e:	799a      	ldrb	r2, [r3, #6]
 800b370:	4b19      	ldr	r3, [pc, #100]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b372:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800b374:	4b18      	ldr	r3, [pc, #96]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b376:	79da      	ldrb	r2, [r3, #7]
 800b378:	4b17      	ldr	r3, [pc, #92]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b37a:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800b37c:	4a16      	ldr	r2, [pc, #88]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800b382:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b384:	7a1b      	ldrb	r3, [r3, #8]
 800b386:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800b388:	4b13      	ldr	r3, [pc, #76]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b38a:	7a9a      	ldrb	r2, [r3, #10]
 800b38c:	4b12      	ldr	r3, [pc, #72]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b38e:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800b390:	4a11      	ldr	r2, [pc, #68]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b392:	79fb      	ldrb	r3, [r7, #7]
 800b394:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b398:	7a5b      	ldrb	r3, [r3, #9]
 800b39a:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800b39c:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b39e:	7ada      	ldrb	r2, [r3, #11]
 800b3a0:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3a2:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800b3a4:	4a0c      	ldr	r2, [pc, #48]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3a6:	79fb      	ldrb	r3, [r7, #7]
 800b3a8:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3ac:	7bdb      	ldrb	r3, [r3, #15]
 800b3ae:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800b3b0:	4b09      	ldr	r3, [pc, #36]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3b2:	7b9a      	ldrb	r2, [r3, #14]
 800b3b4:	4b08      	ldr	r3, [pc, #32]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3b6:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800b3b8:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3ba:	7b5a      	ldrb	r2, [r3, #13]
 800b3bc:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3be:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3c2:	7b1a      	ldrb	r2, [r3, #12]
 800b3c4:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3c6:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800b3c8:	4a03      	ldr	r2, [pc, #12]	; (800b3d8 <AES_Shift_Rows+0x80>)
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	7313      	strb	r3, [r2, #12]
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bc80      	pop	{r7}
 800b3d6:	4770      	bx	lr
 800b3d8:	20000554 	.word	0x20000554

0800b3dc <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	73bb      	strb	r3, [r7, #14]
 800b3e6:	e082      	b.n	800b4ee <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
 800b3ec:	e033      	b.n	800b456 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800b3ee:	7bf9      	ldrb	r1, [r7, #15]
 800b3f0:	7bba      	ldrb	r2, [r7, #14]
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	4843      	ldr	r0, [pc, #268]	; (800b504 <AES_Mix_Collums+0x128>)
 800b3f6:	0089      	lsls	r1, r1, #2
 800b3f8:	4401      	add	r1, r0
 800b3fa:	440a      	add	r2, r1
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	3310      	adds	r3, #16
 800b400:	443b      	add	r3, r7
 800b402:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800b406:	7bfa      	ldrb	r2, [r7, #15]
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	493e      	ldr	r1, [pc, #248]	; (800b504 <AES_Mix_Collums+0x128>)
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	440a      	add	r2, r1
 800b410:	4413      	add	r3, r2
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	0052      	lsls	r2, r2, #1
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	3310      	adds	r3, #16
 800b41c:	443b      	add	r3, r7
 800b41e:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	4937      	ldr	r1, [pc, #220]	; (800b504 <AES_Mix_Collums+0x128>)
 800b428:	0092      	lsls	r2, r2, #2
 800b42a:	440a      	add	r2, r1
 800b42c:	4413      	add	r3, r2
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b25b      	sxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	da0c      	bge.n	800b450 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	3310      	adds	r3, #16
 800b43a:	443b      	add	r3, r7
 800b43c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	f082 021b 	eor.w	r2, r2, #27
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	3310      	adds	r3, #16
 800b44a:	443b      	add	r3, r7
 800b44c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	3301      	adds	r3, #1
 800b454:	73fb      	strb	r3, [r7, #15]
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d9c8      	bls.n	800b3ee <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800b45c:	793a      	ldrb	r2, [r7, #4]
 800b45e:	7a7b      	ldrb	r3, [r7, #9]
 800b460:	4053      	eors	r3, r2
 800b462:	b2da      	uxtb	r2, r3
 800b464:	797b      	ldrb	r3, [r7, #5]
 800b466:	4053      	eors	r3, r2
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	7abb      	ldrb	r3, [r7, #10]
 800b46c:	4053      	eors	r3, r2
 800b46e:	b2d9      	uxtb	r1, r3
 800b470:	7afa      	ldrb	r2, [r7, #11]
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	404a      	eors	r2, r1
 800b476:	b2d1      	uxtb	r1, r2
 800b478:	4a22      	ldr	r2, [pc, #136]	; (800b504 <AES_Mix_Collums+0x128>)
 800b47a:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800b47c:	7a3a      	ldrb	r2, [r7, #8]
 800b47e:	797b      	ldrb	r3, [r7, #5]
 800b480:	4053      	eors	r3, r2
 800b482:	b2da      	uxtb	r2, r3
 800b484:	7abb      	ldrb	r3, [r7, #10]
 800b486:	4053      	eors	r3, r2
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	79bb      	ldrb	r3, [r7, #6]
 800b48c:	4053      	eors	r3, r2
 800b48e:	b2d9      	uxtb	r1, r3
 800b490:	7afa      	ldrb	r2, [r7, #11]
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	404a      	eors	r2, r1
 800b496:	b2d1      	uxtb	r1, r2
 800b498:	4a1a      	ldr	r2, [pc, #104]	; (800b504 <AES_Mix_Collums+0x128>)
 800b49a:	4413      	add	r3, r2
 800b49c:	460a      	mov	r2, r1
 800b49e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800b4a0:	7a3a      	ldrb	r2, [r7, #8]
 800b4a2:	7a7b      	ldrb	r3, [r7, #9]
 800b4a4:	4053      	eors	r3, r2
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	79bb      	ldrb	r3, [r7, #6]
 800b4aa:	4053      	eors	r3, r2
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	7afb      	ldrb	r3, [r7, #11]
 800b4b0:	4053      	eors	r3, r2
 800b4b2:	b2d9      	uxtb	r1, r3
 800b4b4:	79fa      	ldrb	r2, [r7, #7]
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	404a      	eors	r2, r1
 800b4ba:	b2d1      	uxtb	r1, r2
 800b4bc:	4a11      	ldr	r2, [pc, #68]	; (800b504 <AES_Mix_Collums+0x128>)
 800b4be:	4413      	add	r3, r2
 800b4c0:	460a      	mov	r2, r1
 800b4c2:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800b4c4:	7a3a      	ldrb	r2, [r7, #8]
 800b4c6:	793b      	ldrb	r3, [r7, #4]
 800b4c8:	4053      	eors	r3, r2
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	7a7b      	ldrb	r3, [r7, #9]
 800b4ce:	4053      	eors	r3, r2
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	7abb      	ldrb	r3, [r7, #10]
 800b4d4:	4053      	eors	r3, r2
 800b4d6:	b2d9      	uxtb	r1, r3
 800b4d8:	79fa      	ldrb	r2, [r7, #7]
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	404a      	eors	r2, r1
 800b4de:	b2d1      	uxtb	r1, r2
 800b4e0:	4a08      	ldr	r2, [pc, #32]	; (800b504 <AES_Mix_Collums+0x128>)
 800b4e2:	4413      	add	r3, r2
 800b4e4:	460a      	mov	r2, r1
 800b4e6:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	73bb      	strb	r3, [r7, #14]
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	f67f af79 	bls.w	800b3e8 <AES_Mix_Collums+0xc>
	}
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20000554 	.word	0x20000554

0800b508 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800b508:	b590      	push	{r4, r7, lr}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	6039      	str	r1, [r7, #0]
 800b512:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800b514:	2300      	movs	r3, #0
 800b516:	75fb      	strb	r3, [r7, #23]
 800b518:	e00c      	b.n	800b534 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	330c      	adds	r3, #12
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	441a      	add	r2, r3
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	7812      	ldrb	r2, [r2, #0]
 800b526:	3318      	adds	r3, #24
 800b528:	443b      	add	r3, r7
 800b52a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	3301      	adds	r3, #1
 800b532:	75fb      	strb	r3, [r7, #23]
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b03      	cmp	r3, #3
 800b538:	d9ef      	bls.n	800b51a <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800b53a:	7b3b      	ldrb	r3, [r7, #12]
 800b53c:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800b53e:	7b7b      	ldrb	r3, [r7, #13]
 800b540:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800b54a:	7d3b      	ldrb	r3, [r7, #20]
 800b54c:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800b54e:	2300      	movs	r3, #0
 800b550:	75fb      	strb	r3, [r7, #23]
 800b552:	e012      	b.n	800b57a <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	3318      	adds	r3, #24
 800b558:	443b      	add	r3, r7
 800b55a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b55e:	7dfc      	ldrb	r4, [r7, #23]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fedd 	bl	800b320 <AES_Sub_Byte>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	f104 0318 	add.w	r3, r4, #24
 800b56e:	443b      	add	r3, r7
 800b570:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800b574:	7dfb      	ldrb	r3, [r7, #23]
 800b576:	3301      	adds	r3, #1
 800b578:	75fb      	strb	r3, [r7, #23]
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d9e9      	bls.n	800b554 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800b580:	2301      	movs	r3, #1
 800b582:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800b584:	e010      	b.n	800b5a8 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800b586:	7d7b      	ldrb	r3, [r7, #21]
 800b588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b58c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800b58e:	7d7b      	ldrb	r3, [r7, #21]
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800b594:	7cfb      	ldrb	r3, [r7, #19]
 800b596:	2b80      	cmp	r3, #128	; 0x80
 800b598:	d103      	bne.n	800b5a2 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800b59a:	7d7b      	ldrb	r3, [r7, #21]
 800b59c:	f083 031b 	eor.w	r3, r3, #27
 800b5a0:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d1eb      	bne.n	800b586 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800b5ae:	7b3a      	ldrb	r2, [r7, #12]
 800b5b0:	7d7b      	ldrb	r3, [r7, #21]
 800b5b2:	4053      	eors	r3, r2
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	75fb      	strb	r3, [r7, #23]
 800b5bc:	e02f      	b.n	800b61e <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800b5be:	2300      	movs	r3, #0
 800b5c0:	75bb      	strb	r3, [r7, #22]
 800b5c2:	e026      	b.n	800b612 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800b5c4:	7dba      	ldrb	r2, [r7, #22]
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	7819      	ldrb	r1, [r3, #0]
 800b5d4:	7dbb      	ldrb	r3, [r7, #22]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	443b      	add	r3, r7
 800b5da:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800b5de:	7db8      	ldrb	r0, [r7, #22]
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4403      	add	r3, r0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	4403      	add	r3, r0
 800b5ec:	404a      	eors	r2, r1
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800b5f2:	7dba      	ldrb	r2, [r7, #22]
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	441a      	add	r2, r3
 800b600:	7dbb      	ldrb	r3, [r7, #22]
 800b602:	7812      	ldrb	r2, [r2, #0]
 800b604:	3318      	adds	r3, #24
 800b606:	443b      	add	r3, r7
 800b608:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800b60c:	7dbb      	ldrb	r3, [r7, #22]
 800b60e:	3301      	adds	r3, #1
 800b610:	75bb      	strb	r3, [r7, #22]
 800b612:	7dbb      	ldrb	r3, [r7, #22]
 800b614:	2b03      	cmp	r3, #3
 800b616:	d9d5      	bls.n	800b5c4 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	3301      	adds	r3, #1
 800b61c:	75fb      	strb	r3, [r7, #23]
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	2b03      	cmp	r3, #3
 800b622:	d9cc      	bls.n	800b5be <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd90      	pop	{r4, r7, pc}

0800b62e <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b08a      	sub	sp, #40	; 0x28
 800b632:	af00      	add	r7, sp, #0
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	461a      	mov	r2, r3
 800b63a:	460b      	mov	r3, r1
 800b63c:	72fb      	strb	r3, [r7, #11]
 800b63e:	4613      	mov	r3, r2
 800b640:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800b642:	2300      	movs	r3, #0
 800b644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800b64e:	2300      	movs	r3, #0
 800b650:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800b654:	7afb      	ldrb	r3, [r7, #11]
 800b656:	091b      	lsrs	r3, r3, #4
 800b658:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800b65c:	7afb      	ldrb	r3, [r7, #11]
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 800b666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d004      	beq.n	800b678 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800b66e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b672:	3301      	adds	r3, #1
 800b674:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b67e:	e07e      	b.n	800b77e <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800b680:	2301      	movs	r3, #1
 800b682:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800b684:	2300      	movs	r3, #0
 800b686:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800b688:	2300      	movs	r3, #0
 800b68a:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800b68c:	2300      	movs	r3, #0
 800b68e:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800b690:	2300      	movs	r3, #0
 800b692:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800b694:	7abb      	ldrb	r3, [r7, #10]
 800b696:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800b698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69a:	78db      	ldrb	r3, [r3, #3]
 800b69c:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	789b      	ldrb	r3, [r3, #2]
 800b6a2:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800b6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a6:	785b      	ldrb	r3, [r3, #1]
 800b6a8:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	0a1b      	lsrs	r3, r3, #8
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 800b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800b6d8:	f107 0314 	add.w	r3, r7, #20
 800b6dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff fd0a 	bl	800b0f8 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800b6e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d01c      	beq.n	800b72a <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b6f6:	e013      	b.n	800b720 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	781a      	ldrb	r2, [r3, #0]
 800b6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b700:	3328      	adds	r3, #40	; 0x28
 800b702:	443b      	add	r3, r7
 800b704:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b708:	4053      	eors	r3, r2
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	701a      	strb	r2, [r3, #0]
				Data++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3301      	adds	r3, #1
 800b714:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800b716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b71a:	3301      	adds	r3, #1
 800b71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b724:	2b0f      	cmp	r3, #15
 800b726:	d9e7      	bls.n	800b6f8 <Encrypt_Payload+0xca>
 800b728:	e024      	b.n	800b774 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800b72a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800b732:	2310      	movs	r3, #16
 800b734:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b73e:	e013      	b.n	800b768 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b748:	3328      	adds	r3, #40	; 0x28
 800b74a:	443b      	add	r3, r7
 800b74c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800b750:	4053      	eors	r3, r2
 800b752:	b2da      	uxtb	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	701a      	strb	r2, [r3, #0]
				Data++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800b75e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b762:	3301      	adds	r3, #1
 800b764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b768:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b76c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b770:	429a      	cmp	r2, r3
 800b772:	d3e5      	bcc.n	800b740 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800b774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b778:	3301      	adds	r3, #1
 800b77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b77e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b782:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b786:	429a      	cmp	r2, r3
 800b788:	f67f af7a 	bls.w	800b680 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	3728      	adds	r7, #40	; 0x28
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b09b      	sub	sp, #108	; 0x6c
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800b7a8:	4bba      	ldr	r3, [pc, #744]	; (800ba94 <Calculate_MIC+0x2fc>)
 800b7aa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800b7ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800b7b4:	4bb7      	ldr	r3, [pc, #732]	; (800ba94 <Calculate_MIC+0x2fc>)
 800b7b6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800b7ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800b7c0:	4bb4      	ldr	r3, [pc, #720]	; (800ba94 <Calculate_MIC+0x2fc>)
 800b7c2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800b7c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800b7cc:	4bb1      	ldr	r3, [pc, #708]	; (800ba94 <Calculate_MIC+0x2fc>)
 800b7ce:	f107 0414 	add.w	r4, r7, #20
 800b7d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800b7ea:	2349      	movs	r3, #73	; 0x49
 800b7ec:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800b808:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800b80c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 800b810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b814:	78db      	ldrb	r3, [r3, #3]
 800b816:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800b81a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b81e:	789b      	ldrb	r3, [r3, #2]
 800b820:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 800b824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 800b82e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	0a1b      	lsrs	r3, r3, #8
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800b84a:	2300      	movs	r3, #0
 800b84c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 800b850:	2300      	movs	r3, #0
 800b852:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	091b      	lsrs	r3, r3, #4
 800b866:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800b86a:	79fb      	ldrb	r3, [r7, #7]
 800b86c:	f003 030f 	and.w	r3, r3, #15
 800b870:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 800b874:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800b87c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b880:	3301      	adds	r3, #1
 800b882:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800b886:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800b88a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b88e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b890:	4618      	mov	r0, r3
 800b892:	f000 f901 	bl	800ba98 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800b896:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b89a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fc2b 	bl	800b0f8 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8a8:	e010      	b.n	800b8cc <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800b8aa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b8ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8b2:	3268      	adds	r2, #104	; 0x68
 800b8b4:	443a      	add	r2, r7
 800b8b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b8ba:	3368      	adds	r3, #104	; 0x68
 800b8bc:	443b      	add	r3, r7
 800b8be:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800b8c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8d0:	2b0f      	cmp	r3, #15
 800b8d2:	d9ea      	bls.n	800b8aa <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800b8d4:	e043      	b.n	800b95e <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8dc:	e00f      	b.n	800b8fe <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800b8de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	3368      	adds	r3, #104	; 0x68
 800b8e8:	443b      	add	r3, r7
 800b8ea:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800b8f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b902:	2b0f      	cmp	r3, #15
 800b904:	d9eb      	bls.n	800b8de <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800b906:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b90a:	f107 0314 	add.w	r3, r7, #20
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f000 f949 	bl	800bba8 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800b916:	f107 0314 	add.w	r3, r7, #20
 800b91a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff fbeb 	bl	800b0f8 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800b922:	2300      	movs	r3, #0
 800b924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b928:	e010      	b.n	800b94c <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800b92a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b92e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b932:	3268      	adds	r2, #104	; 0x68
 800b934:	443a      	add	r2, r7
 800b936:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800b93a:	3368      	adds	r3, #104	; 0x68
 800b93c:	443b      	add	r3, r7
 800b93e:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800b942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b946:	3301      	adds	r3, #1
 800b948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b94c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b950:	2b0f      	cmp	r3, #15
 800b952:	d9ea      	bls.n	800b92a <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800b954:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800b958:	3301      	adds	r3, #1
 800b95a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 800b95e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800b962:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b966:	429a      	cmp	r2, r3
 800b968:	d3b5      	bcc.n	800b8d6 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800b96a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d12e      	bne.n	800b9d0 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800b972:	2300      	movs	r3, #0
 800b974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b978:	e00f      	b.n	800b99a <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800b97a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	3368      	adds	r3, #104	; 0x68
 800b984:	443b      	add	r3, r7
 800b986:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3301      	adds	r3, #1
 800b98e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800b990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b994:	3301      	adds	r3, #1
 800b996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b99a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b99e:	2b0f      	cmp	r3, #15
 800b9a0:	d9eb      	bls.n	800b97a <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800b9a2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b9a6:	f107 0314 	add.w	r3, r7, #20
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f8fb 	bl	800bba8 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800b9b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b9b6:	f107 0314 	add.w	r3, r7, #20
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f8f3 	bl	800bba8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800b9c2:	f107 0314 	add.w	r3, r7, #20
 800b9c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fb95 	bl	800b0f8 <AES_Encrypt>
 800b9ce:	e04d      	b.n	800ba6c <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b9d6:	e02f      	b.n	800ba38 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800b9d8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b9dc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d20a      	bcs.n	800b9fa <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800b9e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	3368      	adds	r3, #104	; 0x68
 800b9ee:	443b      	add	r3, r7
 800b9f0:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800b9fa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b9fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d106      	bne.n	800ba14 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800ba06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba0a:	3368      	adds	r3, #104	; 0x68
 800ba0c:	443b      	add	r3, r7
 800ba0e:	2280      	movs	r2, #128	; 0x80
 800ba10:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800ba14:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ba18:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d906      	bls.n	800ba2e <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800ba20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba24:	3368      	adds	r3, #104	; 0x68
 800ba26:	443b      	add	r3, r7
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800ba2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba32:	3301      	adds	r3, #1
 800ba34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ba38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ba3c:	2b0f      	cmp	r3, #15
 800ba3e:	d9cb      	bls.n	800b9d8 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800ba40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ba44:	f107 0314 	add.w	r3, r7, #20
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 f8ac 	bl	800bba8 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800ba50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba54:	f107 0314 	add.w	r3, r7, #20
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 f8a4 	bl	800bba8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fb46 	bl	800b0f8 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800ba6c:	7d3a      	ldrb	r2, [r7, #20]
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	3301      	adds	r3, #1
 800ba76:	7d7a      	ldrb	r2, [r7, #21]
 800ba78:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3302      	adds	r3, #2
 800ba7e:	7dba      	ldrb	r2, [r7, #22]
 800ba80:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	3303      	adds	r3, #3
 800ba86:	7dfa      	ldrb	r2, [r7, #23]
 800ba88:	701a      	strb	r2, [r3, #0]
}
 800ba8a:	bf00      	nop
 800ba8c:	376c      	adds	r7, #108	; 0x6c
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd90      	pop	{r4, r7, pc}
 800ba92:	bf00      	nop
 800ba94:	0800ce00 	.word	0x0800ce00

0800ba98 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7ff fb26 	bl	800b0f8 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	da02      	bge.n	800babc <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800bab6:	2301      	movs	r3, #1
 800bab8:	75bb      	strb	r3, [r7, #22]
 800baba:	e001      	b.n	800bac0 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f83c 	bl	800bb3e <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800bac6:	7dbb      	ldrb	r3, [r7, #22]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d109      	bne.n	800bae0 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	330f      	adds	r3, #15
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	320f      	adds	r2, #15
 800bad6:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bada:	43db      	mvns	r3, r3
 800badc:	b2db      	uxtb	r3, r3
 800bade:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800bae0:	2300      	movs	r3, #0
 800bae2:	75fb      	strb	r3, [r7, #23]
 800bae4:	e00a      	b.n	800bafc <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	441a      	add	r2, r3
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	440b      	add	r3, r1
 800baf2:	7812      	ldrb	r2, [r2, #0]
 800baf4:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	3301      	adds	r3, #1
 800bafa:	75fb      	strb	r3, [r7, #23]
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	d9f1      	bls.n	800bae6 <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b25b      	sxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	da02      	bge.n	800bb12 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	75bb      	strb	r3, [r7, #22]
 800bb10:	e001      	b.n	800bb16 <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800bb16:	68b8      	ldr	r0, [r7, #8]
 800bb18:	f000 f811 	bl	800bb3e <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800bb1c:	7dbb      	ldrb	r3, [r7, #22]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d109      	bne.n	800bb36 <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	330f      	adds	r3, #15
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	320f      	adds	r2, #15
 800bb2c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bb30:	43db      	mvns	r3, r3
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	7013      	strb	r3, [r2, #0]
	}
}
 800bb36:	bf00      	nop
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b085      	sub	sp, #20
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
 800bb4e:	e022      	b.n	800bb96 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b0e      	cmp	r3, #14
 800bb54:	d80d      	bhi.n	800bb72 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	b25b      	sxtb	r3, r3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	da02      	bge.n	800bb6c <Shift_Left+0x2e>
			{
				Overflow = 1;
 800bb66:	2301      	movs	r3, #1
 800bb68:	73bb      	strb	r3, [r7, #14]
 800bb6a:	e004      	b.n	800bb76 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73bb      	strb	r3, [r7, #14]
 800bb70:	e001      	b.n	800bb76 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	b2d9      	uxtb	r1, r3
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4413      	add	r3, r2
 800bb88:	7bba      	ldrb	r2, [r7, #14]
 800bb8a:	440a      	add	r2, r1
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	3301      	adds	r3, #1
 800bb94:	73fb      	strb	r3, [r7, #15]
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	d9d9      	bls.n	800bb50 <Shift_Left+0x12>
	}
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bc80      	pop	{r7}
 800bba6:	4770      	bx	lr

0800bba8 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]
 800bbb6:	e010      	b.n	800bbda <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	7819      	ldrb	r1, [r3, #0]
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	4403      	add	r3, r0
 800bbce:	404a      	eors	r2, r1
 800bbd0:	b2d2      	uxtb	r2, r2
 800bbd2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	73fb      	strb	r3, [r7, #15]
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b0f      	cmp	r3, #15
 800bbde:	d9eb      	bls.n	800bbb8 <XOR+0x10>
	}
}
 800bbe0:	bf00      	nop
 800bbe2:	bf00      	nop
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bc80      	pop	{r7}
 800bbea:	4770      	bx	lr

0800bbec <__assert_func>:
 800bbec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbee:	4614      	mov	r4, r2
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <__assert_func+0x2c>)
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68d8      	ldr	r0, [r3, #12]
 800bbfa:	b14c      	cbz	r4, 800bc10 <__assert_func+0x24>
 800bbfc:	4b07      	ldr	r3, [pc, #28]	; (800bc1c <__assert_func+0x30>)
 800bbfe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc02:	9100      	str	r1, [sp, #0]
 800bc04:	462b      	mov	r3, r5
 800bc06:	4906      	ldr	r1, [pc, #24]	; (800bc20 <__assert_func+0x34>)
 800bc08:	f000 f8b2 	bl	800bd70 <fiprintf>
 800bc0c:	f000 f9bd 	bl	800bf8a <abort>
 800bc10:	4b04      	ldr	r3, [pc, #16]	; (800bc24 <__assert_func+0x38>)
 800bc12:	461c      	mov	r4, r3
 800bc14:	e7f3      	b.n	800bbfe <__assert_func+0x12>
 800bc16:	bf00      	nop
 800bc18:	20000168 	.word	0x20000168
 800bc1c:	0800ceba 	.word	0x0800ceba
 800bc20:	0800cec7 	.word	0x0800cec7
 800bc24:	0800cef5 	.word	0x0800cef5

0800bc28 <std>:
 800bc28:	2300      	movs	r3, #0
 800bc2a:	b510      	push	{r4, lr}
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bc32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc36:	6083      	str	r3, [r0, #8]
 800bc38:	8181      	strh	r1, [r0, #12]
 800bc3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bc3c:	81c2      	strh	r2, [r0, #14]
 800bc3e:	6183      	str	r3, [r0, #24]
 800bc40:	4619      	mov	r1, r3
 800bc42:	2208      	movs	r2, #8
 800bc44:	305c      	adds	r0, #92	; 0x5c
 800bc46:	f000 f916 	bl	800be76 <memset>
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	; (800bc80 <std+0x58>)
 800bc4c:	6224      	str	r4, [r4, #32]
 800bc4e:	6263      	str	r3, [r4, #36]	; 0x24
 800bc50:	4b0c      	ldr	r3, [pc, #48]	; (800bc84 <std+0x5c>)
 800bc52:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <std+0x60>)
 800bc56:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc58:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <std+0x64>)
 800bc5a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <std+0x68>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	d006      	beq.n	800bc70 <std+0x48>
 800bc62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc66:	4294      	cmp	r4, r2
 800bc68:	d002      	beq.n	800bc70 <std+0x48>
 800bc6a:	33d0      	adds	r3, #208	; 0xd0
 800bc6c:	429c      	cmp	r4, r3
 800bc6e:	d105      	bne.n	800bc7c <std+0x54>
 800bc70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc78:	f000 b976 	b.w	800bf68 <__retarget_lock_init_recursive>
 800bc7c:	bd10      	pop	{r4, pc}
 800bc7e:	bf00      	nop
 800bc80:	0800bdd1 	.word	0x0800bdd1
 800bc84:	0800bdf3 	.word	0x0800bdf3
 800bc88:	0800be2b 	.word	0x0800be2b
 800bc8c:	0800be4f 	.word	0x0800be4f
 800bc90:	20000564 	.word	0x20000564

0800bc94 <stdio_exit_handler>:
 800bc94:	4a02      	ldr	r2, [pc, #8]	; (800bca0 <stdio_exit_handler+0xc>)
 800bc96:	4903      	ldr	r1, [pc, #12]	; (800bca4 <stdio_exit_handler+0x10>)
 800bc98:	4803      	ldr	r0, [pc, #12]	; (800bca8 <stdio_exit_handler+0x14>)
 800bc9a:	f000 b87b 	b.w	800bd94 <_fwalk_sglue>
 800bc9e:	bf00      	nop
 800bca0:	20000110 	.word	0x20000110
 800bca4:	0800c831 	.word	0x0800c831
 800bca8:	2000011c 	.word	0x2000011c

0800bcac <cleanup_stdio>:
 800bcac:	6841      	ldr	r1, [r0, #4]
 800bcae:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <cleanup_stdio+0x34>)
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	d001      	beq.n	800bcbc <cleanup_stdio+0x10>
 800bcb8:	f000 fdba 	bl	800c830 <_fflush_r>
 800bcbc:	68a1      	ldr	r1, [r4, #8]
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <cleanup_stdio+0x38>)
 800bcc0:	4299      	cmp	r1, r3
 800bcc2:	d002      	beq.n	800bcca <cleanup_stdio+0x1e>
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f000 fdb3 	bl	800c830 <_fflush_r>
 800bcca:	68e1      	ldr	r1, [r4, #12]
 800bccc:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <cleanup_stdio+0x3c>)
 800bcce:	4299      	cmp	r1, r3
 800bcd0:	d004      	beq.n	800bcdc <cleanup_stdio+0x30>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd8:	f000 bdaa 	b.w	800c830 <_fflush_r>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	bf00      	nop
 800bce0:	20000564 	.word	0x20000564
 800bce4:	200005cc 	.word	0x200005cc
 800bce8:	20000634 	.word	0x20000634

0800bcec <global_stdio_init.part.0>:
 800bcec:	b510      	push	{r4, lr}
 800bcee:	4b0b      	ldr	r3, [pc, #44]	; (800bd1c <global_stdio_init.part.0+0x30>)
 800bcf0:	4c0b      	ldr	r4, [pc, #44]	; (800bd20 <global_stdio_init.part.0+0x34>)
 800bcf2:	4a0c      	ldr	r2, [pc, #48]	; (800bd24 <global_stdio_init.part.0+0x38>)
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	601a      	str	r2, [r3, #0]
 800bcf8:	2104      	movs	r1, #4
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7ff ff94 	bl	800bc28 <std>
 800bd00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bd04:	2201      	movs	r2, #1
 800bd06:	2109      	movs	r1, #9
 800bd08:	f7ff ff8e 	bl	800bc28 <std>
 800bd0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd10:	2202      	movs	r2, #2
 800bd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd16:	2112      	movs	r1, #18
 800bd18:	f7ff bf86 	b.w	800bc28 <std>
 800bd1c:	2000069c 	.word	0x2000069c
 800bd20:	20000564 	.word	0x20000564
 800bd24:	0800bc95 	.word	0x0800bc95

0800bd28 <__sfp_lock_acquire>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sfp_lock_acquire+0x8>)
 800bd2a:	f000 b91e 	b.w	800bf6a <__retarget_lock_acquire_recursive>
 800bd2e:	bf00      	nop
 800bd30:	200006a5 	.word	0x200006a5

0800bd34 <__sfp_lock_release>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sfp_lock_release+0x8>)
 800bd36:	f000 b919 	b.w	800bf6c <__retarget_lock_release_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	200006a5 	.word	0x200006a5

0800bd40 <__sinit>:
 800bd40:	b510      	push	{r4, lr}
 800bd42:	4604      	mov	r4, r0
 800bd44:	f7ff fff0 	bl	800bd28 <__sfp_lock_acquire>
 800bd48:	6a23      	ldr	r3, [r4, #32]
 800bd4a:	b11b      	cbz	r3, 800bd54 <__sinit+0x14>
 800bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd50:	f7ff bff0 	b.w	800bd34 <__sfp_lock_release>
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <__sinit+0x28>)
 800bd56:	6223      	str	r3, [r4, #32]
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <__sinit+0x2c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f5      	bne.n	800bd4c <__sinit+0xc>
 800bd60:	f7ff ffc4 	bl	800bcec <global_stdio_init.part.0>
 800bd64:	e7f2      	b.n	800bd4c <__sinit+0xc>
 800bd66:	bf00      	nop
 800bd68:	0800bcad 	.word	0x0800bcad
 800bd6c:	2000069c 	.word	0x2000069c

0800bd70 <fiprintf>:
 800bd70:	b40e      	push	{r1, r2, r3}
 800bd72:	b503      	push	{r0, r1, lr}
 800bd74:	4601      	mov	r1, r0
 800bd76:	ab03      	add	r3, sp, #12
 800bd78:	4805      	ldr	r0, [pc, #20]	; (800bd90 <fiprintf+0x20>)
 800bd7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7e:	6800      	ldr	r0, [r0, #0]
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	f000 fa25 	bl	800c1d0 <_vfiprintf_r>
 800bd86:	b002      	add	sp, #8
 800bd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8c:	b003      	add	sp, #12
 800bd8e:	4770      	bx	lr
 800bd90:	20000168 	.word	0x20000168

0800bd94 <_fwalk_sglue>:
 800bd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd98:	4607      	mov	r7, r0
 800bd9a:	4688      	mov	r8, r1
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	2600      	movs	r6, #0
 800bda0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bda4:	f1b9 0901 	subs.w	r9, r9, #1
 800bda8:	d505      	bpl.n	800bdb6 <_fwalk_sglue+0x22>
 800bdaa:	6824      	ldr	r4, [r4, #0]
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	d1f7      	bne.n	800bda0 <_fwalk_sglue+0xc>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d907      	bls.n	800bdcc <_fwalk_sglue+0x38>
 800bdbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	d003      	beq.n	800bdcc <_fwalk_sglue+0x38>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	47c0      	blx	r8
 800bdca:	4306      	orrs	r6, r0
 800bdcc:	3568      	adds	r5, #104	; 0x68
 800bdce:	e7e9      	b.n	800bda4 <_fwalk_sglue+0x10>

0800bdd0 <__sread>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	f000 f878 	bl	800becc <_read_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	bfab      	itete	ge
 800bde0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bde2:	89a3      	ldrhlt	r3, [r4, #12]
 800bde4:	181b      	addge	r3, r3, r0
 800bde6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdea:	bfac      	ite	ge
 800bdec:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdee:	81a3      	strhlt	r3, [r4, #12]
 800bdf0:	bd10      	pop	{r4, pc}

0800bdf2 <__swrite>:
 800bdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf6:	461f      	mov	r7, r3
 800bdf8:	898b      	ldrh	r3, [r1, #12]
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	05db      	lsls	r3, r3, #23
 800bdfe:	460c      	mov	r4, r1
 800be00:	4616      	mov	r6, r2
 800be02:	d505      	bpl.n	800be10 <__swrite+0x1e>
 800be04:	2302      	movs	r3, #2
 800be06:	2200      	movs	r2, #0
 800be08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0c:	f000 f84c 	bl	800bea8 <_lseek_r>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	4632      	mov	r2, r6
 800be14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	4628      	mov	r0, r5
 800be1c:	463b      	mov	r3, r7
 800be1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be26:	f000 b863 	b.w	800bef0 <_write_r>

0800be2a <__sseek>:
 800be2a:	b510      	push	{r4, lr}
 800be2c:	460c      	mov	r4, r1
 800be2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be32:	f000 f839 	bl	800bea8 <_lseek_r>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	bf15      	itete	ne
 800be3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be46:	81a3      	strheq	r3, [r4, #12]
 800be48:	bf18      	it	ne
 800be4a:	81a3      	strhne	r3, [r4, #12]
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <__sclose>:
 800be4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be52:	f000 b819 	b.w	800be88 <_close_r>

0800be56 <memcmp>:
 800be56:	b510      	push	{r4, lr}
 800be58:	3901      	subs	r1, #1
 800be5a:	4402      	add	r2, r0
 800be5c:	4290      	cmp	r0, r2
 800be5e:	d101      	bne.n	800be64 <memcmp+0xe>
 800be60:	2000      	movs	r0, #0
 800be62:	e005      	b.n	800be70 <memcmp+0x1a>
 800be64:	7803      	ldrb	r3, [r0, #0]
 800be66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be6a:	42a3      	cmp	r3, r4
 800be6c:	d001      	beq.n	800be72 <memcmp+0x1c>
 800be6e:	1b18      	subs	r0, r3, r4
 800be70:	bd10      	pop	{r4, pc}
 800be72:	3001      	adds	r0, #1
 800be74:	e7f2      	b.n	800be5c <memcmp+0x6>

0800be76 <memset>:
 800be76:	4603      	mov	r3, r0
 800be78:	4402      	add	r2, r0
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d100      	bne.n	800be80 <memset+0xa>
 800be7e:	4770      	bx	lr
 800be80:	f803 1b01 	strb.w	r1, [r3], #1
 800be84:	e7f9      	b.n	800be7a <memset+0x4>
	...

0800be88 <_close_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	2300      	movs	r3, #0
 800be8c:	4d05      	ldr	r5, [pc, #20]	; (800bea4 <_close_r+0x1c>)
 800be8e:	4604      	mov	r4, r0
 800be90:	4608      	mov	r0, r1
 800be92:	602b      	str	r3, [r5, #0]
 800be94:	f7f8 fd6a 	bl	800496c <_close>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_close_r+0x1a>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_close_r+0x1a>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	200006a0 	.word	0x200006a0

0800bea8 <_lseek_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	2200      	movs	r2, #0
 800beb2:	4d05      	ldr	r5, [pc, #20]	; (800bec8 <_lseek_r+0x20>)
 800beb4:	602a      	str	r2, [r5, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	f7f8 fd7c 	bl	80049b4 <_lseek>
 800bebc:	1c43      	adds	r3, r0, #1
 800bebe:	d102      	bne.n	800bec6 <_lseek_r+0x1e>
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	b103      	cbz	r3, 800bec6 <_lseek_r+0x1e>
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	bd38      	pop	{r3, r4, r5, pc}
 800bec8:	200006a0 	.word	0x200006a0

0800becc <_read_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	4611      	mov	r1, r2
 800bed4:	2200      	movs	r2, #0
 800bed6:	4d05      	ldr	r5, [pc, #20]	; (800beec <_read_r+0x20>)
 800bed8:	602a      	str	r2, [r5, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	f7f8 fd0d 	bl	80048fa <_read>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_read_r+0x1e>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_read_r+0x1e>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	200006a0 	.word	0x200006a0

0800bef0 <_write_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4604      	mov	r4, r0
 800bef4:	4608      	mov	r0, r1
 800bef6:	4611      	mov	r1, r2
 800bef8:	2200      	movs	r2, #0
 800befa:	4d05      	ldr	r5, [pc, #20]	; (800bf10 <_write_r+0x20>)
 800befc:	602a      	str	r2, [r5, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	f7f8 fd18 	bl	8004934 <_write>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d102      	bne.n	800bf0e <_write_r+0x1e>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	b103      	cbz	r3, 800bf0e <_write_r+0x1e>
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	200006a0 	.word	0x200006a0

0800bf14 <__errno>:
 800bf14:	4b01      	ldr	r3, [pc, #4]	; (800bf1c <__errno+0x8>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	20000168 	.word	0x20000168

0800bf20 <__libc_init_array>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	2600      	movs	r6, #0
 800bf24:	4d0c      	ldr	r5, [pc, #48]	; (800bf58 <__libc_init_array+0x38>)
 800bf26:	4c0d      	ldr	r4, [pc, #52]	; (800bf5c <__libc_init_array+0x3c>)
 800bf28:	1b64      	subs	r4, r4, r5
 800bf2a:	10a4      	asrs	r4, r4, #2
 800bf2c:	42a6      	cmp	r6, r4
 800bf2e:	d109      	bne.n	800bf44 <__libc_init_array+0x24>
 800bf30:	f000 fe22 	bl	800cb78 <_init>
 800bf34:	2600      	movs	r6, #0
 800bf36:	4d0a      	ldr	r5, [pc, #40]	; (800bf60 <__libc_init_array+0x40>)
 800bf38:	4c0a      	ldr	r4, [pc, #40]	; (800bf64 <__libc_init_array+0x44>)
 800bf3a:	1b64      	subs	r4, r4, r5
 800bf3c:	10a4      	asrs	r4, r4, #2
 800bf3e:	42a6      	cmp	r6, r4
 800bf40:	d105      	bne.n	800bf4e <__libc_init_array+0x2e>
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
 800bf44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf48:	4798      	blx	r3
 800bf4a:	3601      	adds	r6, #1
 800bf4c:	e7ee      	b.n	800bf2c <__libc_init_array+0xc>
 800bf4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf52:	4798      	blx	r3
 800bf54:	3601      	adds	r6, #1
 800bf56:	e7f2      	b.n	800bf3e <__libc_init_array+0x1e>
 800bf58:	0800cf34 	.word	0x0800cf34
 800bf5c:	0800cf34 	.word	0x0800cf34
 800bf60:	0800cf34 	.word	0x0800cf34
 800bf64:	0800cf38 	.word	0x0800cf38

0800bf68 <__retarget_lock_init_recursive>:
 800bf68:	4770      	bx	lr

0800bf6a <__retarget_lock_acquire_recursive>:
 800bf6a:	4770      	bx	lr

0800bf6c <__retarget_lock_release_recursive>:
 800bf6c:	4770      	bx	lr

0800bf6e <memcpy>:
 800bf6e:	440a      	add	r2, r1
 800bf70:	4291      	cmp	r1, r2
 800bf72:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf76:	d100      	bne.n	800bf7a <memcpy+0xc>
 800bf78:	4770      	bx	lr
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf80:	4291      	cmp	r1, r2
 800bf82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf86:	d1f9      	bne.n	800bf7c <memcpy+0xe>
 800bf88:	bd10      	pop	{r4, pc}

0800bf8a <abort>:
 800bf8a:	2006      	movs	r0, #6
 800bf8c:	b508      	push	{r3, lr}
 800bf8e:	f000 fd35 	bl	800c9fc <raise>
 800bf92:	2001      	movs	r0, #1
 800bf94:	f7f8 fca7 	bl	80048e6 <_exit>

0800bf98 <_free_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	2900      	cmp	r1, #0
 800bf9e:	d040      	beq.n	800c022 <_free_r+0x8a>
 800bfa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfa4:	1f0c      	subs	r4, r1, #4
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	bfb8      	it	lt
 800bfaa:	18e4      	addlt	r4, r4, r3
 800bfac:	f000 f8dc 	bl	800c168 <__malloc_lock>
 800bfb0:	4a1c      	ldr	r2, [pc, #112]	; (800c024 <_free_r+0x8c>)
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	b933      	cbnz	r3, 800bfc4 <_free_r+0x2c>
 800bfb6:	6063      	str	r3, [r4, #4]
 800bfb8:	6014      	str	r4, [r2, #0]
 800bfba:	4628      	mov	r0, r5
 800bfbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfc0:	f000 b8d8 	b.w	800c174 <__malloc_unlock>
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	d908      	bls.n	800bfda <_free_r+0x42>
 800bfc8:	6820      	ldr	r0, [r4, #0]
 800bfca:	1821      	adds	r1, r4, r0
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	bf01      	itttt	eq
 800bfd0:	6819      	ldreq	r1, [r3, #0]
 800bfd2:	685b      	ldreq	r3, [r3, #4]
 800bfd4:	1809      	addeq	r1, r1, r0
 800bfd6:	6021      	streq	r1, [r4, #0]
 800bfd8:	e7ed      	b.n	800bfb6 <_free_r+0x1e>
 800bfda:	461a      	mov	r2, r3
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	b10b      	cbz	r3, 800bfe4 <_free_r+0x4c>
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	d9fa      	bls.n	800bfda <_free_r+0x42>
 800bfe4:	6811      	ldr	r1, [r2, #0]
 800bfe6:	1850      	adds	r0, r2, r1
 800bfe8:	42a0      	cmp	r0, r4
 800bfea:	d10b      	bne.n	800c004 <_free_r+0x6c>
 800bfec:	6820      	ldr	r0, [r4, #0]
 800bfee:	4401      	add	r1, r0
 800bff0:	1850      	adds	r0, r2, r1
 800bff2:	4283      	cmp	r3, r0
 800bff4:	6011      	str	r1, [r2, #0]
 800bff6:	d1e0      	bne.n	800bfba <_free_r+0x22>
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4408      	add	r0, r1
 800bffe:	6010      	str	r0, [r2, #0]
 800c000:	6053      	str	r3, [r2, #4]
 800c002:	e7da      	b.n	800bfba <_free_r+0x22>
 800c004:	d902      	bls.n	800c00c <_free_r+0x74>
 800c006:	230c      	movs	r3, #12
 800c008:	602b      	str	r3, [r5, #0]
 800c00a:	e7d6      	b.n	800bfba <_free_r+0x22>
 800c00c:	6820      	ldr	r0, [r4, #0]
 800c00e:	1821      	adds	r1, r4, r0
 800c010:	428b      	cmp	r3, r1
 800c012:	bf01      	itttt	eq
 800c014:	6819      	ldreq	r1, [r3, #0]
 800c016:	685b      	ldreq	r3, [r3, #4]
 800c018:	1809      	addeq	r1, r1, r0
 800c01a:	6021      	streq	r1, [r4, #0]
 800c01c:	6063      	str	r3, [r4, #4]
 800c01e:	6054      	str	r4, [r2, #4]
 800c020:	e7cb      	b.n	800bfba <_free_r+0x22>
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	200006a8 	.word	0x200006a8

0800c028 <sbrk_aligned>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	4e0e      	ldr	r6, [pc, #56]	; (800c064 <sbrk_aligned+0x3c>)
 800c02c:	460c      	mov	r4, r1
 800c02e:	6831      	ldr	r1, [r6, #0]
 800c030:	4605      	mov	r5, r0
 800c032:	b911      	cbnz	r1, 800c03a <sbrk_aligned+0x12>
 800c034:	f000 fcfe 	bl	800ca34 <_sbrk_r>
 800c038:	6030      	str	r0, [r6, #0]
 800c03a:	4621      	mov	r1, r4
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 fcf9 	bl	800ca34 <_sbrk_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d00a      	beq.n	800c05c <sbrk_aligned+0x34>
 800c046:	1cc4      	adds	r4, r0, #3
 800c048:	f024 0403 	bic.w	r4, r4, #3
 800c04c:	42a0      	cmp	r0, r4
 800c04e:	d007      	beq.n	800c060 <sbrk_aligned+0x38>
 800c050:	1a21      	subs	r1, r4, r0
 800c052:	4628      	mov	r0, r5
 800c054:	f000 fcee 	bl	800ca34 <_sbrk_r>
 800c058:	3001      	adds	r0, #1
 800c05a:	d101      	bne.n	800c060 <sbrk_aligned+0x38>
 800c05c:	f04f 34ff 	mov.w	r4, #4294967295
 800c060:	4620      	mov	r0, r4
 800c062:	bd70      	pop	{r4, r5, r6, pc}
 800c064:	200006ac 	.word	0x200006ac

0800c068 <_malloc_r>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	1ccd      	adds	r5, r1, #3
 800c06e:	f025 0503 	bic.w	r5, r5, #3
 800c072:	3508      	adds	r5, #8
 800c074:	2d0c      	cmp	r5, #12
 800c076:	bf38      	it	cc
 800c078:	250c      	movcc	r5, #12
 800c07a:	2d00      	cmp	r5, #0
 800c07c:	4607      	mov	r7, r0
 800c07e:	db01      	blt.n	800c084 <_malloc_r+0x1c>
 800c080:	42a9      	cmp	r1, r5
 800c082:	d905      	bls.n	800c090 <_malloc_r+0x28>
 800c084:	230c      	movs	r3, #12
 800c086:	2600      	movs	r6, #0
 800c088:	603b      	str	r3, [r7, #0]
 800c08a:	4630      	mov	r0, r6
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c164 <_malloc_r+0xfc>
 800c094:	f000 f868 	bl	800c168 <__malloc_lock>
 800c098:	f8d8 3000 	ldr.w	r3, [r8]
 800c09c:	461c      	mov	r4, r3
 800c09e:	bb5c      	cbnz	r4, 800c0f8 <_malloc_r+0x90>
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	f7ff ffc0 	bl	800c028 <sbrk_aligned>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	d155      	bne.n	800c15a <_malloc_r+0xf2>
 800c0ae:	f8d8 4000 	ldr.w	r4, [r8]
 800c0b2:	4626      	mov	r6, r4
 800c0b4:	2e00      	cmp	r6, #0
 800c0b6:	d145      	bne.n	800c144 <_malloc_r+0xdc>
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d048      	beq.n	800c14e <_malloc_r+0xe6>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	eb04 0903 	add.w	r9, r4, r3
 800c0c6:	f000 fcb5 	bl	800ca34 <_sbrk_r>
 800c0ca:	4581      	cmp	r9, r0
 800c0cc:	d13f      	bne.n	800c14e <_malloc_r+0xe6>
 800c0ce:	6821      	ldr	r1, [r4, #0]
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	1a6d      	subs	r5, r5, r1
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7ff ffa7 	bl	800c028 <sbrk_aligned>
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d037      	beq.n	800c14e <_malloc_r+0xe6>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	442b      	add	r3, r5
 800c0e2:	6023      	str	r3, [r4, #0]
 800c0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d038      	beq.n	800c15e <_malloc_r+0xf6>
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	42a2      	cmp	r2, r4
 800c0f0:	d12b      	bne.n	800c14a <_malloc_r+0xe2>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	605a      	str	r2, [r3, #4]
 800c0f6:	e00f      	b.n	800c118 <_malloc_r+0xb0>
 800c0f8:	6822      	ldr	r2, [r4, #0]
 800c0fa:	1b52      	subs	r2, r2, r5
 800c0fc:	d41f      	bmi.n	800c13e <_malloc_r+0xd6>
 800c0fe:	2a0b      	cmp	r2, #11
 800c100:	d917      	bls.n	800c132 <_malloc_r+0xca>
 800c102:	1961      	adds	r1, r4, r5
 800c104:	42a3      	cmp	r3, r4
 800c106:	6025      	str	r5, [r4, #0]
 800c108:	bf18      	it	ne
 800c10a:	6059      	strne	r1, [r3, #4]
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	bf08      	it	eq
 800c110:	f8c8 1000 	streq.w	r1, [r8]
 800c114:	5162      	str	r2, [r4, r5]
 800c116:	604b      	str	r3, [r1, #4]
 800c118:	4638      	mov	r0, r7
 800c11a:	f104 060b 	add.w	r6, r4, #11
 800c11e:	f000 f829 	bl	800c174 <__malloc_unlock>
 800c122:	f026 0607 	bic.w	r6, r6, #7
 800c126:	1d23      	adds	r3, r4, #4
 800c128:	1af2      	subs	r2, r6, r3
 800c12a:	d0ae      	beq.n	800c08a <_malloc_r+0x22>
 800c12c:	1b9b      	subs	r3, r3, r6
 800c12e:	50a3      	str	r3, [r4, r2]
 800c130:	e7ab      	b.n	800c08a <_malloc_r+0x22>
 800c132:	42a3      	cmp	r3, r4
 800c134:	6862      	ldr	r2, [r4, #4]
 800c136:	d1dd      	bne.n	800c0f4 <_malloc_r+0x8c>
 800c138:	f8c8 2000 	str.w	r2, [r8]
 800c13c:	e7ec      	b.n	800c118 <_malloc_r+0xb0>
 800c13e:	4623      	mov	r3, r4
 800c140:	6864      	ldr	r4, [r4, #4]
 800c142:	e7ac      	b.n	800c09e <_malloc_r+0x36>
 800c144:	4634      	mov	r4, r6
 800c146:	6876      	ldr	r6, [r6, #4]
 800c148:	e7b4      	b.n	800c0b4 <_malloc_r+0x4c>
 800c14a:	4613      	mov	r3, r2
 800c14c:	e7cc      	b.n	800c0e8 <_malloc_r+0x80>
 800c14e:	230c      	movs	r3, #12
 800c150:	4638      	mov	r0, r7
 800c152:	603b      	str	r3, [r7, #0]
 800c154:	f000 f80e 	bl	800c174 <__malloc_unlock>
 800c158:	e797      	b.n	800c08a <_malloc_r+0x22>
 800c15a:	6025      	str	r5, [r4, #0]
 800c15c:	e7dc      	b.n	800c118 <_malloc_r+0xb0>
 800c15e:	605b      	str	r3, [r3, #4]
 800c160:	deff      	udf	#255	; 0xff
 800c162:	bf00      	nop
 800c164:	200006a8 	.word	0x200006a8

0800c168 <__malloc_lock>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__malloc_lock+0x8>)
 800c16a:	f7ff befe 	b.w	800bf6a <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	200006a4 	.word	0x200006a4

0800c174 <__malloc_unlock>:
 800c174:	4801      	ldr	r0, [pc, #4]	; (800c17c <__malloc_unlock+0x8>)
 800c176:	f7ff bef9 	b.w	800bf6c <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	200006a4 	.word	0x200006a4

0800c180 <__sfputc_r>:
 800c180:	6893      	ldr	r3, [r2, #8]
 800c182:	b410      	push	{r4}
 800c184:	3b01      	subs	r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	6093      	str	r3, [r2, #8]
 800c18a:	da07      	bge.n	800c19c <__sfputc_r+0x1c>
 800c18c:	6994      	ldr	r4, [r2, #24]
 800c18e:	42a3      	cmp	r3, r4
 800c190:	db01      	blt.n	800c196 <__sfputc_r+0x16>
 800c192:	290a      	cmp	r1, #10
 800c194:	d102      	bne.n	800c19c <__sfputc_r+0x1c>
 800c196:	bc10      	pop	{r4}
 800c198:	f000 bb72 	b.w	800c880 <__swbuf_r>
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	1c58      	adds	r0, r3, #1
 800c1a0:	6010      	str	r0, [r2, #0]
 800c1a2:	7019      	strb	r1, [r3, #0]
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	bc10      	pop	{r4}
 800c1a8:	4770      	bx	lr

0800c1aa <__sfputs_r>:
 800c1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	18d5      	adds	r5, r2, r3
 800c1b4:	42ac      	cmp	r4, r5
 800c1b6:	d101      	bne.n	800c1bc <__sfputs_r+0x12>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e007      	b.n	800c1cc <__sfputs_r+0x22>
 800c1bc:	463a      	mov	r2, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c4:	f7ff ffdc 	bl	800c180 <__sfputc_r>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d1f3      	bne.n	800c1b4 <__sfputs_r+0xa>
 800c1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1d0 <_vfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	4698      	mov	r8, r3
 800c1da:	4606      	mov	r6, r0
 800c1dc:	b09d      	sub	sp, #116	; 0x74
 800c1de:	b118      	cbz	r0, 800c1e8 <_vfiprintf_r+0x18>
 800c1e0:	6a03      	ldr	r3, [r0, #32]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <_vfiprintf_r+0x18>
 800c1e4:	f7ff fdac 	bl	800bd40 <__sinit>
 800c1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ea:	07d9      	lsls	r1, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_vfiprintf_r+0x2a>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_vfiprintf_r+0x2a>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1f6:	f7ff feb8 	bl	800bf6a <__retarget_lock_acquire_recursive>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	071b      	lsls	r3, r3, #28
 800c1fe:	d501      	bpl.n	800c204 <_vfiprintf_r+0x34>
 800c200:	692b      	ldr	r3, [r5, #16]
 800c202:	b99b      	cbnz	r3, 800c22c <_vfiprintf_r+0x5c>
 800c204:	4629      	mov	r1, r5
 800c206:	4630      	mov	r0, r6
 800c208:	f000 fb78 	bl	800c8fc <__swsetup_r>
 800c20c:	b170      	cbz	r0, 800c22c <_vfiprintf_r+0x5c>
 800c20e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c210:	07dc      	lsls	r4, r3, #31
 800c212:	d504      	bpl.n	800c21e <_vfiprintf_r+0x4e>
 800c214:	f04f 30ff 	mov.w	r0, #4294967295
 800c218:	b01d      	add	sp, #116	; 0x74
 800c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21e:	89ab      	ldrh	r3, [r5, #12]
 800c220:	0598      	lsls	r0, r3, #22
 800c222:	d4f7      	bmi.n	800c214 <_vfiprintf_r+0x44>
 800c224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c226:	f7ff fea1 	bl	800bf6c <__retarget_lock_release_recursive>
 800c22a:	e7f3      	b.n	800c214 <_vfiprintf_r+0x44>
 800c22c:	2300      	movs	r3, #0
 800c22e:	9309      	str	r3, [sp, #36]	; 0x24
 800c230:	2320      	movs	r3, #32
 800c232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c236:	2330      	movs	r3, #48	; 0x30
 800c238:	f04f 0901 	mov.w	r9, #1
 800c23c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c240:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c3f0 <_vfiprintf_r+0x220>
 800c244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c248:	4623      	mov	r3, r4
 800c24a:	469a      	mov	sl, r3
 800c24c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c250:	b10a      	cbz	r2, 800c256 <_vfiprintf_r+0x86>
 800c252:	2a25      	cmp	r2, #37	; 0x25
 800c254:	d1f9      	bne.n	800c24a <_vfiprintf_r+0x7a>
 800c256:	ebba 0b04 	subs.w	fp, sl, r4
 800c25a:	d00b      	beq.n	800c274 <_vfiprintf_r+0xa4>
 800c25c:	465b      	mov	r3, fp
 800c25e:	4622      	mov	r2, r4
 800c260:	4629      	mov	r1, r5
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ffa1 	bl	800c1aa <__sfputs_r>
 800c268:	3001      	adds	r0, #1
 800c26a:	f000 80a9 	beq.w	800c3c0 <_vfiprintf_r+0x1f0>
 800c26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c270:	445a      	add	r2, fp
 800c272:	9209      	str	r2, [sp, #36]	; 0x24
 800c274:	f89a 3000 	ldrb.w	r3, [sl]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f000 80a1 	beq.w	800c3c0 <_vfiprintf_r+0x1f0>
 800c27e:	2300      	movs	r3, #0
 800c280:	f04f 32ff 	mov.w	r2, #4294967295
 800c284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c288:	f10a 0a01 	add.w	sl, sl, #1
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	9307      	str	r3, [sp, #28]
 800c290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c294:	931a      	str	r3, [sp, #104]	; 0x68
 800c296:	4654      	mov	r4, sl
 800c298:	2205      	movs	r2, #5
 800c29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29e:	4854      	ldr	r0, [pc, #336]	; (800c3f0 <_vfiprintf_r+0x220>)
 800c2a0:	f000 fbd8 	bl	800ca54 <memchr>
 800c2a4:	9a04      	ldr	r2, [sp, #16]
 800c2a6:	b9d8      	cbnz	r0, 800c2e0 <_vfiprintf_r+0x110>
 800c2a8:	06d1      	lsls	r1, r2, #27
 800c2aa:	bf44      	itt	mi
 800c2ac:	2320      	movmi	r3, #32
 800c2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2b2:	0713      	lsls	r3, r2, #28
 800c2b4:	bf44      	itt	mi
 800c2b6:	232b      	movmi	r3, #43	; 0x2b
 800c2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2c2:	d015      	beq.n	800c2f0 <_vfiprintf_r+0x120>
 800c2c4:	4654      	mov	r4, sl
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	f04f 0c0a 	mov.w	ip, #10
 800c2cc:	9a07      	ldr	r2, [sp, #28]
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2d4:	3b30      	subs	r3, #48	; 0x30
 800c2d6:	2b09      	cmp	r3, #9
 800c2d8:	d94d      	bls.n	800c376 <_vfiprintf_r+0x1a6>
 800c2da:	b1b0      	cbz	r0, 800c30a <_vfiprintf_r+0x13a>
 800c2dc:	9207      	str	r2, [sp, #28]
 800c2de:	e014      	b.n	800c30a <_vfiprintf_r+0x13a>
 800c2e0:	eba0 0308 	sub.w	r3, r0, r8
 800c2e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	46a2      	mov	sl, r4
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	e7d2      	b.n	800c296 <_vfiprintf_r+0xc6>
 800c2f0:	9b03      	ldr	r3, [sp, #12]
 800c2f2:	1d19      	adds	r1, r3, #4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	9103      	str	r1, [sp, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	bfbb      	ittet	lt
 800c2fc:	425b      	neglt	r3, r3
 800c2fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c302:	9307      	strge	r3, [sp, #28]
 800c304:	9307      	strlt	r3, [sp, #28]
 800c306:	bfb8      	it	lt
 800c308:	9204      	strlt	r2, [sp, #16]
 800c30a:	7823      	ldrb	r3, [r4, #0]
 800c30c:	2b2e      	cmp	r3, #46	; 0x2e
 800c30e:	d10c      	bne.n	800c32a <_vfiprintf_r+0x15a>
 800c310:	7863      	ldrb	r3, [r4, #1]
 800c312:	2b2a      	cmp	r3, #42	; 0x2a
 800c314:	d134      	bne.n	800c380 <_vfiprintf_r+0x1b0>
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	3402      	adds	r4, #2
 800c31a:	1d1a      	adds	r2, r3, #4
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	9203      	str	r2, [sp, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfb8      	it	lt
 800c324:	f04f 33ff 	movlt.w	r3, #4294967295
 800c328:	9305      	str	r3, [sp, #20]
 800c32a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3f4 <_vfiprintf_r+0x224>
 800c32e:	2203      	movs	r2, #3
 800c330:	4650      	mov	r0, sl
 800c332:	7821      	ldrb	r1, [r4, #0]
 800c334:	f000 fb8e 	bl	800ca54 <memchr>
 800c338:	b138      	cbz	r0, 800c34a <_vfiprintf_r+0x17a>
 800c33a:	2240      	movs	r2, #64	; 0x40
 800c33c:	9b04      	ldr	r3, [sp, #16]
 800c33e:	eba0 000a 	sub.w	r0, r0, sl
 800c342:	4082      	lsls	r2, r0
 800c344:	4313      	orrs	r3, r2
 800c346:	3401      	adds	r4, #1
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34e:	2206      	movs	r2, #6
 800c350:	4829      	ldr	r0, [pc, #164]	; (800c3f8 <_vfiprintf_r+0x228>)
 800c352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c356:	f000 fb7d 	bl	800ca54 <memchr>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d03f      	beq.n	800c3de <_vfiprintf_r+0x20e>
 800c35e:	4b27      	ldr	r3, [pc, #156]	; (800c3fc <_vfiprintf_r+0x22c>)
 800c360:	bb1b      	cbnz	r3, 800c3aa <_vfiprintf_r+0x1da>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	3307      	adds	r3, #7
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	3308      	adds	r3, #8
 800c36c:	9303      	str	r3, [sp, #12]
 800c36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c370:	443b      	add	r3, r7
 800c372:	9309      	str	r3, [sp, #36]	; 0x24
 800c374:	e768      	b.n	800c248 <_vfiprintf_r+0x78>
 800c376:	460c      	mov	r4, r1
 800c378:	2001      	movs	r0, #1
 800c37a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c37e:	e7a6      	b.n	800c2ce <_vfiprintf_r+0xfe>
 800c380:	2300      	movs	r3, #0
 800c382:	f04f 0c0a 	mov.w	ip, #10
 800c386:	4619      	mov	r1, r3
 800c388:	3401      	adds	r4, #1
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	4620      	mov	r0, r4
 800c38e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c392:	3a30      	subs	r2, #48	; 0x30
 800c394:	2a09      	cmp	r2, #9
 800c396:	d903      	bls.n	800c3a0 <_vfiprintf_r+0x1d0>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d0c6      	beq.n	800c32a <_vfiprintf_r+0x15a>
 800c39c:	9105      	str	r1, [sp, #20]
 800c39e:	e7c4      	b.n	800c32a <_vfiprintf_r+0x15a>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3a8:	e7f0      	b.n	800c38c <_vfiprintf_r+0x1bc>
 800c3aa:	ab03      	add	r3, sp, #12
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	462a      	mov	r2, r5
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	4b13      	ldr	r3, [pc, #76]	; (800c400 <_vfiprintf_r+0x230>)
 800c3b4:	a904      	add	r1, sp, #16
 800c3b6:	f3af 8000 	nop.w
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	1c78      	adds	r0, r7, #1
 800c3be:	d1d6      	bne.n	800c36e <_vfiprintf_r+0x19e>
 800c3c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3c2:	07d9      	lsls	r1, r3, #31
 800c3c4:	d405      	bmi.n	800c3d2 <_vfiprintf_r+0x202>
 800c3c6:	89ab      	ldrh	r3, [r5, #12]
 800c3c8:	059a      	lsls	r2, r3, #22
 800c3ca:	d402      	bmi.n	800c3d2 <_vfiprintf_r+0x202>
 800c3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ce:	f7ff fdcd 	bl	800bf6c <__retarget_lock_release_recursive>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	065b      	lsls	r3, r3, #25
 800c3d6:	f53f af1d 	bmi.w	800c214 <_vfiprintf_r+0x44>
 800c3da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3dc:	e71c      	b.n	800c218 <_vfiprintf_r+0x48>
 800c3de:	ab03      	add	r3, sp, #12
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	462a      	mov	r2, r5
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	4b06      	ldr	r3, [pc, #24]	; (800c400 <_vfiprintf_r+0x230>)
 800c3e8:	a904      	add	r1, sp, #16
 800c3ea:	f000 f87d 	bl	800c4e8 <_printf_i>
 800c3ee:	e7e4      	b.n	800c3ba <_vfiprintf_r+0x1ea>
 800c3f0:	0800cef6 	.word	0x0800cef6
 800c3f4:	0800cefc 	.word	0x0800cefc
 800c3f8:	0800cf00 	.word	0x0800cf00
 800c3fc:	00000000 	.word	0x00000000
 800c400:	0800c1ab 	.word	0x0800c1ab

0800c404 <_printf_common>:
 800c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c408:	4616      	mov	r6, r2
 800c40a:	4699      	mov	r9, r3
 800c40c:	688a      	ldr	r2, [r1, #8]
 800c40e:	690b      	ldr	r3, [r1, #16]
 800c410:	4607      	mov	r7, r0
 800c412:	4293      	cmp	r3, r2
 800c414:	bfb8      	it	lt
 800c416:	4613      	movlt	r3, r2
 800c418:	6033      	str	r3, [r6, #0]
 800c41a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c41e:	460c      	mov	r4, r1
 800c420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c424:	b10a      	cbz	r2, 800c42a <_printf_common+0x26>
 800c426:	3301      	adds	r3, #1
 800c428:	6033      	str	r3, [r6, #0]
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	0699      	lsls	r1, r3, #26
 800c42e:	bf42      	ittt	mi
 800c430:	6833      	ldrmi	r3, [r6, #0]
 800c432:	3302      	addmi	r3, #2
 800c434:	6033      	strmi	r3, [r6, #0]
 800c436:	6825      	ldr	r5, [r4, #0]
 800c438:	f015 0506 	ands.w	r5, r5, #6
 800c43c:	d106      	bne.n	800c44c <_printf_common+0x48>
 800c43e:	f104 0a19 	add.w	sl, r4, #25
 800c442:	68e3      	ldr	r3, [r4, #12]
 800c444:	6832      	ldr	r2, [r6, #0]
 800c446:	1a9b      	subs	r3, r3, r2
 800c448:	42ab      	cmp	r3, r5
 800c44a:	dc2b      	bgt.n	800c4a4 <_printf_common+0xa0>
 800c44c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c450:	1e13      	subs	r3, r2, #0
 800c452:	6822      	ldr	r2, [r4, #0]
 800c454:	bf18      	it	ne
 800c456:	2301      	movne	r3, #1
 800c458:	0692      	lsls	r2, r2, #26
 800c45a:	d430      	bmi.n	800c4be <_printf_common+0xba>
 800c45c:	4649      	mov	r1, r9
 800c45e:	4638      	mov	r0, r7
 800c460:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c464:	47c0      	blx	r8
 800c466:	3001      	adds	r0, #1
 800c468:	d023      	beq.n	800c4b2 <_printf_common+0xae>
 800c46a:	6823      	ldr	r3, [r4, #0]
 800c46c:	6922      	ldr	r2, [r4, #16]
 800c46e:	f003 0306 	and.w	r3, r3, #6
 800c472:	2b04      	cmp	r3, #4
 800c474:	bf14      	ite	ne
 800c476:	2500      	movne	r5, #0
 800c478:	6833      	ldreq	r3, [r6, #0]
 800c47a:	f04f 0600 	mov.w	r6, #0
 800c47e:	bf08      	it	eq
 800c480:	68e5      	ldreq	r5, [r4, #12]
 800c482:	f104 041a 	add.w	r4, r4, #26
 800c486:	bf08      	it	eq
 800c488:	1aed      	subeq	r5, r5, r3
 800c48a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c48e:	bf08      	it	eq
 800c490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c494:	4293      	cmp	r3, r2
 800c496:	bfc4      	itt	gt
 800c498:	1a9b      	subgt	r3, r3, r2
 800c49a:	18ed      	addgt	r5, r5, r3
 800c49c:	42b5      	cmp	r5, r6
 800c49e:	d11a      	bne.n	800c4d6 <_printf_common+0xd2>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e008      	b.n	800c4b6 <_printf_common+0xb2>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4652      	mov	r2, sl
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	47c0      	blx	r8
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	d103      	bne.n	800c4ba <_printf_common+0xb6>
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ba:	3501      	adds	r5, #1
 800c4bc:	e7c1      	b.n	800c442 <_printf_common+0x3e>
 800c4be:	2030      	movs	r0, #48	; 0x30
 800c4c0:	18e1      	adds	r1, r4, r3
 800c4c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4cc:	4422      	add	r2, r4
 800c4ce:	3302      	adds	r3, #2
 800c4d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4d4:	e7c2      	b.n	800c45c <_printf_common+0x58>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4649      	mov	r1, r9
 800c4dc:	4638      	mov	r0, r7
 800c4de:	47c0      	blx	r8
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d0e6      	beq.n	800c4b2 <_printf_common+0xae>
 800c4e4:	3601      	adds	r6, #1
 800c4e6:	e7d9      	b.n	800c49c <_printf_common+0x98>

0800c4e8 <_printf_i>:
 800c4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	7e0f      	ldrb	r7, [r1, #24]
 800c4ee:	4691      	mov	r9, r2
 800c4f0:	2f78      	cmp	r7, #120	; 0x78
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	469a      	mov	sl, r3
 800c4f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4fe:	d807      	bhi.n	800c510 <_printf_i+0x28>
 800c500:	2f62      	cmp	r7, #98	; 0x62
 800c502:	d80a      	bhi.n	800c51a <_printf_i+0x32>
 800c504:	2f00      	cmp	r7, #0
 800c506:	f000 80d5 	beq.w	800c6b4 <_printf_i+0x1cc>
 800c50a:	2f58      	cmp	r7, #88	; 0x58
 800c50c:	f000 80c1 	beq.w	800c692 <_printf_i+0x1aa>
 800c510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c518:	e03a      	b.n	800c590 <_printf_i+0xa8>
 800c51a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c51e:	2b15      	cmp	r3, #21
 800c520:	d8f6      	bhi.n	800c510 <_printf_i+0x28>
 800c522:	a101      	add	r1, pc, #4	; (adr r1, 800c528 <_printf_i+0x40>)
 800c524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c528:	0800c581 	.word	0x0800c581
 800c52c:	0800c595 	.word	0x0800c595
 800c530:	0800c511 	.word	0x0800c511
 800c534:	0800c511 	.word	0x0800c511
 800c538:	0800c511 	.word	0x0800c511
 800c53c:	0800c511 	.word	0x0800c511
 800c540:	0800c595 	.word	0x0800c595
 800c544:	0800c511 	.word	0x0800c511
 800c548:	0800c511 	.word	0x0800c511
 800c54c:	0800c511 	.word	0x0800c511
 800c550:	0800c511 	.word	0x0800c511
 800c554:	0800c69b 	.word	0x0800c69b
 800c558:	0800c5c1 	.word	0x0800c5c1
 800c55c:	0800c655 	.word	0x0800c655
 800c560:	0800c511 	.word	0x0800c511
 800c564:	0800c511 	.word	0x0800c511
 800c568:	0800c6bd 	.word	0x0800c6bd
 800c56c:	0800c511 	.word	0x0800c511
 800c570:	0800c5c1 	.word	0x0800c5c1
 800c574:	0800c511 	.word	0x0800c511
 800c578:	0800c511 	.word	0x0800c511
 800c57c:	0800c65d 	.word	0x0800c65d
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	1d1a      	adds	r2, r3, #4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	602a      	str	r2, [r5, #0]
 800c588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c58c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c590:	2301      	movs	r3, #1
 800c592:	e0a0      	b.n	800c6d6 <_printf_i+0x1ee>
 800c594:	6820      	ldr	r0, [r4, #0]
 800c596:	682b      	ldr	r3, [r5, #0]
 800c598:	0607      	lsls	r7, r0, #24
 800c59a:	f103 0104 	add.w	r1, r3, #4
 800c59e:	6029      	str	r1, [r5, #0]
 800c5a0:	d501      	bpl.n	800c5a6 <_printf_i+0xbe>
 800c5a2:	681e      	ldr	r6, [r3, #0]
 800c5a4:	e003      	b.n	800c5ae <_printf_i+0xc6>
 800c5a6:	0646      	lsls	r6, r0, #25
 800c5a8:	d5fb      	bpl.n	800c5a2 <_printf_i+0xba>
 800c5aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	da03      	bge.n	800c5ba <_printf_i+0xd2>
 800c5b2:	232d      	movs	r3, #45	; 0x2d
 800c5b4:	4276      	negs	r6, r6
 800c5b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ba:	230a      	movs	r3, #10
 800c5bc:	4859      	ldr	r0, [pc, #356]	; (800c724 <_printf_i+0x23c>)
 800c5be:	e012      	b.n	800c5e6 <_printf_i+0xfe>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	6820      	ldr	r0, [r4, #0]
 800c5c4:	1d19      	adds	r1, r3, #4
 800c5c6:	6029      	str	r1, [r5, #0]
 800c5c8:	0605      	lsls	r5, r0, #24
 800c5ca:	d501      	bpl.n	800c5d0 <_printf_i+0xe8>
 800c5cc:	681e      	ldr	r6, [r3, #0]
 800c5ce:	e002      	b.n	800c5d6 <_printf_i+0xee>
 800c5d0:	0641      	lsls	r1, r0, #25
 800c5d2:	d5fb      	bpl.n	800c5cc <_printf_i+0xe4>
 800c5d4:	881e      	ldrh	r6, [r3, #0]
 800c5d6:	2f6f      	cmp	r7, #111	; 0x6f
 800c5d8:	bf0c      	ite	eq
 800c5da:	2308      	moveq	r3, #8
 800c5dc:	230a      	movne	r3, #10
 800c5de:	4851      	ldr	r0, [pc, #324]	; (800c724 <_printf_i+0x23c>)
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5e6:	6865      	ldr	r5, [r4, #4]
 800c5e8:	2d00      	cmp	r5, #0
 800c5ea:	bfa8      	it	ge
 800c5ec:	6821      	ldrge	r1, [r4, #0]
 800c5ee:	60a5      	str	r5, [r4, #8]
 800c5f0:	bfa4      	itt	ge
 800c5f2:	f021 0104 	bicge.w	r1, r1, #4
 800c5f6:	6021      	strge	r1, [r4, #0]
 800c5f8:	b90e      	cbnz	r6, 800c5fe <_printf_i+0x116>
 800c5fa:	2d00      	cmp	r5, #0
 800c5fc:	d04b      	beq.n	800c696 <_printf_i+0x1ae>
 800c5fe:	4615      	mov	r5, r2
 800c600:	fbb6 f1f3 	udiv	r1, r6, r3
 800c604:	fb03 6711 	mls	r7, r3, r1, r6
 800c608:	5dc7      	ldrb	r7, [r0, r7]
 800c60a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c60e:	4637      	mov	r7, r6
 800c610:	42bb      	cmp	r3, r7
 800c612:	460e      	mov	r6, r1
 800c614:	d9f4      	bls.n	800c600 <_printf_i+0x118>
 800c616:	2b08      	cmp	r3, #8
 800c618:	d10b      	bne.n	800c632 <_printf_i+0x14a>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	07de      	lsls	r6, r3, #31
 800c61e:	d508      	bpl.n	800c632 <_printf_i+0x14a>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	6861      	ldr	r1, [r4, #4]
 800c624:	4299      	cmp	r1, r3
 800c626:	bfde      	ittt	le
 800c628:	2330      	movle	r3, #48	; 0x30
 800c62a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c62e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c632:	1b52      	subs	r2, r2, r5
 800c634:	6122      	str	r2, [r4, #16]
 800c636:	464b      	mov	r3, r9
 800c638:	4621      	mov	r1, r4
 800c63a:	4640      	mov	r0, r8
 800c63c:	f8cd a000 	str.w	sl, [sp]
 800c640:	aa03      	add	r2, sp, #12
 800c642:	f7ff fedf 	bl	800c404 <_printf_common>
 800c646:	3001      	adds	r0, #1
 800c648:	d14a      	bne.n	800c6e0 <_printf_i+0x1f8>
 800c64a:	f04f 30ff 	mov.w	r0, #4294967295
 800c64e:	b004      	add	sp, #16
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	f043 0320 	orr.w	r3, r3, #32
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	2778      	movs	r7, #120	; 0x78
 800c65e:	4832      	ldr	r0, [pc, #200]	; (800c728 <_printf_i+0x240>)
 800c660:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	6829      	ldr	r1, [r5, #0]
 800c668:	061f      	lsls	r7, r3, #24
 800c66a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c66e:	d402      	bmi.n	800c676 <_printf_i+0x18e>
 800c670:	065f      	lsls	r7, r3, #25
 800c672:	bf48      	it	mi
 800c674:	b2b6      	uxthmi	r6, r6
 800c676:	07df      	lsls	r7, r3, #31
 800c678:	bf48      	it	mi
 800c67a:	f043 0320 	orrmi.w	r3, r3, #32
 800c67e:	6029      	str	r1, [r5, #0]
 800c680:	bf48      	it	mi
 800c682:	6023      	strmi	r3, [r4, #0]
 800c684:	b91e      	cbnz	r6, 800c68e <_printf_i+0x1a6>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	f023 0320 	bic.w	r3, r3, #32
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	2310      	movs	r3, #16
 800c690:	e7a6      	b.n	800c5e0 <_printf_i+0xf8>
 800c692:	4824      	ldr	r0, [pc, #144]	; (800c724 <_printf_i+0x23c>)
 800c694:	e7e4      	b.n	800c660 <_printf_i+0x178>
 800c696:	4615      	mov	r5, r2
 800c698:	e7bd      	b.n	800c616 <_printf_i+0x12e>
 800c69a:	682b      	ldr	r3, [r5, #0]
 800c69c:	6826      	ldr	r6, [r4, #0]
 800c69e:	1d18      	adds	r0, r3, #4
 800c6a0:	6961      	ldr	r1, [r4, #20]
 800c6a2:	6028      	str	r0, [r5, #0]
 800c6a4:	0635      	lsls	r5, r6, #24
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	d501      	bpl.n	800c6ae <_printf_i+0x1c6>
 800c6aa:	6019      	str	r1, [r3, #0]
 800c6ac:	e002      	b.n	800c6b4 <_printf_i+0x1cc>
 800c6ae:	0670      	lsls	r0, r6, #25
 800c6b0:	d5fb      	bpl.n	800c6aa <_printf_i+0x1c2>
 800c6b2:	8019      	strh	r1, [r3, #0]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4615      	mov	r5, r2
 800c6b8:	6123      	str	r3, [r4, #16]
 800c6ba:	e7bc      	b.n	800c636 <_printf_i+0x14e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	2100      	movs	r1, #0
 800c6c0:	1d1a      	adds	r2, r3, #4
 800c6c2:	602a      	str	r2, [r5, #0]
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	6862      	ldr	r2, [r4, #4]
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f000 f9c3 	bl	800ca54 <memchr>
 800c6ce:	b108      	cbz	r0, 800c6d4 <_printf_i+0x1ec>
 800c6d0:	1b40      	subs	r0, r0, r5
 800c6d2:	6060      	str	r0, [r4, #4]
 800c6d4:	6863      	ldr	r3, [r4, #4]
 800c6d6:	6123      	str	r3, [r4, #16]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6de:	e7aa      	b.n	800c636 <_printf_i+0x14e>
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	47d0      	blx	sl
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d0ad      	beq.n	800c64a <_printf_i+0x162>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	079b      	lsls	r3, r3, #30
 800c6f2:	d413      	bmi.n	800c71c <_printf_i+0x234>
 800c6f4:	68e0      	ldr	r0, [r4, #12]
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	4298      	cmp	r0, r3
 800c6fa:	bfb8      	it	lt
 800c6fc:	4618      	movlt	r0, r3
 800c6fe:	e7a6      	b.n	800c64e <_printf_i+0x166>
 800c700:	2301      	movs	r3, #1
 800c702:	4632      	mov	r2, r6
 800c704:	4649      	mov	r1, r9
 800c706:	4640      	mov	r0, r8
 800c708:	47d0      	blx	sl
 800c70a:	3001      	adds	r0, #1
 800c70c:	d09d      	beq.n	800c64a <_printf_i+0x162>
 800c70e:	3501      	adds	r5, #1
 800c710:	68e3      	ldr	r3, [r4, #12]
 800c712:	9903      	ldr	r1, [sp, #12]
 800c714:	1a5b      	subs	r3, r3, r1
 800c716:	42ab      	cmp	r3, r5
 800c718:	dcf2      	bgt.n	800c700 <_printf_i+0x218>
 800c71a:	e7eb      	b.n	800c6f4 <_printf_i+0x20c>
 800c71c:	2500      	movs	r5, #0
 800c71e:	f104 0619 	add.w	r6, r4, #25
 800c722:	e7f5      	b.n	800c710 <_printf_i+0x228>
 800c724:	0800cf07 	.word	0x0800cf07
 800c728:	0800cf18 	.word	0x0800cf18

0800c72c <__sflush_r>:
 800c72c:	898a      	ldrh	r2, [r1, #12]
 800c72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c730:	4605      	mov	r5, r0
 800c732:	0710      	lsls	r0, r2, #28
 800c734:	460c      	mov	r4, r1
 800c736:	d457      	bmi.n	800c7e8 <__sflush_r+0xbc>
 800c738:	684b      	ldr	r3, [r1, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	dc04      	bgt.n	800c748 <__sflush_r+0x1c>
 800c73e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c740:	2b00      	cmp	r3, #0
 800c742:	dc01      	bgt.n	800c748 <__sflush_r+0x1c>
 800c744:	2000      	movs	r0, #0
 800c746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	d0fa      	beq.n	800c744 <__sflush_r+0x18>
 800c74e:	2300      	movs	r3, #0
 800c750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c754:	682f      	ldr	r7, [r5, #0]
 800c756:	6a21      	ldr	r1, [r4, #32]
 800c758:	602b      	str	r3, [r5, #0]
 800c75a:	d032      	beq.n	800c7c2 <__sflush_r+0x96>
 800c75c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	075a      	lsls	r2, r3, #29
 800c762:	d505      	bpl.n	800c770 <__sflush_r+0x44>
 800c764:	6863      	ldr	r3, [r4, #4]
 800c766:	1ac0      	subs	r0, r0, r3
 800c768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c76a:	b10b      	cbz	r3, 800c770 <__sflush_r+0x44>
 800c76c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c76e:	1ac0      	subs	r0, r0, r3
 800c770:	2300      	movs	r3, #0
 800c772:	4602      	mov	r2, r0
 800c774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c776:	4628      	mov	r0, r5
 800c778:	6a21      	ldr	r1, [r4, #32]
 800c77a:	47b0      	blx	r6
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	d106      	bne.n	800c790 <__sflush_r+0x64>
 800c782:	6829      	ldr	r1, [r5, #0]
 800c784:	291d      	cmp	r1, #29
 800c786:	d82b      	bhi.n	800c7e0 <__sflush_r+0xb4>
 800c788:	4a28      	ldr	r2, [pc, #160]	; (800c82c <__sflush_r+0x100>)
 800c78a:	410a      	asrs	r2, r1
 800c78c:	07d6      	lsls	r6, r2, #31
 800c78e:	d427      	bmi.n	800c7e0 <__sflush_r+0xb4>
 800c790:	2200      	movs	r2, #0
 800c792:	6062      	str	r2, [r4, #4]
 800c794:	6922      	ldr	r2, [r4, #16]
 800c796:	04d9      	lsls	r1, r3, #19
 800c798:	6022      	str	r2, [r4, #0]
 800c79a:	d504      	bpl.n	800c7a6 <__sflush_r+0x7a>
 800c79c:	1c42      	adds	r2, r0, #1
 800c79e:	d101      	bne.n	800c7a4 <__sflush_r+0x78>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	b903      	cbnz	r3, 800c7a6 <__sflush_r+0x7a>
 800c7a4:	6560      	str	r0, [r4, #84]	; 0x54
 800c7a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7a8:	602f      	str	r7, [r5, #0]
 800c7aa:	2900      	cmp	r1, #0
 800c7ac:	d0ca      	beq.n	800c744 <__sflush_r+0x18>
 800c7ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	d002      	beq.n	800c7bc <__sflush_r+0x90>
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f7ff fbee 	bl	800bf98 <_free_r>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	6360      	str	r0, [r4, #52]	; 0x34
 800c7c0:	e7c1      	b.n	800c746 <__sflush_r+0x1a>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	47b0      	blx	r6
 800c7c8:	1c41      	adds	r1, r0, #1
 800c7ca:	d1c8      	bne.n	800c75e <__sflush_r+0x32>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0c5      	beq.n	800c75e <__sflush_r+0x32>
 800c7d2:	2b1d      	cmp	r3, #29
 800c7d4:	d001      	beq.n	800c7da <__sflush_r+0xae>
 800c7d6:	2b16      	cmp	r3, #22
 800c7d8:	d101      	bne.n	800c7de <__sflush_r+0xb2>
 800c7da:	602f      	str	r7, [r5, #0]
 800c7dc:	e7b2      	b.n	800c744 <__sflush_r+0x18>
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e4:	81a3      	strh	r3, [r4, #12]
 800c7e6:	e7ae      	b.n	800c746 <__sflush_r+0x1a>
 800c7e8:	690f      	ldr	r7, [r1, #16]
 800c7ea:	2f00      	cmp	r7, #0
 800c7ec:	d0aa      	beq.n	800c744 <__sflush_r+0x18>
 800c7ee:	0793      	lsls	r3, r2, #30
 800c7f0:	bf18      	it	ne
 800c7f2:	2300      	movne	r3, #0
 800c7f4:	680e      	ldr	r6, [r1, #0]
 800c7f6:	bf08      	it	eq
 800c7f8:	694b      	ldreq	r3, [r1, #20]
 800c7fa:	1bf6      	subs	r6, r6, r7
 800c7fc:	600f      	str	r7, [r1, #0]
 800c7fe:	608b      	str	r3, [r1, #8]
 800c800:	2e00      	cmp	r6, #0
 800c802:	dd9f      	ble.n	800c744 <__sflush_r+0x18>
 800c804:	4633      	mov	r3, r6
 800c806:	463a      	mov	r2, r7
 800c808:	4628      	mov	r0, r5
 800c80a:	6a21      	ldr	r1, [r4, #32]
 800c80c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c810:	47e0      	blx	ip
 800c812:	2800      	cmp	r0, #0
 800c814:	dc06      	bgt.n	800c824 <__sflush_r+0xf8>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	e790      	b.n	800c746 <__sflush_r+0x1a>
 800c824:	4407      	add	r7, r0
 800c826:	1a36      	subs	r6, r6, r0
 800c828:	e7ea      	b.n	800c800 <__sflush_r+0xd4>
 800c82a:	bf00      	nop
 800c82c:	dfbffffe 	.word	0xdfbffffe

0800c830 <_fflush_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	690b      	ldr	r3, [r1, #16]
 800c834:	4605      	mov	r5, r0
 800c836:	460c      	mov	r4, r1
 800c838:	b913      	cbnz	r3, 800c840 <_fflush_r+0x10>
 800c83a:	2500      	movs	r5, #0
 800c83c:	4628      	mov	r0, r5
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	b118      	cbz	r0, 800c84a <_fflush_r+0x1a>
 800c842:	6a03      	ldr	r3, [r0, #32]
 800c844:	b90b      	cbnz	r3, 800c84a <_fflush_r+0x1a>
 800c846:	f7ff fa7b 	bl	800bd40 <__sinit>
 800c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0f3      	beq.n	800c83a <_fflush_r+0xa>
 800c852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c854:	07d0      	lsls	r0, r2, #31
 800c856:	d404      	bmi.n	800c862 <_fflush_r+0x32>
 800c858:	0599      	lsls	r1, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_fflush_r+0x32>
 800c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c85e:	f7ff fb84 	bl	800bf6a <__retarget_lock_acquire_recursive>
 800c862:	4628      	mov	r0, r5
 800c864:	4621      	mov	r1, r4
 800c866:	f7ff ff61 	bl	800c72c <__sflush_r>
 800c86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c86c:	4605      	mov	r5, r0
 800c86e:	07da      	lsls	r2, r3, #31
 800c870:	d4e4      	bmi.n	800c83c <_fflush_r+0xc>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	059b      	lsls	r3, r3, #22
 800c876:	d4e1      	bmi.n	800c83c <_fflush_r+0xc>
 800c878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c87a:	f7ff fb77 	bl	800bf6c <__retarget_lock_release_recursive>
 800c87e:	e7dd      	b.n	800c83c <_fflush_r+0xc>

0800c880 <__swbuf_r>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	460e      	mov	r6, r1
 800c884:	4614      	mov	r4, r2
 800c886:	4605      	mov	r5, r0
 800c888:	b118      	cbz	r0, 800c892 <__swbuf_r+0x12>
 800c88a:	6a03      	ldr	r3, [r0, #32]
 800c88c:	b90b      	cbnz	r3, 800c892 <__swbuf_r+0x12>
 800c88e:	f7ff fa57 	bl	800bd40 <__sinit>
 800c892:	69a3      	ldr	r3, [r4, #24]
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	071a      	lsls	r2, r3, #28
 800c89a:	d525      	bpl.n	800c8e8 <__swbuf_r+0x68>
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	b31b      	cbz	r3, 800c8e8 <__swbuf_r+0x68>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	6922      	ldr	r2, [r4, #16]
 800c8a4:	b2f6      	uxtb	r6, r6
 800c8a6:	1a98      	subs	r0, r3, r2
 800c8a8:	6963      	ldr	r3, [r4, #20]
 800c8aa:	4637      	mov	r7, r6
 800c8ac:	4283      	cmp	r3, r0
 800c8ae:	dc04      	bgt.n	800c8ba <__swbuf_r+0x3a>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f7ff ffbc 	bl	800c830 <_fflush_r>
 800c8b8:	b9e0      	cbnz	r0, 800c8f4 <__swbuf_r+0x74>
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	60a3      	str	r3, [r4, #8]
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	701e      	strb	r6, [r3, #0]
 800c8c8:	6962      	ldr	r2, [r4, #20]
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d004      	beq.n	800c8da <__swbuf_r+0x5a>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	07db      	lsls	r3, r3, #31
 800c8d4:	d506      	bpl.n	800c8e4 <__swbuf_r+0x64>
 800c8d6:	2e0a      	cmp	r6, #10
 800c8d8:	d104      	bne.n	800c8e4 <__swbuf_r+0x64>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f7ff ffa7 	bl	800c830 <_fflush_r>
 800c8e2:	b938      	cbnz	r0, 800c8f4 <__swbuf_r+0x74>
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 f806 	bl	800c8fc <__swsetup_r>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d0d5      	beq.n	800c8a0 <__swbuf_r+0x20>
 800c8f4:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f8:	e7f4      	b.n	800c8e4 <__swbuf_r+0x64>
	...

0800c8fc <__swsetup_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <__swsetup_r+0xac>)
 800c900:	4605      	mov	r5, r0
 800c902:	6818      	ldr	r0, [r3, #0]
 800c904:	460c      	mov	r4, r1
 800c906:	b118      	cbz	r0, 800c910 <__swsetup_r+0x14>
 800c908:	6a03      	ldr	r3, [r0, #32]
 800c90a:	b90b      	cbnz	r3, 800c910 <__swsetup_r+0x14>
 800c90c:	f7ff fa18 	bl	800bd40 <__sinit>
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c916:	0718      	lsls	r0, r3, #28
 800c918:	d422      	bmi.n	800c960 <__swsetup_r+0x64>
 800c91a:	06d9      	lsls	r1, r3, #27
 800c91c:	d407      	bmi.n	800c92e <__swsetup_r+0x32>
 800c91e:	2309      	movs	r3, #9
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c926:	f04f 30ff 	mov.w	r0, #4294967295
 800c92a:	81a3      	strh	r3, [r4, #12]
 800c92c:	e034      	b.n	800c998 <__swsetup_r+0x9c>
 800c92e:	0758      	lsls	r0, r3, #29
 800c930:	d512      	bpl.n	800c958 <__swsetup_r+0x5c>
 800c932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c934:	b141      	cbz	r1, 800c948 <__swsetup_r+0x4c>
 800c936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c93a:	4299      	cmp	r1, r3
 800c93c:	d002      	beq.n	800c944 <__swsetup_r+0x48>
 800c93e:	4628      	mov	r0, r5
 800c940:	f7ff fb2a 	bl	800bf98 <_free_r>
 800c944:	2300      	movs	r3, #0
 800c946:	6363      	str	r3, [r4, #52]	; 0x34
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	2300      	movs	r3, #0
 800c952:	6063      	str	r3, [r4, #4]
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	6023      	str	r3, [r4, #0]
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f043 0308 	orr.w	r3, r3, #8
 800c95e:	81a3      	strh	r3, [r4, #12]
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	b94b      	cbnz	r3, 800c978 <__swsetup_r+0x7c>
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c96a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c96e:	d003      	beq.n	800c978 <__swsetup_r+0x7c>
 800c970:	4621      	mov	r1, r4
 800c972:	4628      	mov	r0, r5
 800c974:	f000 f8a1 	bl	800caba <__smakebuf_r>
 800c978:	89a0      	ldrh	r0, [r4, #12]
 800c97a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c97e:	f010 0301 	ands.w	r3, r0, #1
 800c982:	d00a      	beq.n	800c99a <__swsetup_r+0x9e>
 800c984:	2300      	movs	r3, #0
 800c986:	60a3      	str	r3, [r4, #8]
 800c988:	6963      	ldr	r3, [r4, #20]
 800c98a:	425b      	negs	r3, r3
 800c98c:	61a3      	str	r3, [r4, #24]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	b943      	cbnz	r3, 800c9a4 <__swsetup_r+0xa8>
 800c992:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c996:	d1c4      	bne.n	800c922 <__swsetup_r+0x26>
 800c998:	bd38      	pop	{r3, r4, r5, pc}
 800c99a:	0781      	lsls	r1, r0, #30
 800c99c:	bf58      	it	pl
 800c99e:	6963      	ldrpl	r3, [r4, #20]
 800c9a0:	60a3      	str	r3, [r4, #8]
 800c9a2:	e7f4      	b.n	800c98e <__swsetup_r+0x92>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7f7      	b.n	800c998 <__swsetup_r+0x9c>
 800c9a8:	20000168 	.word	0x20000168

0800c9ac <_raise_r>:
 800c9ac:	291f      	cmp	r1, #31
 800c9ae:	b538      	push	{r3, r4, r5, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	460d      	mov	r5, r1
 800c9b4:	d904      	bls.n	800c9c0 <_raise_r+0x14>
 800c9b6:	2316      	movs	r3, #22
 800c9b8:	6003      	str	r3, [r0, #0]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c9c2:	b112      	cbz	r2, 800c9ca <_raise_r+0x1e>
 800c9c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9c8:	b94b      	cbnz	r3, 800c9de <_raise_r+0x32>
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f000 f830 	bl	800ca30 <_getpid_r>
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9da:	f000 b817 	b.w	800ca0c <_kill_r>
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d00a      	beq.n	800c9f8 <_raise_r+0x4c>
 800c9e2:	1c59      	adds	r1, r3, #1
 800c9e4:	d103      	bne.n	800c9ee <_raise_r+0x42>
 800c9e6:	2316      	movs	r3, #22
 800c9e8:	6003      	str	r3, [r0, #0]
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	e7e7      	b.n	800c9be <_raise_r+0x12>
 800c9ee:	2400      	movs	r4, #0
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9f6:	4798      	blx	r3
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7e0      	b.n	800c9be <_raise_r+0x12>

0800c9fc <raise>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <raise+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f7ff bfd3 	b.w	800c9ac <_raise_r>
 800ca06:	bf00      	nop
 800ca08:	20000168 	.word	0x20000168

0800ca0c <_kill_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	2300      	movs	r3, #0
 800ca10:	4d06      	ldr	r5, [pc, #24]	; (800ca2c <_kill_r+0x20>)
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	4611      	mov	r1, r2
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	f7f7 ff54 	bl	80048c6 <_kill>
 800ca1e:	1c43      	adds	r3, r0, #1
 800ca20:	d102      	bne.n	800ca28 <_kill_r+0x1c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b103      	cbz	r3, 800ca28 <_kill_r+0x1c>
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200006a0 	.word	0x200006a0

0800ca30 <_getpid_r>:
 800ca30:	f7f7 bf42 	b.w	80048b8 <_getpid>

0800ca34 <_sbrk_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	2300      	movs	r3, #0
 800ca38:	4d05      	ldr	r5, [pc, #20]	; (800ca50 <_sbrk_r+0x1c>)
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4608      	mov	r0, r1
 800ca3e:	602b      	str	r3, [r5, #0]
 800ca40:	f7f7 ffc4 	bl	80049cc <_sbrk>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d102      	bne.n	800ca4e <_sbrk_r+0x1a>
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	b103      	cbz	r3, 800ca4e <_sbrk_r+0x1a>
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	200006a0 	.word	0x200006a0

0800ca54 <memchr>:
 800ca54:	4603      	mov	r3, r0
 800ca56:	b510      	push	{r4, lr}
 800ca58:	b2c9      	uxtb	r1, r1
 800ca5a:	4402      	add	r2, r0
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	d101      	bne.n	800ca66 <memchr+0x12>
 800ca62:	2000      	movs	r0, #0
 800ca64:	e003      	b.n	800ca6e <memchr+0x1a>
 800ca66:	7804      	ldrb	r4, [r0, #0]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	428c      	cmp	r4, r1
 800ca6c:	d1f6      	bne.n	800ca5c <memchr+0x8>
 800ca6e:	bd10      	pop	{r4, pc}

0800ca70 <__swhatbuf_r>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	460c      	mov	r4, r1
 800ca74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca78:	4615      	mov	r5, r2
 800ca7a:	2900      	cmp	r1, #0
 800ca7c:	461e      	mov	r6, r3
 800ca7e:	b096      	sub	sp, #88	; 0x58
 800ca80:	da0c      	bge.n	800ca9c <__swhatbuf_r+0x2c>
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	2100      	movs	r1, #0
 800ca86:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca8a:	bf0c      	ite	eq
 800ca8c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca90:	2340      	movne	r3, #64	; 0x40
 800ca92:	2000      	movs	r0, #0
 800ca94:	6031      	str	r1, [r6, #0]
 800ca96:	602b      	str	r3, [r5, #0]
 800ca98:	b016      	add	sp, #88	; 0x58
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	466a      	mov	r2, sp
 800ca9e:	f000 f849 	bl	800cb34 <_fstat_r>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	dbed      	blt.n	800ca82 <__swhatbuf_r+0x12>
 800caa6:	9901      	ldr	r1, [sp, #4]
 800caa8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800caac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cab0:	4259      	negs	r1, r3
 800cab2:	4159      	adcs	r1, r3
 800cab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab8:	e7eb      	b.n	800ca92 <__swhatbuf_r+0x22>

0800caba <__smakebuf_r>:
 800caba:	898b      	ldrh	r3, [r1, #12]
 800cabc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cabe:	079d      	lsls	r5, r3, #30
 800cac0:	4606      	mov	r6, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	d507      	bpl.n	800cad6 <__smakebuf_r+0x1c>
 800cac6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caca:	6023      	str	r3, [r4, #0]
 800cacc:	6123      	str	r3, [r4, #16]
 800cace:	2301      	movs	r3, #1
 800cad0:	6163      	str	r3, [r4, #20]
 800cad2:	b002      	add	sp, #8
 800cad4:	bd70      	pop	{r4, r5, r6, pc}
 800cad6:	466a      	mov	r2, sp
 800cad8:	ab01      	add	r3, sp, #4
 800cada:	f7ff ffc9 	bl	800ca70 <__swhatbuf_r>
 800cade:	9900      	ldr	r1, [sp, #0]
 800cae0:	4605      	mov	r5, r0
 800cae2:	4630      	mov	r0, r6
 800cae4:	f7ff fac0 	bl	800c068 <_malloc_r>
 800cae8:	b948      	cbnz	r0, 800cafe <__smakebuf_r+0x44>
 800caea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caee:	059a      	lsls	r2, r3, #22
 800caf0:	d4ef      	bmi.n	800cad2 <__smakebuf_r+0x18>
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0302 	orr.w	r3, r3, #2
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	e7e3      	b.n	800cac6 <__smakebuf_r+0xc>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	6020      	str	r0, [r4, #0]
 800cb02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	9b00      	ldr	r3, [sp, #0]
 800cb0a:	6120      	str	r0, [r4, #16]
 800cb0c:	6163      	str	r3, [r4, #20]
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	b15b      	cbz	r3, 800cb2a <__smakebuf_r+0x70>
 800cb12:	4630      	mov	r0, r6
 800cb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb18:	f000 f81e 	bl	800cb58 <_isatty_r>
 800cb1c:	b128      	cbz	r0, 800cb2a <__smakebuf_r+0x70>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f023 0303 	bic.w	r3, r3, #3
 800cb24:	f043 0301 	orr.w	r3, r3, #1
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	431d      	orrs	r5, r3
 800cb2e:	81a5      	strh	r5, [r4, #12]
 800cb30:	e7cf      	b.n	800cad2 <__smakebuf_r+0x18>
	...

0800cb34 <_fstat_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	2300      	movs	r3, #0
 800cb38:	4d06      	ldr	r5, [pc, #24]	; (800cb54 <_fstat_r+0x20>)
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	4611      	mov	r1, r2
 800cb40:	602b      	str	r3, [r5, #0]
 800cb42:	f7f7 ff1e 	bl	8004982 <_fstat>
 800cb46:	1c43      	adds	r3, r0, #1
 800cb48:	d102      	bne.n	800cb50 <_fstat_r+0x1c>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	b103      	cbz	r3, 800cb50 <_fstat_r+0x1c>
 800cb4e:	6023      	str	r3, [r4, #0]
 800cb50:	bd38      	pop	{r3, r4, r5, pc}
 800cb52:	bf00      	nop
 800cb54:	200006a0 	.word	0x200006a0

0800cb58 <_isatty_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	4d05      	ldr	r5, [pc, #20]	; (800cb74 <_isatty_r+0x1c>)
 800cb5e:	4604      	mov	r4, r0
 800cb60:	4608      	mov	r0, r1
 800cb62:	602b      	str	r3, [r5, #0]
 800cb64:	f7f7 ff1c 	bl	80049a0 <_isatty>
 800cb68:	1c43      	adds	r3, r0, #1
 800cb6a:	d102      	bne.n	800cb72 <_isatty_r+0x1a>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	b103      	cbz	r3, 800cb72 <_isatty_r+0x1a>
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	200006a0 	.word	0x200006a0

0800cb78 <_init>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	bf00      	nop
 800cb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7e:	bc08      	pop	{r3}
 800cb80:	469e      	mov	lr, r3
 800cb82:	4770      	bx	lr

0800cb84 <_fini>:
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb86:	bf00      	nop
 800cb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8a:	bc08      	pop	{r3}
 800cb8c:	469e      	mov	lr, r3
 800cb8e:	4770      	bx	lr
