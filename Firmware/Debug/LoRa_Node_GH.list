
LoRa_Node_GH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800d9d0  0800d9d0  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd6c  0800dd6c  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd74  0800dd74  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd74  0800dd74  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd78  0800dd78  0001dd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800dd7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000170  0800dee8  00020170  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ec  0800dee8  000206ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001909c  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8a  00000000  00000000  00039274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  0003d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001345  00000000  00000000  0003e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b98a  00000000  00000000  0003fbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e319  00000000  00000000  0005b56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a2ac  00000000  00000000  00079888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000740c  00000000  00000000  00113b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000170 	.word	0x20000170
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d9b8 	.word	0x0800d9b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000174 	.word	0x20000174
 800014c:	0800d9b8 	.word	0x0800d9b8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_d2f>:
 800075c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000760:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000764:	bf24      	itt	cs
 8000766:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800076a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800076e:	d90d      	bls.n	800078c <__aeabi_d2f+0x30>
 8000770:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000774:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000778:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800077c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000780:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000784:	bf08      	it	eq
 8000786:	f020 0001 	biceq.w	r0, r0, #1
 800078a:	4770      	bx	lr
 800078c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000790:	d121      	bne.n	80007d6 <__aeabi_d2f+0x7a>
 8000792:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000796:	bfbc      	itt	lt
 8000798:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800079c:	4770      	bxlt	lr
 800079e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007a6:	f1c2 0218 	rsb	r2, r2, #24
 80007aa:	f1c2 0c20 	rsb	ip, r2, #32
 80007ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	bf18      	it	ne
 80007b8:	f040 0001 	orrne.w	r0, r0, #1
 80007bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c8:	ea40 000c 	orr.w	r0, r0, ip
 80007cc:	fa23 f302 	lsr.w	r3, r3, r2
 80007d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007d4:	e7cc      	b.n	8000770 <__aeabi_d2f+0x14>
 80007d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007da:	d107      	bne.n	80007ec <__aeabi_d2f+0x90>
 80007dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007e0:	bf1e      	ittt	ne
 80007e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ea:	4770      	bxne	lr
 80007ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_frsub>:
 80007fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000800:	e002      	b.n	8000808 <__addsf3>
 8000802:	bf00      	nop

08000804 <__aeabi_fsub>:
 8000804:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000808 <__addsf3>:
 8000808:	0042      	lsls	r2, r0, #1
 800080a:	bf1f      	itttt	ne
 800080c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000810:	ea92 0f03 	teqne	r2, r3
 8000814:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000818:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800081c:	d06a      	beq.n	80008f4 <__addsf3+0xec>
 800081e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000822:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000826:	bfc1      	itttt	gt
 8000828:	18d2      	addgt	r2, r2, r3
 800082a:	4041      	eorgt	r1, r0
 800082c:	4048      	eorgt	r0, r1
 800082e:	4041      	eorgt	r1, r0
 8000830:	bfb8      	it	lt
 8000832:	425b      	neglt	r3, r3
 8000834:	2b19      	cmp	r3, #25
 8000836:	bf88      	it	hi
 8000838:	4770      	bxhi	lr
 800083a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800083e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4240      	negne	r0, r0
 800084a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800084e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4249      	negne	r1, r1
 800085a:	ea92 0f03 	teq	r2, r3
 800085e:	d03f      	beq.n	80008e0 <__addsf3+0xd8>
 8000860:	f1a2 0201 	sub.w	r2, r2, #1
 8000864:	fa41 fc03 	asr.w	ip, r1, r3
 8000868:	eb10 000c 	adds.w	r0, r0, ip
 800086c:	f1c3 0320 	rsb	r3, r3, #32
 8000870:	fa01 f103 	lsl.w	r1, r1, r3
 8000874:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000878:	d502      	bpl.n	8000880 <__addsf3+0x78>
 800087a:	4249      	negs	r1, r1
 800087c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000880:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000884:	d313      	bcc.n	80008ae <__addsf3+0xa6>
 8000886:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800088a:	d306      	bcc.n	800089a <__addsf3+0x92>
 800088c:	0840      	lsrs	r0, r0, #1
 800088e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000892:	f102 0201 	add.w	r2, r2, #1
 8000896:	2afe      	cmp	r2, #254	; 0xfe
 8000898:	d251      	bcs.n	800093e <__addsf3+0x136>
 800089a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	ea40 0003 	orr.w	r0, r0, r3
 80008ac:	4770      	bx	lr
 80008ae:	0049      	lsls	r1, r1, #1
 80008b0:	eb40 0000 	adc.w	r0, r0, r0
 80008b4:	3a01      	subs	r2, #1
 80008b6:	bf28      	it	cs
 80008b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008bc:	d2ed      	bcs.n	800089a <__addsf3+0x92>
 80008be:	fab0 fc80 	clz	ip, r0
 80008c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ce:	bfaa      	itet	ge
 80008d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d4:	4252      	neglt	r2, r2
 80008d6:	4318      	orrge	r0, r3
 80008d8:	bfbc      	itt	lt
 80008da:	40d0      	lsrlt	r0, r2
 80008dc:	4318      	orrlt	r0, r3
 80008de:	4770      	bx	lr
 80008e0:	f092 0f00 	teq	r2, #0
 80008e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008e8:	bf06      	itte	eq
 80008ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ee:	3201      	addeq	r2, #1
 80008f0:	3b01      	subne	r3, #1
 80008f2:	e7b5      	b.n	8000860 <__addsf3+0x58>
 80008f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008fc:	bf18      	it	ne
 80008fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000902:	d021      	beq.n	8000948 <__addsf3+0x140>
 8000904:	ea92 0f03 	teq	r2, r3
 8000908:	d004      	beq.n	8000914 <__addsf3+0x10c>
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	bf08      	it	eq
 8000910:	4608      	moveq	r0, r1
 8000912:	4770      	bx	lr
 8000914:	ea90 0f01 	teq	r0, r1
 8000918:	bf1c      	itt	ne
 800091a:	2000      	movne	r0, #0
 800091c:	4770      	bxne	lr
 800091e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000922:	d104      	bne.n	800092e <__addsf3+0x126>
 8000924:	0040      	lsls	r0, r0, #1
 8000926:	bf28      	it	cs
 8000928:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000932:	bf3c      	itt	cc
 8000934:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bxcc	lr
 800093a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800093e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000942:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000946:	4770      	bx	lr
 8000948:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800094c:	bf16      	itet	ne
 800094e:	4608      	movne	r0, r1
 8000950:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000954:	4601      	movne	r1, r0
 8000956:	0242      	lsls	r2, r0, #9
 8000958:	bf06      	itte	eq
 800095a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095e:	ea90 0f01 	teqeq	r0, r1
 8000962:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000966:	4770      	bx	lr

08000968 <__aeabi_ui2f>:
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e004      	b.n	8000978 <__aeabi_i2f+0x8>
 800096e:	bf00      	nop

08000970 <__aeabi_i2f>:
 8000970:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000974:	bf48      	it	mi
 8000976:	4240      	negmi	r0, r0
 8000978:	ea5f 0c00 	movs.w	ip, r0
 800097c:	bf08      	it	eq
 800097e:	4770      	bxeq	lr
 8000980:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000984:	4601      	mov	r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	e01c      	b.n	80009c6 <__aeabi_l2f+0x2a>

0800098c <__aeabi_ul2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e00a      	b.n	80009b0 <__aeabi_l2f+0x14>
 800099a:	bf00      	nop

0800099c <__aeabi_l2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__aeabi_l2f+0x14>
 80009aa:	4240      	negs	r0, r0
 80009ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009b0:	ea5f 0c01 	movs.w	ip, r1
 80009b4:	bf02      	ittt	eq
 80009b6:	4684      	moveq	ip, r0
 80009b8:	4601      	moveq	r1, r0
 80009ba:	2000      	moveq	r0, #0
 80009bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009c0:	bf08      	it	eq
 80009c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ca:	fabc f28c 	clz	r2, ip
 80009ce:	3a08      	subs	r2, #8
 80009d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d4:	db10      	blt.n	80009f8 <__aeabi_l2f+0x5c>
 80009d6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009da:	4463      	add	r3, ip
 80009dc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009e0:	f1c2 0220 	rsb	r2, r2, #32
 80009e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	eb43 0002 	adc.w	r0, r3, r2
 80009f0:	bf08      	it	eq
 80009f2:	f020 0001 	biceq.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	f102 0220 	add.w	r2, r2, #32
 80009fc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a00:	f1c2 0220 	rsb	r2, r2, #32
 8000a04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a08:	fa21 f202 	lsr.w	r2, r1, r2
 8000a0c:	eb43 0002 	adc.w	r0, r3, r2
 8000a10:	bf08      	it	eq
 8000a12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a16:	4770      	bx	lr

08000a18 <__aeabi_fmul>:
 8000a18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a20:	bf1e      	ittt	ne
 8000a22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a26:	ea92 0f0c 	teqne	r2, ip
 8000a2a:	ea93 0f0c 	teqne	r3, ip
 8000a2e:	d06f      	beq.n	8000b10 <__aeabi_fmul+0xf8>
 8000a30:	441a      	add	r2, r3
 8000a32:	ea80 0c01 	eor.w	ip, r0, r1
 8000a36:	0240      	lsls	r0, r0, #9
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3e:	d01e      	beq.n	8000a7e <__aeabi_fmul+0x66>
 8000a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a58:	bf3e      	ittt	cc
 8000a5a:	0049      	lslcc	r1, r1, #1
 8000a5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a60:	005b      	lslcc	r3, r3, #1
 8000a62:	ea40 0001 	orr.w	r0, r0, r1
 8000a66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a6a:	2afd      	cmp	r2, #253	; 0xfd
 8000a6c:	d81d      	bhi.n	8000aaa <__aeabi_fmul+0x92>
 8000a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	4770      	bx	lr
 8000a7e:	f090 0f00 	teq	r0, #0
 8000a82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a86:	bf08      	it	eq
 8000a88:	0249      	lsleq	r1, r1, #9
 8000a8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a92:	3a7f      	subs	r2, #127	; 0x7f
 8000a94:	bfc2      	ittt	gt
 8000a96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9e:	4770      	bxgt	lr
 8000aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	3a01      	subs	r2, #1
 8000aaa:	dc5d      	bgt.n	8000b68 <__aeabi_fmul+0x150>
 8000aac:	f112 0f19 	cmn.w	r2, #25
 8000ab0:	bfdc      	itt	le
 8000ab2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ab6:	4770      	bxle	lr
 8000ab8:	f1c2 0200 	rsb	r2, r2, #0
 8000abc:	0041      	lsls	r1, r0, #1
 8000abe:	fa21 f102 	lsr.w	r1, r1, r2
 8000ac2:	f1c2 0220 	rsb	r2, r2, #32
 8000ac6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ace:	f140 0000 	adc.w	r0, r0, #0
 8000ad2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad6:	bf08      	it	eq
 8000ad8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000adc:	4770      	bx	lr
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ae6:	bf02      	ittt	eq
 8000ae8:	0040      	lsleq	r0, r0, #1
 8000aea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aee:	3a01      	subeq	r2, #1
 8000af0:	d0f9      	beq.n	8000ae6 <__aeabi_fmul+0xce>
 8000af2:	ea40 000c 	orr.w	r0, r0, ip
 8000af6:	f093 0f00 	teq	r3, #0
 8000afa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afe:	bf02      	ittt	eq
 8000b00:	0049      	lsleq	r1, r1, #1
 8000b02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b06:	3b01      	subeq	r3, #1
 8000b08:	d0f9      	beq.n	8000afe <__aeabi_fmul+0xe6>
 8000b0a:	ea41 010c 	orr.w	r1, r1, ip
 8000b0e:	e78f      	b.n	8000a30 <__aeabi_fmul+0x18>
 8000b10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b14:	ea92 0f0c 	teq	r2, ip
 8000b18:	bf18      	it	ne
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d00a      	beq.n	8000b36 <__aeabi_fmul+0x11e>
 8000b20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b24:	bf18      	it	ne
 8000b26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b2a:	d1d8      	bne.n	8000ade <__aeabi_fmul+0xc6>
 8000b2c:	ea80 0001 	eor.w	r0, r0, r1
 8000b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f090 0f00 	teq	r0, #0
 8000b3a:	bf17      	itett	ne
 8000b3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b40:	4608      	moveq	r0, r1
 8000b42:	f091 0f00 	teqne	r1, #0
 8000b46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b4a:	d014      	beq.n	8000b76 <__aeabi_fmul+0x15e>
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	d101      	bne.n	8000b56 <__aeabi_fmul+0x13e>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d10f      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b56:	ea93 0f0c 	teq	r3, ip
 8000b5a:	d103      	bne.n	8000b64 <__aeabi_fmul+0x14c>
 8000b5c:	024b      	lsls	r3, r1, #9
 8000b5e:	bf18      	it	ne
 8000b60:	4608      	movne	r0, r1
 8000b62:	d108      	bne.n	8000b76 <__aeabi_fmul+0x15e>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_fdiv>:
 8000b80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b88:	bf1e      	ittt	ne
 8000b8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8e:	ea92 0f0c 	teqne	r2, ip
 8000b92:	ea93 0f0c 	teqne	r3, ip
 8000b96:	d069      	beq.n	8000c6c <__aeabi_fdiv+0xec>
 8000b98:	eba2 0203 	sub.w	r2, r2, r3
 8000b9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba6:	d037      	beq.n	8000c18 <__aeabi_fdiv+0x98>
 8000ba8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf38      	it	cc
 8000bbc:	005b      	lslcc	r3, r3, #1
 8000bbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	bf24      	itt	cs
 8000bca:	1a5b      	subcs	r3, r3, r1
 8000bcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000be2:	bf24      	itt	cs
 8000be4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bf0:	bf24      	itt	cs
 8000bf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c02:	d1e0      	bne.n	8000bc6 <__aeabi_fdiv+0x46>
 8000c04:	2afd      	cmp	r2, #253	; 0xfd
 8000c06:	f63f af50 	bhi.w	8000aaa <__aeabi_fmul+0x92>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c20:	327f      	adds	r2, #127	; 0x7f
 8000c22:	bfc2      	ittt	gt
 8000c24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2c:	4770      	bxgt	lr
 8000c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	3a01      	subs	r2, #1
 8000c38:	e737      	b.n	8000aaa <__aeabi_fmul+0x92>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c42:	bf02      	ittt	eq
 8000c44:	0040      	lsleq	r0, r0, #1
 8000c46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c4a:	3a01      	subeq	r2, #1
 8000c4c:	d0f9      	beq.n	8000c42 <__aeabi_fdiv+0xc2>
 8000c4e:	ea40 000c 	orr.w	r0, r0, ip
 8000c52:	f093 0f00 	teq	r3, #0
 8000c56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	bf02      	ittt	eq
 8000c5c:	0049      	lsleq	r1, r1, #1
 8000c5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c62:	3b01      	subeq	r3, #1
 8000c64:	d0f9      	beq.n	8000c5a <__aeabi_fdiv+0xda>
 8000c66:	ea41 010c 	orr.w	r1, r1, ip
 8000c6a:	e795      	b.n	8000b98 <__aeabi_fdiv+0x18>
 8000c6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c70:	ea92 0f0c 	teq	r2, ip
 8000c74:	d108      	bne.n	8000c88 <__aeabi_fdiv+0x108>
 8000c76:	0242      	lsls	r2, r0, #9
 8000c78:	f47f af7d 	bne.w	8000b76 <__aeabi_fmul+0x15e>
 8000c7c:	ea93 0f0c 	teq	r3, ip
 8000c80:	f47f af70 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e776      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c88:	ea93 0f0c 	teq	r3, ip
 8000c8c:	d104      	bne.n	8000c98 <__aeabi_fdiv+0x118>
 8000c8e:	024b      	lsls	r3, r1, #9
 8000c90:	f43f af4c 	beq.w	8000b2c <__aeabi_fmul+0x114>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e76e      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000c98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c9c:	bf18      	it	ne
 8000c9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	d1ca      	bne.n	8000c3a <__aeabi_fdiv+0xba>
 8000ca4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ca8:	f47f af5c 	bne.w	8000b64 <__aeabi_fmul+0x14c>
 8000cac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	f47f af3c 	bne.w	8000b2c <__aeabi_fmul+0x114>
 8000cb4:	e75f      	b.n	8000b76 <__aeabi_fmul+0x15e>
 8000cb6:	bf00      	nop

08000cb8 <__gesf2>:
 8000cb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cbc:	e006      	b.n	8000ccc <__cmpsf2+0x4>
 8000cbe:	bf00      	nop

08000cc0 <__lesf2>:
 8000cc0:	f04f 0c01 	mov.w	ip, #1
 8000cc4:	e002      	b.n	8000ccc <__cmpsf2+0x4>
 8000cc6:	bf00      	nop

08000cc8 <__cmpsf2>:
 8000cc8:	f04f 0c01 	mov.w	ip, #1
 8000ccc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cdc:	bf18      	it	ne
 8000cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce2:	d011      	beq.n	8000d08 <__cmpsf2+0x40>
 8000ce4:	b001      	add	sp, #4
 8000ce6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cea:	bf18      	it	ne
 8000cec:	ea90 0f01 	teqne	r0, r1
 8000cf0:	bf58      	it	pl
 8000cf2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cf6:	bf88      	it	hi
 8000cf8:	17c8      	asrhi	r0, r1, #31
 8000cfa:	bf38      	it	cc
 8000cfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d00:	bf18      	it	ne
 8000d02:	f040 0001 	orrne.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	d102      	bne.n	8000d14 <__cmpsf2+0x4c>
 8000d0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d12:	d105      	bne.n	8000d20 <__cmpsf2+0x58>
 8000d14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d18:	d1e4      	bne.n	8000ce4 <__cmpsf2+0x1c>
 8000d1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d1e:	d0e1      	beq.n	8000ce4 <__cmpsf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cfrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	e7ff      	b.n	8000d30 <__aeabi_cfcmpeq>

08000d30 <__aeabi_cfcmpeq>:
 8000d30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d32:	f7ff ffc9 	bl	8000cc8 <__cmpsf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d40 <__aeabi_fcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cfcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffd2 	bl	8000d28 <__aeabi_cfrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_fcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc8 	bl	8000d28 <__aeabi_cfrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_ldivmod>:
 8000de4:	b97b      	cbnz	r3, 8000e06 <__aeabi_ldivmod+0x22>
 8000de6:	b972      	cbnz	r2, 8000e06 <__aeabi_ldivmod+0x22>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bfbe      	ittt	lt
 8000dec:	2000      	movlt	r0, #0
 8000dee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000df2:	e006      	blt.n	8000e02 <__aeabi_ldivmod+0x1e>
 8000df4:	bf08      	it	eq
 8000df6:	2800      	cmpeq	r0, #0
 8000df8:	bf1c      	itt	ne
 8000dfa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfe:	f04f 30ff 	movne.w	r0, #4294967295
 8000e02:	f000 b9bd 	b.w	8001180 <__aeabi_idiv0>
 8000e06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	db09      	blt.n	8000e26 <__aeabi_ldivmod+0x42>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db1a      	blt.n	8000e4c <__aeabi_ldivmod+0x68>
 8000e16:	f000 f84d 	bl	8000eb4 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4770      	bx	lr
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db1b      	blt.n	8000e68 <__aeabi_ldivmod+0x84>
 8000e30:	f000 f840 	bl	8000eb4 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	4252      	negs	r2, r2
 8000e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f82f 	bl	8000eb4 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4240      	negs	r0, r0
 8000e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e66:	4770      	bx	lr
 8000e68:	4252      	negs	r2, r2
 8000e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6e:	f000 f821 	bl	8000eb4 <__udivmoddi4>
 8000e72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7a:	b004      	add	sp, #16
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_uldivmod>:
 8000e84:	b953      	cbnz	r3, 8000e9c <__aeabi_uldivmod+0x18>
 8000e86:	b94a      	cbnz	r2, 8000e9c <__aeabi_uldivmod+0x18>
 8000e88:	2900      	cmp	r1, #0
 8000e8a:	bf08      	it	eq
 8000e8c:	2800      	cmpeq	r0, #0
 8000e8e:	bf1c      	itt	ne
 8000e90:	f04f 31ff 	movne.w	r1, #4294967295
 8000e94:	f04f 30ff 	movne.w	r0, #4294967295
 8000e98:	f000 b972 	b.w	8001180 <__aeabi_idiv0>
 8000e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea4:	f000 f806 	bl	8000eb4 <__udivmoddi4>
 8000ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb0:	b004      	add	sp, #16
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9e08      	ldr	r6, [sp, #32]
 8000eba:	460d      	mov	r5, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	468e      	mov	lr, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14c      	bne.n	8000f5e <__udivmoddi4+0xaa>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4694      	mov	ip, r2
 8000ec8:	d967      	bls.n	8000f9a <__udivmoddi4+0xe6>
 8000eca:	fab2 f382 	clz	r3, r2
 8000ece:	b153      	cbz	r3, 8000ee6 <__udivmoddi4+0x32>
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	f1c3 0220 	rsb	r2, r3, #32
 8000ed8:	fa01 fe03 	lsl.w	lr, r1, r3
 8000edc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ee0:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ee4:	409c      	lsls	r4, r3
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fbbe f1f7 	udiv	r1, lr, r7
 8000eee:	fa1f f58c 	uxth.w	r5, ip
 8000ef2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000ef6:	fb01 f005 	mul.w	r0, r1, r5
 8000efa:	0c22      	lsrs	r2, r4, #16
 8000efc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x66>
 8000f04:	eb1c 0202 	adds.w	r2, ip, r2
 8000f08:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f0c:	f080 8119 	bcs.w	8001142 <__udivmoddi4+0x28e>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f240 8116 	bls.w	8001142 <__udivmoddi4+0x28e>
 8000f16:	3902      	subs	r1, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a12      	subs	r2, r2, r0
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	fb00 f505 	mul.w	r5, r0, r5
 8000f28:	b2a4      	uxth	r4, r4
 8000f2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f2e:	42a5      	cmp	r5, r4
 8000f30:	d90a      	bls.n	8000f48 <__udivmoddi4+0x94>
 8000f32:	eb1c 0404 	adds.w	r4, ip, r4
 8000f36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f3a:	f080 8104 	bcs.w	8001146 <__udivmoddi4+0x292>
 8000f3e:	42a5      	cmp	r5, r4
 8000f40:	f240 8101 	bls.w	8001146 <__udivmoddi4+0x292>
 8000f44:	4464      	add	r4, ip
 8000f46:	3802      	subs	r0, #2
 8000f48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	1b64      	subs	r4, r4, r5
 8000f50:	b11e      	cbz	r6, 8000f5a <__udivmoddi4+0xa6>
 8000f52:	40dc      	lsrs	r4, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	e9c6 4300 	strd	r4, r3, [r6]
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0xc0>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80ea 	beq.w	800113c <__udivmoddi4+0x288>
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	fab3 f183 	clz	r1, r3
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d148      	bne.n	800100e <__udivmoddi4+0x15a>
 8000f7c:	42ab      	cmp	r3, r5
 8000f7e:	d302      	bcc.n	8000f86 <__udivmoddi4+0xd2>
 8000f80:	4282      	cmp	r2, r0
 8000f82:	f200 80f8 	bhi.w	8001176 <__udivmoddi4+0x2c2>
 8000f86:	1a84      	subs	r4, r0, r2
 8000f88:	eb65 0203 	sbc.w	r2, r5, r3
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4696      	mov	lr, r2
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d0e2      	beq.n	8000f5a <__udivmoddi4+0xa6>
 8000f94:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f98:	e7df      	b.n	8000f5a <__udivmoddi4+0xa6>
 8000f9a:	b902      	cbnz	r2, 8000f9e <__udivmoddi4+0xea>
 8000f9c:	deff      	udf	#255	; 0xff
 8000f9e:	fab2 f382 	clz	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 808e 	bne.w	80010c4 <__udivmoddi4+0x210>
 8000fa8:	1a88      	subs	r0, r1, r2
 8000faa:	2101      	movs	r1, #1
 8000fac:	0c17      	lsrs	r7, r2, #16
 8000fae:	fa1f fe82 	uxth.w	lr, r2
 8000fb2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000fb6:	fb07 0015 	mls	r0, r7, r5, r0
 8000fba:	0c22      	lsrs	r2, r4, #16
 8000fbc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fc0:	fb0e f005 	mul.w	r0, lr, r5
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x126>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fd0:	d202      	bcs.n	8000fd8 <__udivmoddi4+0x124>
 8000fd2:	4290      	cmp	r0, r2
 8000fd4:	f200 80cc 	bhi.w	8001170 <__udivmoddi4+0x2bc>
 8000fd8:	4645      	mov	r5, r8
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fe0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fe4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe8:	b2a4      	uxth	r4, r4
 8000fea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fee:	45a6      	cmp	lr, r4
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x150>
 8000ff2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x14e>
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	f200 80b4 	bhi.w	800116a <__udivmoddi4+0x2b6>
 8001002:	4610      	mov	r0, r2
 8001004:	eba4 040e 	sub.w	r4, r4, lr
 8001008:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800100c:	e7a0      	b.n	8000f50 <__udivmoddi4+0x9c>
 800100e:	f1c1 0720 	rsb	r7, r1, #32
 8001012:	408b      	lsls	r3, r1
 8001014:	fa22 fc07 	lsr.w	ip, r2, r7
 8001018:	ea4c 0c03 	orr.w	ip, ip, r3
 800101c:	fa25 fa07 	lsr.w	sl, r5, r7
 8001020:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001024:	fbba f8f9 	udiv	r8, sl, r9
 8001028:	408d      	lsls	r5, r1
 800102a:	fa20 f307 	lsr.w	r3, r0, r7
 800102e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001032:	fa1f fe8c 	uxth.w	lr, ip
 8001036:	432b      	orrs	r3, r5
 8001038:	fa00 f501 	lsl.w	r5, r0, r1
 800103c:	fb08 f00e 	mul.w	r0, r8, lr
 8001040:	0c1c      	lsrs	r4, r3, #16
 8001042:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001046:	42a0      	cmp	r0, r4
 8001048:	fa02 f201 	lsl.w	r2, r2, r1
 800104c:	d90b      	bls.n	8001066 <__udivmoddi4+0x1b2>
 800104e:	eb1c 0404 	adds.w	r4, ip, r4
 8001052:	f108 3aff 	add.w	sl, r8, #4294967295
 8001056:	f080 8086 	bcs.w	8001166 <__udivmoddi4+0x2b2>
 800105a:	42a0      	cmp	r0, r4
 800105c:	f240 8083 	bls.w	8001166 <__udivmoddi4+0x2b2>
 8001060:	f1a8 0802 	sub.w	r8, r8, #2
 8001064:	4464      	add	r4, ip
 8001066:	1a24      	subs	r4, r4, r0
 8001068:	b298      	uxth	r0, r3
 800106a:	fbb4 f3f9 	udiv	r3, r4, r9
 800106e:	fb09 4413 	mls	r4, r9, r3, r4
 8001072:	fb03 fe0e 	mul.w	lr, r3, lr
 8001076:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800107a:	45a6      	cmp	lr, r4
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x1dc>
 800107e:	eb1c 0404 	adds.w	r4, ip, r4
 8001082:	f103 30ff 	add.w	r0, r3, #4294967295
 8001086:	d26a      	bcs.n	800115e <__udivmoddi4+0x2aa>
 8001088:	45a6      	cmp	lr, r4
 800108a:	d968      	bls.n	800115e <__udivmoddi4+0x2aa>
 800108c:	3b02      	subs	r3, #2
 800108e:	4464      	add	r4, ip
 8001090:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001094:	fba0 9302 	umull	r9, r3, r0, r2
 8001098:	eba4 040e 	sub.w	r4, r4, lr
 800109c:	429c      	cmp	r4, r3
 800109e:	46c8      	mov	r8, r9
 80010a0:	469e      	mov	lr, r3
 80010a2:	d354      	bcc.n	800114e <__udivmoddi4+0x29a>
 80010a4:	d051      	beq.n	800114a <__udivmoddi4+0x296>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d067      	beq.n	800117a <__udivmoddi4+0x2c6>
 80010aa:	ebb5 0308 	subs.w	r3, r5, r8
 80010ae:	eb64 040e 	sbc.w	r4, r4, lr
 80010b2:	40cb      	lsrs	r3, r1
 80010b4:	fa04 f707 	lsl.w	r7, r4, r7
 80010b8:	431f      	orrs	r7, r3
 80010ba:	40cc      	lsrs	r4, r1
 80010bc:	e9c6 7400 	strd	r7, r4, [r6]
 80010c0:	2100      	movs	r1, #0
 80010c2:	e74a      	b.n	8000f5a <__udivmoddi4+0xa6>
 80010c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010c8:	f1c3 0020 	rsb	r0, r3, #32
 80010cc:	40c1      	lsrs	r1, r0
 80010ce:	409d      	lsls	r5, r3
 80010d0:	fa24 f000 	lsr.w	r0, r4, r0
 80010d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d8:	4328      	orrs	r0, r5
 80010da:	fbb1 f5f7 	udiv	r5, r1, r7
 80010de:	fb07 1115 	mls	r1, r7, r5, r1
 80010e2:	fa1f fe8c 	uxth.w	lr, ip
 80010e6:	0c02      	lsrs	r2, r0, #16
 80010e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010ec:	fb05 f10e 	mul.w	r1, r5, lr
 80010f0:	4291      	cmp	r1, r2
 80010f2:	fa04 f403 	lsl.w	r4, r4, r3
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x256>
 80010f8:	eb1c 0202 	adds.w	r2, ip, r2
 80010fc:	f105 38ff 	add.w	r8, r5, #4294967295
 8001100:	d22f      	bcs.n	8001162 <__udivmoddi4+0x2ae>
 8001102:	4291      	cmp	r1, r2
 8001104:	d92d      	bls.n	8001162 <__udivmoddi4+0x2ae>
 8001106:	3d02      	subs	r5, #2
 8001108:	4462      	add	r2, ip
 800110a:	1a52      	subs	r2, r2, r1
 800110c:	fbb2 f1f7 	udiv	r1, r2, r7
 8001110:	fb07 2211 	mls	r2, r7, r1, r2
 8001114:	b280      	uxth	r0, r0
 8001116:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800111a:	fb01 f20e 	mul.w	r2, r1, lr
 800111e:	4282      	cmp	r2, r0
 8001120:	d908      	bls.n	8001134 <__udivmoddi4+0x280>
 8001122:	eb1c 0000 	adds.w	r0, ip, r0
 8001126:	f101 38ff 	add.w	r8, r1, #4294967295
 800112a:	d216      	bcs.n	800115a <__udivmoddi4+0x2a6>
 800112c:	4282      	cmp	r2, r0
 800112e:	d914      	bls.n	800115a <__udivmoddi4+0x2a6>
 8001130:	3902      	subs	r1, #2
 8001132:	4460      	add	r0, ip
 8001134:	1a80      	subs	r0, r0, r2
 8001136:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800113a:	e73a      	b.n	8000fb2 <__udivmoddi4+0xfe>
 800113c:	4631      	mov	r1, r6
 800113e:	4630      	mov	r0, r6
 8001140:	e70b      	b.n	8000f5a <__udivmoddi4+0xa6>
 8001142:	4671      	mov	r1, lr
 8001144:	e6e9      	b.n	8000f1a <__udivmoddi4+0x66>
 8001146:	4610      	mov	r0, r2
 8001148:	e6fe      	b.n	8000f48 <__udivmoddi4+0x94>
 800114a:	454d      	cmp	r5, r9
 800114c:	d2ab      	bcs.n	80010a6 <__udivmoddi4+0x1f2>
 800114e:	ebb9 0802 	subs.w	r8, r9, r2
 8001152:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001156:	3801      	subs	r0, #1
 8001158:	e7a5      	b.n	80010a6 <__udivmoddi4+0x1f2>
 800115a:	4641      	mov	r1, r8
 800115c:	e7ea      	b.n	8001134 <__udivmoddi4+0x280>
 800115e:	4603      	mov	r3, r0
 8001160:	e796      	b.n	8001090 <__udivmoddi4+0x1dc>
 8001162:	4645      	mov	r5, r8
 8001164:	e7d1      	b.n	800110a <__udivmoddi4+0x256>
 8001166:	46d0      	mov	r8, sl
 8001168:	e77d      	b.n	8001066 <__udivmoddi4+0x1b2>
 800116a:	4464      	add	r4, ip
 800116c:	3802      	subs	r0, #2
 800116e:	e749      	b.n	8001004 <__udivmoddi4+0x150>
 8001170:	3d02      	subs	r5, #2
 8001172:	4462      	add	r2, ip
 8001174:	e731      	b.n	8000fda <__udivmoddi4+0x126>
 8001176:	4608      	mov	r0, r1
 8001178:	e70a      	b.n	8000f90 <__udivmoddi4+0xdc>
 800117a:	4631      	mov	r1, r6
 800117c:	e6ed      	b.n	8000f5a <__udivmoddi4+0xa6>
 800117e:	bf00      	nop

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001194:	f107 030e 	add.w	r3, r7, #14
 8001198:	461a      	mov	r2, r3
 800119a:	21d0      	movs	r1, #208	; 0xd0
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fda1 	bl	8001ce4 <BME280_ReadRegister>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 80011ac:	2301      	movs	r3, #1
 80011ae:	e005      	b.n	80011bc <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b76      	cmp	r3, #118	; 0x76
 80011b4:	d101      	bne.n	80011ba <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 80011b6:	2302      	movs	r3, #2
 80011b8:	e000      	b.n	80011bc <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 80011ba:	2300      	movs	r3, #0
		}
	}
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->dig_H2 = 0;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->dig_H3 = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->dig_H4 = 0;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	865a      	strh	r2, [r3, #50]	; 0x32
	dev->dig_H5 = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	869a      	strh	r2, [r3, #52]	; 0x34
	dev->dig_H6 = 0;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	dev->dig_P1 = 0;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	845a      	strh	r2, [r3, #34]	; 0x22
	dev->dig_P6 = 0;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	849a      	strh	r2, [r3, #36]	; 0x24
	dev->dig_P7 = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	84da      	strh	r2, [r3, #38]	; 0x26
	dev->dig_P8 = 0;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	851a      	strh	r2, [r3, #40]	; 0x28
	dev->dig_P9 = 0;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 8001264:	22b6      	movs	r2, #182	; 0xb6
 8001266:	21e0      	movs	r1, #224	; 0xe0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fd73 	bl	8001d54 <BME280_WriteRegister>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <BME280_Reset+0xb8>
	{
		return 1;	// NOK
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <BME280_Reset+0xba>
	}
	else
	{
		return 0; // OK
 800127c:	2300      	movs	r3, #0
	}
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]

	/* Modified for weather monitoring, page: 19; Weather monitoring*/

	// Humidity; Set value: 001 = oversampling x1
	static const uint8_t ctrl_humData = 0x01;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <BME280_Init+0x70>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	21f2      	movs	r1, #242	; 0xf2
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fd57 	bl	8001d54 <BME280_WriteRegister>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 80012b0:	2301      	movs	r3, #1
 80012b2:	e01c      	b.n	80012ee <BME280_Init+0x66>
	}

	// Temp | Press | Mode; Set value: 00100100 = oversampling x1, oversampling x1, sleep mode
	static const uint8_t scrl_meadData = 0x24;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <BME280_Init+0x74>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	21f4      	movs	r1, #244	; 0xf4
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fd49 	bl	8001d54 <BME280_WriteRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <BME280_Init+0x48>
	{
		return 1;	// NOK
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00e      	b.n	80012ee <BME280_Init+0x66>
	}

	// Standbay time | IIR filter | 3-wire SPI; Set value: 0000010 = standbay 0.5ms, IIR off, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <BME280_Init+0x78>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	21f5      	movs	r1, #245	; 0xf5
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fd3b 	bl	8001d54 <BME280_WriteRegister>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <BME280_Init+0x64>
	{
		return 1;	// NOK
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 80012ec:	2300      	movs	r3, #0
	}
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800dc50 	.word	0x0800dc50
 80012fc:	0800dc51 	.word	0x0800dc51
 8001300:	0800dc52 	.word	0x0800dc52

08001304 <BME280_GoToFromSleep>:


uint8_t BME280_GoToFromSleep(BME280 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t sleep){
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	71fb      	strb	r3, [r7, #7]

	// sleep value controls if the devide is put to sleep or wake up
	// 1 - wake up, 0 - go to sleep

	dev -> i2cHandle = i2cHandle;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	601a      	str	r2, [r3, #0]
	uint8_t reg_data;

	if (BME280_ReadRegister(dev, CTRL_MEAS, &reg_data) != HAL_OK) return 1; // Read register value
 8001318:	f107 0317 	add.w	r3, r7, #23
 800131c:	461a      	mov	r2, r3
 800131e:	21f4      	movs	r1, #244	; 0xf4
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fcdf 	bl	8001ce4 <BME280_ReadRegister>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <BME280_GoToFromSleep+0x2c>
 800132c:	2301      	movs	r3, #1
 800132e:	e01b      	b.n	8001368 <BME280_GoToFromSleep+0x64>

	if (sleep == 0) reg_data = reg_data & 0xFC; // sleep mode
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <BME280_GoToFromSleep+0x3c>
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	f023 0303 	bic.w	r3, r3, #3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	75fb      	strb	r3, [r7, #23]
	if (sleep == 1) reg_data = (reg_data & 0xFC) | 0x03; // normal mode
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <BME280_GoToFromSleep+0x4c>
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	f043 0303 	orr.w	r3, r3, #3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	75fb      	strb	r3, [r7, #23]

	if (BME280_WriteRegister(dev, CTRL_MEAS, reg_data) != HAL_OK) return 1;
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	461a      	mov	r2, r3
 8001354:	21f4      	movs	r1, #244	; 0xf4
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fcfc 	bl	8001d54 <BME280_WriteRegister>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <BME280_GoToFromSleep+0x62>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <BME280_GoToFromSleep+0x64>

	return 0; // OK
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	; 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	751a      	strb	r2, [r3, #20]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 8001396:	f107 0214 	add.w	r2, r7, #20
 800139a:	2319      	movs	r3, #25
 800139c:	2188      	movs	r1, #136	; 0x88
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fcba 	bl	8001d18 <BME280_ReadRegisters>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 80013aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <BME280_ReadCalibData+0x46>
	{
		return 1;	// NOK
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0d0      	b.n	8001558 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 80013b6:	7d7b      	ldrb	r3, [r7, #21]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29a      	uxth	r2, r3
 80013be:	7d3b      	ldrb	r3, [r7, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	7dbb      	ldrb	r3, [r7, #22]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 80013e0:	7e7b      	ldrb	r3, [r7, #25]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	7e3b      	ldrb	r3, [r7, #24]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 80013f6:	7efb      	ldrb	r3, [r7, #27]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	7ebb      	ldrb	r3, [r7, #26]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800140a:	7f7b      	ldrb	r3, [r7, #29]
 800140c:	b29b      	uxth	r3, r3
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b29a      	uxth	r2, r3
 8001412:	7f3b      	ldrb	r3, [r7, #28]
 8001414:	b29b      	uxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	b21a      	sxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	b29b      	uxth	r3, r3
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b29a      	uxth	r2, r3
 8001428:	7fbb      	ldrb	r3, [r7, #30]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21a      	sxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 8001436:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800143a:	b29b      	uxth	r3, r3
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b29a      	uxth	r2, r3
 8001440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	b21a      	sxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 8001450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001454:	b29b      	uxth	r3, r3
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b29a      	uxth	r2, r3
 800145a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800145e:	b29b      	uxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	845a      	strh	r2, [r3, #34]	; 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 800146a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800146e:	b29b      	uxth	r3, r3
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b29a      	uxth	r2, r3
 8001474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001478:	b29b      	uxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b29b      	uxth	r3, r3
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	849a      	strh	r2, [r3, #36]	; 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 8001484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001488:	b29b      	uxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b29a      	uxth	r2, r3
 800148e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001492:	b29b      	uxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	b21a      	sxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	84da      	strh	r2, [r3, #38]	; 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 800149e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	851a      	strh	r2, [r3, #40]	; 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 80014b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014bc:	b29b      	uxth	r3, r3
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a
	dev -> dig_H1 = CalibData[24];
 80014d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 80014dc:	f107 020c 	add.w	r2, r7, #12
 80014e0:	2307      	movs	r3, #7
 80014e2:	21e1      	movs	r1, #225	; 0xe1
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fc17 	bl	8001d18 <BME280_ReadRegisters>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (status != HAL_OK)
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <BME280_ReadCalibData+0x18c>
	{
		return 1;	// NOK
 80014f8:	2301      	movs	r3, #1
 80014fa:	e02d      	b.n	8001558 <BME280_ReadCalibData+0x1e8>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	7b3b      	ldrb	r3, [r7, #12]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev -> dig_H3 = CalibData2[2];
 800150e:	7bba      	ldrb	r2, [r7, #14]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	b29b      	uxth	r3, r3
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	b29b      	uxth	r3, r3
 800151e:	b21a      	sxth	r2, r3
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b21b      	sxth	r3, r3
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	865a      	strh	r2, [r3, #50]	; 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 8001532:	7c7b      	ldrb	r3, [r7, #17]
 8001534:	b29b      	uxth	r3, r3
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	b29b      	uxth	r3, r3
 800153a:	b21a      	sxth	r2, r3
 800153c:	7c3b      	ldrb	r3, [r7, #16]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	869a      	strh	r2, [r3, #52]	; 0x34
	dev -> dig_H6 = CalibData2[6];
 800154c:	7cbb      	ldrb	r3, [r7, #18]
 800154e:	b25a      	sxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return 0; // OK
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	10da      	asrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8a9b      	ldrh	r3, [r3, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	12db      	asrs	r3, r3, #11
 8001582:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	111b      	asrs	r3, r3, #4
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	8a92      	ldrh	r2, [r2, #20]
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	1112      	asrs	r2, r2, #4
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	8a89      	ldrh	r1, [r1, #20]
 8001596:	1a52      	subs	r2, r2, r1
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	131b      	asrs	r3, r3, #12
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	139b      	asrs	r3, r3, #14
 80015aa:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	441a      	add	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3380      	adds	r3, #128	; 0x80
 80015c2:	121b      	asrs	r3, r3, #8
 80015c4:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 80015d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d6:	b0ca      	sub	sp, #296	; 0x128
 80015d8:	af00      	add	r7, sp, #0
 80015da:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80015de:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 80015e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	17da      	asrs	r2, r3, #31
 80015ea:	461c      	mov	r4, r3
 80015ec:	4615      	mov	r5, r2
 80015ee:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015f2:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015f6:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 80015fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001602:	fb03 f102 	mul.w	r1, r3, r2
 8001606:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800160a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	18ca      	adds	r2, r1, r3
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	fba3 8903 	umull	r8, r9, r3, r3
 800161c:	eb02 0309 	add.w	r3, r2, r9
 8001620:	4699      	mov	r9, r3
 8001622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001626:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800162a:	b21b      	sxth	r3, r3
 800162c:	17da      	asrs	r2, r3, #31
 800162e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001632:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001636:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800163a:	4603      	mov	r3, r0
 800163c:	fb03 f209 	mul.w	r2, r3, r9
 8001640:	460b      	mov	r3, r1
 8001642:	fb08 f303 	mul.w	r3, r8, r3
 8001646:	4413      	add	r3, r2
 8001648:	4602      	mov	r2, r0
 800164a:	fba8 2102 	umull	r2, r1, r8, r2
 800164e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001652:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800165a:	4413      	add	r3, r2
 800165c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001660:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001668:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 800166c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001670:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001674:	b21b      	sxth	r3, r3
 8001676:	17da      	asrs	r2, r3, #31
 8001678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800167c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001680:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001684:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001688:	462a      	mov	r2, r5
 800168a:	fb02 f203 	mul.w	r2, r2, r3
 800168e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001692:	4621      	mov	r1, r4
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	441a      	add	r2, r3
 800169a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169e:	4621      	mov	r1, r4
 80016a0:	fba3 3101 	umull	r3, r1, r3, r1
 80016a4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80016a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80016ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	f04f 0100 	mov.w	r1, #0
 80016be:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80016c2:	462b      	mov	r3, r5
 80016c4:	0459      	lsls	r1, r3, #17
 80016c6:	4622      	mov	r2, r4
 80016c8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80016cc:	4623      	mov	r3, r4
 80016ce:	0458      	lsls	r0, r3, #17
 80016d0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016d4:	1814      	adds	r4, r2, r0
 80016d6:	643c      	str	r4, [r7, #64]	; 0x40
 80016d8:	414b      	adcs	r3, r1
 80016da:	647b      	str	r3, [r7, #68]	; 0x44
 80016dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 80016e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	17da      	asrs	r2, r3, #31
 80016f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016f8:	f04f 0000 	mov.w	r0, #0
 80016fc:	f04f 0100 	mov.w	r1, #0
 8001700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001704:	00d9      	lsls	r1, r3, #3
 8001706:	2000      	movs	r0, #0
 8001708:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800170c:	1814      	adds	r4, r2, r0
 800170e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001710:	414b      	adcs	r3, r1
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001714:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001718:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 800171c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001720:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001724:	fb03 f102 	mul.w	r1, r3, r2
 8001728:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800172c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	18ca      	adds	r2, r1, r3
 8001736:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800173a:	fba3 3103 	umull	r3, r1, r3, r3
 800173e:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001742:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001754:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001758:	b21b      	sxth	r3, r3
 800175a:	17da      	asrs	r2, r3, #31
 800175c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001760:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001764:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001768:	4622      	mov	r2, r4
 800176a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800176e:	4641      	mov	r1, r8
 8001770:	fb01 f202 	mul.w	r2, r1, r2
 8001774:	464d      	mov	r5, r9
 8001776:	4618      	mov	r0, r3
 8001778:	4621      	mov	r1, r4
 800177a:	4603      	mov	r3, r0
 800177c:	fb03 f305 	mul.w	r3, r3, r5
 8001780:	4413      	add	r3, r2
 8001782:	4602      	mov	r2, r0
 8001784:	4641      	mov	r1, r8
 8001786:	fba2 2101 	umull	r2, r1, r2, r1
 800178a:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800178e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001792:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001796:	4413      	add	r3, r2
 8001798:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80017a8:	4623      	mov	r3, r4
 80017aa:	0a18      	lsrs	r0, r3, #8
 80017ac:	462a      	mov	r2, r5
 80017ae:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80017b2:	462b      	mov	r3, r5
 80017b4:	1219      	asrs	r1, r3, #8
 80017b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017ba:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	17da      	asrs	r2, r3, #31
 80017c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017c6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017ce:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80017d2:	464a      	mov	r2, r9
 80017d4:	fb02 f203 	mul.w	r2, r2, r3
 80017d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017dc:	4644      	mov	r4, r8
 80017de:	fb04 f303 	mul.w	r3, r4, r3
 80017e2:	441a      	add	r2, r3
 80017e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017e8:	4644      	mov	r4, r8
 80017ea:	fba3 3404 	umull	r3, r4, r3, r4
 80017ee:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80017f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017fa:	18d3      	adds	r3, r2, r3
 80017fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800180c:	464c      	mov	r4, r9
 800180e:	0323      	lsls	r3, r4, #12
 8001810:	46c4      	mov	ip, r8
 8001812:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001816:	4644      	mov	r4, r8
 8001818:	0322      	lsls	r2, r4, #12
 800181a:	1884      	adds	r4, r0, r2
 800181c:	633c      	str	r4, [r7, #48]	; 0x30
 800181e:	eb41 0303 	adc.w	r3, r1, r3
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
 8001824:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001828:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 800182c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001830:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001834:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001838:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800183c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001840:	8b5b      	ldrh	r3, [r3, #26]
 8001842:	b29b      	uxth	r3, r3
 8001844:	2200      	movs	r2, #0
 8001846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800184a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800184e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001852:	4622      	mov	r2, r4
 8001854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001858:	4641      	mov	r1, r8
 800185a:	fb01 f202 	mul.w	r2, r1, r2
 800185e:	464d      	mov	r5, r9
 8001860:	4618      	mov	r0, r3
 8001862:	4621      	mov	r1, r4
 8001864:	4603      	mov	r3, r0
 8001866:	fb03 f305 	mul.w	r3, r3, r5
 800186a:	4413      	add	r3, r2
 800186c:	4602      	mov	r2, r0
 800186e:	4641      	mov	r1, r8
 8001870:	fba2 2101 	umull	r2, r1, r2, r1
 8001874:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001878:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800187c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001880:	4413      	add	r3, r2
 8001882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001892:	4629      	mov	r1, r5
 8001894:	104a      	asrs	r2, r1, #1
 8001896:	4629      	mov	r1, r5
 8001898:	17cb      	asrs	r3, r1, #31
 800189a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0)
 800189e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018a2:	4313      	orrs	r3, r2
 80018a4:	d101      	bne.n	80018aa <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e146      	b.n	8001b38 <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 80018aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018ae:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80018b2:	17da      	asrs	r2, r3, #31
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018bc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 80018c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c4:	105b      	asrs	r3, r3, #1
 80018c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018ce:	07db      	lsls	r3, r3, #31
 80018d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018d4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018d8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80018dc:	4604      	mov	r4, r0
 80018de:	1aa4      	subs	r4, r4, r2
 80018e0:	67bc      	str	r4, [r7, #120]	; 0x78
 80018e2:	eb61 0303 	sbc.w	r3, r1, r3
 80018e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018e8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018ec:	4622      	mov	r2, r4
 80018ee:	462b      	mov	r3, r5
 80018f0:	1891      	adds	r1, r2, r2
 80018f2:	6239      	str	r1, [r7, #32]
 80018f4:	415b      	adcs	r3, r3
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018fc:	4621      	mov	r1, r4
 80018fe:	1851      	adds	r1, r2, r1
 8001900:	61b9      	str	r1, [r7, #24]
 8001902:	4629      	mov	r1, r5
 8001904:	414b      	adcs	r3, r1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001914:	4649      	mov	r1, r9
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	4641      	mov	r1, r8
 800191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191e:	4641      	mov	r1, r8
 8001920:	018a      	lsls	r2, r1, #6
 8001922:	4641      	mov	r1, r8
 8001924:	1889      	adds	r1, r1, r2
 8001926:	6139      	str	r1, [r7, #16]
 8001928:	4649      	mov	r1, r9
 800192a:	eb43 0101 	adc.w	r1, r3, r1
 800192e:	6179      	str	r1, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800193c:	4649      	mov	r1, r9
 800193e:	008b      	lsls	r3, r1, #2
 8001940:	46c4      	mov	ip, r8
 8001942:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001946:	4641      	mov	r1, r8
 8001948:	008a      	lsls	r2, r1, #2
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	4603      	mov	r3, r0
 8001950:	4622      	mov	r2, r4
 8001952:	189b      	adds	r3, r3, r2
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	460b      	mov	r3, r1
 8001958:	462a      	mov	r2, r5
 800195a:	eb42 0303 	adc.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800196c:	4649      	mov	r1, r9
 800196e:	008b      	lsls	r3, r1, #2
 8001970:	46c4      	mov	ip, r8
 8001972:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001976:	4641      	mov	r1, r8
 8001978:	008a      	lsls	r2, r1, #2
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	4603      	mov	r3, r0
 8001980:	4622      	mov	r2, r4
 8001982:	189b      	adds	r3, r3, r2
 8001984:	673b      	str	r3, [r7, #112]	; 0x70
 8001986:	462b      	mov	r3, r5
 8001988:	460a      	mov	r2, r1
 800198a:	eb42 0303 	adc.w	r3, r2, r3
 800198e:	677b      	str	r3, [r7, #116]	; 0x74
 8001990:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001994:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001998:	f7ff fa24 	bl	8000de4 <__aeabi_ldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 80019a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019a8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	17da      	asrs	r2, r3, #31
 80019b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80019b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80019b4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	0b50      	lsrs	r0, r2, #13
 80019c2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019c6:	1359      	asrs	r1, r3, #13
 80019c8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019cc:	462b      	mov	r3, r5
 80019ce:	fb00 f203 	mul.w	r2, r0, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	fb03 f301 	mul.w	r3, r3, r1
 80019d8:	4413      	add	r3, r2
 80019da:	4622      	mov	r2, r4
 80019dc:	fba2 2100 	umull	r2, r1, r2, r0
 80019e0:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80019e4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019ec:	4413      	add	r3, r2
 80019ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019f2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0b50      	lsrs	r0, r2, #13
 8001a00:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a04:	1359      	asrs	r1, r3, #13
 8001a06:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	fb00 f203 	mul.w	r2, r0, r3
 8001a10:	4623      	mov	r3, r4
 8001a12:	fb03 f301 	mul.w	r3, r3, r1
 8001a16:	4413      	add	r3, r2
 8001a18:	4622      	mov	r2, r4
 8001a1a:	fba2 2100 	umull	r2, r1, r2, r0
 8001a1e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001a22:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a26:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	0e4a      	lsrs	r2, r1, #25
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	460c      	mov	r4, r1
 8001a46:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001a4a:	164b      	asrs	r3, r1, #25
 8001a4c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 8001a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a54:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	17da      	asrs	r2, r3, #31
 8001a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a5e:	667a      	str	r2, [r7, #100]	; 0x64
 8001a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a68:	462a      	mov	r2, r5
 8001a6a:	fb02 f203 	mul.w	r2, r2, r3
 8001a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a72:	4621      	mov	r1, r4
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a7e:	4621      	mov	r1, r4
 8001a80:	fba2 2101 	umull	r2, r1, r2, r1
 8001a84:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001a88:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a8c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a90:	4413      	add	r3, r2
 8001a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	0cca      	lsrs	r2, r1, #19
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	460c      	mov	r4, r1
 8001aac:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001ab0:	14cb      	asrs	r3, r1, #19
 8001ab2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001ab6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001aba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001abe:	1884      	adds	r4, r0, r2
 8001ac0:	65bc      	str	r4, [r7, #88]	; 0x58
 8001ac2:	eb41 0303 	adc.w	r3, r1, r3
 8001ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ac8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001acc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	1889      	adds	r1, r1, r2
 8001ad4:	6539      	str	r1, [r7, #80]	; 0x50
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	eb43 0101 	adc.w	r1, r3, r1
 8001adc:	6579      	str	r1, [r7, #84]	; 0x54
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001aea:	4623      	mov	r3, r4
 8001aec:	0a18      	lsrs	r0, r3, #8
 8001aee:	462a      	mov	r2, r5
 8001af0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001af4:	462b      	mov	r3, r5
 8001af6:	1219      	asrs	r1, r3, #8
 8001af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001afc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b14:	464c      	mov	r4, r9
 8001b16:	0123      	lsls	r3, r4, #4
 8001b18:	46c4      	mov	ip, r8
 8001b1a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001b1e:	4644      	mov	r4, r8
 8001b20:	0122      	lsls	r2, r4, #4
 8001b22:	1884      	adds	r4, r0, r2
 8001b24:	603c      	str	r4, [r7, #0]
 8001b26:	eb41 0303 	adc.w	r3, r1, r3
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b30:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)pressure;
 8001b34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b44 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b56:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	039a      	lsls	r2, r3, #14
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001b62:	051b      	lsls	r3, r3, #20
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b7a:	13db      	asrs	r3, r3, #15
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f992 2036 	ldrsb.w	r2, [r2, #54]	; 0x36
 8001b82:	4611      	mov	r1, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	fb01 f202 	mul.w	r2, r1, r2
 8001b8a:	1292      	asrs	r2, r2, #10
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8001b92:	4608      	mov	r0, r1
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	fb00 f101 	mul.w	r1, r0, r1
 8001b9a:	12c9      	asrs	r1, r1, #11
 8001b9c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	1292      	asrs	r2, r2, #10
 8001ba6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	; 0x2e
 8001bb0:	fb01 f202 	mul.w	r2, r1, r2
 8001bb4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001bb8:	1392      	asrs	r2, r2, #14
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	13db      	asrs	r3, r3, #15
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	13d2      	asrs	r2, r2, #15
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	11db      	asrs	r3, r3, #7
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	111b      	asrs	r3, r3, #4
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001be6:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bee:	bfa8      	it	ge
 8001bf0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bf4:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	131b      	asrs	r3, r3, #12
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t Data[8] = {};
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
	int32_t RawTemp = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t RawPressure = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t RawHumidity = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001c2e:	f107 020c 	add.w	r2, r7, #12
 8001c32:	2308      	movs	r3, #8
 8001c34:	21f7      	movs	r1, #247	; 0xf7
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f86e 	bl	8001d18 <BME280_ReadRegisters>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	if (status != HAL_OK)
 8001c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <BME280_ReadAllData+0x4a>
	{
		return 1;	// NOK
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e046      	b.n	8001cdc <BME280_ReadAllData+0xd8>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	031b      	lsls	r3, r3, #12
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001c54:	7c3b      	ldrb	r3, [r7, #16]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001c5a:	7c7b      	ldrb	r3, [r7, #17]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	031b      	lsls	r3, r3, #12
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001c8e:	7cbb      	ldrb	r3, [r7, #18]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
	DataLSB = (uint32_t)Data[7];
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fc5c 	bl	8001560 <BME280_TemperatureCompesation>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fc8e 	bl	80015d2 <BME280_PressureCompesation>
 8001cb6:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fe53 	bl	8000968 <__aeabi_ui2f>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff3a 	bl	8001b44 <BME280_HumidityCompesation>
 8001cd0:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	0a9a      	lsrs	r2, r3, #10
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3738      	adds	r7, #56	; 0x38
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	460b      	mov	r3, r1
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	21ec      	movs	r1, #236	; 0xec
 8001d0a:	f005 f815 	bl	8006d38 <HAL_I2C_Mem_Read>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	461a      	mov	r2, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	72fb      	strb	r3, [r7, #11]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2164      	movs	r1, #100	; 0x64
 8001d3a:	9102      	str	r1, [sp, #8]
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	21ec      	movs	r1, #236	; 0xec
 8001d46:	f004 fff7 	bl	8006d38 <HAL_I2C_Mem_Read>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af04      	add	r7, sp, #16
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	2301      	movs	r3, #1
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	1cbb      	adds	r3, r7, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	21ec      	movs	r1, #236	; 0xec
 8001d7c:	f004 fee2 	bl	8006b44 <HAL_I2C_Mem_Write>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <GetPage>:


/* STM32F103C8Tx have 128 PAGES (Page 0 to Page 127) of 1 KB each = 128 KB Flash Memory */

static uint32_t GetPage(uint32_t Address)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
	// FLASH_PAGE_SIZE is STM function
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e016      	b.n	8001dc6 <GetPage+0x3c>
	{
		if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001d9e:	3301      	adds	r3, #1
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d20b      	bcs.n	8001dc0 <GetPage+0x36>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001dae:	029b      	lsls	r3, r3, #10
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d304      	bcc.n	8001dc0 <GetPage+0x36>
	    {
			return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	e006      	b.n	8001dce <GetPage+0x44>
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dca:	dde5      	ble.n	8001d98 <GetPage+0xe>
	    }
	}

  return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <Flash_Write_Data>:
}


// Write data to MCU flash
uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_FLASH_Unlock();
 8001dea:	f004 f949 	bl	8006080 <HAL_FLASH_Unlock>

	uint32_t StartPage = GetPage(StartPageAddress);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ffcb 	bl	8001d8a <GetPage>
 8001df4:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8001e02:	69f8      	ldr	r0, [r7, #28]
 8001e04:	f7ff ffc1 	bl	8001d8a <GetPage>
 8001e08:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <Flash_Write_Data+0xb4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <Flash_Write_Data+0xb4>)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages     = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	0a9b      	lsrs	r3, r3, #10
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <Flash_Write_Data+0xb4>)
 8001e22:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4818      	ldr	r0, [pc, #96]	; (8001e8c <Flash_Write_Data+0xb4>)
 8001e2c:	f004 fa1a 	bl	8006264 <HAL_FLASHEx_Erase>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01f      	beq.n	8001e76 <Flash_Write_Data+0x9e>
	{
		return HAL_FLASH_GetError ();
 8001e36:	f004 f959 	bl	80060ec <HAL_FLASH_GetError>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	e022      	b.n	8001e84 <Flash_Write_Data+0xac>
	}

	while (sofar < numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	4615      	mov	r5, r2
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	2002      	movs	r0, #2
 8001e56:	f004 f8a3 	bl	8005fa0 <HAL_FLASH_Program>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <Flash_Write_Data+0x96>
		{
			StartPageAddress += 4;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	e003      	b.n	8001e76 <Flash_Write_Data+0x9e>
		}
		else
		{
			 return HAL_FLASH_GetError ();
 8001e6e:	f004 f93d 	bl	80060ec <HAL_FLASH_GetError>
 8001e72:	4603      	mov	r3, r0
 8001e74:	e006      	b.n	8001e84 <Flash_Write_Data+0xac>
	while (sofar < numberofwords)
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbdf      	blt.n	8001e3e <Flash_Write_Data+0x66>
		}
	}

	HAL_FLASH_Lock();
 8001e7e:	f004 f925 	bl	80060cc <HAL_FLASH_Lock>

	return 0;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3728      	adds	r7, #40	; 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8c:	2000018c 	.word	0x2000018c

08001e90 <Flash_Read_Data>:


// Read data from MCU flash
void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	80fa      	strh	r2, [r7, #6]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d000      	beq.n	8001ebe <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001ebc:	e7ef      	b.n	8001e9e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001ebe:	bf00      	nop
	}
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0c      	blt.n	8001ef8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4907      	ldr	r1, [pc, #28]	; (8001f04 <__NVIC_ClearPendingIRQ+0x38>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	3360      	adds	r3, #96	; 0x60
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b08d      	sub	sp, #52	; 0x34
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0e:	f003 f803 	bl	8004f18 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f12:	f000 fc0d 	bl	8002730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f16:	f000 feab 	bl	8002c70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f1a:	f000 fcb7 	bl	800288c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f1e:	f000 fce3 	bl	80028e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001f22:	f000 fd73 	bl	8002a0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001f26:	f000 fda7 	bl	8002a78 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001f2a:	f000 fc61 	bl	80027f0 <MX_ADC1_Init>
  MX_RTC_Init();
 8001f2e:	f000 fd09 	bl	8002944 <MX_RTC_Init>
  MX_TIM2_Init();
 8001f32:	f000 fdd7 	bl	8002ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f36:	f000 fe23 	bl	8002b80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001f3a:	f000 fe6f 	bl	8002c1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100 / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value to decrease power consumption
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
  uint8_t status = 0;											// error counter
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state)
 8001f4a:	4bb2      	ldr	r3, [pc, #712]	; (8002214 <main+0x30c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	f200 83cb 	bhi.w	80026ea <main+0x7e2>
 8001f54:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <main+0x54>)
 8001f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5a:	bf00      	nop
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	080021d3 	.word	0x080021d3
 8001f64:	08002271 	.word	0x08002271
 8001f68:	080024d1 	.word	0x080024d1
 8001f6c:	08002611 	.word	0x08002611
 8001f70:	080026eb 	.word	0x080026eb

	  case STATE_INIT:

		  ////////* DEVICE BOOT *////////

		  if (measurements.ADC_read_cnt == 0)
 8001f74:	4ba8      	ldr	r3, [pc, #672]	; (8002218 <main+0x310>)
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d145      	bne.n	8002008 <main+0x100>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 8001f7c:	49a7      	ldr	r1, [pc, #668]	; (800221c <main+0x314>)
 8001f7e:	48a8      	ldr	r0, [pc, #672]	; (8002220 <main+0x318>)
 8001f80:	f7ff f920 	bl	80011c4 <BME280_Reset>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  HAL_Delay(200);
 8001f92:	20c8      	movs	r0, #200	; 0xc8
 8001f94:	f003 f822 	bl	8004fdc <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8001f98:	49a0      	ldr	r1, [pc, #640]	; (800221c <main+0x314>)
 8001f9a:	48a1      	ldr	r0, [pc, #644]	; (8002220 <main+0x318>)
 8001f9c:	f7ff f8f2 	bl	8001184 <BME280_ReadDeviceID>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fa8:	4413      	add	r3, r2
 8001faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 8001fae:	499b      	ldr	r1, [pc, #620]	; (800221c <main+0x314>)
 8001fb0:	489b      	ldr	r0, [pc, #620]	; (8002220 <main+0x318>)
 8001fb2:	f7ff f9dd 	bl	8001370 <BME280_ReadCalibData>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  status += BME280_Init(&bme280, &hi2c2);
 8001fc4:	4995      	ldr	r1, [pc, #596]	; (800221c <main+0x314>)
 8001fc6:	4896      	ldr	r0, [pc, #600]	; (8002220 <main+0x318>)
 8001fc8:	f7ff f95e 	bl	8001288 <BME280_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			  // Enable power to the humudity probe
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2108      	movs	r1, #8
 8001fde:	4891      	ldr	r0, [pc, #580]	; (8002224 <main+0x31c>)
 8001fe0:	f004 fc28 	bl	8006834 <HAL_GPIO_WritePin>

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001fe4:	4b90      	ldr	r3, [pc, #576]	; (8002228 <main+0x320>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b8f      	ldr	r3, [pc, #572]	; (8002228 <main+0x320>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0202 	bic.w	r2, r2, #2
 8001ff2:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	488c      	ldr	r0, [pc, #560]	; (8002228 <main+0x320>)
 8001ff8:	f008 f9e0 	bl	800a3bc <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8001ffc:	488b      	ldr	r0, [pc, #556]	; (800222c <main+0x324>)
 8001ffe:	f009 fae1 	bl	800b5c4 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002002:	488b      	ldr	r0, [pc, #556]	; (8002230 <main+0x328>)
 8002004:	f009 fade 	bl	800b5c4 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002008:	4b83      	ldr	r3, [pc, #524]	; (8002218 <main+0x310>)
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 836e 	bne.w	80026ee <main+0x7e6>
 8002012:	4b81      	ldr	r3, [pc, #516]	; (8002218 <main+0x310>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	f040 8369 	bne.w	80026ee <main+0x7e6>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <main+0x310>)
 800201e:	789b      	ldrb	r3, [r3, #2]
 8002020:	461c      	mov	r4, r3
 8002022:	4884      	ldr	r0, [pc, #528]	; (8002234 <main+0x32c>)
 8002024:	f000 ff78 	bl	8002f18 <ADC_Read_Battery>
 8002028:	4602      	mov	r2, r0
 800202a:	497b      	ldr	r1, [pc, #492]	; (8002218 <main+0x310>)
 800202c:	f104 0308 	add.w	r3, r4, #8
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8002036:	f107 0320 	add.w	r3, r7, #32
 800203a:	4619      	mov	r1, r3
 800203c:	487e      	ldr	r0, [pc, #504]	; (8002238 <main+0x330>)
 800203e:	f001 f859 	bl	80030f4 <ADC_Read_EHum>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b74      	ldr	r3, [pc, #464]	; (8002218 <main+0x310>)
 8002048:	789b      	ldrb	r3, [r3, #2]
 800204a:	461c      	mov	r4, r3
 800204c:	4610      	mov	r0, r2
 800204e:	f7fe fc8b 	bl	8000968 <__aeabi_ui2f>
 8002052:	4602      	mov	r2, r0
 8002054:	4970      	ldr	r1, [pc, #448]	; (8002218 <main+0x310>)
 8002056:	1ca3      	adds	r3, r4, #2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 800205e:	4b6e      	ldr	r3, [pc, #440]	; (8002218 <main+0x310>)
 8002060:	789b      	ldrb	r3, [r3, #2]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <main+0x310>)
 8002068:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 800206a:	4b6b      	ldr	r3, [pc, #428]	; (8002218 <main+0x310>)
 800206c:	2200      	movs	r2, #0
 800206e:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 		// reset timer read flag
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <main+0x310>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 8002076:	486d      	ldr	r0, [pc, #436]	; (800222c <main+0x324>)
 8002078:	f009 faa4 	bl	800b5c4 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <main+0x310>)
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	2b05      	cmp	r3, #5
 8002082:	f040 8334 	bne.w	80026ee <main+0x7e6>
			  {
				  measurements.ADC_read_cnt = 0;
 8002086:	4b64      	ldr	r3, [pc, #400]	; (8002218 <main+0x310>)
 8002088:	2200      	movs	r2, #0
 800208a:	709a      	strb	r2, [r3, #2]
				  HAL_TIM_Base_Stop_IT(&htim2);
 800208c:	4867      	ldr	r0, [pc, #412]	; (800222c <main+0x324>)
 800208e:	f009 faeb 	bl	800b668 <HAL_TIM_Base_Stop_IT>

				  // Disable power to the humudity probe
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	4863      	ldr	r0, [pc, #396]	; (8002224 <main+0x31c>)
 8002098:	f004 fbcc 	bl	8006834 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <main+0x310>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <main+0x310>)
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	e022      	b.n	80020f8 <main+0x1f0>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80020b2:	4b59      	ldr	r3, [pc, #356]	; (8002218 <main+0x310>)
 80020b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b6:	4958      	ldr	r1, [pc, #352]	; (8002218 <main+0x310>)
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	3308      	adds	r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f7fe fb9f 	bl	8000808 <__addsf3>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <main+0x310>)
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 80020d2:	4b51      	ldr	r3, [pc, #324]	; (8002218 <main+0x310>)
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	4950      	ldr	r1, [pc, #320]	; (8002218 <main+0x310>)
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	3302      	adds	r3, #2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f7fe fb8f 	bl	8000808 <__addsf3>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <main+0x310>)
 80020f0:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	3301      	adds	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	ddd9      	ble.n	80020b2 <main+0x1aa>
				  }

				  measurements.battery_voltage /= 5;
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <main+0x310>)
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	494e      	ldr	r1, [pc, #312]	; (800223c <main+0x334>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fd3b 	bl	8000b80 <__aeabi_fdiv>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b42      	ldr	r3, [pc, #264]	; (8002218 <main+0x310>)
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <main+0x310>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4949      	ldr	r1, [pc, #292]	; (800223c <main+0x334>)
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fd31 	bl	8000b80 <__aeabi_fdiv>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <main+0x310>)
 8002124:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 8002126:	2201      	movs	r2, #1
 8002128:	493c      	ldr	r1, [pc, #240]	; (800221c <main+0x314>)
 800212a:	483d      	ldr	r0, [pc, #244]	; (8002220 <main+0x318>)
 800212c:	f7ff f8ea 	bl	8001304 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002130:	493a      	ldr	r1, [pc, #232]	; (800221c <main+0x314>)
 8002132:	483b      	ldr	r0, [pc, #236]	; (8002220 <main+0x318>)
 8002134:	f7ff fd66 	bl	8001c04 <BME280_ReadAllData>
				  BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep
 8002138:	2200      	movs	r2, #0
 800213a:	4938      	ldr	r1, [pc, #224]	; (800221c <main+0x314>)
 800213c:	4838      	ldr	r0, [pc, #224]	; (8002220 <main+0x318>)
 800213e:	f7ff f8e1 	bl	8001304 <BME280_GoToFromSleep>

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 8002142:	483f      	ldr	r0, [pc, #252]	; (8002240 <main+0x338>)
 8002144:	f000 ff1e 	bl	8002f84 <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 8002148:	483d      	ldr	r0, [pc, #244]	; (8002240 <main+0x338>)
 800214a:	f001 fa4b 	bl	80035e4 <rfm95_init>
 800214e:	4603      	mov	r3, r0
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <main+0x25c>
 800215a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800215e:	3301      	adds	r3, #1
 8002160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); // Clear EXTI1 NVIC pending flag
 8002164:	2007      	movs	r0, #7
 8002166:	f7ff feb1 	bl	8001ecc <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); // Clear EXTI3 NVIC pending
 800216a:	2009      	movs	r0, #9
 800216c:	f7ff feae 	bl	8001ecc <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // Clear EXTI15_10 NVIC pending flag
 8002170:	2028      	movs	r0, #40	; 0x28
 8002172:	f7ff feab 	bl	8001ecc <__NVIC_ClearPendingIRQ>
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002176:	2009      	movs	r0, #9
 8002178:	f003 fe63 	bl	8005e42 <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800217c:	2007      	movs	r0, #7
 800217e:	f003 fe60 	bl	8005e42 <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Bricks the program, inturrupt is not needed -> only for RX

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 2.8f) status++; //Vbat NEEDS TO BE SET
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <main+0x310>)
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	492f      	ldr	r1, [pc, #188]	; (8002244 <main+0x33c>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fde3 	bl	8000d54 <__aeabi_fcmplt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <main+0x296>
 8002194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002198:	3301      	adds	r3, #1
 800219a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  lora_data.errSendCnt += status;
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <main+0x340>)
 80021a0:	785a      	ldrb	r2, [r3, #1]
 80021a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021a6:	4413      	add	r3, r2
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <main+0x340>)
 80021ac:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 80021ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <main+0x2c2>
				  {
					  //state = STATE_FIRST_CONN;
					  state = STATE_SEND;
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <main+0x30c>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	701a      	strb	r2, [r3, #0]
					  status = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					  lora_data.errSendCnt = 0;
 80021c2:	4b21      	ldr	r3, [pc, #132]	; (8002248 <main+0x340>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
					  state = STATE_GO_SLEEP;
				  }
			  }
		  }

		  break;
 80021c8:	e291      	b.n	80026ee <main+0x7e6>
					  state = STATE_GO_SLEEP;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <main+0x30c>)
 80021cc:	2204      	movs	r2, #4
 80021ce:	701a      	strb	r2, [r3, #0]
		  break;
 80021d0:	e28d      	b.n	80026ee <main+0x7e6>
	  case STATE_FIRST_CONN:

		  ////////* FIRST LoRa/SIM CONNECTION TEST *////////

		  // Create data packet that will be send - dummy
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <main+0x344>)
 80021d4:	61fb      	str	r3, [r7, #28]

		  // Read number of TX packets from flash
		  uint32_t tx_count = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 80021da:	f107 0318 	add.w	r3, r7, #24
 80021de:	2201      	movs	r2, #1
 80021e0:	4619      	mov	r1, r3
 80021e2:	481b      	ldr	r0, [pc, #108]	; (8002250 <main+0x348>)
 80021e4:	f7ff fe54 	bl	8001e90 <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <main+0x338>)
 80021ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	2204      	movs	r2, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <main+0x338>)
 80021fc:	f002 f9ee 	bl	80045dc <rfm95_send_receive_cycle>
 8002200:	4603      	mov	r3, r0
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <main+0x34c>
		  {
			  // Put device in error state
			  state = STATE_ERROR;
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <main+0x30c>)
 800220e:	2205      	movs	r2, #5
 8002210:	701a      	strb	r2, [r3, #0]

			  // Send data packet
			  //state = STATE_SEND;
		  }

		  break;
 8002212:	e26f      	b.n	80026f4 <main+0x7ec>
 8002214:	2000055c 	.word	0x2000055c
 8002218:	200001d4 	.word	0x200001d4
 800221c:	2000036c 	.word	0x2000036c
 8002220:	2000019c 	.word	0x2000019c
 8002224:	40010800 	.word	0x40010800
 8002228:	200003c0 	.word	0x200003c0
 800222c:	20000484 	.word	0x20000484
 8002230:	200004cc 	.word	0x200004cc
 8002234:	200001d8 	.word	0x200001d8
 8002238:	200001dc 	.word	0x200001dc
 800223c:	40a00000 	.word	0x40a00000
 8002240:	20000220 	.word	0x20000220
 8002244:	40333333 	.word	0x40333333
 8002248:	20000210 	.word	0x20000210
 800224c:	04030201 	.word	0x04030201
 8002250:	0801f800 	.word	0x0801f800
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 8002254:	4b89      	ldr	r3, [pc, #548]	; (800247c <main+0x574>)
 8002256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800225a:	607b      	str	r3, [r7, #4]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2201      	movs	r2, #1
 8002260:	4619      	mov	r1, r3
 8002262:	4887      	ldr	r0, [pc, #540]	; (8002480 <main+0x578>)
 8002264:	f7ff fdb8 	bl	8001dd8 <Flash_Write_Data>
			  state = STATE_GO_SLEEP;
 8002268:	4b86      	ldr	r3, [pc, #536]	; (8002484 <main+0x57c>)
 800226a:	2204      	movs	r2, #4
 800226c:	701a      	strb	r2, [r3, #0]
		  break;
 800226e:	e241      	b.n	80026f4 <main+0x7ec>
	  case STATE_RUN:

		  ////////* DEVICE WAKEUP ROUTINE *////////

		  // Start all clocks
		  if (awake == 1)
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <main+0x580>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d138      	bne.n	80022ea <main+0x3e2>
		  {
			  awake = 0;
 8002278:	4b83      	ldr	r3, [pc, #524]	; (8002488 <main+0x580>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 800227e:	f000 fa57 	bl	8002730 <SystemClock_Config>
			  HAL_ResumeTick();
 8002282:	f002 fedd 	bl	8005040 <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <main+0x584>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4b7f      	ldr	r3, [pc, #508]	; (800248c <main+0x584>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	605a      	str	r2, [r3, #4]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002296:	2100      	movs	r1, #0
 8002298:	487c      	ldr	r0, [pc, #496]	; (800248c <main+0x584>)
 800229a:	f008 f88f 	bl	800a3bc <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Init(&htim2);
 800229e:	487c      	ldr	r0, [pc, #496]	; (8002490 <main+0x588>)
 80022a0:	f009 f940 	bl	800b524 <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Init(&htim3);
 80022a4:	487b      	ldr	r0, [pc, #492]	; (8002494 <main+0x58c>)
 80022a6:	f009 f93d 	bl	800b524 <HAL_TIM_Base_Init>
			  HAL_NVIC_EnableIRQ(TIM2_IRQn); // Disable Timer 2 interrupt
 80022aa:	201c      	movs	r0, #28
 80022ac:	f003 fdc9 	bl	8005e42 <HAL_NVIC_EnableIRQ>
			  HAL_NVIC_EnableIRQ(TIM3_IRQn); // Disable Timer 3 interrupt
 80022b0:	201d      	movs	r0, #29
 80022b2:	f003 fdc6 	bl	8005e42 <HAL_NVIC_EnableIRQ>

			  // Enable power to the humudity probe
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	2108      	movs	r1, #8
 80022ba:	4877      	ldr	r0, [pc, #476]	; (8002498 <main+0x590>)
 80022bc:	f004 faba 	bl	8006834 <HAL_GPIO_WritePin>

			  HAL_ADC_Init(&hadc1);
 80022c0:	4876      	ldr	r0, [pc, #472]	; (800249c <main+0x594>)
 80022c2:	f002 fed9 	bl	8005078 <HAL_ADC_Init>
			  HAL_ADC_Start(&hadc1);
 80022c6:	4875      	ldr	r0, [pc, #468]	; (800249c <main+0x594>)
 80022c8:	f003 f870 	bl	80053ac <HAL_ADC_Start>
//			  __HAL_RCC_ADC1_CLK_ENABLE();   // Enable ADC1 clock
			  HAL_I2C_Init(&hi2c1);
 80022cc:	4874      	ldr	r0, [pc, #464]	; (80024a0 <main+0x598>)
 80022ce:	f004 fae1 	bl	8006894 <HAL_I2C_Init>
//			  __HAL_RCC_I2C1_CLK_ENABLE();   // Enable I2C1 clock
			  HAL_I2C_Init(&hi2c2);
 80022d2:	4874      	ldr	r0, [pc, #464]	; (80024a4 <main+0x59c>)
 80022d4:	f004 fade 	bl	8006894 <HAL_I2C_Init>
//			  __HAL_RCC_I2C2_CLK_ENABLE();   // Enable I2C2 clock
			  HAL_SPI_Init(&hspi1);
 80022d8:	4873      	ldr	r0, [pc, #460]	; (80024a8 <main+0x5a0>)
 80022da:	f008 fb9b 	bl	800aa14 <HAL_SPI_Init>
//			  __HAL_RCC_SPI1_CLK_ENABLE();   // Enable SPI1 clock
			  HAL_SPI_Init(&hspi2);
 80022de:	4873      	ldr	r0, [pc, #460]	; (80024ac <main+0x5a4>)
 80022e0:	f008 fb98 	bl	800aa14 <HAL_SPI_Init>
//			  __HAL_RCC_SPI2_CLK_ENABLE();   // Enable SPI1 clock
			  HAL_UART_Init(&huart1);
 80022e4:	4872      	ldr	r0, [pc, #456]	; (80024b0 <main+0x5a8>)
 80022e6:	f009 fd49 	bl	800bd7c <HAL_UART_Init>
//			  __HAL_RCC_GPIOC_CLK_ENABLE();
//			  __HAL_RCC_GPIOD_CLK_ENABLE();

		  }

		  if (measurements.ADC_read_cnt == 0)
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <main+0x5ac>)
 80022ec:	789b      	ldrb	r3, [r3, #2]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <main+0x3f6>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
			  status += BME280_Init(&bme280, &hi2c2);
			#endif

			  HAL_TIM_Base_Start_IT(&htim2);
 80022f2:	4867      	ldr	r0, [pc, #412]	; (8002490 <main+0x588>)
 80022f4:	f009 f966 	bl	800b5c4 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 80022f8:	4866      	ldr	r0, [pc, #408]	; (8002494 <main+0x58c>)
 80022fa:	f009 f963 	bl	800b5c4 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 80022fe:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <main+0x5ac>)
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 81f5 	bne.w	80026f2 <main+0x7ea>
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <main+0x5ac>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 81f0 	bne.w	80026f2 <main+0x7ea>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8002312:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <main+0x5ac>)
 8002314:	789b      	ldrb	r3, [r3, #2]
 8002316:	461c      	mov	r4, r3
 8002318:	4867      	ldr	r0, [pc, #412]	; (80024b8 <main+0x5b0>)
 800231a:	f000 fdfd 	bl	8002f18 <ADC_Read_Battery>
 800231e:	4602      	mov	r2, r0
 8002320:	4964      	ldr	r1, [pc, #400]	; (80024b4 <main+0x5ac>)
 8002322:	f104 0308 	add.w	r3, r4, #8
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	605a      	str	r2, [r3, #4]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	4619      	mov	r1, r3
 8002332:	4862      	ldr	r0, [pc, #392]	; (80024bc <main+0x5b4>)
 8002334:	f000 fede 	bl	80030f4 <ADC_Read_EHum>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <main+0x5ac>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	461c      	mov	r4, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7fe fb10 	bl	8000968 <__aeabi_ui2f>
 8002348:	4602      	mov	r2, r0
 800234a:	495a      	ldr	r1, [pc, #360]	; (80024b4 <main+0x5ac>)
 800234c:	1ca3      	adds	r3, r4, #2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 8002354:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <main+0x5ac>)
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	3301      	adds	r3, #1
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <main+0x5ac>)
 800235e:	709a      	strb	r2, [r3, #2]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 8002360:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <main+0x5ac>)
 8002362:	2200      	movs	r2, #0
 8002364:	705a      	strb	r2, [r3, #1]
			  measurements.ADC_read = 0; 			// reset timer read flag
 8002366:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <main+0x5ac>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim2);
 800236c:	4848      	ldr	r0, [pc, #288]	; (8002490 <main+0x588>)
 800236e:	f009 f929 	bl	800b5c4 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 8002372:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <main+0x5ac>)
 8002374:	789b      	ldrb	r3, [r3, #2]
 8002376:	2b05      	cmp	r3, #5
 8002378:	f040 81bb 	bne.w	80026f2 <main+0x7ea>
			  {
				  measurements.ADC_read_cnt = 0;
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <main+0x5ac>)
 800237e:	2200      	movs	r2, #0
 8002380:	709a      	strb	r2, [r3, #2]
				  HAL_TIM_Base_Stop_IT(&htim2);
 8002382:	4843      	ldr	r0, [pc, #268]	; (8002490 <main+0x588>)
 8002384:	f009 f970 	bl	800b668 <HAL_TIM_Base_Stop_IT>

				  // Disable power to the humudity probe
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	2108      	movs	r1, #8
 800238c:	4842      	ldr	r0, [pc, #264]	; (8002498 <main+0x590>)
 800238e:	f004 fa51 	bl	8006834 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <main+0x5ac>)
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity = 0;
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <main+0x5ac>)
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e022      	b.n	80023ee <main+0x4e6>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <main+0x5ac>)
 80023aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ac:	4941      	ldr	r1, [pc, #260]	; (80024b4 <main+0x5ac>)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3308      	adds	r3, #8
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7fe fa24 	bl	8000808 <__addsf3>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <main+0x5ac>)
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
					  measurements.earth_humidity += measurements.earth_hum[i];
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <main+0x5ac>)
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	4939      	ldr	r1, [pc, #228]	; (80024b4 <main+0x5ac>)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	3302      	adds	r3, #2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7fe fa14 	bl	8000808 <__addsf3>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <main+0x5ac>)
 80023e6:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3301      	adds	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	ddd9      	ble.n	80023a8 <main+0x4a0>
				  }

				  measurements.battery_voltage /= 5;
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <main+0x5ac>)
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	4931      	ldr	r1, [pc, #196]	; (80024c0 <main+0x5b8>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fbc0 	bl	8000b80 <__aeabi_fdiv>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <main+0x5ac>)
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
				  measurements.earth_humidity /= 5;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <main+0x5ac>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	492c      	ldr	r1, [pc, #176]	; (80024c0 <main+0x5b8>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fbb6 	bl	8000b80 <__aeabi_fdiv>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <main+0x5ac>)
 800241a:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 800241c:	2201      	movs	r2, #1
 800241e:	4921      	ldr	r1, [pc, #132]	; (80024a4 <main+0x59c>)
 8002420:	4828      	ldr	r0, [pc, #160]	; (80024c4 <main+0x5bc>)
 8002422:	f7fe ff6f 	bl	8001304 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002426:	491f      	ldr	r1, [pc, #124]	; (80024a4 <main+0x59c>)
 8002428:	4826      	ldr	r0, [pc, #152]	; (80024c4 <main+0x5bc>)
 800242a:	f7ff fbeb 	bl	8001c04 <BME280_ReadAllData>
				  BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep
 800242e:	2200      	movs	r2, #0
 8002430:	491c      	ldr	r1, [pc, #112]	; (80024a4 <main+0x59c>)
 8002432:	4824      	ldr	r0, [pc, #144]	; (80024c4 <main+0x5bc>)
 8002434:	f7fe ff66 	bl	8001304 <BME280_GoToFromSleep>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Bricks the program, inturrupt is not needed -> only for RX
				#endif

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 2.8f) status++; //Vbat NEED TO BE SET
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <main+0x5ac>)
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <main+0x5c0>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fc88 	bl	8000d54 <__aeabi_fcmplt>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <main+0x54c>
 800244a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800244e:	3301      	adds	r3, #1
 8002450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				  lora_data.errSendCnt += status;
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <main+0x5c4>)
 8002456:	785a      	ldrb	r2, [r3, #1]
 8002458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800245c:	4413      	add	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <main+0x5c4>)
 8002462:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 8002464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002468:	2b09      	cmp	r3, #9
 800246a:	d803      	bhi.n	8002474 <main+0x56c>
				  {
					  state = STATE_SEND;
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <main+0x57c>)
 800246e:	2203      	movs	r2, #3
 8002470:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 8002472:	e13e      	b.n	80026f2 <main+0x7ea>
					  state = STATE_ERROR;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <main+0x57c>)
 8002476:	2205      	movs	r2, #5
 8002478:	701a      	strb	r2, [r3, #0]
		  break;
 800247a:	e13a      	b.n	80026f2 <main+0x7ea>
 800247c:	20000220 	.word	0x20000220
 8002480:	0801f800 	.word	0x0801f800
 8002484:	2000055c 	.word	0x2000055c
 8002488:	20000000 	.word	0x20000000
 800248c:	200003c0 	.word	0x200003c0
 8002490:	20000484 	.word	0x20000484
 8002494:	200004cc 	.word	0x200004cc
 8002498:	40010800 	.word	0x40010800
 800249c:	200002e8 	.word	0x200002e8
 80024a0:	20000318 	.word	0x20000318
 80024a4:	2000036c 	.word	0x2000036c
 80024a8:	200003d4 	.word	0x200003d4
 80024ac:	2000042c 	.word	0x2000042c
 80024b0:	20000514 	.word	0x20000514
 80024b4:	200001d4 	.word	0x200001d4
 80024b8:	200001d8 	.word	0x200001d8
 80024bc:	200001dc 	.word	0x200001dc
 80024c0:	40a00000 	.word	0x40a00000
 80024c4:	2000019c 	.word	0x2000019c
 80024c8:	40333333 	.word	0x40333333
 80024cc:	20000210 	.word	0x20000210
	  case STATE_SEND:

	  	  ////////* SEND DATA *////////

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 80024d0:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <main+0x7f0>)
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <main+0x5d6>
 80024d8:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <main+0x7f0>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t)(measurements.battery_voltage * 10);		// Battery voltage [3.5V -> 35V, no float]
 80024de:	4b87      	ldr	r3, [pc, #540]	; (80026fc <main+0x7f4>)
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	4987      	ldr	r1, [pc, #540]	; (8002700 <main+0x7f8>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fa97 	bl	8000a18 <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc59 	bl	8000da4 <__aeabi_f2uiz>
 80024f2:	4603      	mov	r3, r0
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <main+0x7f0>)
 80024f8:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int32_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 80024fa:	4b82      	ldr	r3, [pc, #520]	; (8002704 <main+0x7fc>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	b21a      	sxth	r2, r3
 8002500:	4b7d      	ldr	r3, [pc, #500]	; (80026f8 <main+0x7f0>)
 8002502:	809a      	strh	r2, [r3, #4]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in perscents [0-100%]
 8002504:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <main+0x7fc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <main+0x7f0>)
 800250c:	719a      	strb	r2, [r3, #6]
		  lora_data.air_pressure = (uint32_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_ts]
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <main+0x7fc>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fc46 	bl	8000da4 <__aeabi_f2uiz>
 8002518:	4603      	mov	r3, r0
 800251a:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <main+0x7f0>)
 800251c:	6093      	str	r3, [r2, #8]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <main+0x7f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fc3e 	bl	8000da4 <__aeabi_f2uiz>
 8002528:	4603      	mov	r3, r0
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <main+0x7f0>)
 800252e:	731a      	strb	r2, [r3, #12]

		  // Data packet that will be send (modify if needed)
		  uint8_t data_packet[14];

		  data_packet[0] = DEVICE_ID;                              // Device ID number
 8002530:	2301      	movs	r3, #1
 8002532:	723b      	strb	r3, [r7, #8]
		  data_packet[1] = lora_data.error;                        // Error flag
 8002534:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <main+0x7f0>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	727b      	strb	r3, [r7, #9]
		  data_packet[2] = lora_data.errSendCnt;                   // No. of errors
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <main+0x7f0>)
 800253c:	785b      	ldrb	r3, [r3, #1]
 800253e:	72bb      	strb	r3, [r7, #10]
		  data_packet[3] = lora_data.battery;                      // battery voltage
 8002540:	4b6d      	ldr	r3, [pc, #436]	; (80026f8 <main+0x7f0>)
 8002542:	789b      	ldrb	r3, [r3, #2]
 8002544:	72fb      	strb	r3, [r7, #11]

		  // Encode air_temperature (int32_t -> 4 bytes)
		  data_packet[4] = (uint8_t)(lora_data.air_temperature & 0xFF);
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <main+0x7f0>)
 8002548:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	733b      	strb	r3, [r7, #12]
		  data_packet[5] = (uint8_t)((lora_data.air_temperature >> 8) & 0xFF);
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <main+0x7f0>)
 8002552:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002556:	121b      	asrs	r3, r3, #8
 8002558:	b21b      	sxth	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	737b      	strb	r3, [r7, #13]
		  data_packet[6] = (uint8_t)((lora_data.air_temperature >> 16) & 0xFF);
 800255e:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <main+0x7f0>)
 8002560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002564:	141b      	asrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	73bb      	strb	r3, [r7, #14]
		  data_packet[7] = (uint8_t)((lora_data.air_temperature >> 24) & 0xFF);
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <main+0x7f0>)
 800256c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002570:	161b      	asrs	r3, r3, #24
 8002572:	b2db      	uxtb	r3, r3
 8002574:	73fb      	strb	r3, [r7, #15]

		  // Encode air_humidity
		  data_packet[8] = lora_data.air_humidity;
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <main+0x7f0>)
 8002578:	799b      	ldrb	r3, [r3, #6]
 800257a:	743b      	strb	r3, [r7, #16]

		  // Encode air_pressure (uint32_t -> 4 bytes)
		  data_packet[9] = (uint8_t)(lora_data.air_pressure & 0xFF);
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <main+0x7f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	747b      	strb	r3, [r7, #17]
		  data_packet[10] = (uint8_t)((lora_data.air_pressure >> 8) & 0xFF);
 8002584:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <main+0x7f0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b2db      	uxtb	r3, r3
 800258c:	74bb      	strb	r3, [r7, #18]
		  data_packet[11] = (uint8_t)((lora_data.air_pressure >> 16) & 0xFF);
 800258e:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <main+0x7f0>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0c1b      	lsrs	r3, r3, #16
 8002594:	b2db      	uxtb	r3, r3
 8002596:	74fb      	strb	r3, [r7, #19]
		  data_packet[12] = (uint8_t)((lora_data.air_pressure >> 24) & 0xFF);
 8002598:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <main+0x7f0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	753b      	strb	r3, [r7, #20]

		  // Encode earth_humidity
		  data_packet[13] = lora_data.earth_humudity;
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <main+0x7f0>)
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	757b      	strb	r3, [r7, #21]

		  // Read number of TX packets from flash
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	2201      	movs	r2, #1
 80025ae:	4619      	mov	r1, r3
 80025b0:	4855      	ldr	r0, [pc, #340]	; (8002708 <main+0x800>)
 80025b2:	f7ff fc6d 	bl	8001e90 <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <main+0x804>)
 80025bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) // test_data_packet
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	220e      	movs	r2, #14
 80025c6:	4619      	mov	r1, r3
 80025c8:	4850      	ldr	r0, [pc, #320]	; (800270c <main+0x804>)
 80025ca:	f002 f807 	bl	80045dc <rfm95_send_receive_cycle>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <main+0x6e0>
		  {
			  lora_data.errSendCnt++; // Not used
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <main+0x7f0>)
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	3301      	adds	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <main+0x7f0>)
 80025e4:	705a      	strb	r2, [r3, #1]
 80025e6:	e009      	b.n	80025fc <main+0x6f4>
		  }
		  else
		  {
			  // Write number of TX packets to flash
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <main+0x804>)
 80025ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80025ee:	603b      	str	r3, [r7, #0]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 80025f0:	463b      	mov	r3, r7
 80025f2:	2201      	movs	r2, #1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4844      	ldr	r0, [pc, #272]	; (8002708 <main+0x800>)
 80025f8:	f7ff fbee 	bl	8001dd8 <Flash_Write_Data>
		  }

		  state = STATE_GO_SLEEP;
 80025fc:	4b44      	ldr	r3, [pc, #272]	; (8002710 <main+0x808>)
 80025fe:	2204      	movs	r2, #4
 8002600:	701a      	strb	r2, [r3, #0]

		  // Reset error counter
		  status = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  lora_data.errSendCnt = 0;
 8002608:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <main+0x7f0>)
 800260a:	2200      	movs	r2, #0
 800260c:	705a      	strb	r2, [r3, #1]

		  break;
 800260e:	e071      	b.n	80026f4 <main+0x7ec>

	  case STATE_GO_SLEEP:

		  ////////* PUT DEVICE TO SLEEP *////////

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002610:	2200      	movs	r2, #0
 8002612:	4940      	ldr	r1, [pc, #256]	; (8002714 <main+0x80c>)
 8002614:	4840      	ldr	r0, [pc, #256]	; (8002718 <main+0x810>)
 8002616:	f007 fc37 	bl	8009e88 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800261a:	2200      	movs	r2, #0
 800261c:	493f      	ldr	r1, [pc, #252]	; (800271c <main+0x814>)
 800261e:	483e      	ldr	r0, [pc, #248]	; (8002718 <main+0x810>)
 8002620:	f007 fdc0 	bl	800a1a4 <HAL_RTC_GetDate>

		  //time.Hours += 1; // Next wake up after one hours
		  time.Minutes += 30; // Next wake up after 30 minuts
 8002624:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <main+0x80c>)
 8002626:	785b      	ldrb	r3, [r3, #1]
 8002628:	331e      	adds	r3, #30
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <main+0x80c>)
 800262e:	705a      	strb	r2, [r3, #1]
		  //time.Minutes += 1; //test

		  if(time.Seconds>=60)
 8002630:	4b38      	ldr	r3, [pc, #224]	; (8002714 <main+0x80c>)
 8002632:	789b      	ldrb	r3, [r3, #2]
 8002634:	2b3b      	cmp	r3, #59	; 0x3b
 8002636:	d90b      	bls.n	8002650 <main+0x748>
		  {
			  time.Minutes ++;
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <main+0x80c>)
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	3301      	adds	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b34      	ldr	r3, [pc, #208]	; (8002714 <main+0x80c>)
 8002642:	705a      	strb	r2, [r3, #1]
			  time.Seconds = time.Seconds - 60;
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <main+0x80c>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	3b3c      	subs	r3, #60	; 0x3c
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <main+0x80c>)
 800264e:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <main+0x80c>)
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2b3b      	cmp	r3, #59	; 0x3b
 8002656:	d90b      	bls.n	8002670 <main+0x768>
		  {
			  time.Hours++;
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <main+0x80c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <main+0x80c>)
 8002662:	701a      	strb	r2, [r3, #0]
			  time.Minutes = time.Minutes - 60;
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <main+0x80c>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	3b3c      	subs	r3, #60	; 0x3c
 800266a:	b2da      	uxtb	r2, r3
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <main+0x80c>)
 800266e:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <main+0x80c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b17      	cmp	r3, #23
 8002676:	d902      	bls.n	800267e <main+0x776>
		  {
			  time.Hours = 0;
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <main+0x80c>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm = RTC_ALARM_A;
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <main+0x818>)
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
		  sAlarm.AlarmTime.Hours = time.Hours;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <main+0x80c>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <main+0x818>)
 800268a:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes = time.Minutes;
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <main+0x80c>)
 800268e:	785a      	ldrb	r2, [r3, #1]
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <main+0x818>)
 8002692:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds = time.Seconds;
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <main+0x80c>)
 8002696:	789a      	ldrb	r2, [r3, #2]
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <main+0x818>)
 800269a:	709a      	strb	r2, [r3, #2]
		  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800269c:	2200      	movs	r2, #0
 800269e:	4920      	ldr	r1, [pc, #128]	; (8002720 <main+0x818>)
 80026a0:	481d      	ldr	r0, [pc, #116]	; (8002718 <main+0x810>)
 80026a2:	f007 fdd3 	bl	800a24c <HAL_RTC_SetAlarm_IT>

		  // Stop Timers if they running and disable their interrupts
		  HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer 2
 80026a6:	481f      	ldr	r0, [pc, #124]	; (8002724 <main+0x81c>)
 80026a8:	f008 ffde 	bl	800b668 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer 3
 80026ac:	481e      	ldr	r0, [pc, #120]	; (8002728 <main+0x820>)
 80026ae:	f008 ffdb 	bl	800b668 <HAL_TIM_Base_Stop_IT>
		  HAL_NVIC_DisableIRQ(TIM2_IRQn); // Disable Timer 2 interrupt
 80026b2:	201c      	movs	r0, #28
 80026b4:	f003 fbd3 	bl	8005e5e <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(TIM3_IRQn); // Disable Timer 3 interrupt
 80026b8:	201d      	movs	r0, #29
 80026ba:	f003 fbd0 	bl	8005e5e <HAL_NVIC_DisableIRQ>


		  HAL_ADC_Stop(&hadc1);
 80026be:	481b      	ldr	r0, [pc, #108]	; (800272c <main+0x824>)
 80026c0:	f002 ff22 	bl	8005508 <HAL_ADC_Stop>
		  HAL_ADC_DeInit(&hadc1);
 80026c4:	4819      	ldr	r0, [pc, #100]	; (800272c <main+0x824>)
 80026c6:	f002 fdaf 	bl	8005228 <HAL_ADC_DeInit>
//		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
//		  RCC_OscInitStruct.HSIState = RCC_HSI_OFF; // Disable HSI
//		  HAL_RCC_OscConfig(&RCC_OscInitStruct);


		  rfm95_goto_sleep(&rfm95_handle); // If the module is not in sleep mode (it should be)
 80026ca:	4810      	ldr	r0, [pc, #64]	; (800270c <main+0x804>)
 80026cc:	f001 f8d2 	bl	8003874 <rfm95_goto_sleep>


		  HAL_SuspendTick();
 80026d0:	f002 fca8 	bl	8005024 <HAL_SuspendTick>

		  // Set sleep mode
		#ifdef SLEEP_MODE_STOP
		  HAL_DBGMCU_DisableDBGStopMode();
 80026d4:	f002 fcc2 	bl	800505c <HAL_DBGMCU_DisableDBGStopMode>
		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80026d8:	2101      	movs	r1, #1
 80026da:	2001      	movs	r0, #1
 80026dc:	f006 fd00 	bl	80090e0 <HAL_PWR_EnterSTOPMode>
		#ifndef SLEEP_MODE_STOP
		  HAL_DBGMCU_DisableDBGStandbyMode();
		  HAL_PWR_EnterSTANDBYMode();
		#endif

		  SystemClock_Config();
 80026e0:	f000 f826 	bl	8002730 <SystemClock_Config>
		  HAL_ResumeTick();
 80026e4:	f002 fcac 	bl	8005040 <HAL_ResumeTick>

		  break;
 80026e8:	e004      	b.n	80026f4 <main+0x7ec>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 80026ea:	bf00      	nop
 80026ec:	e42d      	b.n	8001f4a <main+0x42>
		  break;
 80026ee:	bf00      	nop
 80026f0:	e42b      	b.n	8001f4a <main+0x42>
		  break;
 80026f2:	bf00      	nop
	  switch(state)
 80026f4:	e429      	b.n	8001f4a <main+0x42>
 80026f6:	bf00      	nop
 80026f8:	20000210 	.word	0x20000210
 80026fc:	200001d4 	.word	0x200001d4
 8002700:	41200000 	.word	0x41200000
 8002704:	2000019c 	.word	0x2000019c
 8002708:	0801f800 	.word	0x0801f800
 800270c:	20000220 	.word	0x20000220
 8002710:	2000055c 	.word	0x2000055c
 8002714:	200002d8 	.word	0x200002d8
 8002718:	200003c0 	.word	0x200003c0
 800271c:	200002dc 	.word	0x200002dc
 8002720:	200002e0 	.word	0x200002e0
 8002724:	20000484 	.word	0x20000484
 8002728:	200004cc 	.word	0x200004cc
 800272c:	200002e8 	.word	0x200002e8

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b094      	sub	sp, #80	; 0x50
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273a:	2228      	movs	r2, #40	; 0x28
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f00a fab9 	bl	800ccb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002760:	2305      	movs	r3, #5
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800276e:	2301      	movs	r3, #1
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002772:	2301      	movs	r3, #1
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002776:	2302      	movs	r3, #2
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800277a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002780:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278a:	4618      	mov	r0, r3
 800278c:	f006 fcda 	bl	8009144 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002796:	f000 fcd5 	bl	8003144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f006 ff46 	bl	8009648 <HAL_RCC_ClockConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027c2:	f000 fcbf 	bl	8003144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80027c6:	2303      	movs	r3, #3
 80027c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4618      	mov	r0, r3
 80027da:	f007 f8c5 	bl	8009968 <HAL_RCCEx_PeriphCLKConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80027e4:	f000 fcae 	bl	8003144 <Error_Handler>
  }
}
 80027e8:	bf00      	nop
 80027ea:	3750      	adds	r7, #80	; 0x50
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <MX_ADC1_Init+0x94>)
 8002802:	4a21      	ldr	r2, [pc, #132]	; (8002888 <MX_ADC1_Init+0x98>)
 8002804:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002806:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <MX_ADC1_Init+0x94>)
 8002808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <MX_ADC1_Init+0x94>)
 8002810:	2201      	movs	r2, #1
 8002812:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <MX_ADC1_Init+0x94>)
 8002816:	2200      	movs	r2, #0
 8002818:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <MX_ADC1_Init+0x94>)
 800281c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MX_ADC1_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <MX_ADC1_Init+0x94>)
 800282a:	2202      	movs	r2, #2
 800282c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800282e:	4815      	ldr	r0, [pc, #84]	; (8002884 <MX_ADC1_Init+0x94>)
 8002830:	f002 fc22 	bl	8005078 <HAL_ADC_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800283a:	f000 fc83 	bl	8003144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800283e:	2301      	movs	r3, #1
 8002840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002842:	2301      	movs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	4619      	mov	r1, r3
 800284e:	480d      	ldr	r0, [pc, #52]	; (8002884 <MX_ADC1_Init+0x94>)
 8002850:	f003 f844 	bl	80058dc <HAL_ADC_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800285a:	f000 fc73 	bl	8003144 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800285e:	2302      	movs	r3, #2
 8002860:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002862:	2302      	movs	r3, #2
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_ADC1_Init+0x94>)
 800286c:	f003 f836 	bl	80058dc <HAL_ADC_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002876:	f000 fc65 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200002e8 	.word	0x200002e8
 8002888:	40012400 	.word	0x40012400

0800288c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <MX_I2C1_Init+0x50>)
 8002892:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <MX_I2C1_Init+0x54>)
 8002894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_I2C1_Init+0x50>)
 8002898:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <MX_I2C1_Init+0x58>)
 800289a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_I2C1_Init+0x50>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_I2C1_Init+0x50>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_I2C1_Init+0x50>)
 80028aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <MX_I2C1_Init+0x50>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_I2C1_Init+0x50>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <MX_I2C1_Init+0x50>)
 80028be:	2200      	movs	r2, #0
 80028c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_I2C1_Init+0x50>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_I2C1_Init+0x50>)
 80028ca:	f003 ffe3 	bl	8006894 <HAL_I2C_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028d4:	f000 fc36 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000318 	.word	0x20000318
 80028e0:	40005400 	.word	0x40005400
 80028e4:	000186a0 	.word	0x000186a0

080028e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_I2C2_Init+0x50>)
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <MX_I2C2_Init+0x54>)
 80028f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_I2C2_Init+0x50>)
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <MX_I2C2_Init+0x58>)
 80028f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_I2C2_Init+0x50>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_I2C2_Init+0x50>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_I2C2_Init+0x50>)
 8002906:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800290a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_I2C2_Init+0x50>)
 800290e:	2200      	movs	r2, #0
 8002910:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_I2C2_Init+0x50>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <MX_I2C2_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_I2C2_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <MX_I2C2_Init+0x50>)
 8002926:	f003 ffb5 	bl	8006894 <HAL_I2C_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002930:	f000 fc08 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000036c 	.word	0x2000036c
 800293c:	40005800 	.word	0x40005800
 8002940:	000186a0 	.word	0x000186a0

08002944 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	2100      	movs	r1, #0
 8002950:	460a      	mov	r2, r1
 8002952:	801a      	strh	r2, [r3, #0]
 8002954:	460a      	mov	r2, r1
 8002956:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800295c:	463b      	mov	r3, r7
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <MX_RTC_Init+0xc0>)
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <MX_RTC_Init+0xc4>)
 8002968:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <MX_RTC_Init+0xc0>)
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <MX_RTC_Init+0xc0>)
 8002974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002978:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800297a:	4822      	ldr	r0, [pc, #136]	; (8002a04 <MX_RTC_Init+0xc0>)
 800297c:	f007 f960 	bl	8009c40 <HAL_RTC_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002986:	f000 fbdd 	bl	8003144 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800298a:	2300      	movs	r3, #0
 800298c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 800298e:	2300      	movs	r3, #0
 8002990:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8002992:	2300      	movs	r3, #0
 8002994:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	4819      	ldr	r0, [pc, #100]	; (8002a04 <MX_RTC_Init+0xc0>)
 80029a0:	f007 f9da 	bl	8009d58 <HAL_RTC_SetTime>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 80029aa:	f000 fbcb 	bl	8003144 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029ae:	2301      	movs	r3, #1
 80029b0:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80029b2:	2301      	movs	r3, #1
 80029b4:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	2201      	movs	r2, #1
 80029c4:	4619      	mov	r1, r3
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <MX_RTC_Init+0xc0>)
 80029c8:	f007 fb36 	bl	800a038 <HAL_RTC_SetDate>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80029d2:	f000 fbb7 	bl	8003144 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80029da:	2300      	movs	r3, #0
 80029dc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80029de:	2300      	movs	r3, #0
 80029e0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	2201      	movs	r2, #1
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_RTC_Init+0xc0>)
 80029ee:	f007 fc2d 	bl	800a24c <HAL_RTC_SetAlarm_IT>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80029f8:	f000 fba4 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200003c0 	.word	0x200003c0
 8002a08:	40002800 	.word	0x40002800

08002a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a40:	2210      	movs	r2, #16
 8002a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a5e:	f007 ffd9 	bl	800aa14 <HAL_SPI_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a68:	f000 fb6c 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200003d4 	.word	0x200003d4
 8002a74:	40013000 	.word	0x40013000

08002a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <MX_SPI2_Init+0x68>)
 8002a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_SPI2_Init+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aac:	2208      	movs	r2, #8
 8002aae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002abc:	4b07      	ldr	r3, [pc, #28]	; (8002adc <MX_SPI2_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_SPI2_Init+0x64>)
 8002ac4:	220a      	movs	r2, #10
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	; (8002adc <MX_SPI2_Init+0x64>)
 8002aca:	f007 ffa3 	bl	800aa14 <HAL_SPI_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ad4:	f000 fb36 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000042c 	.word	0x2000042c
 8002ae0:	40003800 	.word	0x40003800

08002ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b18:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002b1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b2a:	4814      	ldr	r0, [pc, #80]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b2c:	f008 fcfa 	bl	800b524 <HAL_TIM_Base_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002b36:	f000 fb05 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b40:	f107 0308 	add.w	r3, r7, #8
 8002b44:	4619      	mov	r1, r3
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b48:	f008 fec4 	bl	800b8d4 <HAL_TIM_ConfigClockSource>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b52:	f000 faf7 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4619      	mov	r1, r3
 8002b62:	4806      	ldr	r0, [pc, #24]	; (8002b7c <MX_TIM2_Init+0x98>)
 8002b64:	f009 f89a 	bl	800bc9c <HAL_TIMEx_MasterConfigSynchronization>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b6e:	f000 fae9 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000484 	.word	0x20000484

08002b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	463b      	mov	r3, r7
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <MX_TIM3_Init+0x98>)
 8002ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2199;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002ba4:	f640 0297 	movw	r2, #2199	; 0x897
 8002ba8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bc6:	f008 fcad 	bl	800b524 <HAL_TIM_Base_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002bd0:	f000 fab8 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002be2:	f008 fe77 	bl	800b8d4 <HAL_TIM_ConfigClockSource>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002bec:	f000 faaa 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_TIM3_Init+0x94>)
 8002bfe:	f009 f84d 	bl	800bc9c <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c08:	f000 fa9c 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200004cc 	.word	0x200004cc
 8002c18:	40000400 	.word	0x40000400

08002c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <MX_USART1_UART_Init+0x50>)
 8002c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <MX_USART1_UART_Init+0x4c>)
 8002c54:	f009 f892 	bl	800bd7c <HAL_UART_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c5e:	f000 fa71 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000514 	.word	0x20000514
 8002c6c:	40013800 	.word	0x40013800

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c84:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002ca2:	f043 0320 	orr.w	r3, r3, #32
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6193      	str	r3, [r2, #24]
 8002cc0:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ccc:	4b54      	ldr	r3, [pc, #336]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	4a53      	ldr	r2, [pc, #332]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	6193      	str	r3, [r2, #24]
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <MX_GPIO_Init+0x1b0>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPUP_EN_Pin|EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2109      	movs	r1, #9
 8002ce8:	484e      	ldr	r0, [pc, #312]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002cea:	f003 fda3 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_EX_Pin|RESET_Pin, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002cf4:	484b      	ldr	r0, [pc, #300]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002cf6:	f003 fd9d 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d00:	4849      	ldr	r0, [pc, #292]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002d02:	f003 fd97 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_SLP_GPIO_Port, SIM_SLP_Pin, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d0c:	4846      	ldr	r0, [pc, #280]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002d0e:	f003 fd91 	bl	8006834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEPUP_EN_Pin EHUM_PWR_Pin SPI_CS_EX_Pin */
  GPIO_InitStruct.Pin = STEPUP_EN_Pin|EHUM_PWR_Pin|SPI_CS_EX_Pin;
 8002d12:	2319      	movs	r3, #25
 8002d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d16:	2301      	movs	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 0310 	add.w	r3, r7, #16
 8002d26:	4619      	mov	r1, r3
 8002d28:	483e      	ldr	r0, [pc, #248]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002d2a:	f003 fb43 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED2_Pin UNUSED3_Pin */
  GPIO_InitStruct.Pin = UNUSED2_Pin|UNUSED3_Pin;
 8002d2e:	2305      	movs	r3, #5
 8002d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d32:	2303      	movs	r3, #3
 8002d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	483a      	ldr	r0, [pc, #232]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002d3e:	f003 fb39 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin SIM_ISR_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin|SIM_ISR_Pin;
 8002d42:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d48:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <MX_GPIO_Init+0x1bc>)
 8002d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4619      	mov	r1, r3
 8002d56:	4834      	ldr	r0, [pc, #208]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002d58:	f003 fb2c 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin SIM_SLP_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|SIM_SLP_Pin;
 8002d5c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	4619      	mov	r1, r3
 8002d74:	482c      	ldr	r0, [pc, #176]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002d76:	f003 fb1d 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8002d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4619      	mov	r1, r3
 8002d92:	4824      	ldr	r0, [pc, #144]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002d94:	f003 fb0e 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8002d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	4619      	mov	r1, r3
 8002dac:	481d      	ldr	r0, [pc, #116]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002dae:	f003 fb01 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_RST_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin|DIO1_Pin;
 8002db2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_GPIO_Init+0x1bc>)
 8002dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4817      	ldr	r0, [pc, #92]	; (8002e24 <MX_GPIO_Init+0x1b4>)
 8002dc8:	f003 faf4 	bl	80063b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 8002dcc:	2330      	movs	r3, #48	; 0x30
 8002dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <MX_GPIO_Init+0x1b8>)
 8002de0:	f003 fae8 	bl	80063b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2101      	movs	r1, #1
 8002de8:	2007      	movs	r0, #7
 8002dea:	f003 f80e 	bl	8005e0a <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2101      	movs	r1, #1
 8002df2:	2009      	movs	r0, #9
 8002df4:	f003 f809 	bl	8005e0a <HAL_NVIC_SetPriority>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // ^^^^^^^^ COMMENT ALL IRQ ENABLE WRITEN BY IDE ^^^^^^^^
  // Manual setup IRQs - interrupt signal already at startup
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2007      	movs	r0, #7
 8002dfe:	f003 f804 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2101      	movs	r1, #1
 8002e06:	2009      	movs	r0, #9
 8002e08:	f002 ffff 	bl	8005e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8002e0c:	2009      	movs	r0, #9
 8002e0e:	f003 f826 	bl	8005e5e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002e12:	2007      	movs	r0, #7
 8002e14:	f003 f823 	bl	8005e5e <HAL_NVIC_DisableIRQ>


/* USER CODE END MX_GPIO_Init_2 */
}
 8002e18:	bf00      	nop
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010800 	.word	0x40010800
 8002e28:	40010c00 	.word	0x40010c00
 8002e2c:	10110000 	.word	0x10110000

08002e30 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

// Wake up interrupt - STOP mode //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	awake = 1;
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RTC_AlarmAEventCallback+0x28>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RTC_AlarmAEventCallback+0x1c>
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	701a      	strb	r2, [r3, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	2000055c 	.word	0x2000055c

08002e60 <HAL_TIM_PeriodElapsedCallback>:
}


// TIMER Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e70:	d10c      	bne.n	8002e8c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (measurements.ADC_read == 0)
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d108      	bne.n	8002e8c <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8002e7a:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002e7c:	f008 fbf4 	bl	800b668 <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Start_IT(&hadc1);
 8002e80:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002e82:	f002 fb6d 	bl	8005560 <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM3)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM2 overflows
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002ea0:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8002ea2:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002ea4:	f008 fb8e 	bl	800b5c4 <HAL_TIM_Base_Start_IT>
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200001d4 	.word	0x200001d4
 8002eb4:	20000484 	.word	0x20000484
 8002eb8:	200002e8 	.word	0x200002e8
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	20000560 	.word	0x20000560
 8002ec4:	200004cc 	.word	0x200004cc

08002ec8 <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_ADC_ConvCpltCallback+0x40>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d111      	bne.n	8002efe <HAL_ADC_ConvCpltCallback+0x36>
    {
    	measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f002 fc2a 	bl	8005734 <HAL_ADC_GetValue>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_ADC_ConvCpltCallback+0x44>)
 8002ee4:	6053      	str	r3, [r2, #4]
    	measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f002 fc24 	bl	8005734 <HAL_ADC_GetValue>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_ADC_ConvCpltCallback+0x44>)
 8002ef0:	6093      	str	r3, [r2, #8]
    	HAL_ADC_Stop_IT(&hadc1);
 8002ef2:	4807      	ldr	r0, [pc, #28]	; (8002f10 <HAL_ADC_ConvCpltCallback+0x48>)
 8002ef4:	f002 fbea 	bl	80056cc <HAL_ADC_Stop_IT>
    	measurements.ADC_read_end = 1;
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_ADC_ConvCpltCallback+0x44>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	705a      	strb	r2, [r3, #1]
    }
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40012400 	.word	0x40012400
 8002f0c:	200001d4 	.word	0x200001d4
 8002f10:	200002e8 	.word	0x200002e8
 8002f14:	00000000 	.word	0x00000000

08002f18 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	float Vout = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb7f 	bl	8000628 <__aeabi_ui2d>
 8002f2a:	a311      	add	r3, pc, #68	; (adr r3, 8002f70 <ADC_Read_Battery+0x58>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd f90e 	bl	8000150 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fc0e 	bl	800075c <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	490d      	ldr	r1, [pc, #52]	; (8002f78 <ADC_Read_Battery+0x60>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fe1b 	bl	8000b80 <__aeabi_fdiv>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	60fb      	str	r3, [r7, #12]
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
 8002f4e:	490b      	ldr	r1, [pc, #44]	; (8002f7c <ADC_Read_Battery+0x64>)
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7fd fe15 	bl	8000b80 <__aeabi_fdiv>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4909      	ldr	r1, [pc, #36]	; (8002f80 <ADC_Read_Battery+0x68>)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fd5c 	bl	8000a18 <__aeabi_fmul>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 8002f64:	68bb      	ldr	r3, [r7, #8]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	33333333 	.word	0x33333333
 8002f74:	40093333 	.word	0x40093333
 8002f78:	457ff000 	.word	0x457ff000
 8002f7c:	48f42400 	.word	0x48f42400
 8002f80:	49742400 	.word	0x49742400

08002f84 <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 8002f84:	b4b0      	push	{r4, r5, r7}
 8002f86:	b08d      	sub	sp, #52	; 0x34
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <RFM95W_Struct_Init+0xa4>)
 8002f90:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <RFM95W_Struct_Init+0xa8>)
 8002f96:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f9e:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <RFM95W_Struct_Init+0xac>)
 8002fa4:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fac:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <RFM95W_Struct_Init+0xb0>)
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <RFM95W_Struct_Init+0xb4>)
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <RFM95W_Struct_Init+0xb8>)
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3312      	adds	r3, #18
 8002fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fdc:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <RFM95W_Struct_Init+0xbc>)
 8002fe0:	f107 041c 	add.w	r4, r7, #28
 8002fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3326      	adds	r3, #38	; 0x26
 8002fee:	461d      	mov	r5, r3
 8002ff0:	f107 041c 	add.w	r4, r7, #28
 8002ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff6:	6028      	str	r0, [r5, #0]
 8002ff8:	6069      	str	r1, [r5, #4]
 8002ffa:	60aa      	str	r2, [r5, #8]
 8002ffc:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <RFM95W_Struct_Init+0xc0>)
 8003000:	f107 040c 	add.w	r4, r7, #12
 8003004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3316      	adds	r3, #22
 800300e:	461d      	mov	r5, r3
 8003010:	f107 040c 	add.w	r4, r7, #12
 8003014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003016:	6028      	str	r0, [r5, #0]
 8003018:	6069      	str	r1, [r5, #4]
 800301a:	60aa      	str	r2, [r5, #8]
 800301c:	60eb      	str	r3, [r5, #12]
}
 800301e:	bf00      	nop
 8003020:	3734      	adds	r7, #52	; 0x34
 8003022:	46bd      	mov	sp, r7
 8003024:	bcb0      	pop	{r4, r5, r7}
 8003026:	4770      	bx	lr
 8003028:	2000042c 	.word	0x2000042c
 800302c:	40010c00 	.word	0x40010c00
 8003030:	40010800 	.word	0x40010800
 8003034:	080030c5 	.word	0x080030c5
 8003038:	080030a1 	.word	0x080030a1
 800303c:	e9780b26 	.word	0xe9780b26
 8003040:	0800d9d0 	.word	0x0800d9d0
 8003044:	0800d9e0 	.word	0x0800d9e0

08003048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
	//__disable_irq();
    if (GPIO_Pin == DIO0_Pin) {
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d104      	bne.n	8003062 <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8003058:	2100      	movs	r1, #0
 800305a:	480f      	ldr	r0, [pc, #60]	; (8003098 <HAL_GPIO_EXTI_Callback+0x50>)
 800305c:	f001 fbab 	bl	80047b6 <rfm95_on_interrupt>
 8003060:	e013      	b.n	800308a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO1_Pin) {
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d104      	bne.n	8003074 <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 800306a:	2101      	movs	r1, #1
 800306c:	480a      	ldr	r0, [pc, #40]	; (8003098 <HAL_GPIO_EXTI_Callback+0x50>)
 800306e:	f001 fba2 	bl	80047b6 <rfm95_on_interrupt>
 8003072:	e00a      	b.n	800308a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO5_Pin) {
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d104      	bne.n	8003084 <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 800307a:	2102      	movs	r1, #2
 800307c:	4806      	ldr	r0, [pc, #24]	; (8003098 <HAL_GPIO_EXTI_Callback+0x50>)
 800307e:	f001 fb9a 	bl	80047b6 <rfm95_on_interrupt>
 8003082:	e002      	b.n	800308a <HAL_GPIO_EXTI_Callback+0x42>
    } else {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear any unexpected interrupt
 8003084:	4a05      	ldr	r2, [pc, #20]	; (800309c <HAL_GPIO_EXTI_Callback+0x54>)
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	6153      	str	r3, [r2, #20]
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the flag
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_GPIO_EXTI_Callback+0x54>)
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	6153      	str	r3, [r2, #20]
    //__enable_irq();
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000220 	.word	0x20000220
 800309c:	40010400 	.word	0x40010400

080030a0 <random_int>:

static uint8_t random_int(uint8_t max)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <random_int+0x20>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	b2db      	uxtb	r3, r3
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr
 80030c0:	200001d4 	.word	0x200001d4

080030c4 <get_precision_tick>:

static uint32_t get_precision_tick()
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ca:	b672      	cpsid	i
}
 80030cc:	bf00      	nop
    __disable_irq(); // Disable interrupts to ensure atomic access to tick variables
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <get_precision_tick+0x28>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <get_precision_tick+0x2c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80030dc:	b662      	cpsie	i
}
 80030de:	bf00      	nop
    __enable_irq(); // Re-enable interrupts
    return precision_tick;
 80030e0:	687b      	ldr	r3, [r7, #4]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	200004cc 	.word	0x200004cc
 80030f0:	20000560 	.word	0x20000560

080030f4 <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	uint8_t humidity = (uint8_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3bf0      	subs	r3, #240	; 0xf0
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa8f 	bl	8000628 <__aeabi_ui2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fb03 	bl	800071c <__aeabi_d2uiz>
 8003116:	4603      	mov	r3, r0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fc28 	bl	8000970 <__aeabi_i2f>
 8003120:	4602      	mov	r2, r0
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7fd fc75 	bl	8000a18 <__aeabi_fmul>
 800312e:	4603      	mov	r3, r0
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fe37 	bl	8000da4 <__aeabi_f2uiz>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
	return humidity;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
}
 800314a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800314c:	e7fe      	b.n	800314c <Error_Handler+0x8>

0800314e <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	460b      	mov	r3, r1
 800315c:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6858      	ldr	r0, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	891b      	ldrh	r3, [r3, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	4619      	mov	r1, r3
 800316a:	f003 fb63 	bl	8006834 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	f107 0117 	add.w	r1, r7, #23
 8003180:	2364      	movs	r3, #100	; 0x64
 8003182:	2201      	movs	r2, #1
 8003184:	f007 fcca 	bl	800ab1c <HAL_SPI_Transmit>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <read_register+0x44>
		return false;
 800318e:	2300      	movs	r3, #0
 8003190:	e015      	b.n	80031be <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b29a      	uxth	r2, r3
 800319a:	2364      	movs	r3, #100	; 0x64
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	f007 fe00 	bl	800ada2 <HAL_SPI_Receive>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <read_register+0x5e>
		return false;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e008      	b.n	80031be <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6858      	ldr	r0, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	891b      	ldrh	r3, [r3, #8]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4619      	mov	r1, r3
 80031b8:	f003 fb3c 	bl	8006834 <HAL_GPIO_WritePin>

	return true;
 80031bc:	2301      	movs	r3, #1

}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
 80031d2:	4613      	mov	r3, r2
 80031d4:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6858      	ldr	r0, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	891b      	ldrh	r3, [r3, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	f003 fb27 	bl	8006834 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	733b      	strb	r3, [r7, #12]
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	f107 010c 	add.w	r1, r7, #12
 80031fc:	2364      	movs	r3, #100	; 0x64
 80031fe:	2202      	movs	r2, #2
 8003200:	f007 fc8c 	bl	800ab1c <HAL_SPI_Transmit>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <write_register+0x48>
		return false;
 800320a:	2300      	movs	r3, #0
 800320c:	e008      	b.n	8003220 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6858      	ldr	r0, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	891b      	ldrh	r3, [r3, #8]
 8003216:	2201      	movs	r2, #1
 8003218:	4619      	mov	r1, r3
 800321a:	f003 fb0b 	bl	8006834 <HAL_GPIO_WritePin>

	return true;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	460b      	mov	r3, r1
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d905      	bls.n	8003248 <config_set_channel+0x20>
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <config_set_channel+0x54>)
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <config_set_channel+0x58>)
 8003240:	2175      	movs	r1, #117	; 0x75
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <config_set_channel+0x5c>)
 8003244:	f009 fbf2 	bl	800ca2c <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8003248:	7afa      	ldrb	r2, [r7, #11]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	321a      	adds	r2, #26
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800325a:	b21a      	sxth	r2, r3
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21b      	sxth	r3, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	0800d9f0 	.word	0x0800d9f0
 8003280:	0800dc54 	.word	0x0800dc54
 8003284:	0800da04 	.word	0x0800da04

08003288 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f64a 3267 	movw	r2, #43879	; 0xab67
 8003296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <config_load_default+0x58>)
 80032bc:	2100      	movs	r1, #0
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffb2 	bl	8003228 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 80032c4:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <config_load_default+0x5c>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffad 	bl	8003228 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80032ce:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <config_load_default+0x60>)
 80032d0:	2102      	movs	r1, #2
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffa8 	bl	8003228 <config_set_channel>
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	33be27a0 	.word	0x33be27a0
 80032e4:	33c134e0 	.word	0x33c134e0
 80032e8:	33c44220 	.word	0x33c44220

080032ec <reset>:


static void reset(rfm95_handle_t *handle)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68d8      	ldr	r0, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8a1b      	ldrh	r3, [r3, #16]
 80032fc:	2200      	movs	r2, #0
 80032fe:	4619      	mov	r1, r3
 8003300:	f003 fa98 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8003304:	2001      	movs	r0, #1
 8003306:	f001 fe69 	bl	8004fdc <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68d8      	ldr	r0, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8a1b      	ldrh	r3, [r3, #16]
 8003312:	2201      	movs	r2, #1
 8003314:	4619      	mov	r1, r3
 8003316:	f003 fa8d 	bl	8006834 <HAL_GPIO_WritePin>
	HAL_Delay(20);//5
 800331a:	2014      	movs	r0, #20
 800331c:	f001 fe5e 	bl	8004fdc <HAL_Delay>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003332:	6839      	ldr	r1, [r7, #0]
 8003334:	2000      	movs	r0, #0
 8003336:	460a      	mov	r2, r1
 8003338:	4603      	mov	r3, r0
 800333a:	0b55      	lsrs	r5, r2, #13
 800333c:	04d4      	lsls	r4, r2, #19
 800333e:	4a27      	ldr	r2, [pc, #156]	; (80033dc <configure_frequency+0xb4>)
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	4620      	mov	r0, r4
 8003346:	4629      	mov	r1, r5
 8003348:	f7fd fd9c 	bl	8000e84 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8003354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	0c02      	lsrs	r2, r0, #16
 8003362:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003366:	0c0b      	lsrs	r3, r1, #16
 8003368:	b2d3      	uxtb	r3, r2
 800336a:	461a      	mov	r2, r3
 800336c:	2106      	movs	r1, #6
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff29 	bl	80031c6 <write_register>
 8003374:	4603      	mov	r3, r0
 8003376:	f083 0301 	eor.w	r3, r3, #1
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <configure_frequency+0x5c>
 8003380:	2300      	movs	r3, #0
 8003382:	e026      	b.n	80033d2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8003384:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	0a02      	lsrs	r2, r0, #8
 8003392:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003396:	0a0b      	lsrs	r3, r1, #8
 8003398:	b2d3      	uxtb	r3, r2
 800339a:	461a      	mov	r2, r3
 800339c:	2107      	movs	r1, #7
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff11 	bl	80031c6 <write_register>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f083 0301 	eor.w	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <configure_frequency+0x8c>
 80033b0:	2300      	movs	r3, #0
 80033b2:	e00e      	b.n	80033d2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 80033b4:	7a3b      	ldrb	r3, [r7, #8]
 80033b6:	461a      	mov	r2, r3
 80033b8:	2108      	movs	r1, #8
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff03 	bl	80031c6 <write_register>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f083 0301 	eor.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <configure_frequency+0xa8>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <configure_frequency+0xaa>

	return true;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
 80033da:	bf00      	nop
 80033dc:	01e84800 	.word	0x01e84800

080033e0 <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80033f0:	461a      	mov	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	fa42 f303 	asr.w	r3, r2, r3
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <configure_channel+0x2c>
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <configure_channel+0x48>)
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <configure_channel+0x4c>)
 8003404:	21a1      	movs	r1, #161	; 0xa1
 8003406:	480a      	ldr	r0, [pc, #40]	; (8003430 <configure_channel+0x50>)
 8003408:	f009 fb10 	bl	800ca2c <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	321a      	adds	r2, #26
 8003412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff85 	bl	8003328 <configure_frequency>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	0800da18 	.word	0x0800da18
 800342c:	0800dc68 	.word	0x0800dc68
 8003430:	0800da04 	.word	0x0800da04

08003434 <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	460b      	mov	r3, r1
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	72fb      	strb	r3, [r7, #11]
	// Works with interrupt but it needs more testing for timeout
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4798      	blx	r3
 8003448:	4601      	mov	r1, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <wait_for_irq+0x5c>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	440b      	add	r3, r1
 800345e:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8003460:	e008      	b.n	8003474 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4798      	blx	r3
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4293      	cmp	r3, r2
 800346e:	d801      	bhi.n	8003474 <wait_for_irq+0x40>
			return false;
 8003470:	2300      	movs	r3, #0
 8003472:	e008      	b.n	8003486 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	332a      	adds	r3, #42	; 0x2a
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <wait_for_irq+0x2e>
		}
	}
	return true;
 8003484:	2301      	movs	r3, #1
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	4798      	blx	r3
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4912      	ldr	r1, [pc, #72]	; (80034fc <wait_for_rx_irqs+0x68>)
 80034b2:	fba1 1303 	umull	r1, r3, r1, r3
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80034bc:	e008      	b.n	80034d0 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4798      	blx	r3
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d801      	bhi.n	80034d0 <wait_for_rx_irqs+0x3c>
			return false;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e011      	b.n	80034f4 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d104      	bne.n	80034e4 <wait_for_rx_irqs+0x50>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ec      	beq.n	80034be <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 800350c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	dd03      	ble.n	800351c <rfm95_set_power+0x1c>
 8003514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003518:	2b11      	cmp	r3, #17
 800351a:	dd09      	ble.n	8003530 <rfm95_set_power+0x30>
 800351c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003520:	2b14      	cmp	r3, #20
 8003522:	d005      	beq.n	8003530 <rfm95_set_power+0x30>
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <rfm95_set_power+0xd8>)
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <rfm95_set_power+0xdc>)
 8003528:	21c3      	movs	r1, #195	; 0xc3
 800352a:	482d      	ldr	r0, [pc, #180]	; (80035e0 <rfm95_set_power+0xe0>)
 800352c:	f009 fa7e 	bl	800ca2c <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8003530:	2300      	movs	r3, #0
 8003532:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353c:	2b01      	cmp	r3, #1
 800353e:	dd18      	ble.n	8003572 <rfm95_set_power+0x72>
 8003540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003544:	2b11      	cmp	r3, #17
 8003546:	dc14      	bgt.n	8003572 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8003548:	7b3b      	ldrb	r3, [r7, #12]
 800354a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800354e:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003550:	7b3b      	ldrb	r3, [r7, #12]
 8003552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003556:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	3b02      	subs	r3, #2
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	b2da      	uxtb	r2, r3
 8003564:	7b3b      	ldrb	r3, [r7, #12]
 8003566:	f362 0303 	bfi	r3, r2, #0, #4
 800356a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER; //0x14;
 800356c:	2384      	movs	r3, #132	; 0x84
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e011      	b.n	8003596 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8003572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003576:	2b14      	cmp	r3, #20
 8003578:	d10d      	bne.n	8003596 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 800357a:	7b3b      	ldrb	r3, [r7, #12]
 800357c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003580:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003582:	7b3b      	ldrb	r3, [r7, #12]
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 800358a:	7b3b      	ldrb	r3, [r7, #12]
 800358c:	f043 030f 	orr.w	r3, r3, #15
 8003590:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8003592:	2387      	movs	r3, #135	; 0x87
 8003594:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8003596:	7b3b      	ldrb	r3, [r7, #12]
 8003598:	461a      	mov	r2, r3
 800359a:	2109      	movs	r1, #9
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fe12 	bl	80031c6 <write_register>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <rfm95_set_power+0xb2>
 80035ae:	2300      	movs	r3, #0
 80035b0:	e00e      	b.n	80035d0 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	461a      	mov	r2, r3
 80035b6:	214d      	movs	r1, #77	; 0x4d
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe04 	bl	80031c6 <write_register>
 80035be:	4603      	mov	r3, r0
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <rfm95_set_power+0xce>
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <rfm95_set_power+0xd0>

	return true;
 80035ce:	2301      	movs	r3, #1
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	0800da4c 	.word	0x0800da4c
 80035dc:	0800dc7c 	.word	0x0800dc7c
 80035e0:	0800da04 	.word	0x0800da04

080035e4 <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f6:	d005      	beq.n	8003604 <rfm95_init+0x20>
 80035f8:	4b94      	ldr	r3, [pc, #592]	; (800384c <rfm95_init+0x268>)
 80035fa:	4a95      	ldr	r2, [pc, #596]	; (8003850 <rfm95_init+0x26c>)
 80035fc:	21de      	movs	r1, #222	; 0xde
 80035fe:	4895      	ldr	r0, [pc, #596]	; (8003854 <rfm95_init+0x270>)
 8003600:	f009 fa14 	bl	800ca2c <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <rfm95_init+0x36>
 800360e:	4b92      	ldr	r3, [pc, #584]	; (8003858 <rfm95_init+0x274>)
 8003610:	4a8f      	ldr	r2, [pc, #572]	; (8003850 <rfm95_init+0x26c>)
 8003612:	21df      	movs	r1, #223	; 0xdf
 8003614:	488f      	ldr	r0, [pc, #572]	; (8003854 <rfm95_init+0x270>)
 8003616:	f009 fa09 	bl	800ca2c <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <rfm95_init+0x4c>
 8003624:	4b8d      	ldr	r3, [pc, #564]	; (800385c <rfm95_init+0x278>)
 8003626:	4a8a      	ldr	r2, [pc, #552]	; (8003850 <rfm95_init+0x26c>)
 8003628:	21e0      	movs	r1, #224	; 0xe0
 800362a:	488a      	ldr	r0, [pc, #552]	; (8003854 <rfm95_init+0x270>)
 800362c:	f009 f9fe 	bl	800ca2c <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <rfm95_init+0x62>
 800363a:	4b89      	ldr	r3, [pc, #548]	; (8003860 <rfm95_init+0x27c>)
 800363c:	4a84      	ldr	r2, [pc, #528]	; (8003850 <rfm95_init+0x26c>)
 800363e:	21e1      	movs	r1, #225	; 0xe1
 8003640:	4884      	ldr	r0, [pc, #528]	; (8003854 <rfm95_init+0x270>)
 8003642:	f009 f9f3 	bl	800ca2c <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <rfm95_init+0x78>
 8003650:	4b84      	ldr	r3, [pc, #528]	; (8003864 <rfm95_init+0x280>)
 8003652:	4a7f      	ldr	r2, [pc, #508]	; (8003850 <rfm95_init+0x26c>)
 8003654:	21e2      	movs	r1, #226	; 0xe2
 8003656:	487f      	ldr	r0, [pc, #508]	; (8003854 <rfm95_init+0x270>)
 8003658:	f009 f9e8 	bl	800ca2c <__assert_func>
	assert(handle->get_precision_tick != NULL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <rfm95_init+0x8c>
 8003664:	4b80      	ldr	r3, [pc, #512]	; (8003868 <rfm95_init+0x284>)
 8003666:	4a7a      	ldr	r2, [pc, #488]	; (8003850 <rfm95_init+0x26c>)
 8003668:	21e3      	movs	r1, #227	; 0xe3
 800366a:	487a      	ldr	r0, [pc, #488]	; (8003854 <rfm95_init+0x270>)
 800366c:	f009 f9de 	bl	800ca2c <__assert_func>
	assert(handle->random_int != NULL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d105      	bne.n	8003684 <rfm95_init+0xa0>
 8003678:	4b7c      	ldr	r3, [pc, #496]	; (800386c <rfm95_init+0x288>)
 800367a:	4a75      	ldr	r2, [pc, #468]	; (8003850 <rfm95_init+0x26c>)
 800367c:	21e4      	movs	r1, #228	; 0xe4
 800367e:	4875      	ldr	r0, [pc, #468]	; (8003854 <rfm95_init+0x270>)
 8003680:	f009 f9d4 	bl	800ca2c <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	f242 7210 	movw	r2, #10000	; 0x2710
 800368c:	4293      	cmp	r3, r2
 800368e:	d805      	bhi.n	800369c <rfm95_init+0xb8>
 8003690:	4b77      	ldr	r3, [pc, #476]	; (8003870 <rfm95_init+0x28c>)
 8003692:	4a6f      	ldr	r2, [pc, #444]	; (8003850 <rfm95_init+0x26c>)
 8003694:	21e6      	movs	r1, #230	; 0xe6
 8003696:	486f      	ldr	r0, [pc, #444]	; (8003854 <rfm95_init+0x270>)
 8003698:	f009 f9c8 	bl	800ca2c <__assert_func>

	reset(handle);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fe25 	bl	80032ec <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <rfm95_init+0xec>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	3260      	adds	r2, #96	; 0x60
 80036b2:	4610      	mov	r0, r2
 80036b4:	4798      	blx	r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	f083 0301 	eor.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80036c8:	f64a 3267 	movw	r2, #43879	; 0xab67
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d002      	beq.n	80036d6 <rfm95_init+0xf2>
		config_load_default(handle);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fdd9 	bl	8003288 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80036d6:	f107 020f 	add.w	r2, r7, #15
 80036da:	2301      	movs	r3, #1
 80036dc:	2142      	movs	r1, #66	; 0x42
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fd35 	bl	800314e <read_register>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <rfm95_init+0x110>
 80036f0:	2300      	movs	r3, #0
 80036f2:	e0a7      	b.n	8003844 <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b12      	cmp	r3, #18
 80036f8:	d001      	beq.n	80036fe <rfm95_init+0x11a>
 80036fa:	2300      	movs	r3, #0
 80036fc:	e0a2      	b.n	8003844 <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 80036fe:	2200      	movs	r2, #0
 8003700:	2101      	movs	r1, #1
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fd5f 	bl	80031c6 <write_register>
 8003708:	4603      	mov	r3, r0
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <rfm95_init+0x134>
 8003714:	2300      	movs	r3, #0
 8003716:	e095      	b.n	8003844 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	2101      	movs	r1, #1
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fd52 	bl	80031c6 <write_register>
 8003722:	4603      	mov	r3, r0
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <rfm95_init+0x14e>
 800372e:	2300      	movs	r3, #0
 8003730:	e088      	b.n	8003844 <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz RX_DONE
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fd45 	bl	80031c6 <write_register>
 800373c:	4603      	mov	r3, r0
 800373e:	f083 0301 	eor.w	r3, r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <rfm95_init+0x168>
 8003748:	2300      	movs	r3, #0
 800374a:	e07b      	b.n	8003844 <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 800375a:	2111      	movs	r1, #17
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fecf 	bl	8003500 <rfm95_set_power>
 8003762:	4603      	mov	r3, r0
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <rfm95_init+0x18e>
 800376e:	2300      	movs	r3, #0
 8003770:	e068      	b.n	8003844 <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8003772:	2223      	movs	r2, #35	; 0x23
 8003774:	210c      	movs	r1, #12
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fd25 	bl	80031c6 <write_register>
 800377c:	4603      	mov	r3, r0
 800377e:	f083 0301 	eor.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <rfm95_init+0x1a8>
 8003788:	2300      	movs	r3, #0
 800378a:	e05b      	b.n	8003844 <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800378c:	2200      	movs	r2, #0
 800378e:	2120      	movs	r1, #32
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fd18 	bl	80031c6 <write_register>
 8003796:	4603      	mov	r3, r0
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <rfm95_init+0x1c2>
 80037a2:	2300      	movs	r3, #0
 80037a4:	e04e      	b.n	8003844 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 80037a6:	2208      	movs	r2, #8
 80037a8:	2121      	movs	r1, #33	; 0x21
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fd0b 	bl	80031c6 <write_register>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <rfm95_init+0x1dc>
 80037bc:	2300      	movs	r3, #0
 80037be:	e041      	b.n	8003844 <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 80037c0:	2234      	movs	r2, #52	; 0x34
 80037c2:	2139      	movs	r1, #57	; 0x39
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fcfe 	bl	80031c6 <write_register>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <rfm95_init+0x1f6>
 80037d6:	2300      	movs	r3, #0
 80037d8:	e034      	b.n	8003844 <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	210e      	movs	r1, #14
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fcf1 	bl	80031c6 <write_register>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <rfm95_init+0x210>
 80037f0:	2300      	movs	r3, #0
 80037f2:	e027      	b.n	8003844 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80037f4:	2200      	movs	r2, #0
 80037f6:	210f      	movs	r1, #15
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fce4 	bl	80031c6 <write_register>
 80037fe:	4603      	mov	r3, r0
 8003800:	f083 0301 	eor.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <rfm95_init+0x22a>
 800380a:	2300      	movs	r3, #0
 800380c:	e01a      	b.n	8003844 <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	2123      	movs	r1, #35	; 0x23
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff fcd7 	bl	80031c6 <write_register>
 8003818:	4603      	mov	r3, r0
 800381a:	f083 0301 	eor.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <rfm95_init+0x244>
 8003824:	2300      	movs	r3, #0
 8003826:	e00d      	b.n	8003844 <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	2101      	movs	r1, #1
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fcca 	bl	80031c6 <write_register>
 8003832:	4603      	mov	r3, r0
 8003834:	f083 0301 	eor.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <rfm95_init+0x25e>
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <rfm95_init+0x260>

	return true;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0800da78 	.word	0x0800da78
 8003850:	0800dc8c 	.word	0x0800dc8c
 8003854:	0800da04 	.word	0x0800da04
 8003858:	0800daac 	.word	0x0800daac
 800385c:	0800dae8 	.word	0x0800dae8
 8003860:	0800db20 	.word	0x0800db20
 8003864:	0800db5c 	.word	0x0800db5c
 8003868:	0800db94 	.word	0x0800db94
 800386c:	0800dbb8 	.word	0x0800dbb8
 8003870:	0800dbd4 	.word	0x0800dbd4

08003874 <rfm95_goto_sleep>:


bool rfm95_goto_sleep(rfm95_handle_t *handle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	// Put module to sleep
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	2101      	movs	r1, #1
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fca0 	bl	80031c6 <write_register>
 8003886:	4603      	mov	r3, r0
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <rfm95_goto_sleep+0x22>
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <rfm95_goto_sleep+0x24>

	return true;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <process_mac_commands>:


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t answer_index = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while (index < frame_payload_length) {
 80038ba:	bf00      	nop
 80038bc:	e19b      	b.n	8003bf6 <process_mac_commands+0x356>
		switch (frame_payload[index++])
 80038be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	f200 818f 	bhi.w	8003bf6 <process_mac_commands+0x356>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <process_mac_commands+0x40>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003915 	.word	0x08003915
 80038e4:	0800392f 	.word	0x0800392f
 80038e8:	0800394d 	.word	0x0800394d
 80038ec:	0800396b 	.word	0x0800396b
 80038f0:	08003985 	.word	0x08003985
 80038f4:	080039cd 	.word	0x080039cd
 80038f8:	08003a37 	.word	0x08003a37
 80038fc:	08003b59 	.word	0x08003b59
 8003900:	08003bb9 	.word	0x08003bb9
 8003904:	08003bc7 	.word	0x08003bc7
 8003908:	08003bd9 	.word	0x08003bd9
 800390c:	08003be7 	.word	0x08003be7
 8003910:	08003bf5 	.word	0x08003bf5
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8003914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d801      	bhi.n	8003922 <process_mac_commands+0x82>
 800391e:	2300      	movs	r3, #0
 8003920:	e174      	b.n	8003c0c <process_mac_commands+0x36c>

				index += 1;
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003926:	3301      	adds	r3, #1
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800392c:	e163      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 800392e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003932:	3301      	adds	r3, #1
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4293      	cmp	r3, r2
 800393a:	d801      	bhi.n	8003940 <process_mac_commands+0xa0>
 800393c:	2300      	movs	r3, #0
 800393e:	e165      	b.n	8003c0c <process_mac_commands+0x36c>

				index += 2;
 8003940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003944:	3302      	adds	r3, #2
 8003946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800394a:	e154      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003950:	3303      	adds	r3, #3
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4293      	cmp	r3, r2
 8003958:	d801      	bhi.n	800395e <process_mac_commands+0xbe>
 800395a:	2300      	movs	r3, #0
 800395c:	e156      	b.n	8003c0c <process_mac_commands+0x36c>

				index += 4;
 800395e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003962:	3304      	adds	r3, #4
 8003964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003968:	e145      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 800396a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d801      	bhi.n	8003978 <process_mac_commands+0xd8>
 8003974:	2300      	movs	r3, #0
 8003976:	e149      	b.n	8003c0c <process_mac_commands+0x36c>

				index += 1;
 8003978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397c:	3301      	adds	r3, #1
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8003982:	e138      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003988:	3304      	adds	r3, #4
 800398a:	461a      	mov	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4293      	cmp	r3, r2
 8003990:	d801      	bhi.n	8003996 <process_mac_commands+0xf6>
 8003992:	2300      	movs	r3, #0
 8003994:	e13a      	b.n	8003c0c <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800399a:	2b30      	cmp	r3, #48	; 0x30
 800399c:	d901      	bls.n	80039a2 <process_mac_commands+0x102>
 800399e:	2300      	movs	r3, #0
 80039a0:	e134      	b.n	8003c0c <process_mac_commands+0x36c>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 80039a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80039ac:	461a      	mov	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	2205      	movs	r2, #5
 80039b4:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 80039b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80039c0:	461a      	mov	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	4413      	add	r3, r2
 80039c6:	2207      	movs	r2, #7
 80039c8:	701a      	strb	r2, [r3, #0]
				break;
 80039ca:	e114      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 80039cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039d0:	2b2f      	cmp	r3, #47	; 0x2f
 80039d2:	d901      	bls.n	80039d8 <process_mac_commands+0x138>
 80039d4:	2300      	movs	r3, #0
 80039d6:	e119      	b.n	8003c0c <process_mac_commands+0x36c>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 80039d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <process_mac_commands+0x154>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	4798      	blx	r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	e000      	b.n	80039f6 <process_mac_commands+0x156>
 80039f4:	23ff      	movs	r3, #255	; 0xff
 80039f6:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 80039f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003a02:	461a      	mov	r2, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4413      	add	r3, r2
 8003a08:	2206      	movs	r2, #6
 8003a0a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8003a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003a16:	461a      	mov	r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	7dfa      	ldrb	r2, [r7, #23]
 8003a1e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8003a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	7e3a      	ldrb	r2, [r7, #24]
 8003a32:	701a      	strb	r2, [r3, #0]
				break;
 8003a34:	e0df      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d801      	bhi.n	8003a48 <process_mac_commands+0x1a8>
 8003a44:	2300      	movs	r3, #0
 8003a46:	e0e1      	b.n	8003c0c <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003a48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a4c:	2b30      	cmp	r3, #48	; 0x30
 8003a4e:	d901      	bls.n	8003a54 <process_mac_commands+0x1b4>
 8003a50:	2300      	movs	r3, #0
 8003a52:	e0db      	b.n	8003c0c <process_mac_commands+0x36c>

				uint8_t channel_index = frame_payload[index++];
 8003a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 8003a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4413      	add	r3, r2
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint8_t frequency_msb = frame_payload[index++];
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 8003a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4413      	add	r3, r2
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8003ac2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	431a      	orrs	r2, r3
 8003ace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	2264      	movs	r2, #100	; 0x64
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 8003ade:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8003ae8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 8003af0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d906      	bls.n	8003b06 <process_mac_commands+0x266>
					config_set_channel(handle, channel_index, frequency);
 8003af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fb91 	bl	8003228 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8003b06:	7efb      	ldrb	r3, [r7, #27]
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d902      	bls.n	8003b12 <process_mac_commands+0x272>
 8003b0c:	7ebb      	ldrb	r3, [r7, #26]
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d901      	bls.n	8003b16 <process_mac_commands+0x276>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <process_mac_commands+0x278>
 8003b16:	2300      	movs	r3, #0
 8003b18:	767b      	strb	r3, [r7, #25]
 8003b1a:	7e7b      	ldrb	r3, [r7, #25]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 8003b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	2207      	movs	r2, #7
 8003b34:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8003b36:	7e7b      	ldrb	r3, [r7, #25]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	440b      	add	r3, r1
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
				break;
 8003b56:	e04e      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d801      	bhi.n	8003b66 <process_mac_commands+0x2c6>
 8003b62:	2300      	movs	r3, #0
 8003b64:	e052      	b.n	8003c0c <process_mac_commands+0x36c>
				if ((answer_index + 2) >= 51) return false;
 8003b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b6a:	2b30      	cmp	r3, #48	; 0x30
 8003b6c:	d901      	bls.n	8003b72 <process_mac_commands+0x2d2>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e04c      	b.n	8003c0c <process_mac_commands+0x36c>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8003b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <process_mac_commands+0x302>
					handle->config.rx1_delay = 1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8003ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8003bac:	461a      	mov	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	701a      	strb	r2, [r3, #0]
				break;
 8003bb6:	e01e      	b.n	8003bf6 <process_mac_commands+0x356>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d819      	bhi.n	8003bf6 <process_mac_commands+0x356>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e022      	b.n	8003c0c <process_mac_commands+0x36c>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bca:	3304      	adds	r3, #4
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d810      	bhi.n	8003bf6 <process_mac_commands+0x356>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e019      	b.n	8003c0c <process_mac_commands+0x36c>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d809      	bhi.n	8003bf6 <process_mac_commands+0x356>
 8003be2:	2300      	movs	r3, #0
 8003be4:	e012      	b.n	8003c0c <process_mac_commands+0x36c>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d802      	bhi.n	8003bf6 <process_mac_commands+0x356>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e00b      	b.n	8003c0c <process_mac_commands+0x36c>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8003bf4:	bf00      	nop
	while (index < frame_payload_length) {
 8003bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	f63f ae5e 	bhi.w	80038be <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c08:	701a      	strb	r2, [r3, #0]
	return true;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3728      	adds	r7, #40	; 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c26:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <receive_at_scheduled_time+0xc0>)
 8003c28:	fba1 1202 	umull	r1, r2, r1, r2
 8003c2c:	0992      	lsrs	r2, r2, #6
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	1a8a      	subs	r2, r1, r2
 8003c32:	4610      	mov	r0, r2
 8003c34:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8003c36:	2200      	movs	r2, #0
 8003c38:	2140      	movs	r1, #64	; 0x40
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fac3 	bl	80031c6 <write_register>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <receive_at_scheduled_time+0x3c>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e03c      	b.n	8003cca <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	2112      	movs	r1, #18
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fab6 	bl	80031c6 <write_register>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f083 0301 	eor.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <receive_at_scheduled_time+0x56>
 8003c66:	2300      	movs	r3, #0
 8003c68:	e02f      	b.n	8003cca <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8003c82:	2281      	movs	r2, #129	; 0x81
 8003c84:	2101      	movs	r1, #1
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fa9d 	bl	80031c6 <write_register>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <receive_at_scheduled_time+0x88>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e016      	b.n	8003cca <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003c9c:	22c8      	movs	r2, #200	; 0xc8
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fbc7 	bl	8003434 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8003cae:	2286      	movs	r2, #134	; 0x86
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fa87 	bl	80031c6 <write_register>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f083 0301 	eor.w	r3, r3, #1
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <receive_at_scheduled_time+0xb4>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <receive_at_scheduled_time+0xb6>

	return true;
 8003cc8:	2301      	movs	r3, #1
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	10624dd3 	.word	0x10624dd3

08003cd8 <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	2202      	movs	r2, #2
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <calculate_rx_timings+0xc4>)
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	0fd9      	lsrs	r1, r3, #31
 8003d26:	440b      	add	r3, r1
 8003d28:	105b      	asrs	r3, r3, #1
 8003d2a:	425b      	negs	r3, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	17da      	asrs	r2, r3, #31
 8003d34:	469a      	mov	sl, r3
 8003d36:	4693      	mov	fp, r2
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4698      	mov	r8, r3
 8003d40:	4691      	mov	r9, r2
 8003d42:	fb08 f20b 	mul.w	r2, r8, fp
 8003d46:	fb0a f309 	mul.w	r3, sl, r9
 8003d4a:	4413      	add	r3, r2
 8003d4c:	fbaa 4508 	umull	r4, r5, sl, r8
 8003d50:	442b      	add	r3, r5
 8003d52:	461d      	mov	r5, r3
 8003d54:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <calculate_rx_timings+0xc4>)
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f7fd f841 	bl	8000de4 <__aeabi_ldivmod>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4613      	mov	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8003d74:	fb03 f202 	mul.w	r2, r3, r2
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	441a      	add	r2, r3
 8003d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d82:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3728      	adds	r7, #40	; 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9c:	000f4240 	.word	0x000f4240

08003da0 <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8003db4:	f107 0320 	add.w	r3, r7, #32
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	49ab      	ldr	r1, [pc, #684]	; (8004074 <receive_package+0x2d4>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff ff86 	bl	8003cd8 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d306      	bcc.n	8003de2 <receive_package+0x42>
 8003dd4:	4ba8      	ldr	r3, [pc, #672]	; (8004078 <receive_package+0x2d8>)
 8003dd6:	4aa9      	ldr	r2, [pc, #676]	; (800407c <receive_package+0x2dc>)
 8003dd8:	f240 11df 	movw	r1, #479	; 0x1df
 8003ddc:	48a8      	ldr	r0, [pc, #672]	; (8004080 <receive_package+0x2e0>)
 8003dde:	f008 fe25 	bl	800ca2c <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8003de2:	2272      	movs	r2, #114	; 0x72
 8003de4:	211d      	movs	r1, #29
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff f9ed 	bl	80031c6 <write_register>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <receive_package+0x5c>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e136      	b.n	800406a <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	211e      	movs	r1, #30
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff f9d7 	bl	80031c6 <write_register>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f083 0301 	eor.w	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <receive_package+0x88>
 8003e24:	2300      	movs	r3, #0
 8003e26:	e120      	b.n	800406a <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003e28:	2204      	movs	r2, #4
 8003e2a:	2126      	movs	r1, #38	; 0x26
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff f9ca 	bl	80031c6 <write_register>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <receive_package+0xa2>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e113      	b.n	800406a <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	211f      	movs	r1, #31
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff f9bb 	bl	80031c6 <write_register>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f083 0301 	eor.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <receive_package+0xc0>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e104      	b.n	800406a <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8003e60:	2267      	movs	r2, #103	; 0x67
 8003e62:	2133      	movs	r1, #51	; 0x33
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff f9ae 	bl	80031c6 <write_register>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <receive_package+0xda>
 8003e76:	2300      	movs	r3, #0
 8003e78:	e0f7      	b.n	800406a <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8003e7a:	2219      	movs	r2, #25
 8003e7c:	213b      	movs	r1, #59	; 0x3b
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff f9a1 	bl	80031c6 <write_register>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f083 0301 	eor.w	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <receive_package+0xf4>
 8003e90:	2300      	movs	r3, #0
 8003e92:	e0ea      	b.n	800406a <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff febb 	bl	8003c14 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff faf8 	bl	8003494 <wait_for_rx_irqs>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d07a      	beq.n	8003fa6 <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff f986 	bl	80031c6 <write_register>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <receive_package+0x12a>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e0cf      	b.n	800406a <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d166      	bne.n	8003fa2 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	f107 0318 	add.w	r3, r7, #24
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	4963      	ldr	r1, [pc, #396]	; (8004074 <receive_package+0x2d4>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff fef6 	bl	8003cd8 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8003eec:	4965      	ldr	r1, [pc, #404]	; (8004084 <receive_package+0x2e4>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fa1a 	bl	8003328 <configure_frequency>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <receive_package+0x164>
 8003f00:	2300      	movs	r3, #0
 8003f02:	e0b2      	b.n	800406a <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8003f04:	22c2      	movs	r2, #194	; 0xc2
 8003f06:	211d      	movs	r1, #29
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff f95c 	bl	80031c6 <write_register>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <receive_package+0x17e>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e0a5      	b.n	800406a <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	211e      	movs	r1, #30
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff f946 	bl	80031c6 <write_register>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f083 0301 	eor.w	r3, r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <receive_package+0x1aa>
 8003f46:	2300      	movs	r3, #0
 8003f48:	e08f      	b.n	800406a <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	2126      	movs	r1, #38	; 0x26
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff f939 	bl	80031c6 <write_register>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f083 0301 	eor.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <receive_package+0x1c4>
 8003f60:	2300      	movs	r3, #0
 8003f62:	e082      	b.n	800406a <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	211f      	movs	r1, #31
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff f92a 	bl	80031c6 <write_register>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <receive_package+0x1e2>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e073      	b.n	800406a <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4619      	mov	r1, r3
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fe44 	bl	8003c14 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff fa81 	bl	8003494 <wait_for_rx_irqs>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f083 0301 	eor.w	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e063      	b.n	800406a <receive_package+0x2ca>
			}
		}

		return true;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e061      	b.n	800406a <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8003fa6:	f107 021f 	add.w	r2, r7, #31
 8003faa:	2301      	movs	r3, #1
 8003fac:	2112      	movs	r1, #18
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff f8cd 	bl	800314e <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <receive_package+0x222>
		return true;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e053      	b.n	800406a <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8003fc2:	f107 021e 	add.w	r2, r7, #30
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2119      	movs	r1, #25
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff f8bf 	bl	800314e <read_register>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f083 0301 	eor.w	r3, r3, #1
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <receive_package+0x240>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e044      	b.n	800406a <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8003fe0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da00      	bge.n	8003fea <receive_package+0x24a>
 8003fe8:	3303      	adds	r3, #3
 8003fea:	109b      	asrs	r3, r3, #2
 8003fec:	b25a      	sxtb	r2, r3
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8003ff2:	f107 021d 	add.w	r2, r7, #29
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2113      	movs	r1, #19
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff f8a7 	bl	800314e <read_register>
 8004000:	4603      	mov	r3, r0
 8004002:	f083 0301 	eor.w	r3, r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <receive_package+0x270>
 800400c:	2300      	movs	r3, #0
 800400e:	e02c      	b.n	800406a <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8004010:	2200      	movs	r2, #0
 8004012:	210d      	movs	r1, #13
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff f8d6 	bl	80031c6 <write_register>
 800401a:	4603      	mov	r3, r0
 800401c:	f083 0301 	eor.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <receive_package+0x28a>
 8004026:	2300      	movs	r3, #0
 8004028:	e01f      	b.n	800406a <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 800402a:	7f7b      	ldrb	r3, [r7, #29]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	2100      	movs	r1, #0
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff f88c 	bl	800314e <read_register>
 8004036:	4603      	mov	r3, r0
 8004038:	f083 0301 	eor.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <receive_package+0x2a6>
 8004042:	2300      	movs	r3, #0
 8004044:	e011      	b.n	800406a <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	2101      	movs	r1, #1
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff f8bb 	bl	80031c6 <write_register>
 8004050:	4603      	mov	r3, r0
 8004052:	f083 0301 	eor.w	r3, r3, #1
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <receive_package+0x2c0>
 800405c:	2300      	movs	r3, #0
 800405e:	e004      	b.n	800406a <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8004060:	7f7b      	ldrb	r3, [r7, #29]
 8004062:	461a      	mov	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	601a      	str	r2, [r3, #0]
	return true;
 8004068:	2301      	movs	r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	3728      	adds	r7, #40	; 0x28
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	0001e848 	.word	0x0001e848
 8004078:	0800dc00 	.word	0x0800dc00
 800407c:	0800dc98 	.word	0x0800dc98
 8004080:	0800da04 	.word	0x0800da04
 8004084:	33d3e608 	.word	0x33d3e608

08004088 <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f7ff f9a0 	bl	80033e0 <configure_channel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f083 0301 	eor.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <send_package+0x28>
 80040ac:	2300      	movs	r3, #0
 80040ae:	e0d9      	b.n	8004264 <send_package+0x1dc>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80040b0:	2272      	movs	r2, #114	; 0x72
 80040b2:	211d      	movs	r1, #29
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff f886 	bl	80031c6 <write_register>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <send_package+0x42>
 80040c6:	2300      	movs	r3, #0
 80040c8:	e0cc      	b.n	8004264 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 80040ca:	2274      	movs	r2, #116	; 0x74
 80040cc:	211e      	movs	r1, #30
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff f879 	bl	80031c6 <write_register>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f083 0301 	eor.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <send_package+0x5c>
 80040e0:	2300      	movs	r3, #0
 80040e2:	e0bf      	b.n	8004264 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80040e4:	2204      	movs	r2, #4
 80040e6:	2126      	movs	r1, #38	; 0x26
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff f86c 	bl	80031c6 <write_register>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <send_package+0x76>
 80040fa:	2300      	movs	r3, #0
 80040fc:	e0b2      	b.n	8004264 <send_package+0x1dc>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 80040fe:	2227      	movs	r2, #39	; 0x27
 8004100:	2133      	movs	r1, #51	; 0x33
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff f85f 	bl	80031c6 <write_register>
 8004108:	4603      	mov	r3, r0
 800410a:	f083 0301 	eor.w	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <send_package+0x90>
 8004114:	2300      	movs	r3, #0
 8004116:	e0a5      	b.n	8004264 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8004118:	221d      	movs	r2, #29
 800411a:	213b      	movs	r1, #59	; 0x3b
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff f852 	bl	80031c6 <write_register>
 8004122:	4603      	mov	r3, r0
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <send_package+0xaa>
 800412e:	2300      	movs	r3, #0
 8004130:	e098      	b.n	8004264 <send_package+0x1dc>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	2122      	movs	r1, #34	; 0x22
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff f843 	bl	80031c6 <write_register>
 8004140:	4603      	mov	r3, r0
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <send_package+0xc8>
 800414c:	2300      	movs	r3, #0
 800414e:	e089      	b.n	8004264 <send_package+0x1dc>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8004150:	2240      	movs	r2, #64	; 0x40
 8004152:	2140      	movs	r1, #64	; 0x40
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff f836 	bl	80031c6 <write_register>
 800415a:	4603      	mov	r3, r0
 800415c:	f083 0301 	eor.w	r3, r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <send_package+0xe2>
 8004166:	2300      	movs	r3, #0
 8004168:	e07c      	b.n	8004264 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	2112      	movs	r1, #18
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff f829 	bl	80031c6 <write_register>
 8004174:	4603      	mov	r3, r0
 8004176:	f083 0301 	eor.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <send_package+0xfc>
 8004180:	2300      	movs	r3, #0
 8004182:	e06f      	b.n	8004264 <send_package+0x1dc>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8004194:	2281      	movs	r2, #129	; 0x81
 8004196:	2101      	movs	r1, #1
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff f814 	bl	80031c6 <write_register>
 800419e:	4603      	mov	r3, r0
 80041a0:	f083 0301 	eor.w	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <send_package+0x126>
 80041aa:	2300      	movs	r3, #0
 80041ac:	e05a      	b.n	8004264 <send_package+0x1dc>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80041ae:	22c8      	movs	r2, #200	; 0xc8
 80041b0:	2102      	movs	r1, #2
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff f93e 	bl	8003434 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	210d      	movs	r1, #13
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff f802 	bl	80031c6 <write_register>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <send_package+0x14a>
 80041ce:	2300      	movs	r3, #0
 80041d0:	e048      	b.n	8004264 <send_package+0x1dc>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e00b      	b.n	80041f0 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	4413      	add	r3, r2
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	2100      	movs	r1, #0
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7fe ffee 	bl	80031c6 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3301      	adds	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3ef      	bcc.n	80041d8 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 80041f8:	2283      	movs	r2, #131	; 0x83
 80041fa:	2101      	movs	r1, #1
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7fe ffe2 	bl	80031c6 <write_register>
 8004202:	4603      	mov	r3, r0
 8004204:	f083 0301 	eor.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <send_package+0x18a>
 800420e:	2300      	movs	r3, #0
 8004210:	e028      	b.n	8004264 <send_package+0x1dc>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8004212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004216:	2100      	movs	r1, #0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff f90b 	bl	8003434 <wait_for_irq>
 800421e:	4603      	mov	r3, r0
 8004220:	f083 0301 	eor.w	r3, r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <send_package+0x1a6>
 800422a:	2300      	movs	r3, #0
 800422c:	e01a      	b.n	8004264 <send_package+0x1dc>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	2101      	movs	r1, #1
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7fe ffc2 	bl	80031c6 <write_register>
 8004242:	4603      	mov	r3, r0
 8004244:	f083 0301 	eor.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <send_package+0x1ca>
 800424e:	2300      	movs	r3, #0
 8004250:	e008      	b.n	8004264 <send_package+0x1dc>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004258:	3301      	adds	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 8004262:	2301      	movs	r3, #1
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b08d      	sub	sp, #52	; 0x34
 8004270:	af04      	add	r7, sp, #16
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	330d      	adds	r3, #13
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d906      	bls.n	8004294 <encode_phy_payload+0x28>
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <encode_phy_payload+0x160>)
 8004288:	4a51      	ldr	r2, [pc, #324]	; (80043d0 <encode_phy_payload+0x164>)
 800428a:	f240 216a 	movw	r1, #618	; 0x26a
 800428e:	4851      	ldr	r0, [pc, #324]	; (80043d4 <encode_phy_payload+0x168>)
 8004290:	f008 fbcc 	bl	800ca2c <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	3301      	adds	r3, #1
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	7d52      	ldrb	r2, [r2, #21]
 80042a2:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3302      	adds	r3, #2
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	7d12      	ldrb	r2, [r2, #20]
 80042ac:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3303      	adds	r3, #3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	7cd2      	ldrb	r2, [r2, #19]
 80042b6:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	3304      	adds	r3, #4
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	7c92      	ldrb	r2, [r2, #18]
 80042c0:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3305      	adds	r3, #5
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3306      	adds	r3, #6
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3307      	adds	r3, #7
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	3308      	adds	r3, #8
 80042ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80042f2:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	3309      	adds	r3, #9
 80042f8:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	4413      	add	r3, r2
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	f008 fd52 	bl	800cdae <memcpy>
	if (port == 0) {
 800430a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d113      	bne.n	800433a <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	18d0      	adds	r0, r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2d9      	uxtb	r1, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004322:	461c      	mov	r4, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3316      	adds	r3, #22
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	3212      	adds	r2, #18
 800432c:	9201      	str	r2, [sp, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	4622      	mov	r2, r4
 8004334:	f008 f89b 	bl	800c46e <Encrypt_Payload>
 8004338:	e012      	b.n	8004360 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	18d0      	adds	r0, r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	b2d9      	uxtb	r1, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800434a:	461c      	mov	r4, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3326      	adds	r3, #38	; 0x26
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	3212      	adds	r2, #18
 8004354:	9201      	str	r2, [sp, #4]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	4622      	mov	r2, r4
 800435c:	f008 f887 	bl	800c46e <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	b2d8      	uxtb	r0, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004372:	461c      	mov	r4, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3316      	adds	r3, #22
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	3212      	adds	r2, #18
 800437c:	f107 0114 	add.w	r1, r7, #20
 8004380:	9202      	str	r2, [sp, #8]
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4623      	mov	r3, r4
 800438a:	4602      	mov	r2, r0
 800438c:	68b8      	ldr	r0, [r7, #8]
 800438e:	f008 f923 	bl	800c5d8 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8004392:	2300      	movs	r3, #0
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e00d      	b.n	80043b4 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8004398:	7ffa      	ldrb	r2, [r7, #31]
 800439a:	7ff9      	ldrb	r1, [r7, #31]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	440b      	add	r3, r1
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	440b      	add	r3, r1
 80043a4:	3220      	adds	r2, #32
 80043a6:	443a      	add	r2, r7
 80043a8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80043ac:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80043ae:	7ffb      	ldrb	r3, [r7, #31]
 80043b0:	3301      	adds	r3, #1
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	7ffb      	ldrb	r3, [r7, #31]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d9ee      	bls.n	8004398 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3304      	adds	r3, #4
 80043be:	61bb      	str	r3, [r7, #24]

	return payload_len;
 80043c0:	69bb      	ldr	r3, [r7, #24]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd90      	pop	{r4, r7, pc}
 80043ca:	bf00      	nop
 80043cc:	0800dc1c 	.word	0x0800dc1c
 80043d0:	0800dca8 	.word	0x0800dca8
 80043d4:	0800da04 	.word	0x0800da04

080043d8 <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b08d      	sub	sp, #52	; 0x34
 80043dc:	af04      	add	r7, sp, #16
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b60      	cmp	r3, #96	; 0x60
 80043ee:	d001      	beq.n	80043f4 <decode_phy_payload+0x1c>
		return false;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e0aa      	b.n	800454a <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3301      	adds	r3, #1
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	7d5b      	ldrb	r3, [r3, #21]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d114      	bne.n	800442c <decode_phy_payload+0x54>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3302      	adds	r3, #2
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	7d1b      	ldrb	r3, [r3, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d10d      	bne.n	800442c <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	3303      	adds	r3, #3
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d106      	bne.n	800442c <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3304      	adds	r3, #4
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	7c9b      	ldrb	r3, [r3, #18]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <decode_phy_payload+0x58>
		return false;
 800442c:	2300      	movs	r3, #0
 800442e:	e08c      	b.n	800454a <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	795b      	ldrb	r3, [r3, #5]
 8004434:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3307      	adds	r3, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	b21a      	sxth	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3306      	adds	r3, #6
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b21b      	sxth	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b21b      	sxth	r3, r3
 8004454:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800445c:	8bba      	ldrh	r2, [r7, #28]
 800445e:	429a      	cmp	r2, r3
 8004460:	d201      	bcs.n	8004466 <decode_phy_payload+0x8e>
		return false;
 8004462:	2300      	movs	r3, #0
 8004464:	e071      	b.n	800454a <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8bba      	ldrh	r2, [r7, #28]
 800446a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	3b04      	subs	r3, #4
 8004472:	b2d8      	uxtb	r0, r3
 8004474:	8bbc      	ldrh	r4, [r7, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3316      	adds	r3, #22
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	3212      	adds	r2, #18
 800447e:	f107 0114 	add.w	r1, r7, #20
 8004482:	9202      	str	r2, [sp, #8]
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	2301      	movs	r3, #1
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4623      	mov	r3, r4
 800448c:	4602      	mov	r2, r0
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f008 f8a2 	bl	800c5d8 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	3b04      	subs	r3, #4
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	2204      	movs	r2, #4
 80044a2:	4618      	mov	r0, r3
 80044a4:	f008 fbf7 	bl	800cc96 <memcmp>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <decode_phy_payload+0xda>
		return false;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e04b      	b.n	800454a <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f1a3 020c 	sub.w	r2, r3, #12
 80044b8:	7fbb      	ldrb	r3, [r7, #30]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10b      	bne.n	80044d6 <decode_phy_payload+0xfe>
		*frame_port = 0;
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f103 0208 	add.w	r2, r3, #8
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	7fba      	ldrb	r2, [r7, #30]
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e038      	b.n	8004548 <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	7a1a      	ldrb	r2, [r3, #8]
 80044da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044dc:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 80044de:	7fbb      	ldrb	r3, [r7, #30]
 80044e0:	3309      	adds	r3, #9
 80044e2:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	3b04      	subs	r3, #4
 80044e8:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 80044ea:	7eba      	ldrb	r2, [r7, #26]
 80044ec:	7efb      	ldrb	r3, [r7, #27]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10f      	bne.n	800451a <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 80044fa:	7efb      	ldrb	r3, [r7, #27]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	18d0      	adds	r0, r2, r3
 8004500:	8bbc      	ldrh	r4, [r7, #28]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3316      	adds	r3, #22
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	3212      	adds	r2, #18
 800450a:	7e79      	ldrb	r1, [r7, #25]
 800450c:	9201      	str	r2, [sp, #4]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	f007 ffab 	bl	800c46e <Encrypt_Payload>
 8004518:	e00e      	b.n	8004538 <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 800451a:	7efb      	ldrb	r3, [r7, #27]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	18d0      	adds	r0, r2, r3
 8004520:	8bbc      	ldrh	r4, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3326      	adds	r3, #38	; 0x26
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	3212      	adds	r2, #18
 800452a:	7e79      	ldrb	r1, [r7, #25]
 800452c:	9201      	str	r2, [sp, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	2301      	movs	r3, #1
 8004532:	4622      	mov	r2, r4
 8004534:	f007 ff9b 	bl	800c46e <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8004538:	7efb      	ldrb	r3, [r7, #27]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	441a      	add	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	7e7a      	ldrb	r2, [r7, #25]
 8004546:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8004548:	2301      	movs	r3, #1
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd90      	pop	{r4, r7, pc}

08004552 <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 800455e:	2300      	movs	r3, #0
 8004560:	73bb      	strb	r3, [r7, #14]
 8004562:	e010      	b.n	8004586 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800456a:	461a      	mov	r2, r3
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	fa42 f303 	asr.w	r3, r2, r3
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <select_random_channel+0x2e>
			channel_count++;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	3301      	adds	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	3301      	adds	r3, #1
 8004584:	73bb      	strb	r3, [r7, #14]
 8004586:	7bbb      	ldrb	r3, [r7, #14]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d9eb      	bls.n	8004564 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	4610      	mov	r0, r2
 8004594:	4798      	blx	r3
 8004596:	4603      	mov	r3, r0
 8004598:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 800459a:	2300      	movs	r3, #0
 800459c:	733b      	strb	r3, [r7, #12]
 800459e:	e015      	b.n	80045cc <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80045a6:	461a      	mov	r2, r3
 80045a8:	7b3b      	ldrb	r3, [r7, #12]
 80045aa:	fa42 f303 	asr.w	r3, r2, r3
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <select_random_channel+0x74>
			if (random_channel == 0) {
 80045b6:	7b7b      	ldrb	r3, [r7, #13]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <select_random_channel+0x6e>
				return i;
 80045bc:	7b3b      	ldrb	r3, [r7, #12]
 80045be:	e009      	b.n	80045d4 <select_random_channel+0x82>
			} else {
				random_channel--;
 80045c0:	7b7b      	ldrb	r3, [r7, #13]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 80045c6:	7b3b      	ldrb	r3, [r7, #12]
 80045c8:	3301      	adds	r3, #1
 80045ca:	733b      	strb	r3, [r7, #12]
 80045cc:	7b3b      	ldrb	r3, [r7, #12]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	d9e6      	bls.n	80045a0 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0aa      	sub	sp, #168	; 0xa8
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 80045e8:	2300      	movs	r3, #0
 80045ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045f0:	223c      	movs	r2, #60	; 0x3c
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f008 fb5e 	bl	800ccb6 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 80045fa:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80045fe:	2301      	movs	r3, #1
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff fe30 	bl	800426c <encode_phy_payload>
 800460c:	4603      	mov	r3, r0
 800460e:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff ff9e 	bl	8004552 <select_random_channel>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks))
 800461c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800461e:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8004622:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4603      	mov	r3, r0
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fd2a 	bl	8004088 <send_package>
 8004634:	4603      	mov	r3, r0
 8004636:	f083 0301 	eor.w	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d006      	beq.n	800464e <rfm95_send_receive_cycle+0x72>
	{
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	2101      	movs	r1, #1
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7fe fdbe 	bl	80031c6 <write_register>
		return false;
 800464a:	2300      	movs	r3, #0
 800464c:	e0af      	b.n	80047ae <rfm95_send_receive_cycle+0x1d2>
	}


	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 800464e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f008 fb2d 	bl	800ccb6 <memset>
	phy_payload_len = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8096 	beq.w	8004798 <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 800466c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800466e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004672:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004676:	f107 0353 	add.w	r3, r7, #83	; 0x53
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4603      	mov	r3, r0
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fb8e 	bl	8003da0 <receive_package>
 8004684:	4603      	mov	r3, r0
 8004686:	f083 0301 	eor.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d010      	beq.n	80046b2 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	2101      	movs	r1, #1
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fe fd96 	bl	80031c6 <write_register>
			if (handle->save_config) {
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	3260      	adds	r2, #96	; 0x60
 80046aa:	4610      	mov	r0, r2
 80046ac:	4798      	blx	r3
			}
			return false;
 80046ae:	2300      	movs	r3, #0
 80046b0:	e07d      	b.n	80047ae <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 80046b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d06f      	beq.n	8004798 <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80046c6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80046ca:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4603      	mov	r3, r0
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fe7d 	bl	80043d8 <decode_phy_payload>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d059      	beq.n	8004798 <rfm95_send_receive_cycle+0x1bc>

				// Process Mac Commands
				if (frame_port == 0) {
 80046e4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d155      	bne.n	8004798 <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	f107 0318 	add.w	r3, r7, #24
 80046f4:	222f      	movs	r2, #47	; 0x2f
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f008 fadc 	bl	800ccb6 <memset>
					uint8_t mac_response_len = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 8004704:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004706:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800470a:	4618      	mov	r0, r3
 800470c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004710:	f107 0214 	add.w	r2, r7, #20
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	f107 0349 	add.w	r3, r7, #73	; 0x49
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	4602      	mov	r2, r0
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f7ff f8bd 	bl	80038a0 <process_mac_commands>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d035      	beq.n	8004798 <rfm95_send_receive_cycle+0x1bc>
 800472c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004730:	2b00      	cmp	r3, #0
 8004732:	d031      	beq.n	8004798 <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 8004734:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004738:	4618      	mov	r0, r3
 800473a:	f107 0214 	add.w	r2, r7, #20
 800473e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4603      	mov	r3, r0
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fd8f 	bl	800426c <encode_phy_payload>
 800474e:	4603      	mov	r3, r0
 8004750:	65bb      	str	r3, [r7, #88]	; 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8004752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004754:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8004758:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800475c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4603      	mov	r3, r0
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fc8f 	bl	8004088 <send_package>
 800476a:	4603      	mov	r3, r0
 800476c:	f083 0301 	eor.w	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <rfm95_send_receive_cycle+0x1bc>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	2101      	movs	r1, #1
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7fe fd23 	bl	80031c6 <write_register>
							if (handle->save_config) {
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	3260      	adds	r2, #96	; 0x60
 8004790:	4610      	mov	r0, r2
 8004792:	4798      	blx	r3
							}
							return false;
 8004794:	2300      	movs	r3, #0
			return false;
 8004796:	e00a      	b.n	80047ae <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	3260      	adds	r2, #96	; 0x60
 80047a8:	4610      	mov	r0, r2
 80047aa:	4798      	blx	r3
	}

	return true;
 80047ac:	2301      	movs	r3, #1
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	37a0      	adds	r7, #160	; 0xa0
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 80047b6:	b590      	push	{r4, r7, lr}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	78fc      	ldrb	r4, [r7, #3]
 80047c8:	4798      	blx	r3
 80047ca:	4601      	mov	r1, r0
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	6059      	str	r1, [r3, #4]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd90      	pop	{r4, r7, pc}

080047e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_MspInit+0x5c>)
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_MspInit+0x5c>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	6193      	str	r3, [r2, #24]
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_MspInit+0x5c>)
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_MspInit+0x5c>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4a0e      	ldr	r2, [pc, #56]	; (800483c <HAL_MspInit+0x5c>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004808:	61d3      	str	r3, [r2, #28]
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <HAL_MspInit+0x5c>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <HAL_MspInit+0x60>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <HAL_MspInit+0x60>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr
 800483c:	40021000 	.word	0x40021000
 8004840:	40010000 	.word	0x40010000

08004844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_ADC_MspInit+0x7c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d129      	bne.n	80048b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004864:	4b17      	ldr	r3, [pc, #92]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 800486a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800486e:	6193      	str	r3, [r2, #24]
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	6193      	str	r3, [r2, #24]
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <HAL_ADC_MspInit+0x80>)
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004894:	2306      	movs	r3, #6
 8004896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004898:	2303      	movs	r3, #3
 800489a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	4619      	mov	r1, r3
 80048a2:	4809      	ldr	r0, [pc, #36]	; (80048c8 <HAL_ADC_MspInit+0x84>)
 80048a4:	f001 fd86 	bl	80063b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80048a8:	2200      	movs	r2, #0
 80048aa:	2102      	movs	r1, #2
 80048ac:	2012      	movs	r0, #18
 80048ae:	f001 faac 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80048b2:	2012      	movs	r0, #18
 80048b4:	f001 fac5 	bl	8005e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048b8:	bf00      	nop
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40012400 	.word	0x40012400
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40010800 	.word	0x40010800

080048cc <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <HAL_ADC_MspDeInit+0x34>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_ADC_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <HAL_ADC_MspDeInit+0x38>)
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	4a08      	ldr	r2, [pc, #32]	; (8004904 <HAL_ADC_MspDeInit+0x38>)
 80048e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e8:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    HAL_GPIO_DeInit(GPIOA, AN_BAT_Pin|AN_E_HUM_Pin);
 80048ea:	2106      	movs	r1, #6
 80048ec:	4806      	ldr	r0, [pc, #24]	; (8004908 <HAL_ADC_MspDeInit+0x3c>)
 80048ee:	f001 fee5 	bl	80066bc <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
 80048f2:	2012      	movs	r0, #18
 80048f4:	f001 fab3 	bl	8005e5e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40012400 	.word	0x40012400
 8004904:	40021000 	.word	0x40021000
 8004908:	40010800 	.word	0x40010800

0800490c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	f107 0318 	add.w	r3, r7, #24
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <HAL_I2C_MspInit+0xd8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d12c      	bne.n	8004986 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492c:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 8004932:	f043 0308 	orr.w	r3, r3, #8
 8004936:	6193      	str	r3, [r2, #24]
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004944:	23c0      	movs	r3, #192	; 0xc0
 8004946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004948:	2312      	movs	r3, #18
 800494a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800494c:	2303      	movs	r3, #3
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004950:	f107 0318 	add.w	r3, r7, #24
 8004954:	4619      	mov	r1, r3
 8004956:	4825      	ldr	r0, [pc, #148]	; (80049ec <HAL_I2C_MspInit+0xe0>)
 8004958:	f001 fd2c 	bl	80063b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800495c:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 8004962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004966:	61d3      	str	r3, [r2, #28]
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	201f      	movs	r0, #31
 800497a:	f001 fa46 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800497e:	201f      	movs	r0, #31
 8004980:	f001 fa5f 	bl	8005e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004984:	e029      	b.n	80049da <HAL_I2C_MspInit+0xce>
  else if(hi2c->Instance==I2C2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d124      	bne.n	80049da <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 8004996:	f043 0308 	orr.w	r3, r3, #8
 800499a:	6193      	str	r3, [r2, #24]
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ae:	2312      	movs	r3, #18
 80049b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b2:	2303      	movs	r3, #3
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b6:	f107 0318 	add.w	r3, r7, #24
 80049ba:	4619      	mov	r1, r3
 80049bc:	480b      	ldr	r0, [pc, #44]	; (80049ec <HAL_I2C_MspInit+0xe0>)
 80049be:	f001 fcf9 	bl	80063b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 80049c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049cc:	61d3      	str	r3, [r2, #28]
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_I2C_MspInit+0xdc>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
}
 80049da:	bf00      	nop
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40005400 	.word	0x40005400
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010c00 	.word	0x40010c00
 80049f0:	40005800 	.word	0x40005800

080049f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0f      	ldr	r2, [pc, #60]	; (8004a40 <HAL_RTC_MspInit+0x4c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d118      	bne.n	8004a38 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004a06:	f004 fb5f 	bl	80090c8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_RTC_MspInit+0x50>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <HAL_RTC_MspInit+0x50>)
 8004a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RTC_MspInit+0x50>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RTC_MspInit+0x54>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2029      	movs	r0, #41	; 0x29
 8004a2e:	f001 f9ec 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004a32:	2029      	movs	r0, #41	; 0x29
 8004a34:	f001 fa05 	bl	8005e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40002800 	.word	0x40002800
 8004a44:	40021000 	.word	0x40021000
 8004a48:	4242043c 	.word	0x4242043c

08004a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a54:	f107 0318 	add.w	r3, r7, #24
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_SPI_MspInit+0xf8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d130      	bne.n	8004ace <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	4a35      	ldr	r2, [pc, #212]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a76:	6193      	str	r3, [r2, #24]
 8004a78:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	6193      	str	r3, [r2, #24]
 8004a90:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004a9c:	23a0      	movs	r3, #160	; 0xa0
 8004a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa8:	f107 0318 	add.w	r3, r7, #24
 8004aac:	4619      	mov	r1, r3
 8004aae:	4827      	ldr	r0, [pc, #156]	; (8004b4c <HAL_SPI_MspInit+0x100>)
 8004ab0:	f001 fc80 	bl	80063b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ab4:	2340      	movs	r3, #64	; 0x40
 8004ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0318 	add.w	r3, r7, #24
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4821      	ldr	r0, [pc, #132]	; (8004b4c <HAL_SPI_MspInit+0x100>)
 8004ac8:	f001 fc74 	bl	80063b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004acc:	e036      	b.n	8004b3c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	; (8004b50 <HAL_SPI_MspInit+0x104>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d131      	bne.n	8004b3c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae2:	61d3      	str	r3, [r2, #28]
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004af6:	f043 0308 	orr.w	r3, r3, #8
 8004afa:	6193      	str	r3, [r2, #24]
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_SPI_MspInit+0xfc>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004b08:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b12:	2303      	movs	r3, #3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b16:	f107 0318 	add.w	r3, r7, #24
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	480d      	ldr	r0, [pc, #52]	; (8004b54 <HAL_SPI_MspInit+0x108>)
 8004b1e:	f001 fc49 	bl	80063b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b30:	f107 0318 	add.w	r3, r7, #24
 8004b34:	4619      	mov	r1, r3
 8004b36:	4807      	ldr	r0, [pc, #28]	; (8004b54 <HAL_SPI_MspInit+0x108>)
 8004b38:	f001 fc3c 	bl	80063b4 <HAL_GPIO_Init>
}
 8004b3c:	bf00      	nop
 8004b3e:	3728      	adds	r7, #40	; 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40013000 	.word	0x40013000
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40010800 	.word	0x40010800
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40010c00 	.word	0x40010c00

08004b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b68:	d114      	bne.n	8004b94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b6a:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	61d3      	str	r3, [r2, #28]
 8004b76:	4b16      	ldr	r3, [pc, #88]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	201c      	movs	r0, #28
 8004b88:	f001 f93f 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b8c:	201c      	movs	r0, #28
 8004b8e:	f001 f958 	bl	8005e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b92:	e018      	b.n	8004bc6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <HAL_TIM_Base_MspInit+0x7c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d113      	bne.n	8004bc6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	61d3      	str	r3, [r2, #28]
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <HAL_TIM_Base_MspInit+0x78>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2100      	movs	r1, #0
 8004bba:	201d      	movs	r0, #29
 8004bbc:	f001 f925 	bl	8005e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bc0:	201d      	movs	r0, #29
 8004bc2:	f001 f93e 	bl	8005e42 <HAL_NVIC_EnableIRQ>
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40000400 	.word	0x40000400

08004bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <HAL_UART_MspInit+0x8c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d131      	bne.n	8004c5c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c02:	6193      	str	r3, [r2, #24]
 8004c04:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c10:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004c16:	f043 0304 	orr.w	r3, r3, #4
 8004c1a:	6193      	str	r3, [r2, #24]
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_UART_MspInit+0x90>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c32:	2303      	movs	r3, #3
 8004c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c36:	f107 0310 	add.w	r3, r7, #16
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	480b      	ldr	r0, [pc, #44]	; (8004c6c <HAL_UART_MspInit+0x94>)
 8004c3e:	f001 fbb9 	bl	80063b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	4619      	mov	r1, r3
 8004c56:	4805      	ldr	r0, [pc, #20]	; (8004c6c <HAL_UART_MspInit+0x94>)
 8004c58:	f001 fbac 	bl	80063b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004c5c:	bf00      	nop
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40013800 	.word	0x40013800
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	40010800 	.word	0x40010800

08004c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c74:	e7fe      	b.n	8004c74 <NMI_Handler+0x4>

08004c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	#ifdef DEBUG
     __BKPT(0);
 8004c7a:	be00      	bkpt	0x0000
   	#endif

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c7c:	e7fe      	b.n	8004c7c <HardFault_Handler+0x6>

08004c7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c82:	e7fe      	b.n	8004c82 <MemManage_Handler+0x4>

08004c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c88:	e7fe      	b.n	8004c88 <BusFault_Handler+0x4>

08004c8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c8e:	e7fe      	b.n	8004c8e <UsageFault_Handler+0x4>

08004c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr

08004c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb8:	f000 f974 	bl	8004fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO5_Pin);
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f001 fdcd 	bl	8006864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8004cd2:	2008      	movs	r0, #8
 8004cd4:	f001 fdc6 	bl	8006864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004cd8:	bf00      	nop
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004ce0:	4802      	ldr	r0, [pc, #8]	; (8004cec <ADC1_2_IRQHandler+0x10>)
 8004ce2:	f000 fd33 	bl	800574c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200002e8 	.word	0x200002e8

08004cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004cf4:	4802      	ldr	r0, [pc, #8]	; (8004d00 <TIM2_IRQHandler+0x10>)
 8004cf6:	f006 fce5 	bl	800b6c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000484 	.word	0x20000484

08004d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d08:	4802      	ldr	r0, [pc, #8]	; (8004d14 <TIM3_IRQHandler+0x10>)
 8004d0a:	f006 fcdb 	bl	800b6c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	200004cc 	.word	0x200004cc

08004d18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <I2C1_EV_IRQHandler+0x10>)
 8004d1e:	f002 fa73 	bl	8007208 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000318 	.word	0x20000318

08004d2c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004d30:	4802      	ldr	r0, [pc, #8]	; (8004d3c <RTC_Alarm_IRQHandler+0x10>)
 8004d32:	f005 fba3 	bl	800a47c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200003c0 	.word	0x200003c0

08004d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return 1;
 8004d44:	2301      	movs	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <_kill>:

int _kill(int pid, int sig)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d58:	f007 fffc 	bl	800cd54 <__errno>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2216      	movs	r2, #22
 8004d60:	601a      	str	r2, [r3, #0]
  return -1;
 8004d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <_exit>:

void _exit (int status)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d76:	f04f 31ff 	mov.w	r1, #4294967295
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffe7 	bl	8004d4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d80:	e7fe      	b.n	8004d80 <_exit+0x12>

08004d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e00a      	b.n	8004daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d94:	f3af 8000 	nop.w
 8004d98:	4601      	mov	r1, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	60ba      	str	r2, [r7, #8]
 8004da0:	b2ca      	uxtb	r2, r1
 8004da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3301      	adds	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	dbf0      	blt.n	8004d94 <_read+0x12>
  }

  return len;
 8004db2:	687b      	ldr	r3, [r7, #4]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e009      	b.n	8004de2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	60ba      	str	r2, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	dbf1      	blt.n	8004dce <_write+0x12>
  }
  return len;
 8004dea:	687b      	ldr	r3, [r7, #4]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_close>:

int _close(int file)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bc80      	pop	{r7}
 8004e26:	4770      	bx	lr

08004e28 <_isatty>:

int _isatty(int file)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e30:	2301      	movs	r3, #1
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <_sbrk+0x5c>)
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <_sbrk+0x60>)
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <_sbrk+0x64>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e70:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <_sbrk+0x64>)
 8004e72:	4a12      	ldr	r2, [pc, #72]	; (8004ebc <_sbrk+0x68>)
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e76:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <_sbrk+0x64>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d207      	bcs.n	8004e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e84:	f007 ff66 	bl	800cd54 <__errno>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	220c      	movs	r2, #12
 8004e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	e009      	b.n	8004ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <_sbrk+0x64>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <_sbrk+0x64>)
 8004ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20005000 	.word	0x20005000
 8004eb4:	00000400 	.word	0x00000400
 8004eb8:	20000564 	.word	0x20000564
 8004ebc:	200006f0 	.word	0x200006f0

08004ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ecc:	f7ff fff8 	bl	8004ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ed0:	480b      	ldr	r0, [pc, #44]	; (8004f00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004ed2:	490c      	ldr	r1, [pc, #48]	; (8004f04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ed8:	e002      	b.n	8004ee0 <LoopCopyDataInit>

08004eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ede:	3304      	adds	r3, #4

08004ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee4:	d3f9      	bcc.n	8004eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004ee8:	4c09      	ldr	r4, [pc, #36]	; (8004f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004eec:	e001      	b.n	8004ef2 <LoopFillZerobss>

08004eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ef0:	3204      	adds	r2, #4

08004ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef4:	d3fb      	bcc.n	8004eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ef6:	f007 ff33 	bl	800cd60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004efa:	f7fd f805 	bl	8001f08 <main>
  bx lr
 8004efe:	4770      	bx	lr
  ldr r0, =_sdata
 8004f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f04:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004f08:	0800dd7c 	.word	0x0800dd7c
  ldr r2, =_sbss
 8004f0c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8004f10:	200006ec 	.word	0x200006ec

08004f14 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f14:	e7fe      	b.n	8004f14 <CAN1_RX1_IRQHandler>
	...

08004f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_Init+0x28>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <HAL_Init+0x28>)
 8004f22:	f043 0310 	orr.w	r3, r3, #16
 8004f26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f28:	2003      	movs	r0, #3
 8004f2a:	f000 ff63 	bl	8005df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f2e:	200f      	movs	r0, #15
 8004f30:	f000 f808 	bl	8004f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f34:	f7ff fc54 	bl	80047e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40022000 	.word	0x40022000

08004f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_InitTick+0x54>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_InitTick+0x58>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 ff89 	bl	8005e7a <HAL_SYSTICK_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e00e      	b.n	8004f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d80a      	bhi.n	8004f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f78:	2200      	movs	r2, #0
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	f000 ff43 	bl	8005e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f84:	4a06      	ldr	r2, [pc, #24]	; (8004fa0 <HAL_InitTick+0x5c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e000      	b.n	8004f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000004 	.word	0x20000004
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	20000008 	.word	0x20000008

08004fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_IncTick+0x1c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_IncTick+0x20>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <HAL_IncTick+0x20>)
 8004fb6:	6013      	str	r3, [r2, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	2000000c 	.word	0x2000000c
 8004fc4:	20000568 	.word	0x20000568

08004fc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return uwTick;
 8004fcc:	4b02      	ldr	r3, [pc, #8]	; (8004fd8 <HAL_GetTick+0x10>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	20000568 	.word	0x20000568

08004fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7ff fff0 	bl	8004fc8 <HAL_GetTick>
 8004fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d005      	beq.n	8005002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_Delay+0x44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005002:	bf00      	nop
 8005004:	f7ff ffe0 	bl	8004fc8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8f7      	bhi.n	8005004 <HAL_Delay+0x28>
  {
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000000c 	.word	0x2000000c

08005024 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <HAL_SuspendTick+0x18>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a03      	ldr	r2, [pc, #12]	; (800503c <HAL_SuspendTick+0x18>)
 800502e:	f023 0302 	bic.w	r3, r3, #2
 8005032:	6013      	str	r3, [r2, #0]
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	e000e010 	.word	0xe000e010

08005040 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_ResumeTick+0x18>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a03      	ldr	r2, [pc, #12]	; (8005058 <HAL_ResumeTick+0x18>)
 800504a:	f043 0302 	orr.w	r3, r3, #2
 800504e:	6013      	str	r3, [r2, #0]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	e000e010 	.word	0xe000e010

0800505c <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a03      	ldr	r2, [pc, #12]	; (8005074 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8005066:	f023 0302 	bic.w	r3, r3, #2
 800506a:	6053      	str	r3, [r2, #4]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	e0042000 	.word	0xe0042000

08005078 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e0be      	b.n	8005218 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fbc4 	bl	8004844 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fd5f 	bl	8005b80 <ADC_ConversionStop_Disable>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 8099 	bne.w	8005206 <HAL_ADC_Init+0x18e>
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8095 	bne.w	8005206 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	f043 0202 	orr.w	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7b1b      	ldrb	r3, [r3, #12]
 80050fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005100:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005110:	d003      	beq.n	800511a <HAL_ADC_Init+0xa2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_ADC_Init+0xa8>
 800511a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800511e:	e000      	b.n	8005122 <HAL_ADC_Init+0xaa>
 8005120:	2300      	movs	r3, #0
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7d1b      	ldrb	r3, [r3, #20]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d119      	bne.n	8005164 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7b1b      	ldrb	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	3b01      	subs	r3, #1
 800513e:	035a      	lsls	r2, r3, #13
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	e00b      	b.n	8005164 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f043 0201 	orr.w	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	4b28      	ldr	r3, [pc, #160]	; (8005220 <HAL_ADC_Init+0x1a8>)
 8005180:	4013      	ands	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	430b      	orrs	r3, r1
 800518a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005194:	d003      	beq.n	800519e <HAL_ADC_Init+0x126>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d104      	bne.n	80051a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	051b      	lsls	r3, r3, #20
 80051a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <HAL_ADC_Init+0x1ac>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10b      	bne.n	80051e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051e2:	e018      	b.n	8005216 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f023 0312 	bic.w	r3, r3, #18
 80051ec:	f043 0210 	orr.w	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005204:	e007      	b.n	8005216 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f043 0210 	orr.w	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	ffe1f7fd 	.word	0xffe1f7fd
 8005224:	ff1f0efe 	.word	0xff1f0efe

08005228 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0ad      	b.n	800539a <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	f043 0202 	orr.w	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fc98 	bl	8005b80 <ADC_ConversionStop_Disable>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 809a 	bne.w	8005390 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 021f 	mvn.w	r2, #31
 8005264:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <HAL_ADC_DeInit+0x17c>)
 8005272:	400b      	ands	r3, r1
 8005274:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <HAL_ADC_DeInit+0x180>)
 8005282:	400b      	ands	r3, r1
 8005284:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005294:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80052a4:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052b4:	f023 030f 	bic.w	r3, r3, #15
 80052b8:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052c8:	f023 030f 	bic.w	r3, r3, #15
 80052cc:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052dc:	f023 030f 	bic.w	r3, r3, #15
 80052e0:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052f0:	f023 030f 	bic.w	r3, r3, #15
 80052f4:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005318:	f023 030f 	bic.w	r3, r3, #15
 800531c:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800532c:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800535c:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	0d9b      	lsrs	r3, r3, #22
 800536a:	059b      	lsls	r3, r3, #22
 800536c:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	0d9b      	lsrs	r3, r3, #22
 800537a:	059b      	lsls	r3, r3, #22
 800537c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff faa4 	bl	80048cc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	ff3f0000 	.word	0xff3f0000
 80053a8:	ff0106f0 	.word	0xff0106f0

080053ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_ADC_Start+0x1a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e098      	b.n	80054f8 <HAL_ADC_Start+0x14c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fb7c 	bl	8005acc <ADC_Enable>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8087 	bne.w	80054ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a41      	ldr	r2, [pc, #260]	; (8005500 <HAL_ADC_Start+0x154>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d105      	bne.n	800540a <HAL_ADC_Start+0x5e>
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_ADC_Start+0x158>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d115      	bne.n	8005436 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d026      	beq.n	8005472 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800542c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005434:	e01d      	b.n	8005472 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2f      	ldr	r2, [pc, #188]	; (8005504 <HAL_ADC_Start+0x158>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_ADC_Start+0xaa>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2b      	ldr	r2, [pc, #172]	; (8005500 <HAL_ADC_Start+0x154>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10d      	bne.n	8005472 <HAL_ADC_Start+0xc6>
 8005456:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <HAL_ADC_Start+0x158>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800546a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d006      	beq.n	800548c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f023 0206 	bic.w	r2, r3, #6
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	62da      	str	r2, [r3, #44]	; 0x2c
 800548a:	e002      	b.n	8005492 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0202 	mvn.w	r2, #2
 80054a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80054ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054b2:	d113      	bne.n	80054dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80054b8:	4a11      	ldr	r2, [pc, #68]	; (8005500 <HAL_ADC_Start+0x154>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d105      	bne.n	80054ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_ADC_Start+0x158>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	e00c      	b.n	80054f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	e003      	b.n	80054f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40012800 	.word	0x40012800
 8005504:	40012400 	.word	0x40012400

08005508 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_ADC_Stop+0x1a>
 800551e:	2302      	movs	r3, #2
 8005520:	e01a      	b.n	8005558 <HAL_ADC_Stop+0x50>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fb28 	bl	8005b80 <ADC_ConversionStop_Disable>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_ADC_Start_IT+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e0a0      	b.n	80056bc <HAL_ADC_Start_IT+0x15c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 faa2 	bl	8005acc <ADC_Enable>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 808f 	bne.w	80056b2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a45      	ldr	r2, [pc, #276]	; (80056c4 <HAL_ADC_Start_IT+0x164>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d105      	bne.n	80055be <HAL_ADC_Start_IT+0x5e>
 80055b2:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <HAL_ADC_Start_IT+0x168>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d115      	bne.n	80055ea <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d026      	beq.n	8005626 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055e8:	e01d      	b.n	8005626 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a33      	ldr	r2, [pc, #204]	; (80056c8 <HAL_ADC_Start_IT+0x168>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_ADC_Start_IT+0xaa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2f      	ldr	r2, [pc, #188]	; (80056c4 <HAL_ADC_Start_IT+0x164>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10d      	bne.n	8005626 <HAL_ADC_Start_IT+0xc6>
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_ADC_Start_IT+0x168>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800561e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	f023 0206 	bic.w	r2, r3, #6
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	62da      	str	r2, [r3, #44]	; 0x2c
 800563e:	e002      	b.n	8005646 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0202 	mvn.w	r2, #2
 8005656:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0220 	orr.w	r2, r2, #32
 8005666:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005672:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005676:	d113      	bne.n	80056a0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800567c:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <HAL_ADC_Start_IT+0x164>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d105      	bne.n	800568e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <HAL_ADC_Start_IT+0x168>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800569c:	609a      	str	r2, [r3, #8]
 800569e:	e00c      	b.n	80056ba <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	e003      	b.n	80056ba <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40012800 	.word	0x40012800
 80056c8:	40012400 	.word	0x40012400

080056cc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_Stop_IT+0x1a>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e022      	b.n	800572c <HAL_ADC_Stop_IT+0x60>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa46 	bl	8005b80 <ADC_ConversionStop_Disable>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d111      	bne.n	8005722 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0220 	bic.w	r2, r2, #32
 800570c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d03e      	beq.n	80057ec <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d039      	beq.n	80057ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d105      	bne.n	8005790 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800579a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800579e:	d11d      	bne.n	80057dc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d119      	bne.n	80057dc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0220 	bic.w	r2, r2, #32
 80057b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fd fb73 	bl	8002ec8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f06f 0212 	mvn.w	r2, #18
 80057ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d04d      	beq.n	8005892 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d048      	beq.n	8005892 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005822:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005826:	d012      	beq.n	800584e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005832:	2b00      	cmp	r3, #0
 8005834:	d125      	bne.n	8005882 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005840:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005844:	d11d      	bne.n	8005882 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800584a:	2b00      	cmp	r3, #0
 800584c:	d119      	bne.n	8005882 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800585c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9bd 	bl	8005c02 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 020c 	mvn.w	r2, #12
 8005890:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f809 	bl	80058ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0201 	mvn.w	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x20>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0dc      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x1da>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b06      	cmp	r3, #6
 800590a:	d81c      	bhi.n	8005946 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	3b05      	subs	r3, #5
 800591e:	221f      	movs	r2, #31
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	43db      	mvns	r3, r3
 8005926:	4019      	ands	r1, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	3b05      	subs	r3, #5
 8005938:	fa00 f203 	lsl.w	r2, r0, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	635a      	str	r2, [r3, #52]	; 0x34
 8005944:	e03c      	b.n	80059c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d81c      	bhi.n	8005988 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	3b23      	subs	r3, #35	; 0x23
 8005960:	221f      	movs	r2, #31
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	4019      	ands	r1, r3
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	3b23      	subs	r3, #35	; 0x23
 800597a:	fa00 f203 	lsl.w	r2, r0, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	631a      	str	r2, [r3, #48]	; 0x30
 8005986:	e01b      	b.n	80059c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	3b41      	subs	r3, #65	; 0x41
 800599a:	221f      	movs	r2, #31
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	4019      	ands	r1, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	3b41      	subs	r3, #65	; 0x41
 80059b4:	fa00 f203 	lsl.w	r2, r0, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d91c      	bls.n	8005a02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	3b1e      	subs	r3, #30
 80059da:	2207      	movs	r2, #7
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	4019      	ands	r1, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6898      	ldr	r0, [r3, #8]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	3b1e      	subs	r3, #30
 80059f4:	fa00 f203 	lsl.w	r2, r0, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e019      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6919      	ldr	r1, [r3, #16]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	2207      	movs	r2, #7
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	4019      	ands	r1, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6898      	ldr	r0, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4413      	add	r3, r2
 8005a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d003      	beq.n	8005a46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a42:	2b11      	cmp	r3, #17
 8005a44:	d132      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_ADC_ConfigChannel+0x1e4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d125      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d126      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d11a      	bne.n	8005aac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <HAL_ADC_ConfigChannel+0x1ec>)
 8005a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a80:	0c9a      	lsrs	r2, r3, #18
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a8c:	e002      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f9      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x1b2>
 8005a9a:	e007      	b.n	8005aac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	f043 0220 	orr.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr
 8005ac0:	40012400 	.word	0x40012400
 8005ac4:	20000004 	.word	0x20000004
 8005ac8:	431bde83 	.word	0x431bde83

08005acc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d040      	beq.n	8005b6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005afa:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <ADC_Enable+0xac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <ADC_Enable+0xb0>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	0c9b      	lsrs	r3, r3, #18
 8005b06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b08:	e002      	b.n	8005b10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f9      	bne.n	8005b0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b16:	f7ff fa57 	bl	8004fc8 <HAL_GetTick>
 8005b1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b1c:	e01f      	b.n	8005b5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b1e:	f7ff fa53 	bl	8004fc8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d918      	bls.n	8005b5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d011      	beq.n	8005b5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	f043 0210 	orr.w	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f043 0201 	orr.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e007      	b.n	8005b6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d1d8      	bne.n	8005b1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000004 	.word	0x20000004
 8005b7c:	431bde83 	.word	0x431bde83

08005b80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d12e      	bne.n	8005bf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005baa:	f7ff fa0d 	bl	8004fc8 <HAL_GetTick>
 8005bae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005bb0:	e01b      	b.n	8005bea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bb2:	f7ff fa09 	bl	8004fc8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d914      	bls.n	8005bea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10d      	bne.n	8005bea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	f043 0210 	orr.w	r2, r3, #16
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e007      	b.n	8005bfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d0dc      	beq.n	8005bb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <__NVIC_SetPriorityGrouping>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <__NVIC_SetPriorityGrouping+0x44>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c30:	4013      	ands	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c46:	4a04      	ldr	r2, [pc, #16]	; (8005c58 <__NVIC_SetPriorityGrouping+0x44>)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	60d3      	str	r3, [r2, #12]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <__NVIC_GetPriorityGrouping>:
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <__NVIC_GetPriorityGrouping+0x18>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	f003 0307 	and.w	r3, r3, #7
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <__NVIC_EnableIRQ>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db0b      	blt.n	8005ca2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	f003 021f 	and.w	r2, r3, #31
 8005c90:	4906      	ldr	r1, [pc, #24]	; (8005cac <__NVIC_EnableIRQ+0x34>)
 8005c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2001      	movs	r0, #1
 8005c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	e000e100 	.word	0xe000e100

08005cb0 <__NVIC_DisableIRQ>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	db12      	blt.n	8005ce8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	f003 021f 	and.w	r2, r3, #31
 8005cc8:	490a      	ldr	r1, [pc, #40]	; (8005cf4 <__NVIC_DisableIRQ+0x44>)
 8005cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cd6:	3320      	adds	r3, #32
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005cdc:	f3bf 8f4f 	dsb	sy
}
 8005ce0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ce2:	f3bf 8f6f 	isb	sy
}
 8005ce6:	bf00      	nop
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000e100 	.word	0xe000e100

08005cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	db0a      	blt.n	8005d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	490c      	ldr	r1, [pc, #48]	; (8005d44 <__NVIC_SetPriority+0x4c>)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	0112      	lsls	r2, r2, #4
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d20:	e00a      	b.n	8005d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	4908      	ldr	r1, [pc, #32]	; (8005d48 <__NVIC_SetPriority+0x50>)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	3b04      	subs	r3, #4
 8005d30:	0112      	lsls	r2, r2, #4
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	440b      	add	r3, r1
 8005d36:	761a      	strb	r2, [r3, #24]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	e000e100 	.word	0xe000e100
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	; 0x24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f1c3 0307 	rsb	r3, r3, #7
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	bf28      	it	cs
 8005d6a:	2304      	movcs	r3, #4
 8005d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3304      	adds	r3, #4
 8005d72:	2b06      	cmp	r3, #6
 8005d74:	d902      	bls.n	8005d7c <NVIC_EncodePriority+0x30>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3b03      	subs	r3, #3
 8005d7a:	e000      	b.n	8005d7e <NVIC_EncodePriority+0x32>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	401a      	ands	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d94:	f04f 31ff 	mov.w	r1, #4294967295
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	43d9      	mvns	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da4:	4313      	orrs	r3, r2
         );
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc0:	d301      	bcc.n	8005dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e00f      	b.n	8005de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dc6:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <SysTick_Config+0x40>)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dce:	210f      	movs	r1, #15
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	f7ff ff90 	bl	8005cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <SysTick_Config+0x40>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <SysTick_Config+0x40>)
 8005de0:	2207      	movs	r2, #7
 8005de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010

08005df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff09 	bl	8005c14 <__NVIC_SetPriorityGrouping>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e1c:	f7ff ff1e 	bl	8005c5c <__NVIC_GetPriorityGrouping>
 8005e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	6978      	ldr	r0, [r7, #20]
 8005e28:	f7ff ff90 	bl	8005d4c <NVIC_EncodePriority>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff5f 	bl	8005cf8 <__NVIC_SetPriority>
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	4603      	mov	r3, r0
 8005e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff ff11 	bl	8005c78 <__NVIC_EnableIRQ>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff1f 	bl	8005cb0 <__NVIC_DisableIRQ>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff ff94 	bl	8005db0 <SysTick_Config>
 8005e88:	4603      	mov	r3, r0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d005      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2204      	movs	r2, #4
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
 8005eb6:	e051      	b.n	8005f5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 020e 	bic.w	r2, r2, #14
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a22      	ldr	r2, [pc, #136]	; (8005f68 <HAL_DMA_Abort_IT+0xd4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d029      	beq.n	8005f36 <HAL_DMA_Abort_IT+0xa2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <HAL_DMA_Abort_IT+0xd8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_DMA_Abort_IT+0x9e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <HAL_DMA_Abort_IT+0xdc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01a      	beq.n	8005f2c <HAL_DMA_Abort_IT+0x98>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <HAL_DMA_Abort_IT+0xe0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d012      	beq.n	8005f26 <HAL_DMA_Abort_IT+0x92>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_DMA_Abort_IT+0xe4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00a      	beq.n	8005f20 <HAL_DMA_Abort_IT+0x8c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <HAL_DMA_Abort_IT+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d102      	bne.n	8005f1a <HAL_DMA_Abort_IT+0x86>
 8005f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f18:	e00e      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f1e:	e00b      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f24:	e008      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f2a:	e005      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f30:	e002      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f32:	2310      	movs	r3, #16
 8005f34:	e000      	b.n	8005f38 <HAL_DMA_Abort_IT+0xa4>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4a11      	ldr	r2, [pc, #68]	; (8005f80 <HAL_DMA_Abort_IT+0xec>)
 8005f3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
    } 
  }
  return status;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40020008 	.word	0x40020008
 8005f6c:	4002001c 	.word	0x4002001c
 8005f70:	40020030 	.word	0x40020030
 8005f74:	40020044 	.word	0x40020044
 8005f78:	40020058 	.word	0x40020058
 8005f7c:	4002006c 	.word	0x4002006c
 8005f80:	40020000 	.word	0x40020000

08005f84 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f92:	b2db      	uxtb	r3, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fba:	4b2f      	ldr	r3, [pc, #188]	; (8006078 <HAL_FLASH_Program+0xd8>)
 8005fbc:	7e1b      	ldrb	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_FLASH_Program+0x26>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e054      	b.n	8006070 <HAL_FLASH_Program+0xd0>
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <HAL_FLASH_Program+0xd8>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fd0:	f000 f8b2 	bl	8006138 <FLASH_WaitForLastOperation>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d144      	bne.n	8006068 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	757b      	strb	r3, [r7, #21]
 8005fe8:	e007      	b.n	8005ffa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d102      	bne.n	8005ff6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	757b      	strb	r3, [r7, #21]
 8005ff4:	e001      	b.n	8005ffa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75bb      	strb	r3, [r7, #22]
 8005ffe:	e02d      	b.n	800605c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006000:	7dbb      	ldrb	r3, [r7, #22]
 8006002:	005a      	lsls	r2, r3, #1
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	eb02 0c03 	add.w	ip, r2, r3
 800600a:	7dbb      	ldrb	r3, [r7, #22]
 800600c:	0119      	lsls	r1, r3, #4
 800600e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006012:	f1c1 0620 	rsb	r6, r1, #32
 8006016:	f1a1 0020 	sub.w	r0, r1, #32
 800601a:	fa22 f401 	lsr.w	r4, r2, r1
 800601e:	fa03 f606 	lsl.w	r6, r3, r6
 8006022:	4334      	orrs	r4, r6
 8006024:	fa23 f000 	lsr.w	r0, r3, r0
 8006028:	4304      	orrs	r4, r0
 800602a:	fa23 f501 	lsr.w	r5, r3, r1
 800602e:	b2a3      	uxth	r3, r4
 8006030:	4619      	mov	r1, r3
 8006032:	4660      	mov	r0, ip
 8006034:	f000 f864 	bl	8006100 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800603c:	f000 f87c 	bl	8006138 <FLASH_WaitForLastOperation>
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <HAL_FLASH_Program+0xdc>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <HAL_FLASH_Program+0xdc>)
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d107      	bne.n	8006066 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	3301      	adds	r3, #1
 800605a:	75bb      	strb	r3, [r7, #22]
 800605c:	7dba      	ldrb	r2, [r7, #22]
 800605e:	7d7b      	ldrb	r3, [r7, #21]
 8006060:	429a      	cmp	r2, r3
 8006062:	d3cd      	bcc.n	8006000 <HAL_FLASH_Program+0x60>
 8006064:	e000      	b.n	8006068 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006066:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <HAL_FLASH_Program+0xd8>)
 800606a:	2200      	movs	r2, #0
 800606c:	761a      	strb	r2, [r3, #24]

  return status;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006078:	20000570 	.word	0x20000570
 800607c:	40022000 	.word	0x40022000

08006080 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <HAL_FLASH_Unlock+0x40>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00d      	beq.n	80060b2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <HAL_FLASH_Unlock+0x40>)
 8006098:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <HAL_FLASH_Unlock+0x44>)
 800609a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800609c:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_FLASH_Unlock+0x40>)
 800609e:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <HAL_FLASH_Unlock+0x48>)
 80060a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_FLASH_Unlock+0x40>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80060b2:	79fb      	ldrb	r3, [r7, #7]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40022000 	.word	0x40022000
 80060c4:	45670123 	.word	0x45670123
 80060c8:	cdef89ab 	.word	0xcdef89ab

080060cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_FLASH_Lock+0x1c>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <HAL_FLASH_Lock+0x1c>)
 80060d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40022000 	.word	0x40022000

080060ec <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80060f0:	4b02      	ldr	r3, [pc, #8]	; (80060fc <HAL_FLASH_GetError+0x10>)
 80060f2:	69db      	ldr	r3, [r3, #28]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	20000570 	.word	0x20000570

08006100 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <FLASH_Program_HalfWord+0x30>)
 800610e:	2200      	movs	r2, #0
 8006110:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <FLASH_Program_HalfWord+0x34>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4a07      	ldr	r2, [pc, #28]	; (8006134 <FLASH_Program_HalfWord+0x34>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	887a      	ldrh	r2, [r7, #2]
 8006122:	801a      	strh	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000570 	.word	0x20000570
 8006134:	40022000 	.word	0x40022000

08006138 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006140:	f7fe ff42 	bl	8004fc8 <HAL_GetTick>
 8006144:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006146:	e010      	b.n	800616a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00c      	beq.n	800616a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <FLASH_WaitForLastOperation+0x2e>
 8006156:	f7fe ff37 	bl	8004fc8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d201      	bcs.n	800616a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e025      	b.n	80061b6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e8      	bne.n	8006148 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006182:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 8006184:	2220      	movs	r2, #32
 8006186:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <FLASH_WaitForLastOperation+0x88>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80061ac:	f000 f80a 	bl	80061c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40022000 	.word	0x40022000

080061c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <FLASH_SetErrorCode+0x98>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80061da:	4b21      	ldr	r3, [pc, #132]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f043 0302 	orr.w	r3, r3, #2
 80061e2:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 80061e4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <FLASH_SetErrorCode+0x98>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80061fa:	4b19      	ldr	r3, [pc, #100]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 8006204:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f043 0304 	orr.w	r3, r3, #4
 800620c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800620e:	4b13      	ldr	r3, [pc, #76]	; (800625c <FLASH_SetErrorCode+0x98>)
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f043 0304 	orr.w	r3, r3, #4
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <FLASH_SetErrorCode+0x9c>)
 8006224:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006226:	4b0d      	ldr	r3, [pc, #52]	; (800625c <FLASH_SetErrorCode+0x98>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	4a0c      	ldr	r2, [pc, #48]	; (800625c <FLASH_SetErrorCode+0x98>)
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f240 1201 	movw	r2, #257	; 0x101
 8006238:	4293      	cmp	r3, r2
 800623a:	d106      	bne.n	800624a <FLASH_SetErrorCode+0x86>
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <FLASH_SetErrorCode+0x98>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4a06      	ldr	r2, [pc, #24]	; (800625c <FLASH_SetErrorCode+0x98>)
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	61d3      	str	r3, [r2, #28]
}  
 8006248:	e002      	b.n	8006250 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800624a:	4a04      	ldr	r2, [pc, #16]	; (800625c <FLASH_SetErrorCode+0x98>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60d3      	str	r3, [r2, #12]
}  
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40022000 	.word	0x40022000
 8006260:	20000570 	.word	0x20000570

08006264 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <HAL_FLASHEx_Erase+0xd0>)
 8006278:	7e1b      	ldrb	r3, [r3, #24]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_FLASHEx_Erase+0x1e>
 800627e:	2302      	movs	r3, #2
 8006280:	e053      	b.n	800632a <HAL_FLASHEx_Erase+0xc6>
 8006282:	4b2c      	ldr	r3, [pc, #176]	; (8006334 <HAL_FLASHEx_Erase+0xd0>)
 8006284:	2201      	movs	r2, #1
 8006286:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d116      	bne.n	80062be <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006290:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006294:	f7ff ff50 	bl	8006138 <FLASH_WaitForLastOperation>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d141      	bne.n	8006322 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800629e:	2001      	movs	r0, #1
 80062a0:	f000 f84c 	bl	800633c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062a8:	f7ff ff46 	bl	8006138 <FLASH_WaitForLastOperation>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <HAL_FLASHEx_Erase+0xd4>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_FLASHEx_Erase+0xd4>)
 80062b6:	f023 0304 	bic.w	r3, r3, #4
 80062ba:	6113      	str	r3, [r2, #16]
 80062bc:	e031      	b.n	8006322 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80062be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062c2:	f7ff ff39 	bl	8006138 <FLASH_WaitForLastOperation>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d12a      	bne.n	8006322 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	e019      	b.n	8006310 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80062dc:	68b8      	ldr	r0, [r7, #8]
 80062de:	f000 f849 	bl	8006374 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062e6:	f7ff ff27 	bl	8006138 <FLASH_WaitForLastOperation>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_FLASHEx_Erase+0xd4>)
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	4a11      	ldr	r2, [pc, #68]	; (8006338 <HAL_FLASHEx_Erase+0xd4>)
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	601a      	str	r2, [r3, #0]
            break;
 8006306:	e00c      	b.n	8006322 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	029a      	lsls	r2, r3, #10
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	4413      	add	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	d3dc      	bcc.n	80062dc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <HAL_FLASHEx_Erase+0xd0>)
 8006324:	2200      	movs	r2, #0
 8006326:	761a      	strb	r2, [r3, #24]

  return status;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000570 	.word	0x20000570
 8006338:	40022000 	.word	0x40022000

0800633c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <FLASH_MassErase+0x30>)
 8006346:	2200      	movs	r2, #0
 8006348:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <FLASH_MassErase+0x34>)
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	4a08      	ldr	r2, [pc, #32]	; (8006370 <FLASH_MassErase+0x34>)
 8006350:	f043 0304 	orr.w	r3, r3, #4
 8006354:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <FLASH_MassErase+0x34>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <FLASH_MassErase+0x34>)
 800635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006360:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr
 800636c:	20000570 	.word	0x20000570
 8006370:	40022000 	.word	0x40022000

08006374 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <FLASH_PageErase+0x38>)
 800637e:	2200      	movs	r2, #0
 8006380:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006382:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <FLASH_PageErase+0x3c>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <FLASH_PageErase+0x3c>)
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800638e:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <FLASH_PageErase+0x3c>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <FLASH_PageErase+0x3c>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	4a05      	ldr	r2, [pc, #20]	; (80063b0 <FLASH_PageErase+0x3c>)
 800639a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000570 	.word	0x20000570
 80063b0:	40022000 	.word	0x40022000

080063b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b08b      	sub	sp, #44	; 0x2c
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80063c2:	2300      	movs	r3, #0
 80063c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063c6:	e169      	b.n	800669c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80063c8:	2201      	movs	r2, #1
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	f040 8158 	bne.w	8006696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4a9a      	ldr	r2, [pc, #616]	; (8006654 <HAL_GPIO_Init+0x2a0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d05e      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
 80063f0:	4a98      	ldr	r2, [pc, #608]	; (8006654 <HAL_GPIO_Init+0x2a0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d875      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 80063f6:	4a98      	ldr	r2, [pc, #608]	; (8006658 <HAL_GPIO_Init+0x2a4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d058      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
 80063fc:	4a96      	ldr	r2, [pc, #600]	; (8006658 <HAL_GPIO_Init+0x2a4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d86f      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 8006402:	4a96      	ldr	r2, [pc, #600]	; (800665c <HAL_GPIO_Init+0x2a8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d052      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
 8006408:	4a94      	ldr	r2, [pc, #592]	; (800665c <HAL_GPIO_Init+0x2a8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d869      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 800640e:	4a94      	ldr	r2, [pc, #592]	; (8006660 <HAL_GPIO_Init+0x2ac>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04c      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
 8006414:	4a92      	ldr	r2, [pc, #584]	; (8006660 <HAL_GPIO_Init+0x2ac>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d863      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 800641a:	4a92      	ldr	r2, [pc, #584]	; (8006664 <HAL_GPIO_Init+0x2b0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d046      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
 8006420:	4a90      	ldr	r2, [pc, #576]	; (8006664 <HAL_GPIO_Init+0x2b0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d85d      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 8006426:	2b12      	cmp	r3, #18
 8006428:	d82a      	bhi.n	8006480 <HAL_GPIO_Init+0xcc>
 800642a:	2b12      	cmp	r3, #18
 800642c:	d859      	bhi.n	80064e2 <HAL_GPIO_Init+0x12e>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_GPIO_Init+0x80>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	080064af 	.word	0x080064af
 8006438:	08006489 	.word	0x08006489
 800643c:	0800649b 	.word	0x0800649b
 8006440:	080064dd 	.word	0x080064dd
 8006444:	080064e3 	.word	0x080064e3
 8006448:	080064e3 	.word	0x080064e3
 800644c:	080064e3 	.word	0x080064e3
 8006450:	080064e3 	.word	0x080064e3
 8006454:	080064e3 	.word	0x080064e3
 8006458:	080064e3 	.word	0x080064e3
 800645c:	080064e3 	.word	0x080064e3
 8006460:	080064e3 	.word	0x080064e3
 8006464:	080064e3 	.word	0x080064e3
 8006468:	080064e3 	.word	0x080064e3
 800646c:	080064e3 	.word	0x080064e3
 8006470:	080064e3 	.word	0x080064e3
 8006474:	080064e3 	.word	0x080064e3
 8006478:	08006491 	.word	0x08006491
 800647c:	080064a5 	.word	0x080064a5
 8006480:	4a79      	ldr	r2, [pc, #484]	; (8006668 <HAL_GPIO_Init+0x2b4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006486:	e02c      	b.n	80064e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	623b      	str	r3, [r7, #32]
          break;
 800648e:	e029      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	623b      	str	r3, [r7, #32]
          break;
 8006498:	e024      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	3308      	adds	r3, #8
 80064a0:	623b      	str	r3, [r7, #32]
          break;
 80064a2:	e01f      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	330c      	adds	r3, #12
 80064aa:	623b      	str	r3, [r7, #32]
          break;
 80064ac:	e01a      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d102      	bne.n	80064bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80064b6:	2304      	movs	r3, #4
 80064b8:	623b      	str	r3, [r7, #32]
          break;
 80064ba:	e013      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80064c4:	2308      	movs	r3, #8
 80064c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	611a      	str	r2, [r3, #16]
          break;
 80064ce:	e009      	b.n	80064e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80064d0:	2308      	movs	r3, #8
 80064d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	615a      	str	r2, [r3, #20]
          break;
 80064da:	e003      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
          break;
 80064e0:	e000      	b.n	80064e4 <HAL_GPIO_Init+0x130>
          break;
 80064e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2bff      	cmp	r3, #255	; 0xff
 80064e8:	d801      	bhi.n	80064ee <HAL_GPIO_Init+0x13a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	e001      	b.n	80064f2 <HAL_GPIO_Init+0x13e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2bff      	cmp	r3, #255	; 0xff
 80064f8:	d802      	bhi.n	8006500 <HAL_GPIO_Init+0x14c>
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	e002      	b.n	8006506 <HAL_GPIO_Init+0x152>
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	3b08      	subs	r3, #8
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	210f      	movs	r1, #15
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	401a      	ands	r2, r3
 8006518:	6a39      	ldr	r1, [r7, #32]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80b1 	beq.w	8006696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006534:	4b4d      	ldr	r3, [pc, #308]	; (800666c <HAL_GPIO_Init+0x2b8>)
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	4a4c      	ldr	r2, [pc, #304]	; (800666c <HAL_GPIO_Init+0x2b8>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	6193      	str	r3, [r2, #24]
 8006540:	4b4a      	ldr	r3, [pc, #296]	; (800666c <HAL_GPIO_Init+0x2b8>)
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800654c:	4a48      	ldr	r2, [pc, #288]	; (8006670 <HAL_GPIO_Init+0x2bc>)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	089b      	lsrs	r3, r3, #2
 8006552:	3302      	adds	r3, #2
 8006554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	220f      	movs	r2, #15
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4013      	ands	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a40      	ldr	r2, [pc, #256]	; (8006674 <HAL_GPIO_Init+0x2c0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d013      	beq.n	80065a0 <HAL_GPIO_Init+0x1ec>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <HAL_GPIO_Init+0x2c4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00d      	beq.n	800659c <HAL_GPIO_Init+0x1e8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3e      	ldr	r2, [pc, #248]	; (800667c <HAL_GPIO_Init+0x2c8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <HAL_GPIO_Init+0x1e4>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <HAL_GPIO_Init+0x2cc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d101      	bne.n	8006594 <HAL_GPIO_Init+0x1e0>
 8006590:	2303      	movs	r3, #3
 8006592:	e006      	b.n	80065a2 <HAL_GPIO_Init+0x1ee>
 8006594:	2304      	movs	r3, #4
 8006596:	e004      	b.n	80065a2 <HAL_GPIO_Init+0x1ee>
 8006598:	2302      	movs	r3, #2
 800659a:	e002      	b.n	80065a2 <HAL_GPIO_Init+0x1ee>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <HAL_GPIO_Init+0x1ee>
 80065a0:	2300      	movs	r3, #0
 80065a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a4:	f002 0203 	and.w	r2, r2, #3
 80065a8:	0092      	lsls	r2, r2, #2
 80065aa:	4093      	lsls	r3, r2
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80065b2:	492f      	ldr	r1, [pc, #188]	; (8006670 <HAL_GPIO_Init+0x2bc>)
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	089b      	lsrs	r3, r3, #2
 80065b8:	3302      	adds	r3, #2
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80065cc:	4b2d      	ldr	r3, [pc, #180]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	492c      	ldr	r1, [pc, #176]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	608b      	str	r3, [r1, #8]
 80065d8:	e006      	b.n	80065e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	4928      	ldr	r1, [pc, #160]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d006      	beq.n	8006602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80065f4:	4b23      	ldr	r3, [pc, #140]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	4922      	ldr	r1, [pc, #136]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60cb      	str	r3, [r1, #12]
 8006600:	e006      	b.n	8006610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006602:	4b20      	ldr	r3, [pc, #128]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	43db      	mvns	r3, r3
 800660a:	491e      	ldr	r1, [pc, #120]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 800660c:	4013      	ands	r3, r2
 800660e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d006      	beq.n	800662a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4918      	ldr	r1, [pc, #96]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	4313      	orrs	r3, r2
 8006626:	604b      	str	r3, [r1, #4]
 8006628:	e006      	b.n	8006638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	43db      	mvns	r3, r3
 8006632:	4914      	ldr	r1, [pc, #80]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 8006634:	4013      	ands	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d021      	beq.n	8006688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	490e      	ldr	r1, [pc, #56]	; (8006684 <HAL_GPIO_Init+0x2d0>)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	e021      	b.n	8006696 <HAL_GPIO_Init+0x2e2>
 8006652:	bf00      	nop
 8006654:	10320000 	.word	0x10320000
 8006658:	10310000 	.word	0x10310000
 800665c:	10220000 	.word	0x10220000
 8006660:	10210000 	.word	0x10210000
 8006664:	10120000 	.word	0x10120000
 8006668:	10110000 	.word	0x10110000
 800666c:	40021000 	.word	0x40021000
 8006670:	40010000 	.word	0x40010000
 8006674:	40010800 	.word	0x40010800
 8006678:	40010c00 	.word	0x40010c00
 800667c:	40011000 	.word	0x40011000
 8006680:	40011400 	.word	0x40011400
 8006684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <HAL_GPIO_Init+0x304>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	43db      	mvns	r3, r3
 8006690:	4909      	ldr	r1, [pc, #36]	; (80066b8 <HAL_GPIO_Init+0x304>)
 8006692:	4013      	ands	r3, r2
 8006694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	3301      	adds	r3, #1
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	fa22 f303 	lsr.w	r3, r2, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f47f ae8e 	bne.w	80063c8 <HAL_GPIO_Init+0x14>
  }
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	372c      	adds	r7, #44	; 0x2c
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	40010400 	.word	0x40010400

080066bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80066bc:	b480      	push	{r7}
 80066be:	b089      	sub	sp, #36	; 0x24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80066ca:	e09a      	b.n	8006802 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80066cc:	2201      	movs	r2, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	4013      	ands	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 808d 	beq.w	80067fc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80066e2:	4a4e      	ldr	r2, [pc, #312]	; (800681c <HAL_GPIO_DeInit+0x160>)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	089b      	lsrs	r3, r3, #2
 80066e8:	3302      	adds	r3, #2
 80066ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ee:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	220f      	movs	r2, #15
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4013      	ands	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a46      	ldr	r2, [pc, #280]	; (8006820 <HAL_GPIO_DeInit+0x164>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <HAL_GPIO_DeInit+0x78>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a45      	ldr	r2, [pc, #276]	; (8006824 <HAL_GPIO_DeInit+0x168>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00d      	beq.n	8006730 <HAL_GPIO_DeInit+0x74>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a44      	ldr	r2, [pc, #272]	; (8006828 <HAL_GPIO_DeInit+0x16c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d007      	beq.n	800672c <HAL_GPIO_DeInit+0x70>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a43      	ldr	r2, [pc, #268]	; (800682c <HAL_GPIO_DeInit+0x170>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_GPIO_DeInit+0x6c>
 8006724:	2303      	movs	r3, #3
 8006726:	e006      	b.n	8006736 <HAL_GPIO_DeInit+0x7a>
 8006728:	2304      	movs	r3, #4
 800672a:	e004      	b.n	8006736 <HAL_GPIO_DeInit+0x7a>
 800672c:	2302      	movs	r3, #2
 800672e:	e002      	b.n	8006736 <HAL_GPIO_DeInit+0x7a>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_GPIO_DeInit+0x7a>
 8006734:	2300      	movs	r3, #0
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	f002 0203 	and.w	r2, r2, #3
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	4093      	lsls	r3, r2
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	429a      	cmp	r2, r3
 8006744:	d132      	bne.n	80067ac <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006746:	4b3a      	ldr	r3, [pc, #232]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	43db      	mvns	r3, r3
 800674e:	4938      	ldr	r1, [pc, #224]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 8006750:	4013      	ands	r3, r2
 8006752:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006754:	4b36      	ldr	r3, [pc, #216]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	43db      	mvns	r3, r3
 800675c:	4934      	ldr	r1, [pc, #208]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 800675e:	4013      	ands	r3, r2
 8006760:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006762:	4b33      	ldr	r3, [pc, #204]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	43db      	mvns	r3, r3
 800676a:	4931      	ldr	r1, [pc, #196]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 800676c:	4013      	ands	r3, r2
 800676e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006770:	4b2f      	ldr	r3, [pc, #188]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	43db      	mvns	r3, r3
 8006778:	492d      	ldr	r1, [pc, #180]	; (8006830 <HAL_GPIO_DeInit+0x174>)
 800677a:	4013      	ands	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	220f      	movs	r2, #15
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800678e:	4a23      	ldr	r2, [pc, #140]	; (800681c <HAL_GPIO_DeInit+0x160>)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	3302      	adds	r3, #2
 8006796:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	43da      	mvns	r2, r3
 800679e:	481f      	ldr	r0, [pc, #124]	; (800681c <HAL_GPIO_DeInit+0x160>)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	400a      	ands	r2, r1
 80067a6:	3302      	adds	r3, #2
 80067a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2bff      	cmp	r3, #255	; 0xff
 80067b0:	d801      	bhi.n	80067b6 <HAL_GPIO_DeInit+0xfa>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	e001      	b.n	80067ba <HAL_GPIO_DeInit+0xfe>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2bff      	cmp	r3, #255	; 0xff
 80067c0:	d802      	bhi.n	80067c8 <HAL_GPIO_DeInit+0x10c>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	e002      	b.n	80067ce <HAL_GPIO_DeInit+0x112>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3b08      	subs	r3, #8
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	210f      	movs	r1, #15
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	2104      	movs	r1, #4
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	fa01 f303 	lsl.w	r3, r1, r3
 80067e8:	431a      	orrs	r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	401a      	ands	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f47f af5e 	bne.w	80066cc <HAL_GPIO_DeInit+0x10>
  }
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	3724      	adds	r7, #36	; 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	40010000 	.word	0x40010000
 8006820:	40010800 	.word	0x40010800
 8006824:	40010c00 	.word	0x40010c00
 8006828:	40011000 	.word	0x40011000
 800682c:	40011400 	.word	0x40011400
 8006830:	40010400 	.word	0x40010400

08006834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	807b      	strh	r3, [r7, #2]
 8006840:	4613      	mov	r3, r2
 8006842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006844:	787b      	ldrb	r3, [r7, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800684a:	887a      	ldrh	r2, [r7, #2]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006850:	e003      	b.n	800685a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006852:	887b      	ldrh	r3, [r7, #2]
 8006854:	041a      	lsls	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	611a      	str	r2, [r3, #16]
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800686e:	4b08      	ldr	r3, [pc, #32]	; (8006890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	4013      	ands	r3, r2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800687a:	4a05      	ldr	r2, [pc, #20]	; (8006890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fc fbe0 	bl	8003048 <HAL_GPIO_EXTI_Callback>
  }
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40010400 	.word	0x40010400

08006894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e12b      	b.n	8006afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fe f826 	bl	800490c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2224      	movs	r2, #36	; 0x24
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068f8:	f002 fff0 	bl	80098dc <HAL_RCC_GetPCLK1Freq>
 80068fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4a81      	ldr	r2, [pc, #516]	; (8006b08 <HAL_I2C_Init+0x274>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d807      	bhi.n	8006918 <HAL_I2C_Init+0x84>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a80      	ldr	r2, [pc, #512]	; (8006b0c <HAL_I2C_Init+0x278>)
 800690c:	4293      	cmp	r3, r2
 800690e:	bf94      	ite	ls
 8006910:	2301      	movls	r3, #1
 8006912:	2300      	movhi	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e006      	b.n	8006926 <HAL_I2C_Init+0x92>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a7d      	ldr	r2, [pc, #500]	; (8006b10 <HAL_I2C_Init+0x27c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	bf94      	ite	ls
 8006920:	2301      	movls	r3, #1
 8006922:	2300      	movhi	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e0e7      	b.n	8006afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a78      	ldr	r2, [pc, #480]	; (8006b14 <HAL_I2C_Init+0x280>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0c9b      	lsrs	r3, r3, #18
 8006938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a6a      	ldr	r2, [pc, #424]	; (8006b08 <HAL_I2C_Init+0x274>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d802      	bhi.n	8006968 <HAL_I2C_Init+0xd4>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	3301      	adds	r3, #1
 8006966:	e009      	b.n	800697c <HAL_I2C_Init+0xe8>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	4a69      	ldr	r2, [pc, #420]	; (8006b18 <HAL_I2C_Init+0x284>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	099b      	lsrs	r3, r3, #6
 800697a:	3301      	adds	r3, #1
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	430b      	orrs	r3, r1
 8006982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800698e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	495c      	ldr	r1, [pc, #368]	; (8006b08 <HAL_I2C_Init+0x274>)
 8006998:	428b      	cmp	r3, r1
 800699a:	d819      	bhi.n	80069d0 <HAL_I2C_Init+0x13c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1e59      	subs	r1, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069b0:	400b      	ands	r3, r1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_I2C_Init+0x138>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1e59      	subs	r1, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80069c4:	3301      	adds	r3, #1
 80069c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ca:	e051      	b.n	8006a70 <HAL_I2C_Init+0x1dc>
 80069cc:	2304      	movs	r3, #4
 80069ce:	e04f      	b.n	8006a70 <HAL_I2C_Init+0x1dc>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d111      	bne.n	80069fc <HAL_I2C_Init+0x168>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	1e58      	subs	r0, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	440b      	add	r3, r1
 80069e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e012      	b.n	8006a22 <HAL_I2C_Init+0x18e>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1e58      	subs	r0, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	0099      	lsls	r1, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_I2C_Init+0x196>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e022      	b.n	8006a70 <HAL_I2C_Init+0x1dc>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10e      	bne.n	8006a50 <HAL_I2C_Init+0x1bc>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1e58      	subs	r0, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	440b      	add	r3, r1
 8006a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a44:	3301      	adds	r3, #1
 8006a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4e:	e00f      	b.n	8006a70 <HAL_I2C_Init+0x1dc>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	1e58      	subs	r0, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	0099      	lsls	r1, r3, #2
 8006a60:	440b      	add	r3, r1
 8006a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a66:	3301      	adds	r3, #1
 8006a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	6809      	ldr	r1, [r1, #0]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69da      	ldr	r2, [r3, #28]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6911      	ldr	r1, [r2, #16]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68d2      	ldr	r2, [r2, #12]
 8006aaa:	4311      	orrs	r1, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	000186a0 	.word	0x000186a0
 8006b0c:	001e847f 	.word	0x001e847f
 8006b10:	003d08ff 	.word	0x003d08ff
 8006b14:	431bde83 	.word	0x431bde83
 8006b18:	10624dd3 	.word	0x10624dd3

08006b1c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b80      	cmp	r3, #128	; 0x80
 8006b30:	d103      	bne.n	8006b3a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	817b      	strh	r3, [r7, #10]
 8006b56:	460b      	mov	r3, r1
 8006b58:	813b      	strh	r3, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b5e:	f7fe fa33 	bl	8004fc8 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	f040 80d9 	bne.w	8006d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2319      	movs	r3, #25
 8006b78:	2201      	movs	r2, #1
 8006b7a:	496d      	ldr	r1, [pc, #436]	; (8006d30 <HAL_I2C_Mem_Write+0x1ec>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f002 f819 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e0cc      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_I2C_Mem_Write+0x56>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0c5      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d007      	beq.n	8006bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2221      	movs	r2, #33	; 0x21
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a4d      	ldr	r2, [pc, #308]	; (8006d34 <HAL_I2C_Mem_Write+0x1f0>)
 8006c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c02:	88f8      	ldrh	r0, [r7, #6]
 8006c04:	893a      	ldrh	r2, [r7, #8]
 8006c06:	8979      	ldrh	r1, [r7, #10]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4603      	mov	r3, r0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 fda8 	bl	8008768 <I2C_RequestMemoryWrite>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d052      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e081      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f002 f8de 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d107      	bne.n	8006c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e06b      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d017      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1aa      	bne.n	8006c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f002 f8d1 	bl	8008e78 <I2C_WaitOnBTFFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00d      	beq.n	8006cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d107      	bne.n	8006cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e016      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	00100002 	.word	0x00100002
 8006d34:	ffff0000 	.word	0xffff0000

08006d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08c      	sub	sp, #48	; 0x30
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	817b      	strh	r3, [r7, #10]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	813b      	strh	r3, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d56:	f7fe f937 	bl	8004fc8 <HAL_GetTick>
 8006d5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	f040 8244 	bne.w	80071f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	2319      	movs	r3, #25
 8006d70:	2201      	movs	r2, #1
 8006d72:	4982      	ldr	r1, [pc, #520]	; (8006f7c <HAL_I2C_Mem_Read+0x244>)
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f001 ff1d 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
 8006d82:	e237      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2C_Mem_Read+0x5a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e230      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d007      	beq.n	8006db8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2222      	movs	r2, #34	; 0x22
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a62      	ldr	r2, [pc, #392]	; (8006f80 <HAL_I2C_Mem_Read+0x248>)
 8006df8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dfa:	88f8      	ldrh	r0, [r7, #6]
 8006dfc:	893a      	ldrh	r2, [r7, #8]
 8006dfe:	8979      	ldrh	r1, [r7, #10]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	4603      	mov	r3, r0
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f001 fd42 	bl	8008894 <I2C_RequestMemoryRead>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e1ec      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d113      	bne.n	8006e4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e22:	2300      	movs	r3, #0
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	e1c0      	b.n	80071cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d11e      	bne.n	8006e90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e62:	b672      	cpsid	i
}
 8006e64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006e8c:	b662      	cpsie	i
}
 8006e8e:	e035      	b.n	8006efc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d11e      	bne.n	8006ed6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea8:	b672      	cpsid	i
}
 8006eaa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006ed2:	b662      	cpsie	i
}
 8006ed4:	e012      	b.n	8006efc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ee4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006efc:	e166      	b.n	80071cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f200 811f 	bhi.w	8007146 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d123      	bne.n	8006f58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f002 f829 	bl	8008f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e167      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f56:	e139      	b.n	80071cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d152      	bne.n	8007006 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	2200      	movs	r2, #0
 8006f68:	4906      	ldr	r1, [pc, #24]	; (8006f84 <HAL_I2C_Mem_Read+0x24c>)
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 fe22 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e13c      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
 8006f7a:	bf00      	nop
 8006f7c:	00100002 	.word	0x00100002
 8006f80:	ffff0000 	.word	0xffff0000
 8006f84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006f88:	b672      	cpsid	i
}
 8006f8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006fce:	b662      	cpsie	i
}
 8006fd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007004:	e0e2      	b.n	80071cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	2200      	movs	r2, #0
 800700e:	497b      	ldr	r1, [pc, #492]	; (80071fc <HAL_I2C_Mem_Read+0x4c4>)
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f001 fdcf 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0e9      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007030:	b672      	cpsid	i
}
 8007032:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007066:	4b66      	ldr	r3, [pc, #408]	; (8007200 <HAL_I2C_Mem_Read+0x4c8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	4a65      	ldr	r2, [pc, #404]	; (8007204 <HAL_I2C_Mem_Read+0x4cc>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	0a1a      	lsrs	r2, r3, #8
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	00da      	lsls	r2, r3, #3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	3b01      	subs	r3, #1
 8007084:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d118      	bne.n	80070be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f043 0220 	orr.w	r2, r3, #32
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80070ae:	b662      	cpsie	i
}
 80070b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e09a      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d1d9      	bne.n	8007080 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800710e:	b662      	cpsie	i
}
 8007110:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007144:	e042      	b.n	80071cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f001 ff0e 	bl	8008f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e04c      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b04      	cmp	r3, #4
 8007198:	d118      	bne.n	80071cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f ae94 	bne.w	8006efe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3728      	adds	r7, #40	; 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	00010004 	.word	0x00010004
 8007200:	20000004 	.word	0x20000004
 8007204:	14f8b589 	.word	0x14f8b589

08007208 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007228:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007230:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b10      	cmp	r3, #16
 8007236:	d003      	beq.n	8007240 <HAL_I2C_EV_IRQHandler+0x38>
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	f040 80b1 	bne.w	80073a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10d      	bne.n	8007276 <HAL_I2C_EV_IRQHandler+0x6e>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007260:	d003      	beq.n	800726a <HAL_I2C_EV_IRQHandler+0x62>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007268:	d101      	bne.n	800726e <HAL_I2C_EV_IRQHandler+0x66>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <HAL_I2C_EV_IRQHandler+0x68>
 800726e:	2300      	movs	r3, #0
 8007270:	2b01      	cmp	r3, #1
 8007272:	f000 8114 	beq.w	800749e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_I2C_EV_IRQHandler+0x90>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fef9 	bl	8009082 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fcb9 	bl	8007c08 <I2C_Master_SB>
 8007296:	e083      	b.n	80073a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_I2C_EV_IRQHandler+0xac>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fd30 	bl	8007d12 <I2C_Master_ADD10>
 80072b2:	e075      	b.n	80073a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <HAL_I2C_EV_IRQHandler+0xc8>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd4b 	bl	8007d64 <I2C_Master_ADDR>
 80072ce:	e067      	b.n	80073a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d036      	beq.n	8007348 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e8:	f000 80db 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <HAL_I2C_EV_IRQHandler+0x10a>
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d008      	beq.n	8007312 <HAL_I2C_EV_IRQHandler+0x10a>
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f92d 	bl	800756a <I2C_MasterTransmit_TXE>
 8007310:	e046      	b.n	80073a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80c2 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80bc 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b21      	cmp	r3, #33	; 0x21
 800732e:	d103      	bne.n	8007338 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f9b6 	bl	80076a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007336:	e0b4      	b.n	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	f040 80b1 	bne.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa24 	bl	800778e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007346:	e0ac      	b.n	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007356:	f000 80a4 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00d      	beq.n	8007380 <HAL_I2C_EV_IRQHandler+0x178>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <HAL_I2C_EV_IRQHandler+0x178>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 faa0 	bl	80078be <I2C_MasterReceive_RXNE>
 800737e:	e00f      	b.n	80073a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 808b 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8085 	beq.w	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fb4b 	bl	8007a34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800739e:	e080      	b.n	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80073a0:	e07f      	b.n	80074a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e007      	b.n	80073c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d011      	beq.n	80073f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00c      	beq.n	80073f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80073e8:	69b9      	ldr	r1, [r7, #24]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 ff11 	bl	8008212 <I2C_Slave_ADDR>
 80073f0:	e05a      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_I2C_EV_IRQHandler+0x206>
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 ff4c 	bl	80082a4 <I2C_Slave_STOPF>
 800740c:	e04c      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b21      	cmp	r3, #33	; 0x21
 8007412:	d002      	beq.n	800741a <HAL_I2C_EV_IRQHandler+0x212>
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b29      	cmp	r3, #41	; 0x29
 8007418:	d120      	bne.n	800745c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00d      	beq.n	8007440 <HAL_I2C_EV_IRQHandler+0x238>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <HAL_I2C_EV_IRQHandler+0x238>
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fe2e 	bl	800809a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800743e:	e032      	b.n	80074a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	d02d      	beq.n	80074a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007450:	2b00      	cmp	r3, #0
 8007452:	d028      	beq.n	80074a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fe5d 	bl	8008114 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800745a:	e024      	b.n	80074a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <HAL_I2C_EV_IRQHandler+0x27a>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_I2C_EV_IRQHandler+0x27a>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fe6a 	bl	8008154 <I2C_SlaveReceive_RXNE>
 8007480:	e012      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00d      	beq.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fe9a 	bl	80081d0 <I2C_SlaveReceive_BTF>
 800749c:	e004      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800749e:	bf00      	nop
 80074a0:	e002      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr

080074c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr

080074d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	70fb      	strb	r3, [r7, #3]
 8007502:	4613      	mov	r3, r2
 8007504:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr

08007546 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	bc80      	pop	{r7}
 8007556:	4770      	bx	lr

08007558 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr

0800756a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007580:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d150      	bne.n	8007632 <I2C_MasterTransmit_TXE+0xc8>
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b21      	cmp	r3, #33	; 0x21
 8007594:	d14d      	bne.n	8007632 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d01d      	beq.n	80075d8 <I2C_MasterTransmit_TXE+0x6e>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d01a      	beq.n	80075d8 <I2C_MasterTransmit_TXE+0x6e>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075a8:	d016      	beq.n	80075d8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075b8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2211      	movs	r2, #17
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ff6c 	bl	80074ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075d6:	e060      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075e6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d107      	bne.n	8007622 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff81 	bl	8007522 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007620:	e03b      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff ff3f 	bl	80074ae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007630:	e033      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b21      	cmp	r3, #33	; 0x21
 8007636:	d005      	beq.n	8007644 <I2C_MasterTransmit_TXE+0xda>
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d12d      	bne.n	800769a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b22      	cmp	r3, #34	; 0x22
 8007642:	d12a      	bne.n	800769a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800765e:	e01c      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d103      	bne.n	8007674 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f88e 	bl	800778e <I2C_MemoryTransmit_TXE_BTF>
}
 8007672:	e012      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007698:	e7ff      	b.n	800769a <I2C_MasterTransmit_TXE+0x130>
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b21      	cmp	r3, #33	; 0x21
 80076ba:	d164      	bne.n	8007786 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d012      	beq.n	80076ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	781a      	ldrb	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80076ea:	e04c      	b.n	8007786 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d01d      	beq.n	800772e <I2C_MasterTransmit_BTF+0x8c>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d01a      	beq.n	800772e <I2C_MasterTransmit_BTF+0x8c>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076fe:	d016      	beq.n	800772e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800770e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2211      	movs	r2, #17
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff fec1 	bl	80074ae <HAL_I2C_MasterTxCpltCallback>
}
 800772c:	e02b      	b.n	8007786 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800773c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800774c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b40      	cmp	r3, #64	; 0x40
 8007766:	d107      	bne.n	8007778 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff fed6 	bl	8007522 <HAL_I2C_MemTxCpltCallback>
}
 8007776:	e006      	b.n	8007786 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fe94 	bl	80074ae <HAL_I2C_MasterTxCpltCallback>
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d11d      	bne.n	80077e2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d10b      	bne.n	80077c6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	1c9a      	adds	r2, r3, #2
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80077c4:	e077      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	121b      	asrs	r3, r3, #8
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80077e0:	e069      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d10b      	bne.n	8007802 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007800:	e059      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007806:	2b02      	cmp	r3, #2
 8007808:	d152      	bne.n	80078b0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b22      	cmp	r3, #34	; 0x22
 800780e:	d10d      	bne.n	800782c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800781e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	651a      	str	r2, [r3, #80]	; 0x50
}
 800782a:	e044      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d015      	beq.n	8007862 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b21      	cmp	r3, #33	; 0x21
 800783a:	d112      	bne.n	8007862 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007860:	e029      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d124      	bne.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b21      	cmp	r3, #33	; 0x21
 8007870:	d121      	bne.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007880:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007890:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff fe3a 	bl	8007522 <HAL_I2C_MemTxCpltCallback>
}
 80078ae:	e002      	b.n	80078b6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff f933 	bl	8006b1c <I2C_Flush_DR>
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b22      	cmp	r3, #34	; 0x22
 80078d0:	f040 80ac 	bne.w	8007a2c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d921      	bls.n	8007926 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b03      	cmp	r3, #3
 8007910:	f040 808c 	bne.w	8007a2c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007922:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007924:	e082      	b.n	8007a2c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	2b02      	cmp	r3, #2
 800792c:	d075      	beq.n	8007a1a <I2C_MasterReceive_RXNE+0x15c>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d002      	beq.n	800793a <I2C_MasterReceive_RXNE+0x7c>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d16f      	bne.n	8007a1a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fae4 	bl	8008f08 <I2C_WaitOnSTOPRequestThroughIT>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d142      	bne.n	80079cc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007954:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007964:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	b2d2      	uxtb	r2, r2
 8007972:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d10a      	bne.n	80079b6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fdc0 	bl	8007534 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079b4:	e03a      	b.n	8007a2c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2212      	movs	r2, #18
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fd7b 	bl	80074c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079ca:	e02f      	b.n	8007a2c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fd97 	bl	8007546 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a18:	e008      	b.n	8007a2c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a28:	605a      	str	r2, [r3, #4]
}
 8007a2a:	e7ff      	b.n	8007a2c <I2C_MasterReceive_RXNE+0x16e>
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d11b      	bne.n	8007a84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a82:	e0bd      	b.n	8007c00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d129      	bne.n	8007ae2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d00a      	beq.n	8007aba <I2C_MasterReceive_BTF+0x86>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d007      	beq.n	8007aba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007ae0:	e08e      	b.n	8007c00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d176      	bne.n	8007bda <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d002      	beq.n	8007af8 <I2C_MasterReceive_BTF+0xc4>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d108      	bne.n	8007b0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e019      	b.n	8007b3e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b04      	cmp	r3, #4
 8007b0e:	d002      	beq.n	8007b16 <I2C_MasterReceive_BTF+0xe2>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d108      	bne.n	8007b28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e00a      	b.n	8007b3e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d007      	beq.n	8007b3e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	b2d2      	uxtb	r2, r2
 8007b70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10a      	bne.n	8007bc4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fcb9 	bl	8007534 <HAL_I2C_MemRxCpltCallback>
}
 8007bc2:	e01d      	b.n	8007c00 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2212      	movs	r2, #18
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fc74 	bl	80074c0 <HAL_I2C_MasterRxCpltCallback>
}
 8007bd8:	e012      	b.n	8007c00 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	b2d2      	uxtb	r2, r2
 8007be6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	d117      	bne.n	8007c4c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c34:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007c36:	e067      	b.n	8007d08 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	611a      	str	r2, [r3, #16]
}
 8007c4a:	e05d      	b.n	8007d08 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c54:	d133      	bne.n	8007cbe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b21      	cmp	r3, #33	; 0x21
 8007c60:	d109      	bne.n	8007c76 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c72:	611a      	str	r2, [r3, #16]
 8007c74:	e008      	b.n	8007c88 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <I2C_Master_SB+0x92>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d108      	bne.n	8007cac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d032      	beq.n	8007d08 <I2C_Master_SB+0x100>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02d      	beq.n	8007d08 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cba:	605a      	str	r2, [r3, #4]
}
 8007cbc:	e024      	b.n	8007d08 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10e      	bne.n	8007ce4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	11db      	asrs	r3, r3, #7
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 0306 	and.w	r3, r3, #6
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f063 030f 	orn	r3, r3, #15
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	611a      	str	r2, [r3, #16]
}
 8007ce2:	e011      	b.n	8007d08 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d10d      	bne.n	8007d08 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	11db      	asrs	r3, r3, #7
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f003 0306 	and.w	r3, r3, #6
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f063 030e 	orn	r3, r3, #14
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	611a      	str	r2, [r3, #16]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <I2C_Master_ADD10+0x26>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00c      	beq.n	8007d5a <I2C_Master_ADD10+0x48>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d58:	605a      	str	r2, [r3, #4]
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b091      	sub	sp, #68	; 0x44
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b22      	cmp	r3, #34	; 0x22
 8007d8c:	f040 8174 	bne.w	8008078 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10f      	bne.n	8007db8 <I2C_Master_ADDR+0x54>
 8007d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	d10b      	bne.n	8007db8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007da0:	2300      	movs	r3, #0
 8007da2:	633b      	str	r3, [r7, #48]	; 0x30
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	633b      	str	r3, [r7, #48]	; 0x30
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	e16b      	b.n	8008090 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11d      	bne.n	8007dfc <I2C_Master_ADDR+0x98>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dc8:	d118      	bne.n	8007dfc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	651a      	str	r2, [r3, #80]	; 0x50
 8007dfa:	e149      	b.n	8008090 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d113      	bne.n	8007e2e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e06:	2300      	movs	r3, #0
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e120      	b.n	8008070 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	f040 808a 	bne.w	8007f4e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e40:	d137      	bne.n	8007eb2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e50:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e60:	d113      	bne.n	8007e8a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e70:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	e0f2      	b.n	8008070 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	623b      	str	r3, [r7, #32]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e0de      	b.n	8008070 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d02e      	beq.n	8007f16 <I2C_Master_ADDR+0x1b2>
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d02b      	beq.n	8007f16 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2b12      	cmp	r3, #18
 8007ec2:	d102      	bne.n	8007eca <I2C_Master_ADDR+0x166>
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d125      	bne.n	8007f16 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d00e      	beq.n	8007eee <I2C_Master_ADDR+0x18a>
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d00b      	beq.n	8007eee <I2C_Master_ADDR+0x18a>
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d008      	beq.n	8007eee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e007      	b.n	8007efe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007efc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	e0ac      	b.n	8008070 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f24:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e090      	b.n	8008070 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d158      	bne.n	800800a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d021      	beq.n	8007fa2 <I2C_Master_ADDR+0x23e>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d01e      	beq.n	8007fa2 <I2C_Master_ADDR+0x23e>
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d01b      	beq.n	8007fa2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f78:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e012      	b.n	8007fc8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd6:	d14b      	bne.n	8008070 <I2C_Master_ADDR+0x30c>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fde:	d00b      	beq.n	8007ff8 <I2C_Master_ADDR+0x294>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d008      	beq.n	8007ff8 <I2C_Master_ADDR+0x294>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d005      	beq.n	8007ff8 <I2C_Master_ADDR+0x294>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2b10      	cmp	r3, #16
 8007ff0:	d002      	beq.n	8007ff8 <I2C_Master_ADDR+0x294>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d13b      	bne.n	8008070 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008006:	605a      	str	r2, [r3, #4]
 8008008:	e032      	b.n	8008070 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008018:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008028:	d117      	bne.n	800805a <I2C_Master_ADDR+0x2f6>
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008030:	d00b      	beq.n	800804a <I2C_Master_ADDR+0x2e6>
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	2b01      	cmp	r3, #1
 8008036:	d008      	beq.n	800804a <I2C_Master_ADDR+0x2e6>
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	2b08      	cmp	r3, #8
 800803c:	d005      	beq.n	800804a <I2C_Master_ADDR+0x2e6>
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	2b10      	cmp	r3, #16
 8008042:	d002      	beq.n	800804a <I2C_Master_ADDR+0x2e6>
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b20      	cmp	r3, #32
 8008048:	d107      	bne.n	800805a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008058:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008076:	e00b      	b.n	8008090 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008078:	2300      	movs	r3, #0
 800807a:	60bb      	str	r3, [r7, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	60bb      	str	r3, [r7, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
}
 800808e:	e7ff      	b.n	8008090 <I2C_Master_ADDR+0x32c>
 8008090:	bf00      	nop
 8008092:	3744      	adds	r7, #68	; 0x44
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr

0800809a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d02b      	beq.n	800810c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d114      	bne.n	800810c <I2C_SlaveTransmit_TXE+0x72>
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b29      	cmp	r3, #41	; 0x29
 80080e6:	d111      	bne.n	800810c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2221      	movs	r2, #33	; 0x21
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2228      	movs	r2, #40	; 0x28
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff f9e3 	bl	80074d2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d011      	beq.n	800814a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008162:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d02c      	beq.n	80081c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d114      	bne.n	80081c8 <I2C_SlaveReceive_RXNE+0x74>
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d111      	bne.n	80081c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2222      	movs	r2, #34	; 0x22
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2228      	movs	r2, #40	; 0x28
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff f98e 	bl	80074e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d012      	beq.n	8008208 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	bc80      	pop	{r7}
 8008210:	4770      	bx	lr

08008212 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800822c:	2b28      	cmp	r3, #40	; 0x28
 800822e:	d125      	bne.n	800827c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800824a:	2301      	movs	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	81bb      	strh	r3, [r7, #12]
 800825e:	e002      	b.n	8008266 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800826e:	89ba      	ldrh	r2, [r7, #12]
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff f93e 	bl	80074f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800827a:	e00e      	b.n	800829a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827c:	2300      	movs	r3, #0
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800829a:	bf00      	nop
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80082c4:	2300      	movs	r3, #0
 80082c6:	60bb      	str	r3, [r7, #8]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	60bb      	str	r3, [r7, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008300:	d172      	bne.n	80083e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b22      	cmp	r3, #34	; 0x22
 8008306:	d002      	beq.n	800830e <I2C_Slave_STOPF+0x6a>
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	2b2a      	cmp	r3, #42	; 0x2a
 800830c:	d135      	bne.n	800837a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f043 0204 	orr.w	r2, r3, #4
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008340:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	4618      	mov	r0, r3
 8008348:	f7fd fe1c 	bl	8005f84 <HAL_DMA_GetState>
 800834c:	4603      	mov	r3, r0
 800834e:	2b01      	cmp	r3, #1
 8008350:	d049      	beq.n	80083e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	4a69      	ldr	r2, [pc, #420]	; (80084fc <I2C_Slave_STOPF+0x258>)
 8008358:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	4618      	mov	r0, r3
 8008360:	f7fd fd98 	bl	8005e94 <HAL_DMA_Abort_IT>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d03d      	beq.n	80083e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008378:	e035      	b.n	80083e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f043 0204 	orr.w	r2, r3, #4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd fde6 	bl	8005f84 <HAL_DMA_GetState>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d014      	beq.n	80083e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	4a4e      	ldr	r2, [pc, #312]	; (80084fc <I2C_Slave_STOPF+0x258>)
 80083c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fd62 	bl	8005e94 <HAL_DMA_Abort_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	e000      	b.n	80083e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d03e      	beq.n	8008470 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d112      	bne.n	8008426 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	b29a      	uxth	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d112      	bne.n	800845a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f843 	bl	8008504 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800847e:	e039      	b.n	80084f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b2a      	cmp	r3, #42	; 0x2a
 8008484:	d109      	bne.n	800849a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2228      	movs	r2, #40	; 0x28
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff f825 	bl	80074e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b28      	cmp	r3, #40	; 0x28
 80084a4:	d111      	bne.n	80084ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a15      	ldr	r2, [pc, #84]	; (8008500 <I2C_Slave_STOPF+0x25c>)
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff f824 	bl	8007510 <HAL_I2C_ListenCpltCallback>
}
 80084c8:	e014      	b.n	80084f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	2b22      	cmp	r3, #34	; 0x22
 80084d0:	d002      	beq.n	80084d8 <I2C_Slave_STOPF+0x234>
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	2b22      	cmp	r3, #34	; 0x22
 80084d6:	d10d      	bne.n	80084f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fe fff8 	bl	80074e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	08008a65 	.word	0x08008a65
 8008500:	ffff0000 	.word	0xffff0000

08008504 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008512:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800851a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b10      	cmp	r3, #16
 8008520:	d002      	beq.n	8008528 <I2C_ITError+0x24>
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b40      	cmp	r3, #64	; 0x40
 8008526:	d10a      	bne.n	800853e <I2C_ITError+0x3a>
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b22      	cmp	r3, #34	; 0x22
 800852c:	d107      	bne.n	800853e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800853c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008544:	2b28      	cmp	r3, #40	; 0x28
 8008546:	d107      	bne.n	8008558 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2228      	movs	r2, #40	; 0x28
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008556:	e015      	b.n	8008584 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008566:	d00a      	beq.n	800857e <I2C_ITError+0x7a>
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b60      	cmp	r3, #96	; 0x60
 800856c:	d007      	beq.n	800857e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800858e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008592:	d162      	bne.n	800865a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d020      	beq.n	80085f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b6:	4a6a      	ldr	r2, [pc, #424]	; (8008760 <I2C_ITError+0x25c>)
 80085b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd fc68 	bl	8005e94 <HAL_DMA_Abort_IT>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8089 	beq.w	80086de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 0201 	bic.w	r2, r2, #1
 80085da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085ee:	4610      	mov	r0, r2
 80085f0:	4798      	blx	r3
 80085f2:	e074      	b.n	80086de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	4a59      	ldr	r2, [pc, #356]	; (8008760 <I2C_ITError+0x25c>)
 80085fa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	4618      	mov	r0, r3
 8008602:	f7fd fc47 	bl	8005e94 <HAL_DMA_Abort_IT>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d068      	beq.n	80086de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d10b      	bne.n	8008632 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	1c5a      	adds	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	e041      	b.n	80086de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b60      	cmp	r3, #96	; 0x60
 8008664:	d125      	bne.n	80086b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d10b      	bne.n	800869a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fe ff54 	bl	8007558 <HAL_I2C_AbortCpltCallback>
 80086b0:	e015      	b.n	80086de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086bc:	2b40      	cmp	r3, #64	; 0x40
 80086be:	d10b      	bne.n	80086d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7fe ff34 	bl	8007546 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10e      	bne.n	800870c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008708:	2b00      	cmp	r3, #0
 800870a:	d007      	beq.n	800871c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800871a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008722:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b04      	cmp	r3, #4
 800872e:	d113      	bne.n	8008758 <I2C_ITError+0x254>
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	2b28      	cmp	r3, #40	; 0x28
 8008734:	d110      	bne.n	8008758 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a0a      	ldr	r2, [pc, #40]	; (8008764 <I2C_ITError+0x260>)
 800873a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe fedc 	bl	8007510 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08008a65 	.word	0x08008a65
 8008764:	ffff0000 	.word	0xffff0000

08008768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	461a      	mov	r2, r3
 8008776:	4603      	mov	r3, r0
 8008778:	817b      	strh	r3, [r7, #10]
 800877a:	460b      	mov	r3, r1
 800877c:	813b      	strh	r3, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	2200      	movs	r2, #0
 800879a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fa08 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00d      	beq.n	80087c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b8:	d103      	bne.n	80087c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e05f      	b.n	8008886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087c6:	897b      	ldrh	r3, [r7, #10]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	6a3a      	ldr	r2, [r7, #32]
 80087da:	492d      	ldr	r1, [pc, #180]	; (8008890 <I2C_RequestMemoryWrite+0x128>)
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fa63 	bl	8008ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e04c      	b.n	8008886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	6a39      	ldr	r1, [r7, #32]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 faee 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00d      	beq.n	800882e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b04      	cmp	r3, #4
 8008818:	d107      	bne.n	800882a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e02b      	b.n	8008886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d105      	bne.n	8008840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008834:	893b      	ldrh	r3, [r7, #8]
 8008836:	b2da      	uxtb	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	611a      	str	r2, [r3, #16]
 800883e:	e021      	b.n	8008884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008840:	893b      	ldrh	r3, [r7, #8]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	b29b      	uxth	r3, r3
 8008846:	b2da      	uxtb	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800884e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008850:	6a39      	ldr	r1, [r7, #32]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fac8 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00d      	beq.n	800887a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	2b04      	cmp	r3, #4
 8008864:	d107      	bne.n	8008876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e005      	b.n	8008886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800887a:	893b      	ldrh	r3, [r7, #8]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	00010002 	.word	0x00010002

08008894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	817b      	strh	r3, [r7, #10]
 80088a6:	460b      	mov	r3, r1
 80088a8:	813b      	strh	r3, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 f96a 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f4:	d103      	bne.n	80088fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e0aa      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008902:	897b      	ldrh	r3, [r7, #10]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	461a      	mov	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	4952      	ldr	r1, [pc, #328]	; (8008a60 <I2C_RequestMemoryRead+0x1cc>)
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f9c5 	bl	8008ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e097      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800893e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008940:	6a39      	ldr	r1, [r7, #32]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fa50 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	2b04      	cmp	r3, #4
 8008954:	d107      	bne.n	8008966 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e076      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d105      	bne.n	800897c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008970:	893b      	ldrh	r3, [r7, #8]
 8008972:	b2da      	uxtb	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	611a      	str	r2, [r3, #16]
 800897a:	e021      	b.n	80089c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800897c:	893b      	ldrh	r3, [r7, #8]
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	b29b      	uxth	r3, r3
 8008982:	b2da      	uxtb	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800898a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898c:	6a39      	ldr	r1, [r7, #32]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fa2a 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00d      	beq.n	80089b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d107      	bne.n	80089b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e050      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089b6:	893b      	ldrh	r3, [r7, #8]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	6a39      	ldr	r1, [r7, #32]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fa0f 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d107      	bne.n	80089e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e035      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f8d3 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00d      	beq.n	8008a30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a22:	d103      	bne.n	8008a2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e013      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a30:	897b      	ldrh	r3, [r7, #10]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	4906      	ldr	r1, [pc, #24]	; (8008a60 <I2C_RequestMemoryRead+0x1cc>)
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f92e 	bl	8008ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	00010002 	.word	0x00010002

08008a64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a7e:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <I2C_DMAAbort+0x148>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	08db      	lsrs	r3, r3, #3
 8008a84:	4a4a      	ldr	r2, [pc, #296]	; (8008bb0 <I2C_DMAAbort+0x14c>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	0a1a      	lsrs	r2, r3, #8
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	00da      	lsls	r2, r3, #3
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008aaa:	e00a      	b.n	8008ac2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac0:	d0ea      	beq.n	8008a98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	2200      	movs	r2, #0
 8008ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	2200      	movs	r2, #0
 8008ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2200      	movs	r2, #0
 8008af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	2200      	movs	r2, #0
 8008b06:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	2200      	movs	r2, #0
 8008b16:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0201 	bic.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b60      	cmp	r3, #96	; 0x60
 8008b32:	d10e      	bne.n	8008b52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7fe fd04 	bl	8007558 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b50:	e027      	b.n	8008ba2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b52:	7cfb      	ldrb	r3, [r7, #19]
 8008b54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b58:	2b28      	cmp	r3, #40	; 0x28
 8008b5a:	d117      	bne.n	8008b8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2228      	movs	r2, #40	; 0x28
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b8a:	e007      	b.n	8008b9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008b9c:	6978      	ldr	r0, [r7, #20]
 8008b9e:	f7fe fcd2 	bl	8007546 <HAL_I2C_ErrorCallback>
}
 8008ba2:	bf00      	nop
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000004 	.word	0x20000004
 8008bb0:	14f8b589 	.word	0x14f8b589

08008bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bc4:	e048      	b.n	8008c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d044      	beq.n	8008c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7fc f9fb 	bl	8004fc8 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d139      	bne.n	8008c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	0c1b      	lsrs	r3, r3, #16
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d10d      	bne.n	8008c0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	43da      	mvns	r2, r3
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf0c      	ite	eq
 8008c00:	2301      	moveq	r3, #1
 8008c02:	2300      	movne	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	e00c      	b.n	8008c24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	43da      	mvns	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4013      	ands	r3, r2
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d116      	bne.n	8008c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c44:	f043 0220 	orr.w	r2, r3, #32
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e023      	b.n	8008ca0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	0c1b      	lsrs	r3, r3, #16
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d10d      	bne.n	8008c7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	43da      	mvns	r2, r3
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bf0c      	ite	eq
 8008c74:	2301      	moveq	r3, #1
 8008c76:	2300      	movne	r3, #0
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	e00c      	b.n	8008c98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	43da      	mvns	r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d093      	beq.n	8008bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cb6:	e071      	b.n	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc6:	d123      	bne.n	8008d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	f043 0204 	orr.w	r2, r3, #4
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e067      	b.n	8008de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d041      	beq.n	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d18:	f7fc f956 	bl	8004fc8 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d302      	bcc.n	8008d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d136      	bne.n	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	0c1b      	lsrs	r3, r3, #16
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10c      	bne.n	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	43da      	mvns	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	4013      	ands	r3, r2
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	e00b      	b.n	8008d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	43da      	mvns	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d016      	beq.n	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	f043 0220 	orr.w	r2, r3, #32
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e021      	b.n	8008de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10c      	bne.n	8008dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	43da      	mvns	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4013      	ands	r3, r2
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e00b      	b.n	8008dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	43da      	mvns	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bf14      	ite	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	2300      	moveq	r3, #0
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f47f af6d 	bne.w	8008cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008df4:	e034      	b.n	8008e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 f915 	bl	8009026 <I2C_IsAcknowledgeFailed>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e034      	b.n	8008e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d028      	beq.n	8008e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0e:	f7fc f8db 	bl	8004fc8 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11d      	bne.n	8008e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d016      	beq.n	8008e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4c:	f043 0220 	orr.w	r2, r3, #32
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e007      	b.n	8008e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6a:	2b80      	cmp	r3, #128	; 0x80
 8008e6c:	d1c3      	bne.n	8008df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e84:	e034      	b.n	8008ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 f8cd 	bl	8009026 <I2C_IsAcknowledgeFailed>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e034      	b.n	8008f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d028      	beq.n	8008ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7fc f893 	bl	8004fc8 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d302      	bcc.n	8008eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d11d      	bne.n	8008ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d016      	beq.n	8008ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e007      	b.n	8008f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d1c3      	bne.n	8008e86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f14:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	08db      	lsrs	r3, r3, #3
 8008f1a:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f20:	0a1a      	lsrs	r2, r3, #8
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3a:	f043 0220 	orr.w	r2, r3, #32
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e008      	b.n	8008f58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d0e9      	beq.n	8008f2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20000004 	.word	0x20000004
 8008f68:	14f8b589 	.word	0x14f8b589

08008f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f78:	e049      	b.n	800900e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d119      	bne.n	8008fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0210 	mvn.w	r2, #16
 8008f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e030      	b.n	800901e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbc:	f7fc f804 	bl	8004fc8 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d302      	bcc.n	8008fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d11d      	bne.n	800900e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	d016      	beq.n	800900e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f043 0220 	orr.w	r2, r3, #32
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e007      	b.n	800901e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d1ae      	bne.n	8008f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800903c:	d11b      	bne.n	8009076 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009046:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f043 0204 	orr.w	r2, r3, #4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009092:	d103      	bne.n	800909c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800909a:	e007      	b.n	80090ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80090a4:	d102      	bne.n	80090ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2208      	movs	r2, #8
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr

080090b6 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80090b6:	b480      	push	{r7}
 80090b8:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80090ba:	bf20      	wfe
  __asm volatile( "nop" );
 80090bc:	bf00      	nop
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
	...

080090c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80090cc:	4b03      	ldr	r3, [pc, #12]	; (80090dc <HAL_PWR_EnableBkUpAccess+0x14>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
}
 80090d2:	bf00      	nop
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	420e0020 	.word	0x420e0020

080090e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80090ec:	4b13      	ldr	r3, [pc, #76]	; (800913c <HAL_PWR_EnterSTOPMode+0x5c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a12      	ldr	r2, [pc, #72]	; (800913c <HAL_PWR_EnterSTOPMode+0x5c>)
 80090f2:	f023 0302 	bic.w	r3, r3, #2
 80090f6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80090f8:	4b10      	ldr	r3, [pc, #64]	; (800913c <HAL_PWR_EnterSTOPMode+0x5c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f023 0201 	bic.w	r2, r3, #1
 8009100:	490e      	ldr	r1, [pc, #56]	; (800913c <HAL_PWR_EnterSTOPMode+0x5c>)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4313      	orrs	r3, r2
 8009106:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <HAL_PWR_EnterSTOPMode+0x60>)
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <HAL_PWR_EnterSTOPMode+0x60>)
 800910e:	f043 0304 	orr.w	r3, r3, #4
 8009112:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800911a:	bf30      	wfi
 800911c:	e004      	b.n	8009128 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800911e:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8009120:	f7ff ffc9 	bl	80090b6 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8009124:	f7ff ffc7 	bl	80090b6 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <HAL_PWR_EnterSTOPMode+0x60>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <HAL_PWR_EnterSTOPMode+0x60>)
 800912e:	f023 0304 	bic.w	r3, r3, #4
 8009132:	6113      	str	r3, [r2, #16]
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	40007000 	.word	0x40007000
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e272      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 8087 	beq.w	8009272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009164:	4b92      	ldr	r3, [pc, #584]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f003 030c 	and.w	r3, r3, #12
 800916c:	2b04      	cmp	r3, #4
 800916e:	d00c      	beq.n	800918a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009170:	4b8f      	ldr	r3, [pc, #572]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f003 030c 	and.w	r3, r3, #12
 8009178:	2b08      	cmp	r3, #8
 800917a:	d112      	bne.n	80091a2 <HAL_RCC_OscConfig+0x5e>
 800917c:	4b8c      	ldr	r3, [pc, #560]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009188:	d10b      	bne.n	80091a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800918a:	4b89      	ldr	r3, [pc, #548]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d06c      	beq.n	8009270 <HAL_RCC_OscConfig+0x12c>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d168      	bne.n	8009270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e24c      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091aa:	d106      	bne.n	80091ba <HAL_RCC_OscConfig+0x76>
 80091ac:	4b80      	ldr	r3, [pc, #512]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a7f      	ldr	r2, [pc, #508]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e02e      	b.n	8009218 <HAL_RCC_OscConfig+0xd4>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <HAL_RCC_OscConfig+0x98>
 80091c2:	4b7b      	ldr	r3, [pc, #492]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a7a      	ldr	r2, [pc, #488]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	4b78      	ldr	r3, [pc, #480]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a77      	ldr	r2, [pc, #476]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	e01d      	b.n	8009218 <HAL_RCC_OscConfig+0xd4>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091e4:	d10c      	bne.n	8009200 <HAL_RCC_OscConfig+0xbc>
 80091e6:	4b72      	ldr	r3, [pc, #456]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a71      	ldr	r2, [pc, #452]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	4b6f      	ldr	r3, [pc, #444]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a6e      	ldr	r2, [pc, #440]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80091f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	e00b      	b.n	8009218 <HAL_RCC_OscConfig+0xd4>
 8009200:	4b6b      	ldr	r3, [pc, #428]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a6a      	ldr	r2, [pc, #424]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	4b68      	ldr	r3, [pc, #416]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a67      	ldr	r2, [pc, #412]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d013      	beq.n	8009248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009220:	f7fb fed2 	bl	8004fc8 <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009226:	e008      	b.n	800923a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009228:	f7fb fece 	bl	8004fc8 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b64      	cmp	r3, #100	; 0x64
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e200      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800923a:	4b5d      	ldr	r3, [pc, #372]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0f0      	beq.n	8009228 <HAL_RCC_OscConfig+0xe4>
 8009246:	e014      	b.n	8009272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009248:	f7fb febe 	bl	8004fc8 <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009250:	f7fb feba 	bl	8004fc8 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b64      	cmp	r3, #100	; 0x64
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e1ec      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009262:	4b53      	ldr	r3, [pc, #332]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f0      	bne.n	8009250 <HAL_RCC_OscConfig+0x10c>
 800926e:	e000      	b.n	8009272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d063      	beq.n	8009346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800927e:	4b4c      	ldr	r3, [pc, #304]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f003 030c 	and.w	r3, r3, #12
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800928a:	4b49      	ldr	r3, [pc, #292]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f003 030c 	and.w	r3, r3, #12
 8009292:	2b08      	cmp	r3, #8
 8009294:	d11c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x18c>
 8009296:	4b46      	ldr	r3, [pc, #280]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d116      	bne.n	80092d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092a2:	4b43      	ldr	r3, [pc, #268]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <HAL_RCC_OscConfig+0x176>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d001      	beq.n	80092ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e1c0      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092ba:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4939      	ldr	r1, [pc, #228]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ce:	e03a      	b.n	8009346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d020      	beq.n	800931a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092d8:	4b36      	ldr	r3, [pc, #216]	; (80093b4 <HAL_RCC_OscConfig+0x270>)
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092de:	f7fb fe73 	bl	8004fc8 <HAL_GetTick>
 80092e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092e4:	e008      	b.n	80092f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092e6:	f7fb fe6f 	bl	8004fc8 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d901      	bls.n	80092f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e1a1      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f8:	4b2d      	ldr	r3, [pc, #180]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0f0      	beq.n	80092e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009304:	4b2a      	ldr	r3, [pc, #168]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	4927      	ldr	r1, [pc, #156]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 8009314:	4313      	orrs	r3, r2
 8009316:	600b      	str	r3, [r1, #0]
 8009318:	e015      	b.n	8009346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800931a:	4b26      	ldr	r3, [pc, #152]	; (80093b4 <HAL_RCC_OscConfig+0x270>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009320:	f7fb fe52 	bl	8004fc8 <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009326:	e008      	b.n	800933a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009328:	f7fb fe4e 	bl	8004fc8 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e180      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800933a:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1f0      	bne.n	8009328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d03a      	beq.n	80093c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d019      	beq.n	800938e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800935a:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <HAL_RCC_OscConfig+0x274>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009360:	f7fb fe32 	bl	8004fc8 <HAL_GetTick>
 8009364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009366:	e008      	b.n	800937a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009368:	f7fb fe2e 	bl	8004fc8 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b02      	cmp	r3, #2
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e160      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <HAL_RCC_OscConfig+0x26c>)
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0f0      	beq.n	8009368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009386:	2001      	movs	r0, #1
 8009388:	f000 fad0 	bl	800992c <RCC_Delay>
 800938c:	e01c      	b.n	80093c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <HAL_RCC_OscConfig+0x274>)
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009394:	f7fb fe18 	bl	8004fc8 <HAL_GetTick>
 8009398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800939a:	e00f      	b.n	80093bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800939c:	f7fb fe14 	bl	8004fc8 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d908      	bls.n	80093bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e146      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
 80093ae:	bf00      	nop
 80093b0:	40021000 	.word	0x40021000
 80093b4:	42420000 	.word	0x42420000
 80093b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093bc:	4b92      	ldr	r3, [pc, #584]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e9      	bne.n	800939c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a6 	beq.w	8009522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093da:	4b8b      	ldr	r3, [pc, #556]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10d      	bne.n	8009402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093e6:	4b88      	ldr	r3, [pc, #544]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	4a87      	ldr	r2, [pc, #540]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80093ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f0:	61d3      	str	r3, [r2, #28]
 80093f2:	4b85      	ldr	r3, [pc, #532]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fa:	60bb      	str	r3, [r7, #8]
 80093fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093fe:	2301      	movs	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009402:	4b82      	ldr	r3, [pc, #520]	; (800960c <HAL_RCC_OscConfig+0x4c8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	2b00      	cmp	r3, #0
 800940c:	d118      	bne.n	8009440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800940e:	4b7f      	ldr	r3, [pc, #508]	; (800960c <HAL_RCC_OscConfig+0x4c8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a7e      	ldr	r2, [pc, #504]	; (800960c <HAL_RCC_OscConfig+0x4c8>)
 8009414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800941a:	f7fb fdd5 	bl	8004fc8 <HAL_GetTick>
 800941e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009420:	e008      	b.n	8009434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009422:	f7fb fdd1 	bl	8004fc8 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	2b64      	cmp	r3, #100	; 0x64
 800942e:	d901      	bls.n	8009434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e103      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009434:	4b75      	ldr	r3, [pc, #468]	; (800960c <HAL_RCC_OscConfig+0x4c8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0f0      	beq.n	8009422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d106      	bne.n	8009456 <HAL_RCC_OscConfig+0x312>
 8009448:	4b6f      	ldr	r3, [pc, #444]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	4a6e      	ldr	r2, [pc, #440]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800944e:	f043 0301 	orr.w	r3, r3, #1
 8009452:	6213      	str	r3, [r2, #32]
 8009454:	e02d      	b.n	80094b2 <HAL_RCC_OscConfig+0x36e>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10c      	bne.n	8009478 <HAL_RCC_OscConfig+0x334>
 800945e:	4b6a      	ldr	r3, [pc, #424]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	4a69      	ldr	r2, [pc, #420]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	6213      	str	r3, [r2, #32]
 800946a:	4b67      	ldr	r3, [pc, #412]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	4a66      	ldr	r2, [pc, #408]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009470:	f023 0304 	bic.w	r3, r3, #4
 8009474:	6213      	str	r3, [r2, #32]
 8009476:	e01c      	b.n	80094b2 <HAL_RCC_OscConfig+0x36e>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2b05      	cmp	r3, #5
 800947e:	d10c      	bne.n	800949a <HAL_RCC_OscConfig+0x356>
 8009480:	4b61      	ldr	r3, [pc, #388]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	4a60      	ldr	r2, [pc, #384]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009486:	f043 0304 	orr.w	r3, r3, #4
 800948a:	6213      	str	r3, [r2, #32]
 800948c:	4b5e      	ldr	r3, [pc, #376]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	4a5d      	ldr	r2, [pc, #372]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	6213      	str	r3, [r2, #32]
 8009498:	e00b      	b.n	80094b2 <HAL_RCC_OscConfig+0x36e>
 800949a:	4b5b      	ldr	r3, [pc, #364]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	4a5a      	ldr	r2, [pc, #360]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80094a0:	f023 0301 	bic.w	r3, r3, #1
 80094a4:	6213      	str	r3, [r2, #32]
 80094a6:	4b58      	ldr	r3, [pc, #352]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	4a57      	ldr	r2, [pc, #348]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80094ac:	f023 0304 	bic.w	r3, r3, #4
 80094b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d015      	beq.n	80094e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094ba:	f7fb fd85 	bl	8004fc8 <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c0:	e00a      	b.n	80094d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094c2:	f7fb fd81 	bl	8004fc8 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d901      	bls.n	80094d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e0b1      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094d8:	4b4b      	ldr	r3, [pc, #300]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0ee      	beq.n	80094c2 <HAL_RCC_OscConfig+0x37e>
 80094e4:	e014      	b.n	8009510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094e6:	f7fb fd6f 	bl	8004fc8 <HAL_GetTick>
 80094ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094ec:	e00a      	b.n	8009504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ee:	f7fb fd6b 	bl	8004fc8 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e09b      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009504:	4b40      	ldr	r3, [pc, #256]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ee      	bne.n	80094ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d105      	bne.n	8009522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009516:	4b3c      	ldr	r3, [pc, #240]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4a3b      	ldr	r2, [pc, #236]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800951c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009520:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8087 	beq.w	800963a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800952c:	4b36      	ldr	r3, [pc, #216]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f003 030c 	and.w	r3, r3, #12
 8009534:	2b08      	cmp	r3, #8
 8009536:	d061      	beq.n	80095fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d146      	bne.n	80095ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009540:	4b33      	ldr	r3, [pc, #204]	; (8009610 <HAL_RCC_OscConfig+0x4cc>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009546:	f7fb fd3f 	bl	8004fc8 <HAL_GetTick>
 800954a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800954c:	e008      	b.n	8009560 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800954e:	f7fb fd3b 	bl	8004fc8 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d901      	bls.n	8009560 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e06d      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009560:	4b29      	ldr	r3, [pc, #164]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f0      	bne.n	800954e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a1b      	ldr	r3, [r3, #32]
 8009570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009574:	d108      	bne.n	8009588 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009576:	4b24      	ldr	r3, [pc, #144]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	4921      	ldr	r1, [pc, #132]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 8009584:	4313      	orrs	r3, r2
 8009586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009588:	4b1f      	ldr	r3, [pc, #124]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a19      	ldr	r1, [r3, #32]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	430b      	orrs	r3, r1
 800959a:	491b      	ldr	r1, [pc, #108]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 800959c:	4313      	orrs	r3, r2
 800959e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095a0:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <HAL_RCC_OscConfig+0x4cc>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a6:	f7fb fd0f 	bl	8004fc8 <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ae:	f7fb fd0b 	bl	8004fc8 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e03d      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80095c0:	4b11      	ldr	r3, [pc, #68]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0f0      	beq.n	80095ae <HAL_RCC_OscConfig+0x46a>
 80095cc:	e035      	b.n	800963a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ce:	4b10      	ldr	r3, [pc, #64]	; (8009610 <HAL_RCC_OscConfig+0x4cc>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d4:	f7fb fcf8 	bl	8004fc8 <HAL_GetTick>
 80095d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095da:	e008      	b.n	80095ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095dc:	f7fb fcf4 	bl	8004fc8 <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e026      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <HAL_RCC_OscConfig+0x4c4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f0      	bne.n	80095dc <HAL_RCC_OscConfig+0x498>
 80095fa:	e01e      	b.n	800963a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d107      	bne.n	8009614 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e019      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
 8009608:	40021000 	.word	0x40021000
 800960c:	40007000 	.word	0x40007000
 8009610:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <HAL_RCC_OscConfig+0x500>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	429a      	cmp	r2, r3
 8009626:	d106      	bne.n	8009636 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009632:	429a      	cmp	r2, r3
 8009634:	d001      	beq.n	800963a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40021000 	.word	0x40021000

08009648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e0d0      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800965c:	4b6a      	ldr	r3, [pc, #424]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d910      	bls.n	800968c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966a:	4b67      	ldr	r3, [pc, #412]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 0207 	bic.w	r2, r3, #7
 8009672:	4965      	ldr	r1, [pc, #404]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967a:	4b63      	ldr	r3, [pc, #396]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d001      	beq.n	800968c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e0b8      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d020      	beq.n	80096da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096a4:	4b59      	ldr	r3, [pc, #356]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	4a58      	ldr	r2, [pc, #352]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80096ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096bc:	4b53      	ldr	r3, [pc, #332]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a52      	ldr	r2, [pc, #328]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80096c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096c8:	4b50      	ldr	r3, [pc, #320]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	494d      	ldr	r1, [pc, #308]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d040      	beq.n	8009768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d107      	bne.n	80096fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ee:	4b47      	ldr	r3, [pc, #284]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d115      	bne.n	8009726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e07f      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	2b02      	cmp	r3, #2
 8009704:	d107      	bne.n	8009716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009706:	4b41      	ldr	r3, [pc, #260]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e073      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009716:	4b3d      	ldr	r3, [pc, #244]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e06b      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009726:	4b39      	ldr	r3, [pc, #228]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f023 0203 	bic.w	r2, r3, #3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4936      	ldr	r1, [pc, #216]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 8009734:	4313      	orrs	r3, r2
 8009736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009738:	f7fb fc46 	bl	8004fc8 <HAL_GetTick>
 800973c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800973e:	e00a      	b.n	8009756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009740:	f7fb fc42 	bl	8004fc8 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	f241 3288 	movw	r2, #5000	; 0x1388
 800974e:	4293      	cmp	r3, r2
 8009750:	d901      	bls.n	8009756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009752:	2303      	movs	r3, #3
 8009754:	e053      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009756:	4b2d      	ldr	r3, [pc, #180]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f003 020c 	and.w	r2, r3, #12
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	429a      	cmp	r2, r3
 8009766:	d1eb      	bne.n	8009740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009768:	4b27      	ldr	r3, [pc, #156]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	429a      	cmp	r2, r3
 8009774:	d210      	bcs.n	8009798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009776:	4b24      	ldr	r3, [pc, #144]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f023 0207 	bic.w	r2, r3, #7
 800977e:	4922      	ldr	r1, [pc, #136]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	4313      	orrs	r3, r2
 8009784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009786:	4b20      	ldr	r3, [pc, #128]	; (8009808 <HAL_RCC_ClockConfig+0x1c0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d001      	beq.n	8009798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e032      	b.n	80097fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d008      	beq.n	80097b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097a4:	4b19      	ldr	r3, [pc, #100]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	4916      	ldr	r1, [pc, #88]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	490e      	ldr	r1, [pc, #56]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80097d6:	f000 f821 	bl	800981c <HAL_RCC_GetSysClockFreq>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b0b      	ldr	r3, [pc, #44]	; (800980c <HAL_RCC_ClockConfig+0x1c4>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	490a      	ldr	r1, [pc, #40]	; (8009810 <HAL_RCC_ClockConfig+0x1c8>)
 80097e8:	5ccb      	ldrb	r3, [r1, r3]
 80097ea:	fa22 f303 	lsr.w	r3, r2, r3
 80097ee:	4a09      	ldr	r2, [pc, #36]	; (8009814 <HAL_RCC_ClockConfig+0x1cc>)
 80097f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <HAL_RCC_ClockConfig+0x1d0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fb fba4 	bl	8004f44 <HAL_InitTick>

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	40022000 	.word	0x40022000
 800980c:	40021000 	.word	0x40021000
 8009810:	0800dcbc 	.word	0x0800dcbc
 8009814:	20000004 	.word	0x20000004
 8009818:	20000008 	.word	0x20000008

0800981c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
 800982a:	2300      	movs	r3, #0
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	2300      	movs	r3, #0
 8009830:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009836:	4b1e      	ldr	r3, [pc, #120]	; (80098b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f003 030c 	and.w	r3, r3, #12
 8009842:	2b04      	cmp	r3, #4
 8009844:	d002      	beq.n	800984c <HAL_RCC_GetSysClockFreq+0x30>
 8009846:	2b08      	cmp	r3, #8
 8009848:	d003      	beq.n	8009852 <HAL_RCC_GetSysClockFreq+0x36>
 800984a:	e027      	b.n	800989c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800984c:	4b19      	ldr	r3, [pc, #100]	; (80098b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800984e:	613b      	str	r3, [r7, #16]
      break;
 8009850:	e027      	b.n	80098a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	0c9b      	lsrs	r3, r3, #18
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	4a17      	ldr	r2, [pc, #92]	; (80098b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800985c:	5cd3      	ldrb	r3, [r2, r3]
 800985e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d010      	beq.n	800988c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	0c5b      	lsrs	r3, r3, #17
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	4a11      	ldr	r2, [pc, #68]	; (80098bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8009876:	5cd3      	ldrb	r3, [r2, r3]
 8009878:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a0d      	ldr	r2, [pc, #52]	; (80098b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800987e:	fb03 f202 	mul.w	r2, r3, r2
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	fbb2 f3f3 	udiv	r3, r2, r3
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e004      	b.n	8009896 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a0c      	ldr	r2, [pc, #48]	; (80098c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009890:	fb02 f303 	mul.w	r3, r2, r3
 8009894:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	613b      	str	r3, [r7, #16]
      break;
 800989a:	e002      	b.n	80098a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800989c:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800989e:	613b      	str	r3, [r7, #16]
      break;
 80098a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80098a2:	693b      	ldr	r3, [r7, #16]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bc80      	pop	{r7}
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40021000 	.word	0x40021000
 80098b4:	00b71b00 	.word	0x00b71b00
 80098b8:	0800dcd4 	.word	0x0800dcd4
 80098bc:	0800dce4 	.word	0x0800dce4
 80098c0:	003d0900 	.word	0x003d0900
 80098c4:	007a1200 	.word	0x007a1200

080098c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098cc:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80098ce:	681b      	ldr	r3, [r3, #0]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr
 80098d8:	20000004 	.word	0x20000004

080098dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098e0:	f7ff fff2 	bl	80098c8 <HAL_RCC_GetHCLKFreq>
 80098e4:	4602      	mov	r2, r0
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	0a1b      	lsrs	r3, r3, #8
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	4903      	ldr	r1, [pc, #12]	; (8009900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098f2:	5ccb      	ldrb	r3, [r1, r3]
 80098f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	40021000 	.word	0x40021000
 8009900:	0800dccc 	.word	0x0800dccc

08009904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009908:	f7ff ffde 	bl	80098c8 <HAL_RCC_GetHCLKFreq>
 800990c:	4602      	mov	r2, r0
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	0adb      	lsrs	r3, r3, #11
 8009914:	f003 0307 	and.w	r3, r3, #7
 8009918:	4903      	ldr	r1, [pc, #12]	; (8009928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800991a:	5ccb      	ldrb	r3, [r1, r3]
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009920:	4618      	mov	r0, r3
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40021000 	.word	0x40021000
 8009928:	0800dccc 	.word	0x0800dccc

0800992c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <RCC_Delay+0x34>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a0a      	ldr	r2, [pc, #40]	; (8009964 <RCC_Delay+0x38>)
 800993a:	fba2 2303 	umull	r2, r3, r2, r3
 800993e:	0a5b      	lsrs	r3, r3, #9
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009948:	bf00      	nop
  }
  while (Delay --);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1e5a      	subs	r2, r3, #1
 800994e:	60fa      	str	r2, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f9      	bne.n	8009948 <RCC_Delay+0x1c>
}
 8009954:	bf00      	nop
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr
 8009960:	20000004 	.word	0x20000004
 8009964:	10624dd3 	.word	0x10624dd3

08009968 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d07d      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009984:	2300      	movs	r3, #0
 8009986:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009988:	4b4f      	ldr	r3, [pc, #316]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10d      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009994:	4b4c      	ldr	r3, [pc, #304]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	4a4b      	ldr	r2, [pc, #300]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800999a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800999e:	61d3      	str	r3, [r2, #28]
 80099a0:	4b49      	ldr	r3, [pc, #292]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ac:	2301      	movs	r3, #1
 80099ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099b0:	4b46      	ldr	r3, [pc, #280]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d118      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099bc:	4b43      	ldr	r3, [pc, #268]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a42      	ldr	r2, [pc, #264]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80099c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099c8:	f7fb fafe 	bl	8004fc8 <HAL_GetTick>
 80099cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ce:	e008      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099d0:	f7fb fafa 	bl	8004fc8 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b64      	cmp	r3, #100	; 0x64
 80099dc:	d901      	bls.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e06d      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e2:	4b3a      	ldr	r3, [pc, #232]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0f0      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80099ee:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d02e      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d027      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a0e:	6a1b      	ldr	r3, [r3, #32]
 8009a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a16:	4b2e      	ldr	r3, [pc, #184]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009a1c:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009a22:	4a29      	ldr	r2, [pc, #164]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d014      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a32:	f7fb fac9 	bl	8004fc8 <HAL_GetTick>
 8009a36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a38:	e00a      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a3a:	f7fb fac5 	bl	8004fc8 <HAL_GetTick>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d901      	bls.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e036      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a50:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0ee      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4917      	ldr	r1, [pc, #92]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d105      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a74:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	4a13      	ldr	r2, [pc, #76]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	490b      	ldr	r1, [pc, #44]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d008      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aaa:	4b07      	ldr	r3, [pc, #28]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	4904      	ldr	r1, [pc, #16]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	40021000 	.word	0x40021000
 8009acc:	40007000 	.word	0x40007000
 8009ad0:	42420440 	.word	0x42420440

08009ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	61fb      	str	r3, [r7, #28]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	2300      	movs	r3, #0
 8009aee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b10      	cmp	r3, #16
 8009af4:	d00a      	beq.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	f200 8089 	bhi.w	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d045      	beq.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d074      	beq.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8009b0a:	e081      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8009b0c:	4b45      	ldr	r3, [pc, #276]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009b12:	4b44      	ldr	r3, [pc, #272]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d07a      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	0c9b      	lsrs	r3, r3, #18
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	4a40      	ldr	r2, [pc, #256]	; (8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009b28:	5cd3      	ldrb	r3, [r2, r3]
 8009b2a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d015      	beq.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009b36:	4b3b      	ldr	r3, [pc, #236]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	0c5b      	lsrs	r3, r3, #17
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	4a3a      	ldr	r2, [pc, #232]	; (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8009b42:	5cd3      	ldrb	r3, [r2, r3]
 8009b44:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00d      	beq.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009b50:	4a37      	ldr	r2, [pc, #220]	; (8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	61fb      	str	r3, [r7, #28]
 8009b60:	e004      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	4a33      	ldr	r2, [pc, #204]	; (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8009b66:	fb02 f303 	mul.w	r3, r2, r3
 8009b6a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009b6c:	4b2d      	ldr	r3, [pc, #180]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b78:	d102      	bne.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	61bb      	str	r3, [r7, #24]
      break;
 8009b7e:	e049      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4a2c      	ldr	r2, [pc, #176]	; (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	61bb      	str	r3, [r7, #24]
      break;
 8009b8e:	e041      	b.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8009b90:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ba0:	d108      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8009bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bb0:	61bb      	str	r3, [r7, #24]
 8009bb2:	e01e      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bbe:	d109      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009bc0:	4b18      	ldr	r3, [pc, #96]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8009bcc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	e00e      	b.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bde:	d11b      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d015      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8009bec:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009bee:	61bb      	str	r3, [r7, #24]
      break;
 8009bf0:	e012      	b.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8009bf2:	e011      	b.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8009bf4:	f7ff fe86 	bl	8009904 <HAL_RCC_GetPCLK2Freq>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	0b9b      	lsrs	r3, r3, #14
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	3301      	adds	r3, #1
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0c:	61bb      	str	r3, [r7, #24]
      break;
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8009c18:	bf00      	nop
    }
  }
  return (frequency);
 8009c1a:	69bb      	ldr	r3, [r7, #24]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40021000 	.word	0x40021000
 8009c28:	0800dce8 	.word	0x0800dce8
 8009c2c:	0800dcf8 	.word	0x0800dcf8
 8009c30:	00b71b00 	.word	0x00b71b00
 8009c34:	003d0900 	.word	0x003d0900
 8009c38:	aaaaaaab 	.word	0xaaaaaaab
 8009c3c:	00016e36 	.word	0x00016e36

08009c40 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e07a      	b.n	8009d4c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7c5b      	ldrb	r3, [r3, #17]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d105      	bne.n	8009c6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7fa fec4 	bl	80049f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fc2c 	bl	800a4d0 <HAL_RTC_WaitForSynchro>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2204      	movs	r2, #4
 8009c82:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e061      	b.n	8009d4c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fce5 	bl	800a658 <RTC_EnterInitMode>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d004      	beq.n	8009c9e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2204      	movs	r2, #4
 8009c98:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e056      	b.n	8009d4c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0207 	bic.w	r2, r2, #7
 8009cac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009cb6:	4b27      	ldr	r3, [pc, #156]	; (8009d54 <HAL_RTC_Init+0x114>)
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	4a26      	ldr	r2, [pc, #152]	; (8009d54 <HAL_RTC_Init+0x114>)
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <HAL_RTC_Init+0x114>)
 8009cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	4921      	ldr	r1, [pc, #132]	; (8009d54 <HAL_RTC_Init+0x114>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cdc:	d003      	beq.n	8009ce6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	e00e      	b.n	8009d04 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7ff fef4 	bl	8009ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e026      	b.n	8009d4c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0c1a      	lsrs	r2, r3, #16
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f002 020f 	and.w	r2, r2, #15
 8009d10:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fcc3 	bl	800a6a8 <RTC_ExitInitMode>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d004      	beq.n	8009d32 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e00c      	b.n	8009d4c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
  }
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	40006c00 	.word	0x40006c00

08009d58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <HAL_RTC_SetTime+0x20>
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e080      	b.n	8009e7e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	7c1b      	ldrb	r3, [r3, #16]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_RTC_SetTime+0x30>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e07a      	b.n	8009e7e <HAL_RTC_SetTime+0x126>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2202      	movs	r2, #2
 8009d92:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d113      	bne.n	8009dc2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009da4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	4619      	mov	r1, r3
 8009dae:	460b      	mov	r3, r1
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	1a5b      	subs	r3, r3, r1
 8009db4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009db6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8009dbc:	4413      	add	r3, r2
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e01e      	b.n	8009e00 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 fcb3 	bl	800a732 <RTC_Bcd2ToByte>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009dd4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	785b      	ldrb	r3, [r3, #1]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 fca8 	bl	800a732 <RTC_Bcd2ToByte>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	4613      	mov	r3, r2
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009dee:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	789b      	ldrb	r3, [r3, #2]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fc9c 	bl	800a732 <RTC_Bcd2ToByte>
 8009dfa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8009dfc:	4423      	add	r3, r4
 8009dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009e00:	6979      	ldr	r1, [r7, #20]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fbc1 	bl	800a58a <RTC_WriteTimeCounter>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2204      	movs	r2, #4
 8009e12:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e02f      	b.n	8009e7e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0205 	bic.w	r2, r2, #5
 8009e2c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f000 fbd2 	bl	800a5d8 <RTC_ReadAlarmCounter>
 8009e34:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3c:	d018      	beq.n	8009e70 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d214      	bcs.n	8009e70 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8009e4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009e50:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009e52:	6939      	ldr	r1, [r7, #16]
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fbd8 	bl	800a60a <RTC_WriteAlarmCounter>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d007      	beq.n	8009e70 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2204      	movs	r2, #4
 8009e64:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e006      	b.n	8009e7e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
  }
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}
	...

08009e88 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <HAL_RTC_GetTime+0x28>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e0b5      	b.n	800a020 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e0ac      	b.n	800a020 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fb2f 	bl	800a52a <RTC_ReadTimeCounter>
 8009ecc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	4a55      	ldr	r2, [pc, #340]	; (800a028 <HAL_RTC_GetTime+0x1a0>)
 8009ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed6:	0adb      	lsrs	r3, r3, #11
 8009ed8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	4b52      	ldr	r3, [pc, #328]	; (800a028 <HAL_RTC_GetTime+0x1a0>)
 8009ede:	fba3 1302 	umull	r1, r3, r3, r2
 8009ee2:	0adb      	lsrs	r3, r3, #11
 8009ee4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ee8:	fb01 f303 	mul.w	r3, r1, r3
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	4a4f      	ldr	r2, [pc, #316]	; (800a02c <HAL_RTC_GetTime+0x1a4>)
 8009ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef4:	095b      	lsrs	r3, r3, #5
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	4a4a      	ldr	r2, [pc, #296]	; (800a028 <HAL_RTC_GetTime+0x1a0>)
 8009f00:	fba2 1203 	umull	r1, r2, r2, r3
 8009f04:	0ad2      	lsrs	r2, r2, #11
 8009f06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009f0a:	fb01 f202 	mul.w	r2, r1, r2
 8009f0e:	1a9a      	subs	r2, r3, r2
 8009f10:	4b46      	ldr	r3, [pc, #280]	; (800a02c <HAL_RTC_GetTime+0x1a4>)
 8009f12:	fba3 1302 	umull	r1, r3, r3, r2
 8009f16:	0959      	lsrs	r1, r3, #5
 8009f18:	460b      	mov	r3, r1
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	1a5b      	subs	r3, r3, r1
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	1ad1      	subs	r1, r2, r3
 8009f22:	b2ca      	uxtb	r2, r1
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b17      	cmp	r3, #23
 8009f2c:	d955      	bls.n	8009fda <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4a3f      	ldr	r2, [pc, #252]	; (800a030 <HAL_RTC_GetTime+0x1a8>)
 8009f32:	fba2 2303 	umull	r2, r3, r2, r3
 8009f36:	091b      	lsrs	r3, r3, #4
 8009f38:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8009f3a:	6939      	ldr	r1, [r7, #16]
 8009f3c:	4b3c      	ldr	r3, [pc, #240]	; (800a030 <HAL_RTC_GetTime+0x1a8>)
 8009f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f42:	091a      	lsrs	r2, r3, #4
 8009f44:	4613      	mov	r3, r2
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	1aca      	subs	r2, r1, r3
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fb3f 	bl	800a5d8 <RTC_ReadAlarmCounter>
 8009f5a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d008      	beq.n	8009f76 <HAL_RTC_GetTime+0xee>
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d904      	bls.n	8009f76 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	e002      	b.n	8009f7c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	4a2d      	ldr	r2, [pc, #180]	; (800a034 <HAL_RTC_GetTime+0x1ac>)
 8009f80:	fb02 f303 	mul.w	r3, r2, r3
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8009f8a:	69b9      	ldr	r1, [r7, #24]
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 fafc 	bl	800a58a <RTC_WriteTimeCounter>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e041      	b.n	800a020 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa2:	d00c      	beq.n	8009fbe <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	4413      	add	r3, r2
 8009faa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009fac:	69f9      	ldr	r1, [r7, #28]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fb2b 	bl	800a60a <RTC_WriteAlarmCounter>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e030      	b.n	800a020 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8009fbe:	69f9      	ldr	r1, [r7, #28]
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fb22 	bl	800a60a <RTC_WriteAlarmCounter>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e027      	b.n	800a020 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8009fd0:	6979      	ldr	r1, [r7, #20]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fbca 	bl	800a76c <RTC_DateUpdate>
 8009fd8:	e003      	b.n	8009fe2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01a      	beq.n	800a01e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fb83 	bl	800a6f8 <RTC_ByteToBcd2>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fb7a 	bl	800a6f8 <RTC_ByteToBcd2>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fb71 	bl	800a6f8 <RTC_ByteToBcd2>
 800a016:	4603      	mov	r3, r0
 800a018:	461a      	mov	r2, r3
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	91a2b3c5 	.word	0x91a2b3c5
 800a02c:	88888889 	.word	0x88888889
 800a030:	aaaaaaab 	.word	0xaaaaaaab
 800a034:	00015180 	.word	0x00015180

0800a038 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	61fb      	str	r3, [r7, #28]
 800a048:	2300      	movs	r3, #0
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <HAL_RTC_SetDate+0x24>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e097      	b.n	800a190 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	7c1b      	ldrb	r3, [r3, #16]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <HAL_RTC_SetDate+0x34>
 800a068:	2302      	movs	r3, #2
 800a06a:	e091      	b.n	800a190 <HAL_RTC_SetDate+0x158>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2202      	movs	r2, #2
 800a076:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10c      	bne.n	800a098 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	78da      	ldrb	r2, [r3, #3]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	785a      	ldrb	r2, [r3, #1]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	789a      	ldrb	r2, [r3, #2]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	739a      	strb	r2, [r3, #14]
 800a096:	e01a      	b.n	800a0ce <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	78db      	ldrb	r3, [r3, #3]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fb48 	bl	800a732 <RTC_Bcd2ToByte>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fb3f 	bl	800a732 <RTC_Bcd2ToByte>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	789b      	ldrb	r3, [r3, #2]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fb36 	bl	800a732 <RTC_Bcd2ToByte>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	7bdb      	ldrb	r3, [r3, #15]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	7b59      	ldrb	r1, [r3, #13]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7b9b      	ldrb	r3, [r3, #14]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f000 fc21 	bl	800a924 <RTC_WeekDayNum>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	7b1a      	ldrb	r2, [r3, #12]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fa19 	bl	800a52a <RTC_ReadTimeCounter>
 800a0f8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4a26      	ldr	r2, [pc, #152]	; (800a198 <HAL_RTC_SetDate+0x160>)
 800a0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a102:	0adb      	lsrs	r3, r3, #11
 800a104:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b18      	cmp	r3, #24
 800a10a:	d93a      	bls.n	800a182 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	4a23      	ldr	r2, [pc, #140]	; (800a19c <HAL_RTC_SetDate+0x164>)
 800a110:	fba2 2303 	umull	r2, r3, r2, r3
 800a114:	091b      	lsrs	r3, r3, #4
 800a116:	4a22      	ldr	r2, [pc, #136]	; (800a1a0 <HAL_RTC_SetDate+0x168>)
 800a118:	fb02 f303 	mul.w	r3, r2, r3
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800a122:	69f9      	ldr	r1, [r7, #28]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fa30 	bl	800a58a <RTC_WriteTimeCounter>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d007      	beq.n	800a140 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2204      	movs	r2, #4
 800a134:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e027      	b.n	800a190 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fa49 	bl	800a5d8 <RTC_ReadAlarmCounter>
 800a146:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d018      	beq.n	800a182 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	429a      	cmp	r2, r3
 800a156:	d214      	bcs.n	800a182 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800a15e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a162:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a164:	69b9      	ldr	r1, [r7, #24]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fa4f 	bl	800a60a <RTC_WriteAlarmCounter>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2204      	movs	r2, #4
 800a176:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e006      	b.n	800a190 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	91a2b3c5 	.word	0x91a2b3c5
 800a19c:	aaaaaaab 	.word	0xaaaaaaab
 800a1a0:	00015180 	.word	0x00015180

0800a1a4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	460a      	mov	r2, r1
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	460a      	mov	r2, r1
 800a1bc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <HAL_RTC_GetDate+0x26>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e03a      	b.n	800a244 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800a1ce:	f107 0314 	add.w	r3, r7, #20
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f7ff fe56 	bl	8009e88 <HAL_RTC_GetTime>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e02e      	b.n	800a244 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	7b1a      	ldrb	r2, [r3, #12]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	7bda      	ldrb	r2, [r3, #15]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	7b5a      	ldrb	r2, [r3, #13]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	7b9a      	ldrb	r2, [r3, #14]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01a      	beq.n	800a242 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	78db      	ldrb	r3, [r3, #3]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 fa71 	bl	800a6f8 <RTC_ByteToBcd2>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	785b      	ldrb	r3, [r3, #1]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fa68 	bl	800a6f8 <RTC_ByteToBcd2>
 800a228:	4603      	mov	r3, r0
 800a22a:	461a      	mov	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	789b      	ldrb	r3, [r3, #2]
 800a234:	4618      	mov	r0, r3
 800a236:	f000 fa5f 	bl	800a6f8 <RTC_ByteToBcd2>
 800a23a:	4603      	mov	r3, r0
 800a23c:	461a      	mov	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b089      	sub	sp, #36	; 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 800a258:	2300      	movs	r3, #0
 800a25a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	2100      	movs	r1, #0
 800a262:	460a      	mov	r2, r1
 800a264:	801a      	strh	r2, [r3, #0]
 800a266:	460a      	mov	r2, r1
 800a268:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <HAL_RTC_SetAlarm_IT+0x2a>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e099      	b.n	800a3ae <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	7c1b      	ldrb	r3, [r3, #16]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_RTC_SetAlarm_IT+0x3a>
 800a282:	2302      	movs	r3, #2
 800a284:	e093      	b.n	800a3ae <HAL_RTC_SetAlarm_IT+0x162>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2202      	movs	r2, #2
 800a290:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800a292:	f107 0314 	add.w	r3, r7, #20
 800a296:	2200      	movs	r2, #0
 800a298:	4619      	mov	r1, r3
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fdf4 	bl	8009e88 <HAL_RTC_GetTime>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e081      	b.n	800a3ae <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800a2aa:	7d3b      	ldrb	r3, [r7, #20]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a2b2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800a2b6:	7d7b      	ldrb	r3, [r7, #21]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	1a5b      	subs	r3, r3, r1
 800a2c0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800a2c2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 800a2c4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800a2c6:	4413      	add	r3, r2
 800a2c8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d113      	bne.n	800a2f8 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a2da:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	1a5b      	subs	r3, r3, r1
 800a2ea:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800a2ec:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800a2f2:	4413      	add	r3, r2
 800a2f4:	61fb      	str	r3, [r7, #28]
 800a2f6:	e01e      	b.n	800a336 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fa18 	bl	800a732 <RTC_Bcd2ToByte>
 800a302:	4603      	mov	r3, r0
 800a304:	461a      	mov	r2, r3
 800a306:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a30a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	4618      	mov	r0, r3
 800a314:	f000 fa0d 	bl	800a732 <RTC_Bcd2ToByte>
 800a318:	4603      	mov	r3, r0
 800a31a:	461a      	mov	r2, r3
 800a31c:	4613      	mov	r3, r2
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800a324:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	789b      	ldrb	r3, [r3, #2]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f000 fa01 	bl	800a732 <RTC_Bcd2ToByte>
 800a330:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800a332:	4423      	add	r3, r4
 800a334:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d205      	bcs.n	800a34a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800a344:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800a348:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800a34a:	69f9      	ldr	r1, [r7, #28]
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f95c 	bl	800a60a <RTC_WriteAlarmCounter>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2204      	movs	r2, #4
 800a35c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e022      	b.n	800a3ae <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0202 	bic.w	r2, r2, #2
 800a376:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f042 0202 	orr.w	r2, r2, #2
 800a386:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a388:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a0a      	ldr	r2, [pc, #40]	; (800a3b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800a38e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a392:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a394:	4b08      	ldr	r3, [pc, #32]	; (800a3b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	4a07      	ldr	r2, [pc, #28]	; (800a3b8 <HAL_RTC_SetAlarm_IT+0x16c>)
 800a39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a39e:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3724      	adds	r7, #36	; 0x24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd90      	pop	{r4, r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	40010400 	.word	0x40010400

0800a3bc <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e04e      	b.n	800a46e <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7c1b      	ldrb	r3, [r3, #16]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_RTC_DeactivateAlarm+0x20>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e048      	b.n	800a46e <HAL_RTC_DeactivateAlarm+0xb2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0202 	bic.w	r2, r2, #2
 800a3f6:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f92d 	bl	800a658 <RTC_EnterInitMode>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2204      	movs	r2, #4
 800a408:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e02c      	b.n	800a46e <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0202 	bic.w	r2, r2, #2
 800a422:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a42c:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a436:	625a      	str	r2, [r3, #36]	; 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <HAL_RTC_DeactivateAlarm+0xbc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a0e      	ldr	r2, [pc, #56]	; (800a478 <HAL_RTC_DeactivateAlarm+0xbc>)
 800a43e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a442:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f92f 	bl	800a6a8 <RTC_ExitInitMode>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2204      	movs	r2, #4
 800a454:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e006      	b.n	800a46e <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	40010400 	.word	0x40010400

0800a47c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d011      	beq.n	800a4b6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7f8 fcc5 	bl	8002e30 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0202 	bic.w	r2, r2, #2
 800a4b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <HAL_RTC_AlarmIRQHandler+0x50>)
 800a4b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a4bc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	745a      	strb	r2, [r3, #17]
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	40010400 	.word	0x40010400

0800a4d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e01d      	b.n	800a522 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0208 	bic.w	r2, r2, #8
 800a4f4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a4f6:	f7fa fd67 	bl	8004fc8 <HAL_GetTick>
 800a4fa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a4fc:	e009      	b.n	800a512 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a4fe:	f7fa fd63 	bl	8004fc8 <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a50c:	d901      	bls.n	800a512 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e007      	b.n	800a522 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0ee      	beq.n	800a4fe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	827b      	strh	r3, [r7, #18]
 800a536:	2300      	movs	r3, #0
 800a538:	823b      	strh	r3, [r7, #16]
 800a53a:	2300      	movs	r3, #0
 800a53c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800a55a:	8a7a      	ldrh	r2, [r7, #18]
 800a55c:	8a3b      	ldrh	r3, [r7, #16]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d008      	beq.n	800a574 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800a562:	8a3b      	ldrh	r3, [r7, #16]
 800a564:	041a      	lsls	r2, r3, #16
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]
 800a572:	e004      	b.n	800a57e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800a574:	8a7b      	ldrh	r3, [r7, #18]
 800a576:	041a      	lsls	r2, r3, #16
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800a57e:	697b      	ldr	r3, [r7, #20]
}
 800a580:	4618      	mov	r0, r3
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr

0800a58a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f85d 	bl	800a658 <RTC_EnterInitMode>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e011      	b.n	800a5ce <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	0c12      	lsrs	r2, r2, #16
 800a5b2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	b292      	uxth	r2, r2
 800a5bc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f872 	bl	800a6a8 <RTC_ExitInitMode>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	81fb      	strh	r3, [r7, #14]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800a5f8:	89fb      	ldrh	r3, [r7, #14]
 800a5fa:	041a      	lsls	r2, r3, #16
 800a5fc:	89bb      	ldrh	r3, [r7, #12]
 800a5fe:	4313      	orrs	r3, r2
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr

0800a60a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f81d 	bl	800a658 <RTC_EnterInitMode>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
 800a628:	e011      	b.n	800a64e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	0c12      	lsrs	r2, r2, #16
 800a632:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	b292      	uxth	r2, r2
 800a63c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f832 	bl	800a6a8 <RTC_ExitInitMode>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800a664:	f7fa fcb0 	bl	8004fc8 <HAL_GetTick>
 800a668:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a66a:	e009      	b.n	800a680 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a66c:	f7fa fcac 	bl	8004fc8 <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a67a:	d901      	bls.n	800a680 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e00f      	b.n	800a6a0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f003 0320 	and.w	r3, r3, #32
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0ee      	beq.n	800a66c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0210 	orr.w	r2, r2, #16
 800a69c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0210 	bic.w	r2, r2, #16
 800a6c2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800a6c4:	f7fa fc80 	bl	8004fc8 <HAL_GetTick>
 800a6c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a6ca:	e009      	b.n	800a6e0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800a6cc:	f7fa fc7c 	bl	8004fc8 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6da:	d901      	bls.n	800a6e0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e007      	b.n	800a6f0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0ee      	beq.n	800a6cc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800a706:	e005      	b.n	800a714 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3301      	adds	r3, #1
 800a70c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	3b0a      	subs	r3, #10
 800a712:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b09      	cmp	r3, #9
 800a718:	d8f6      	bhi.n	800a708 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	b2da      	uxtb	r2, r3
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	4313      	orrs	r3, r2
 800a726:	b2db      	uxtb	r3, r3
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bc80      	pop	{r7}
 800a730:	4770      	bx	lr

0800a732 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a732:	b480      	push	{r7}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	4603      	mov	r3, r0
 800a73a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	091b      	lsrs	r3, r3, #4
 800a744:	b2db      	uxtb	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	4613      	mov	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4413      	add	r3, r2
 800a760:	b2db      	uxtb	r3, r3
}
 800a762:	4618      	mov	r0, r3
 800a764:	3714      	adds	r7, #20
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr

0800a76c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	2300      	movs	r3, #0
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7bdb      	ldrb	r3, [r3, #15]
 800a78a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7b5b      	ldrb	r3, [r3, #13]
 800a790:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	7b9b      	ldrb	r3, [r3, #14]
 800a796:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800a798:	2300      	movs	r3, #0
 800a79a:	60bb      	str	r3, [r7, #8]
 800a79c:	e06f      	b.n	800a87e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d011      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d00e      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b05      	cmp	r3, #5
 800a7ae:	d00b      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b07      	cmp	r3, #7
 800a7b4:	d008      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d005      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2b0a      	cmp	r3, #10
 800a7c0:	d002      	beq.n	800a7c8 <RTC_DateUpdate+0x5c>
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b0c      	cmp	r3, #12
 800a7c6:	d117      	bne.n	800a7f8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b1e      	cmp	r3, #30
 800a7cc:	d803      	bhi.n	800a7d6 <RTC_DateUpdate+0x6a>
      {
        day++;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a7d4:	e050      	b.n	800a878 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b0c      	cmp	r3, #12
 800a7da:	d005      	beq.n	800a7e8 <RTC_DateUpdate+0x7c>
        {
          month++;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800a7e6:	e047      	b.n	800a878 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
          year++;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800a7f6:	e03f      	b.n	800a878 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d008      	beq.n	800a810 <RTC_DateUpdate+0xa4>
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b06      	cmp	r3, #6
 800a802:	d005      	beq.n	800a810 <RTC_DateUpdate+0xa4>
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b09      	cmp	r3, #9
 800a808:	d002      	beq.n	800a810 <RTC_DateUpdate+0xa4>
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b0b      	cmp	r3, #11
 800a80e:	d10c      	bne.n	800a82a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b1d      	cmp	r3, #29
 800a814:	d803      	bhi.n	800a81e <RTC_DateUpdate+0xb2>
      {
        day++;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3301      	adds	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a81c:	e02c      	b.n	800a878 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3301      	adds	r3, #1
 800a822:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a824:	2301      	movs	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800a828:	e026      	b.n	800a878 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d123      	bne.n	800a878 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b1b      	cmp	r3, #27
 800a834:	d803      	bhi.n	800a83e <RTC_DateUpdate+0xd2>
      {
        day++;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	3301      	adds	r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	e01c      	b.n	800a878 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b1c      	cmp	r3, #28
 800a842:	d111      	bne.n	800a868 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	b29b      	uxth	r3, r3
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 f839 	bl	800a8c0 <RTC_IsLeapYear>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <RTC_DateUpdate+0xf0>
        {
          day++;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	e00d      	b.n	800a878 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3301      	adds	r3, #1
 800a860:	613b      	str	r3, [r7, #16]
          day = 1U;
 800a862:	2301      	movs	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	e007      	b.n	800a878 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b1d      	cmp	r3, #29
 800a86c:	d104      	bne.n	800a878 <RTC_DateUpdate+0x10c>
      {
        month++;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	3301      	adds	r3, #1
 800a872:	613b      	str	r3, [r7, #16]
        day = 1U;
 800a874:	2301      	movs	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	3301      	adds	r3, #1
 800a87c:	60bb      	str	r3, [r7, #8]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d38b      	bcc.n	800a79e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	b2da      	uxtb	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	b2d2      	uxtb	r2, r2
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f000 f83b 	bl	800a924 <RTC_WeekDayNum>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	731a      	strb	r2, [r3, #12]
}
 800a8b6:	bf00      	nop
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e01d      	b.n	800a916 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	4a10      	ldr	r2, [pc, #64]	; (800a920 <RTC_IsLeapYear+0x60>)
 800a8de:	fba2 1203 	umull	r1, r2, r2, r3
 800a8e2:	0952      	lsrs	r2, r2, #5
 800a8e4:	2164      	movs	r1, #100	; 0x64
 800a8e6:	fb01 f202 	mul.w	r2, r1, r2
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e00f      	b.n	800a916 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	4a09      	ldr	r2, [pc, #36]	; (800a920 <RTC_IsLeapYear+0x60>)
 800a8fa:	fba2 1203 	umull	r1, r2, r2, r3
 800a8fe:	09d2      	lsrs	r2, r2, #7
 800a900:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a904:	fb01 f202 	mul.w	r2, r1, r2
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800a910:	2301      	movs	r3, #1
 800a912:	e000      	b.n	800a916 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800a914:	2300      	movs	r3, #0
  }
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bc80      	pop	{r7}
 800a91e:	4770      	bx	lr
 800a920:	51eb851f 	.word	0x51eb851f

0800a924 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
 800a930:	4613      	mov	r3, r2
 800a932:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	60bb      	str	r3, [r7, #8]
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a942:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d82d      	bhi.n	800a9a6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800a94a:	78fa      	ldrb	r2, [r7, #3]
 800a94c:	4613      	mov	r3, r2
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	4a2c      	ldr	r2, [pc, #176]	; (800aa08 <RTC_WeekDayNum+0xe4>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	085a      	lsrs	r2, r3, #1
 800a95e:	78bb      	ldrb	r3, [r7, #2]
 800a960:	441a      	add	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	441a      	add	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	3b01      	subs	r3, #1
 800a96a:	089b      	lsrs	r3, r3, #2
 800a96c:	441a      	add	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3b01      	subs	r3, #1
 800a972:	4926      	ldr	r1, [pc, #152]	; (800aa0c <RTC_WeekDayNum+0xe8>)
 800a974:	fba1 1303 	umull	r1, r3, r1, r3
 800a978:	095b      	lsrs	r3, r3, #5
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	4922      	ldr	r1, [pc, #136]	; (800aa0c <RTC_WeekDayNum+0xe8>)
 800a982:	fba1 1303 	umull	r1, r3, r1, r3
 800a986:	09db      	lsrs	r3, r3, #7
 800a988:	4413      	add	r3, r2
 800a98a:	1d1a      	adds	r2, r3, #4
 800a98c:	4b20      	ldr	r3, [pc, #128]	; (800aa10 <RTC_WeekDayNum+0xec>)
 800a98e:	fba3 1302 	umull	r1, r3, r3, r2
 800a992:	1ad1      	subs	r1, r2, r3
 800a994:	0849      	lsrs	r1, r1, #1
 800a996:	440b      	add	r3, r1
 800a998:	0899      	lsrs	r1, r3, #2
 800a99a:	460b      	mov	r3, r1
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	1a5b      	subs	r3, r3, r1
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e029      	b.n	800a9fa <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	1a9b      	subs	r3, r3, r2
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <RTC_WeekDayNum+0xe4>)
 800a9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b8:	085a      	lsrs	r2, r3, #1
 800a9ba:	78bb      	ldrb	r3, [r7, #2]
 800a9bc:	441a      	add	r2, r3
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	441a      	add	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	441a      	add	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4910      	ldr	r1, [pc, #64]	; (800aa0c <RTC_WeekDayNum+0xe8>)
 800a9cc:	fba1 1303 	umull	r1, r3, r1, r3
 800a9d0:	095b      	lsrs	r3, r3, #5
 800a9d2:	1ad2      	subs	r2, r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	490d      	ldr	r1, [pc, #52]	; (800aa0c <RTC_WeekDayNum+0xe8>)
 800a9d8:	fba1 1303 	umull	r1, r3, r1, r3
 800a9dc:	09db      	lsrs	r3, r3, #7
 800a9de:	4413      	add	r3, r2
 800a9e0:	1c9a      	adds	r2, r3, #2
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <RTC_WeekDayNum+0xec>)
 800a9e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e8:	1ad1      	subs	r1, r2, r3
 800a9ea:	0849      	lsrs	r1, r1, #1
 800a9ec:	440b      	add	r3, r1
 800a9ee:	0899      	lsrs	r1, r3, #2
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	1a5b      	subs	r3, r3, r1
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	b2db      	uxtb	r3, r3
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bc80      	pop	{r7}
 800aa06:	4770      	bx	lr
 800aa08:	38e38e39 	.word	0x38e38e39
 800aa0c:	51eb851f 	.word	0x51eb851f
 800aa10:	24924925 	.word	0x24924925

0800aa14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e076      	b.n	800ab14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d108      	bne.n	800aa40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa36:	d009      	beq.n	800aa4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	61da      	str	r2, [r3, #28]
 800aa3e:	e005      	b.n	800aa4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f9 fff0 	bl	8004a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	431a      	orrs	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad0:	ea42 0103 	orr.w	r1, r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	0c1a      	lsrs	r2, r3, #16
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f002 0204 	and.w	r2, r2, #4
 800aaf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	69da      	ldr	r2, [r3, #28]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d101      	bne.n	800ab3e <HAL_SPI_Transmit+0x22>
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e12d      	b.n	800ad9a <HAL_SPI_Transmit+0x27e>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab46:	f7fa fa3f 	bl	8004fc8 <HAL_GetTick>
 800ab4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d002      	beq.n	800ab62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab60:	e116      	b.n	800ad90 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <HAL_SPI_Transmit+0x52>
 800ab68:	88fb      	ldrh	r3, [r7, #6]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab72:	e10d      	b.n	800ad90 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2203      	movs	r2, #3
 800ab78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	88fa      	ldrh	r2, [r7, #6]
 800ab8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	88fa      	ldrh	r2, [r7, #6]
 800ab92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abba:	d10f      	bne.n	800abdc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe6:	2b40      	cmp	r3, #64	; 0x40
 800abe8:	d007      	beq.n	800abfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac02:	d14f      	bne.n	800aca4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <HAL_SPI_Transmit+0xf6>
 800ac0c:	8afb      	ldrh	r3, [r7, #22]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d142      	bne.n	800ac98 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	881a      	ldrh	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	1c9a      	adds	r2, r3, #2
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac36:	e02f      	b.n	800ac98 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d112      	bne.n	800ac6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4a:	881a      	ldrh	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	1c9a      	adds	r2, r3, #2
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3b01      	subs	r3, #1
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	86da      	strh	r2, [r3, #54]	; 0x36
 800ac6a:	e015      	b.n	800ac98 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac6c:	f7fa f9ac 	bl	8004fc8 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d803      	bhi.n	800ac84 <HAL_SPI_Transmit+0x168>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d102      	bne.n	800ac8a <HAL_SPI_Transmit+0x16e>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ac96:	e07b      	b.n	800ad90 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1ca      	bne.n	800ac38 <HAL_SPI_Transmit+0x11c>
 800aca2:	e050      	b.n	800ad46 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <HAL_SPI_Transmit+0x196>
 800acac:	8afb      	ldrh	r3, [r7, #22]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d144      	bne.n	800ad3c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	330c      	adds	r3, #12
 800acbc:	7812      	ldrb	r2, [r2, #0]
 800acbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acce:	b29b      	uxth	r3, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800acd8:	e030      	b.n	800ad3c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d113      	bne.n	800ad10 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	330c      	adds	r3, #12
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	3b01      	subs	r3, #1
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad0e:	e015      	b.n	800ad3c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad10:	f7fa f95a 	bl	8004fc8 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d803      	bhi.n	800ad28 <HAL_SPI_Transmit+0x20c>
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d102      	bne.n	800ad2e <HAL_SPI_Transmit+0x212>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ad3a:	e029      	b.n	800ad90 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1c9      	bne.n	800acda <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad46:	69ba      	ldr	r2, [r7, #24]
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fbcc 	bl	800b4e8 <SPI_EndRxTxTransaction>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	613b      	str	r3, [r7, #16]
 800ad78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	77fb      	strb	r3, [r7, #31]
 800ad86:	e003      	b.n	800ad90 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad98:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b088      	sub	sp, #32
 800ada6:	af02      	add	r7, sp, #8
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	603b      	str	r3, [r7, #0]
 800adae:	4613      	mov	r3, r2
 800adb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d002      	beq.n	800adc8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800adc2:	2302      	movs	r3, #2
 800adc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800adc6:	e0fb      	b.n	800afc0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800add0:	d112      	bne.n	800adf8 <HAL_SPI_Receive+0x56>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10e      	bne.n	800adf8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2204      	movs	r2, #4
 800adde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ade2:	88fa      	ldrh	r2, [r7, #6]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	4613      	mov	r3, r2
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f8ef 	bl	800afd2 <HAL_SPI_TransmitReceive>
 800adf4:	4603      	mov	r3, r0
 800adf6:	e0e8      	b.n	800afca <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d101      	bne.n	800ae06 <HAL_SPI_Receive+0x64>
 800ae02:	2302      	movs	r3, #2
 800ae04:	e0e1      	b.n	800afca <HAL_SPI_Receive+0x228>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae0e:	f7fa f8db 	bl	8004fc8 <HAL_GetTick>
 800ae12:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <HAL_SPI_Receive+0x7e>
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae24:	e0cc      	b.n	800afc0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2204      	movs	r2, #4
 800ae2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	88fa      	ldrh	r2, [r7, #6]
 800ae3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	88fa      	ldrh	r2, [r7, #6]
 800ae44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae6c:	d10f      	bne.n	800ae8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae98:	2b40      	cmp	r3, #64	; 0x40
 800ae9a:	d007      	beq.n	800aeac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d16a      	bne.n	800af8a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aeb4:	e032      	b.n	800af1c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d115      	bne.n	800aef0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f103 020c 	add.w	r2, r3, #12
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aeee:	e015      	b.n	800af1c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aef0:	f7fa f86a 	bl	8004fc8 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d803      	bhi.n	800af08 <HAL_SPI_Receive+0x166>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d102      	bne.n	800af0e <HAL_SPI_Receive+0x16c>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d106      	bne.n	800af1c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800af1a:	e051      	b.n	800afc0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af20:	b29b      	uxth	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1c7      	bne.n	800aeb6 <HAL_SPI_Receive+0x114>
 800af26:	e035      	b.n	800af94 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b01      	cmp	r3, #1
 800af34:	d113      	bne.n	800af5e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af40:	b292      	uxth	r2, r2
 800af42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	1c9a      	adds	r2, r3, #2
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af52:	b29b      	uxth	r3, r3
 800af54:	3b01      	subs	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af5c:	e015      	b.n	800af8a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af5e:	f7fa f833 	bl	8004fc8 <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d803      	bhi.n	800af76 <HAL_SPI_Receive+0x1d4>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d102      	bne.n	800af7c <HAL_SPI_Receive+0x1da>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d106      	bne.n	800af8a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800af88:	e01a      	b.n	800afc0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af8e:	b29b      	uxth	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1c9      	bne.n	800af28 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fa53 	bl	800b444 <SPI_EndRxTransaction>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]
 800afb6:	e003      	b.n	800afc0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b08c      	sub	sp, #48	; 0x30
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	607a      	str	r2, [r7, #4]
 800afde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800afe0:	2301      	movs	r3, #1
 800afe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_SPI_TransmitReceive+0x26>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e198      	b.n	800b32a <HAL_SPI_TransmitReceive+0x358>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b000:	f7f9 ffe2 	bl	8004fc8 <HAL_GetTick>
 800b004:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b00c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b016:	887b      	ldrh	r3, [r7, #2]
 800b018:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b01a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d00f      	beq.n	800b042 <HAL_SPI_TransmitReceive+0x70>
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b028:	d107      	bne.n	800b03a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <HAL_SPI_TransmitReceive+0x68>
 800b032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b036:	2b04      	cmp	r3, #4
 800b038:	d003      	beq.n	800b042 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b03a:	2302      	movs	r3, #2
 800b03c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b040:	e16d      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <HAL_SPI_TransmitReceive+0x82>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <HAL_SPI_TransmitReceive+0x82>
 800b04e:	887b      	ldrh	r3, [r7, #2]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d103      	bne.n	800b05c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b05a:	e160      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b04      	cmp	r3, #4
 800b066:	d003      	beq.n	800b070 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2205      	movs	r2, #5
 800b06c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	887a      	ldrh	r2, [r7, #2]
 800b080:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	887a      	ldrh	r2, [r7, #2]
 800b086:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	887a      	ldrh	r2, [r7, #2]
 800b092:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	887a      	ldrh	r2, [r7, #2]
 800b098:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	d007      	beq.n	800b0c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0cc:	d17c      	bne.n	800b1c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <HAL_SPI_TransmitReceive+0x10a>
 800b0d6:	8b7b      	ldrh	r3, [r7, #26]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d16a      	bne.n	800b1b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e0:	881a      	ldrh	r2, [r3, #0]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ec:	1c9a      	adds	r2, r3, #2
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b100:	e057      	b.n	800b1b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d11b      	bne.n	800b148 <HAL_SPI_TransmitReceive+0x176>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b114:	b29b      	uxth	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d016      	beq.n	800b148 <HAL_SPI_TransmitReceive+0x176>
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d113      	bne.n	800b148 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b124:	881a      	ldrh	r2, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	1c9a      	adds	r2, r3, #2
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	3b01      	subs	r3, #1
 800b13e:	b29a      	uxth	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b144:	2300      	movs	r3, #0
 800b146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b01      	cmp	r3, #1
 800b154:	d119      	bne.n	800b18a <HAL_SPI_TransmitReceive+0x1b8>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d014      	beq.n	800b18a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	b292      	uxth	r2, r2
 800b16c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	1c9a      	adds	r2, r3, #2
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	3b01      	subs	r3, #1
 800b180:	b29a      	uxth	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b186:	2301      	movs	r3, #1
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b18a:	f7f9 ff1d 	bl	8004fc8 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b196:	429a      	cmp	r2, r3
 800b198:	d80b      	bhi.n	800b1b2 <HAL_SPI_TransmitReceive+0x1e0>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d007      	beq.n	800b1b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b1b0:	e0b5      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1a2      	bne.n	800b102 <HAL_SPI_TransmitReceive+0x130>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d19d      	bne.n	800b102 <HAL_SPI_TransmitReceive+0x130>
 800b1c6:	e080      	b.n	800b2ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <HAL_SPI_TransmitReceive+0x204>
 800b1d0:	8b7b      	ldrh	r3, [r7, #26]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d16f      	bne.n	800b2b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	330c      	adds	r3, #12
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1fc:	e05b      	b.n	800b2b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d11c      	bne.n	800b246 <HAL_SPI_TransmitReceive+0x274>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b210:	b29b      	uxth	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d017      	beq.n	800b246 <HAL_SPI_TransmitReceive+0x274>
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d114      	bne.n	800b246 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	330c      	adds	r3, #12
 800b226:	7812      	ldrb	r2, [r2, #0]
 800b228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b238:	b29b      	uxth	r3, r3
 800b23a:	3b01      	subs	r3, #1
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	2b01      	cmp	r3, #1
 800b252:	d119      	bne.n	800b288 <HAL_SPI_TransmitReceive+0x2b6>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b258:	b29b      	uxth	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d014      	beq.n	800b288 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68da      	ldr	r2, [r3, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	3b01      	subs	r3, #1
 800b27e:	b29a      	uxth	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b284:	2301      	movs	r3, #1
 800b286:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b288:	f7f9 fe9e 	bl	8004fc8 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b294:	429a      	cmp	r2, r3
 800b296:	d803      	bhi.n	800b2a0 <HAL_SPI_TransmitReceive+0x2ce>
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d102      	bne.n	800b2a6 <HAL_SPI_TransmitReceive+0x2d4>
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d107      	bne.n	800b2b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b2b4:	e033      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d19e      	bne.n	800b1fe <HAL_SPI_TransmitReceive+0x22c>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d199      	bne.n	800b1fe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f000 f90a 	bl	800b4e8 <SPI_EndRxTxTransaction>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b2e6:	e01a      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b314:	e003      	b.n	800b31e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3730      	adds	r7, #48	; 0x30
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	4613      	mov	r3, r2
 800b342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b344:	f7f9 fe40 	bl	8004fc8 <HAL_GetTick>
 800b348:	4602      	mov	r2, r0
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	1a9b      	subs	r3, r3, r2
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	4413      	add	r3, r2
 800b352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b354:	f7f9 fe38 	bl	8004fc8 <HAL_GetTick>
 800b358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b35a:	4b39      	ldr	r3, [pc, #228]	; (800b440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	015b      	lsls	r3, r3, #5
 800b360:	0d1b      	lsrs	r3, r3, #20
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	fb02 f303 	mul.w	r3, r2, r3
 800b368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b36a:	e054      	b.n	800b416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b372:	d050      	beq.n	800b416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b374:	f7f9 fe28 	bl	8004fc8 <HAL_GetTick>
 800b378:	4602      	mov	r2, r0
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	429a      	cmp	r2, r3
 800b382:	d902      	bls.n	800b38a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d13d      	bne.n	800b406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a2:	d111      	bne.n	800b3c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ac:	d004      	beq.n	800b3b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3b6:	d107      	bne.n	800b3c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3d0:	d10f      	bne.n	800b3f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e017      	b.n	800b436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	3b01      	subs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	689a      	ldr	r2, [r3, #8]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4013      	ands	r3, r2
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	429a      	cmp	r2, r3
 800b424:	bf0c      	ite	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	2300      	movne	r3, #0
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	461a      	mov	r2, r3
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	429a      	cmp	r2, r3
 800b432:	d19b      	bne.n	800b36c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	20000004 	.word	0x20000004

0800b444 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b458:	d111      	bne.n	800b47e <SPI_EndRxTransaction+0x3a>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b462:	d004      	beq.n	800b46e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b46c:	d107      	bne.n	800b47e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b47c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b486:	d117      	bne.n	800b4b8 <SPI_EndRxTransaction+0x74>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b490:	d112      	bne.n	800b4b8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	2101      	movs	r1, #1
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff ff49 	bl	800b334 <SPI_WaitFlagStateUntilTimeout>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01a      	beq.n	800b4de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ac:	f043 0220 	orr.w	r2, r3, #32
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e013      	b.n	800b4e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2180      	movs	r1, #128	; 0x80
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff ff36 	bl	800b334 <SPI_WaitFlagStateUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d007      	beq.n	800b4de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	f043 0220 	orr.w	r2, r3, #32
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e000      	b.n	800b4e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2180      	movs	r1, #128	; 0x80
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff ff18 	bl	800b334 <SPI_WaitFlagStateUntilTimeout>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	f043 0220 	orr.w	r2, r3, #32
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e000      	b.n	800b51c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e041      	b.n	800b5ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7f9 fb04 	bl	8004b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2202      	movs	r2, #2
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3304      	adds	r3, #4
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f000 faa2 	bl	800baac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d001      	beq.n	800b5dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e03a      	b.n	800b652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2202      	movs	r2, #2
 800b5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68da      	ldr	r2, [r3, #12]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f042 0201 	orr.w	r2, r2, #1
 800b5f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a18      	ldr	r2, [pc, #96]	; (800b65c <HAL_TIM_Base_Start_IT+0x98>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d00e      	beq.n	800b61c <HAL_TIM_Base_Start_IT+0x58>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b606:	d009      	beq.n	800b61c <HAL_TIM_Base_Start_IT+0x58>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a14      	ldr	r2, [pc, #80]	; (800b660 <HAL_TIM_Base_Start_IT+0x9c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d004      	beq.n	800b61c <HAL_TIM_Base_Start_IT+0x58>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a13      	ldr	r2, [pc, #76]	; (800b664 <HAL_TIM_Base_Start_IT+0xa0>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d111      	bne.n	800b640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 0307 	and.w	r3, r3, #7
 800b626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	d010      	beq.n	800b650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f042 0201 	orr.w	r2, r2, #1
 800b63c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b63e:	e007      	b.n	800b650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f042 0201 	orr.w	r2, r2, #1
 800b64e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3714      	adds	r7, #20
 800b656:	46bd      	mov	sp, r7
 800b658:	bc80      	pop	{r7}
 800b65a:	4770      	bx	lr
 800b65c:	40012c00 	.word	0x40012c00
 800b660:	40000400 	.word	0x40000400
 800b664:	40000800 	.word	0x40000800

0800b668 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f022 0201 	bic.w	r2, r2, #1
 800b67e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6a1a      	ldr	r2, [r3, #32]
 800b686:	f241 1311 	movw	r3, #4369	; 0x1111
 800b68a:	4013      	ands	r3, r2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10f      	bne.n	800b6b0 <HAL_TIM_Base_Stop_IT+0x48>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6a1a      	ldr	r2, [r3, #32]
 800b696:	f240 4344 	movw	r3, #1092	; 0x444
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d107      	bne.n	800b6b0 <HAL_TIM_Base_Stop_IT+0x48>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f022 0201 	bic.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bc80      	pop	{r7}
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d122      	bne.n	800b720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f003 0302 	and.w	r3, r3, #2
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d11b      	bne.n	800b720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f06f 0202 	mvn.w	r2, #2
 800b6f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f9b4 	bl	800ba74 <HAL_TIM_IC_CaptureCallback>
 800b70c:	e005      	b.n	800b71a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f9a7 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9b6 	bl	800ba86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	f003 0304 	and.w	r3, r3, #4
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d122      	bne.n	800b774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 0304 	and.w	r3, r3, #4
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d11b      	bne.n	800b774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f06f 0204 	mvn.w	r2, #4
 800b744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f98a 	bl	800ba74 <HAL_TIM_IC_CaptureCallback>
 800b760:	e005      	b.n	800b76e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f97d 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f98c 	bl	800ba86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	f003 0308 	and.w	r3, r3, #8
 800b77e:	2b08      	cmp	r3, #8
 800b780:	d122      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f003 0308 	and.w	r3, r3, #8
 800b78c:	2b08      	cmp	r3, #8
 800b78e:	d11b      	bne.n	800b7c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f06f 0208 	mvn.w	r2, #8
 800b798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2204      	movs	r2, #4
 800b79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f960 	bl	800ba74 <HAL_TIM_IC_CaptureCallback>
 800b7b4:	e005      	b.n	800b7c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f953 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f962 	bl	800ba86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b10      	cmp	r3, #16
 800b7d4:	d122      	bne.n	800b81c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f003 0310 	and.w	r3, r3, #16
 800b7e0:	2b10      	cmp	r3, #16
 800b7e2:	d11b      	bne.n	800b81c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f06f 0210 	mvn.w	r2, #16
 800b7ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f936 	bl	800ba74 <HAL_TIM_IC_CaptureCallback>
 800b808:	e005      	b.n	800b816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f929 	bl	800ba62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f938 	bl	800ba86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b01      	cmp	r3, #1
 800b828:	d10e      	bne.n	800b848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	f003 0301 	and.w	r3, r3, #1
 800b834:	2b01      	cmp	r3, #1
 800b836:	d107      	bne.n	800b848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f06f 0201 	mvn.w	r2, #1
 800b840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7f7 fb0c 	bl	8002e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	2b80      	cmp	r3, #128	; 0x80
 800b854:	d10e      	bne.n	800b874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b860:	2b80      	cmp	r3, #128	; 0x80
 800b862:	d107      	bne.n	800b874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa7b 	bl	800bd6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	d10e      	bne.n	800b8a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88c:	2b40      	cmp	r3, #64	; 0x40
 800b88e:	d107      	bne.n	800b8a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f8fc 	bl	800ba98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	f003 0320 	and.w	r3, r3, #32
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	d10e      	bne.n	800b8cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b20      	cmp	r3, #32
 800b8ba:	d107      	bne.n	800b8cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f06f 0220 	mvn.w	r2, #32
 800b8c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fa46 	bl	800bd58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d101      	bne.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	e0b4      	b.n	800ba5a <HAL_TIM_ConfigClockSource+0x186>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b90e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b928:	d03e      	beq.n	800b9a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b92a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b92e:	f200 8087 	bhi.w	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b936:	f000 8086 	beq.w	800ba46 <HAL_TIM_ConfigClockSource+0x172>
 800b93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b93e:	d87f      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b940:	2b70      	cmp	r3, #112	; 0x70
 800b942:	d01a      	beq.n	800b97a <HAL_TIM_ConfigClockSource+0xa6>
 800b944:	2b70      	cmp	r3, #112	; 0x70
 800b946:	d87b      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b948:	2b60      	cmp	r3, #96	; 0x60
 800b94a:	d050      	beq.n	800b9ee <HAL_TIM_ConfigClockSource+0x11a>
 800b94c:	2b60      	cmp	r3, #96	; 0x60
 800b94e:	d877      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b950:	2b50      	cmp	r3, #80	; 0x50
 800b952:	d03c      	beq.n	800b9ce <HAL_TIM_ConfigClockSource+0xfa>
 800b954:	2b50      	cmp	r3, #80	; 0x50
 800b956:	d873      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b958:	2b40      	cmp	r3, #64	; 0x40
 800b95a:	d058      	beq.n	800ba0e <HAL_TIM_ConfigClockSource+0x13a>
 800b95c:	2b40      	cmp	r3, #64	; 0x40
 800b95e:	d86f      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b960:	2b30      	cmp	r3, #48	; 0x30
 800b962:	d064      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x15a>
 800b964:	2b30      	cmp	r3, #48	; 0x30
 800b966:	d86b      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b968:	2b20      	cmp	r3, #32
 800b96a:	d060      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x15a>
 800b96c:	2b20      	cmp	r3, #32
 800b96e:	d867      	bhi.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
 800b970:	2b00      	cmp	r3, #0
 800b972:	d05c      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x15a>
 800b974:	2b10      	cmp	r3, #16
 800b976:	d05a      	beq.n	800ba2e <HAL_TIM_ConfigClockSource+0x15a>
 800b978:	e062      	b.n	800ba40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b98a:	f000 f968 	bl	800bc5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b99c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	609a      	str	r2, [r3, #8]
      break;
 800b9a6:	e04f      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9b8:	f000 f951 	bl	800bc5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689a      	ldr	r2, [r3, #8]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9ca:	609a      	str	r2, [r3, #8]
      break;
 800b9cc:	e03c      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f000 f8c8 	bl	800bb70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2150      	movs	r1, #80	; 0x50
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f91f 	bl	800bc2a <TIM_ITRx_SetConfig>
      break;
 800b9ec:	e02c      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f000 f8e6 	bl	800bbcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2160      	movs	r1, #96	; 0x60
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 f90f 	bl	800bc2a <TIM_ITRx_SetConfig>
      break;
 800ba0c:	e01c      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f000 f8a8 	bl	800bb70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2140      	movs	r1, #64	; 0x40
 800ba26:	4618      	mov	r0, r3
 800ba28:	f000 f8ff 	bl	800bc2a <TIM_ITRx_SetConfig>
      break;
 800ba2c:	e00c      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f000 f8f6 	bl	800bc2a <TIM_ITRx_SetConfig>
      break;
 800ba3e:	e003      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	73fb      	strb	r3, [r7, #15]
      break;
 800ba44:	e000      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr

0800ba74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bc80      	pop	{r7}
 800ba84:	4770      	bx	lr

0800ba86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bc80      	pop	{r7}
 800ba96:	4770      	bx	lr

0800ba98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bc80      	pop	{r7}
 800baa8:	4770      	bx	lr
	...

0800baac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a29      	ldr	r2, [pc, #164]	; (800bb64 <TIM_Base_SetConfig+0xb8>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00b      	beq.n	800badc <TIM_Base_SetConfig+0x30>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baca:	d007      	beq.n	800badc <TIM_Base_SetConfig+0x30>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a26      	ldr	r2, [pc, #152]	; (800bb68 <TIM_Base_SetConfig+0xbc>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d003      	beq.n	800badc <TIM_Base_SetConfig+0x30>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a25      	ldr	r2, [pc, #148]	; (800bb6c <TIM_Base_SetConfig+0xc0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d108      	bne.n	800baee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4313      	orrs	r3, r2
 800baec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1c      	ldr	r2, [pc, #112]	; (800bb64 <TIM_Base_SetConfig+0xb8>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d00b      	beq.n	800bb0e <TIM_Base_SetConfig+0x62>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bafc:	d007      	beq.n	800bb0e <TIM_Base_SetConfig+0x62>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a19      	ldr	r2, [pc, #100]	; (800bb68 <TIM_Base_SetConfig+0xbc>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d003      	beq.n	800bb0e <TIM_Base_SetConfig+0x62>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <TIM_Base_SetConfig+0xc0>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d108      	bne.n	800bb20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	4a07      	ldr	r2, [pc, #28]	; (800bb64 <TIM_Base_SetConfig+0xb8>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d103      	bne.n	800bb54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	691a      	ldr	r2, [r3, #16]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	615a      	str	r2, [r3, #20]
}
 800bb5a:	bf00      	nop
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bc80      	pop	{r7}
 800bb62:	4770      	bx	lr
 800bb64:	40012c00 	.word	0x40012c00
 800bb68:	40000400 	.word	0x40000400
 800bb6c:	40000800 	.word	0x40000800

0800bb70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	f023 0201 	bic.w	r2, r3, #1
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	693a      	ldr	r2, [r7, #16]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f023 030a 	bic.w	r3, r3, #10
 800bbac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	621a      	str	r2, [r3, #32]
}
 800bbc2:	bf00      	nop
 800bbc4:	371c      	adds	r7, #28
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bc80      	pop	{r7}
 800bbca:	4770      	bx	lr

0800bbcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	f023 0210 	bic.w	r2, r3, #16
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	031b      	lsls	r3, r3, #12
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	621a      	str	r2, [r3, #32]
}
 800bc20:	bf00      	nop
 800bc22:	371c      	adds	r7, #28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bc80      	pop	{r7}
 800bc28:	4770      	bx	lr

0800bc2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	f043 0307 	orr.w	r3, r3, #7
 800bc4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	609a      	str	r2, [r3, #8]
}
 800bc54:	bf00      	nop
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b087      	sub	sp, #28
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	60f8      	str	r0, [r7, #12]
 800bc66:	60b9      	str	r1, [r7, #8]
 800bc68:	607a      	str	r2, [r7, #4]
 800bc6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	021a      	lsls	r2, r3, #8
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	431a      	orrs	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	609a      	str	r2, [r3, #8]
}
 800bc92:	bf00      	nop
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bc80      	pop	{r7}
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d101      	bne.n	800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	e046      	b.n	800bd42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a16      	ldr	r2, [pc, #88]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d00e      	beq.n	800bd16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d009      	beq.n	800bd16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a12      	ldr	r2, [pc, #72]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d004      	beq.n	800bd16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a10      	ldr	r2, [pc, #64]	; (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d10c      	bne.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40000400 	.word	0x40000400
 800bd54:	40000800 	.word	0x40000800

0800bd58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bc80      	pop	{r7}
 800bd68:	4770      	bx	lr

0800bd6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd72:	bf00      	nop
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bc80      	pop	{r7}
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e042      	b.n	800be14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7f8 ff18 	bl	8004bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2224      	movs	r2, #36	; 0x24
 800bdac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f82b 	bl	800be1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695a      	ldr	r2, [r3, #20]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bde4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bdf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68da      	ldr	r2, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	430a      	orrs	r2, r1
 800be38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800be56:	f023 030c 	bic.w	r3, r3, #12
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	430b      	orrs	r3, r1
 800be62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699a      	ldr	r2, [r3, #24]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a2c      	ldr	r2, [pc, #176]	; (800bf30 <UART_SetConfig+0x114>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d103      	bne.n	800be8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800be84:	f7fd fd3e 	bl	8009904 <HAL_RCC_GetPCLK2Freq>
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	e002      	b.n	800be92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800be8c:	f7fd fd26 	bl	80098dc <HAL_RCC_GetPCLK1Freq>
 800be90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009a      	lsls	r2, r3, #2
 800be9c:	441a      	add	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea8:	4a22      	ldr	r2, [pc, #136]	; (800bf34 <UART_SetConfig+0x118>)
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	095b      	lsrs	r3, r3, #5
 800beb0:	0119      	lsls	r1, r3, #4
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009a      	lsls	r2, r3, #2
 800bebc:	441a      	add	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bec8:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <UART_SetConfig+0x118>)
 800beca:	fba3 0302 	umull	r0, r3, r3, r2
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	2064      	movs	r0, #100	; 0x64
 800bed2:	fb00 f303 	mul.w	r3, r0, r3
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	3332      	adds	r3, #50	; 0x32
 800bedc:	4a15      	ldr	r2, [pc, #84]	; (800bf34 <UART_SetConfig+0x118>)
 800bede:	fba2 2303 	umull	r2, r3, r2, r3
 800bee2:	095b      	lsrs	r3, r3, #5
 800bee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bee8:	4419      	add	r1, r3
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	009a      	lsls	r2, r3, #2
 800bef4:	441a      	add	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf00:	4b0c      	ldr	r3, [pc, #48]	; (800bf34 <UART_SetConfig+0x118>)
 800bf02:	fba3 0302 	umull	r0, r3, r3, r2
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	2064      	movs	r0, #100	; 0x64
 800bf0a:	fb00 f303 	mul.w	r3, r0, r3
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	011b      	lsls	r3, r3, #4
 800bf12:	3332      	adds	r3, #50	; 0x32
 800bf14:	4a07      	ldr	r2, [pc, #28]	; (800bf34 <UART_SetConfig+0x118>)
 800bf16:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1a:	095b      	lsrs	r3, r3, #5
 800bf1c:	f003 020f 	and.w	r2, r3, #15
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	440a      	add	r2, r1
 800bf26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40013800 	.word	0x40013800
 800bf34:	51eb851f 	.word	0x51eb851f

0800bf38 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800bf38:	b5b0      	push	{r4, r5, r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800bf42:	2300      	movs	r3, #0
 800bf44:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800bf46:	2300      	movs	r3, #0
 800bf48:	777b      	strb	r3, [r7, #29]
 800bf4a:	e01b      	b.n	800bf84 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	77bb      	strb	r3, [r7, #30]
 800bf50:	e012      	b.n	800bf78 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800bf52:	7fba      	ldrb	r2, [r7, #30]
 800bf54:	7f7b      	ldrb	r3, [r7, #29]
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1899      	adds	r1, r3, r2
 800bf60:	7fba      	ldrb	r2, [r7, #30]
 800bf62:	7f7b      	ldrb	r3, [r7, #29]
 800bf64:	7808      	ldrb	r0, [r1, #0]
 800bf66:	4961      	ldr	r1, [pc, #388]	; (800c0ec <AES_Encrypt+0x1b4>)
 800bf68:	0092      	lsls	r2, r2, #2
 800bf6a:	440a      	add	r2, r1
 800bf6c:	4413      	add	r3, r2
 800bf6e:	4602      	mov	r2, r0
 800bf70:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800bf72:	7fbb      	ldrb	r3, [r7, #30]
 800bf74:	3301      	adds	r3, #1
 800bf76:	77bb      	strb	r3, [r7, #30]
 800bf78:	7fbb      	ldrb	r3, [r7, #30]
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d9e9      	bls.n	800bf52 <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800bf7e:	7f7b      	ldrb	r3, [r7, #29]
 800bf80:	3301      	adds	r3, #1
 800bf82:	777b      	strb	r3, [r7, #29]
 800bf84:	7f7b      	ldrb	r3, [r7, #29]
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d9e0      	bls.n	800bf4c <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	77fb      	strb	r3, [r7, #31]
 800bf8e:	e00b      	b.n	800bfa8 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800bf90:	7ffb      	ldrb	r3, [r7, #31]
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	441a      	add	r2, r3
 800bf96:	7ffb      	ldrb	r3, [r7, #31]
 800bf98:	7812      	ldrb	r2, [r2, #0]
 800bf9a:	3320      	adds	r3, #32
 800bf9c:	443b      	add	r3, r7
 800bf9e:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800bfa2:	7ffb      	ldrb	r3, [r7, #31]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	77fb      	strb	r3, [r7, #31]
 800bfa8:	7ffb      	ldrb	r3, [r7, #31]
 800bfaa:	2b0f      	cmp	r3, #15
 800bfac:	d9f0      	bls.n	800bf90 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800bfae:	f107 030c 	add.w	r3, r7, #12
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 f89c 	bl	800c0f0 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800bfb8:	2301      	movs	r3, #1
 800bfba:	773b      	strb	r3, [r7, #28]
 800bfbc:	e038      	b.n	800c030 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	777b      	strb	r3, [r7, #29]
 800bfc2:	e01f      	b.n	800c004 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	77bb      	strb	r3, [r7, #30]
 800bfc8:	e016      	b.n	800bff8 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800bfca:	7fba      	ldrb	r2, [r7, #30]
 800bfcc:	7f7b      	ldrb	r3, [r7, #29]
 800bfce:	4947      	ldr	r1, [pc, #284]	; (800c0ec <AES_Encrypt+0x1b4>)
 800bfd0:	0092      	lsls	r2, r2, #2
 800bfd2:	440a      	add	r2, r1
 800bfd4:	4413      	add	r3, r2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	7fbd      	ldrb	r5, [r7, #30]
 800bfda:	7f7c      	ldrb	r4, [r7, #29]
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 f8bf 	bl	800c160 <AES_Sub_Byte>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4a41      	ldr	r2, [pc, #260]	; (800c0ec <AES_Encrypt+0x1b4>)
 800bfe8:	00ab      	lsls	r3, r5, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	4423      	add	r3, r4
 800bfee:	460a      	mov	r2, r1
 800bff0:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800bff2:	7fbb      	ldrb	r3, [r7, #30]
 800bff4:	3301      	adds	r3, #1
 800bff6:	77bb      	strb	r3, [r7, #30]
 800bff8:	7fbb      	ldrb	r3, [r7, #30]
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d9e5      	bls.n	800bfca <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800bffe:	7f7b      	ldrb	r3, [r7, #29]
 800c000:	3301      	adds	r3, #1
 800c002:	777b      	strb	r3, [r7, #29]
 800c004:	7f7b      	ldrb	r3, [r7, #29]
 800c006:	2b03      	cmp	r3, #3
 800c008:	d9dc      	bls.n	800bfc4 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800c00a:	f000 f8c5 	bl	800c198 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800c00e:	f000 f905 	bl	800c21c <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800c012:	f107 020c 	add.w	r2, r7, #12
 800c016:	7f3b      	ldrb	r3, [r7, #28]
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f994 	bl	800c348 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4618      	mov	r0, r3
 800c026:	f000 f863 	bl	800c0f0 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800c02a:	7f3b      	ldrb	r3, [r7, #28]
 800c02c:	3301      	adds	r3, #1
 800c02e:	773b      	strb	r3, [r7, #28]
 800c030:	7f3b      	ldrb	r3, [r7, #28]
 800c032:	2b09      	cmp	r3, #9
 800c034:	d9c3      	bls.n	800bfbe <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800c036:	2300      	movs	r3, #0
 800c038:	777b      	strb	r3, [r7, #29]
 800c03a:	e01f      	b.n	800c07c <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800c03c:	2300      	movs	r3, #0
 800c03e:	77bb      	strb	r3, [r7, #30]
 800c040:	e016      	b.n	800c070 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c042:	7fba      	ldrb	r2, [r7, #30]
 800c044:	7f7b      	ldrb	r3, [r7, #29]
 800c046:	4929      	ldr	r1, [pc, #164]	; (800c0ec <AES_Encrypt+0x1b4>)
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	440a      	add	r2, r1
 800c04c:	4413      	add	r3, r2
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	7fbd      	ldrb	r5, [r7, #30]
 800c052:	7f7c      	ldrb	r4, [r7, #29]
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f883 	bl	800c160 <AES_Sub_Byte>
 800c05a:	4603      	mov	r3, r0
 800c05c:	4619      	mov	r1, r3
 800c05e:	4a23      	ldr	r2, [pc, #140]	; (800c0ec <AES_Encrypt+0x1b4>)
 800c060:	00ab      	lsls	r3, r5, #2
 800c062:	4413      	add	r3, r2
 800c064:	4423      	add	r3, r4
 800c066:	460a      	mov	r2, r1
 800c068:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c06a:	7fbb      	ldrb	r3, [r7, #30]
 800c06c:	3301      	adds	r3, #1
 800c06e:	77bb      	strb	r3, [r7, #30]
 800c070:	7fbb      	ldrb	r3, [r7, #30]
 800c072:	2b03      	cmp	r3, #3
 800c074:	d9e5      	bls.n	800c042 <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800c076:	7f7b      	ldrb	r3, [r7, #29]
 800c078:	3301      	adds	r3, #1
 800c07a:	777b      	strb	r3, [r7, #29]
 800c07c:	7f7b      	ldrb	r3, [r7, #29]
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d9dc      	bls.n	800c03c <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800c082:	f000 f889 	bl	800c198 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800c086:	f107 020c 	add.w	r2, r7, #12
 800c08a:	7f3b      	ldrb	r3, [r7, #28]
 800c08c:	4611      	mov	r1, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 f95a 	bl	800c348 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 f829 	bl	800c0f0 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800c09e:	2300      	movs	r3, #0
 800c0a0:	777b      	strb	r3, [r7, #29]
 800c0a2:	e01a      	b.n	800c0da <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	77bb      	strb	r3, [r7, #30]
 800c0a8:	e011      	b.n	800c0ce <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800c0aa:	7fb9      	ldrb	r1, [r7, #30]
 800c0ac:	7f7a      	ldrb	r2, [r7, #29]
 800c0ae:	7fb8      	ldrb	r0, [r7, #30]
 800c0b0:	7f7b      	ldrb	r3, [r7, #29]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4403      	add	r3, r0
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4403      	add	r3, r0
 800c0bc:	480b      	ldr	r0, [pc, #44]	; (800c0ec <AES_Encrypt+0x1b4>)
 800c0be:	0089      	lsls	r1, r1, #2
 800c0c0:	4401      	add	r1, r0
 800c0c2:	440a      	add	r2, r1
 800c0c4:	7812      	ldrb	r2, [r2, #0]
 800c0c6:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c0c8:	7fbb      	ldrb	r3, [r7, #30]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	77bb      	strb	r3, [r7, #30]
 800c0ce:	7fbb      	ldrb	r3, [r7, #30]
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d9ea      	bls.n	800c0aa <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800c0d4:	7f7b      	ldrb	r3, [r7, #29]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	777b      	strb	r3, [r7, #29]
 800c0da:	7f7b      	ldrb	r3, [r7, #29]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d9e1      	bls.n	800c0a4 <AES_Encrypt+0x16c>
		}
	}

}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000590 	.word	0x20000590

0800c0f0 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73bb      	strb	r3, [r7, #14]
 800c0fc:	e024      	b.n	800c148 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800c0fe:	2300      	movs	r3, #0
 800c100:	73fb      	strb	r3, [r7, #15]
 800c102:	e01b      	b.n	800c13c <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800c104:	7bfa      	ldrb	r2, [r7, #15]
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	4914      	ldr	r1, [pc, #80]	; (800c15c <AES_Add_Round_Key+0x6c>)
 800c10a:	0092      	lsls	r2, r2, #2
 800c10c:	440a      	add	r2, r1
 800c10e:	4413      	add	r3, r2
 800c110:	7818      	ldrb	r0, [r3, #0]
 800c112:	7bfa      	ldrb	r2, [r7, #15]
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4413      	add	r3, r2
 800c120:	7819      	ldrb	r1, [r3, #0]
 800c122:	7bfa      	ldrb	r2, [r7, #15]
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	4041      	eors	r1, r0
 800c128:	b2c8      	uxtb	r0, r1
 800c12a:	490c      	ldr	r1, [pc, #48]	; (800c15c <AES_Add_Round_Key+0x6c>)
 800c12c:	0092      	lsls	r2, r2, #2
 800c12e:	440a      	add	r2, r1
 800c130:	4413      	add	r3, r2
 800c132:	4602      	mov	r2, r0
 800c134:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	3301      	adds	r3, #1
 800c13a:	73fb      	strb	r3, [r7, #15]
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d9e0      	bls.n	800c104 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	3301      	adds	r3, #1
 800c146:	73bb      	strb	r3, [r7, #14]
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d9d7      	bls.n	800c0fe <AES_Add_Round_Key+0xe>
		}
	}
}
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20000590 	.word	0x20000590

0800c160 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	091b      	lsrs	r3, r3, #4
 800c16e:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	f003 030f 	and.w	r3, r3, #15
 800c176:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800c178:	7bfa      	ldrb	r2, [r7, #15]
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	4905      	ldr	r1, [pc, #20]	; (800c194 <AES_Sub_Byte+0x34>)
 800c17e:	0112      	lsls	r2, r2, #4
 800c180:	440a      	add	r2, r1
 800c182:	4413      	add	r3, r2
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800c188:	7b7b      	ldrb	r3, [r7, #13]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	bc80      	pop	{r7}
 800c192:	4770      	bx	lr
 800c194:	20000010 	.word	0x20000010

0800c198 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800c19e:	4b1e      	ldr	r3, [pc, #120]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1a0:	791b      	ldrb	r3, [r3, #4]
 800c1a2:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800c1a4:	4b1c      	ldr	r3, [pc, #112]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1a6:	795a      	ldrb	r2, [r3, #5]
 800c1a8:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1aa:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800c1ac:	4b1a      	ldr	r3, [pc, #104]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1ae:	799a      	ldrb	r2, [r3, #6]
 800c1b0:	4b19      	ldr	r3, [pc, #100]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1b2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800c1b4:	4b18      	ldr	r3, [pc, #96]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1b6:	79da      	ldrb	r2, [r3, #7]
 800c1b8:	4b17      	ldr	r3, [pc, #92]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1ba:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800c1bc:	4a16      	ldr	r2, [pc, #88]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1be:	79fb      	ldrb	r3, [r7, #7]
 800c1c0:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800c1c2:	4b15      	ldr	r3, [pc, #84]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1c4:	7a1b      	ldrb	r3, [r3, #8]
 800c1c6:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800c1c8:	4b13      	ldr	r3, [pc, #76]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1ca:	7a9a      	ldrb	r2, [r3, #10]
 800c1cc:	4b12      	ldr	r3, [pc, #72]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1ce:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800c1d0:	4a11      	ldr	r2, [pc, #68]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800c1d6:	4b10      	ldr	r3, [pc, #64]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1d8:	7a5b      	ldrb	r3, [r3, #9]
 800c1da:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800c1dc:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1de:	7ada      	ldrb	r2, [r3, #11]
 800c1e0:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1e2:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800c1e4:	4a0c      	ldr	r2, [pc, #48]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800c1ea:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1ec:	7bdb      	ldrb	r3, [r3, #15]
 800c1ee:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800c1f0:	4b09      	ldr	r3, [pc, #36]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1f2:	7b9a      	ldrb	r2, [r3, #14]
 800c1f4:	4b08      	ldr	r3, [pc, #32]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1f6:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800c1f8:	4b07      	ldr	r3, [pc, #28]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1fa:	7b5a      	ldrb	r2, [r3, #13]
 800c1fc:	4b06      	ldr	r3, [pc, #24]	; (800c218 <AES_Shift_Rows+0x80>)
 800c1fe:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800c200:	4b05      	ldr	r3, [pc, #20]	; (800c218 <AES_Shift_Rows+0x80>)
 800c202:	7b1a      	ldrb	r2, [r3, #12]
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <AES_Shift_Rows+0x80>)
 800c206:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800c208:	4a03      	ldr	r2, [pc, #12]	; (800c218 <AES_Shift_Rows+0x80>)
 800c20a:	79fb      	ldrb	r3, [r7, #7]
 800c20c:	7313      	strb	r3, [r2, #12]
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	bc80      	pop	{r7}
 800c216:	4770      	bx	lr
 800c218:	20000590 	.word	0x20000590

0800c21c <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800c222:	2300      	movs	r3, #0
 800c224:	73bb      	strb	r3, [r7, #14]
 800c226:	e082      	b.n	800c32e <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800c228:	2300      	movs	r3, #0
 800c22a:	73fb      	strb	r3, [r7, #15]
 800c22c:	e033      	b.n	800c296 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800c22e:	7bf9      	ldrb	r1, [r7, #15]
 800c230:	7bba      	ldrb	r2, [r7, #14]
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	4843      	ldr	r0, [pc, #268]	; (800c344 <AES_Mix_Collums+0x128>)
 800c236:	0089      	lsls	r1, r1, #2
 800c238:	4401      	add	r1, r0
 800c23a:	440a      	add	r2, r1
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	3310      	adds	r3, #16
 800c240:	443b      	add	r3, r7
 800c242:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800c246:	7bfa      	ldrb	r2, [r7, #15]
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	493e      	ldr	r1, [pc, #248]	; (800c344 <AES_Mix_Collums+0x128>)
 800c24c:	0092      	lsls	r2, r2, #2
 800c24e:	440a      	add	r2, r1
 800c250:	4413      	add	r3, r2
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	0052      	lsls	r2, r2, #1
 800c258:	b2d2      	uxtb	r2, r2
 800c25a:	3310      	adds	r3, #16
 800c25c:	443b      	add	r3, r7
 800c25e:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800c262:	7bfa      	ldrb	r2, [r7, #15]
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	4937      	ldr	r1, [pc, #220]	; (800c344 <AES_Mix_Collums+0x128>)
 800c268:	0092      	lsls	r2, r2, #2
 800c26a:	440a      	add	r2, r1
 800c26c:	4413      	add	r3, r2
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	b25b      	sxtb	r3, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	da0c      	bge.n	800c290 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	3310      	adds	r3, #16
 800c27a:	443b      	add	r3, r7
 800c27c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	f082 021b 	eor.w	r2, r2, #27
 800c286:	b2d2      	uxtb	r2, r2
 800c288:	3310      	adds	r3, #16
 800c28a:	443b      	add	r3, r7
 800c28c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	3301      	adds	r3, #1
 800c294:	73fb      	strb	r3, [r7, #15]
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d9c8      	bls.n	800c22e <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800c29c:	793a      	ldrb	r2, [r7, #4]
 800c29e:	7a7b      	ldrb	r3, [r7, #9]
 800c2a0:	4053      	eors	r3, r2
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	797b      	ldrb	r3, [r7, #5]
 800c2a6:	4053      	eors	r3, r2
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	7abb      	ldrb	r3, [r7, #10]
 800c2ac:	4053      	eors	r3, r2
 800c2ae:	b2d9      	uxtb	r1, r3
 800c2b0:	7afa      	ldrb	r2, [r7, #11]
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	404a      	eors	r2, r1
 800c2b6:	b2d1      	uxtb	r1, r2
 800c2b8:	4a22      	ldr	r2, [pc, #136]	; (800c344 <AES_Mix_Collums+0x128>)
 800c2ba:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800c2bc:	7a3a      	ldrb	r2, [r7, #8]
 800c2be:	797b      	ldrb	r3, [r7, #5]
 800c2c0:	4053      	eors	r3, r2
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	7abb      	ldrb	r3, [r7, #10]
 800c2c6:	4053      	eors	r3, r2
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	79bb      	ldrb	r3, [r7, #6]
 800c2cc:	4053      	eors	r3, r2
 800c2ce:	b2d9      	uxtb	r1, r3
 800c2d0:	7afa      	ldrb	r2, [r7, #11]
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	404a      	eors	r2, r1
 800c2d6:	b2d1      	uxtb	r1, r2
 800c2d8:	4a1a      	ldr	r2, [pc, #104]	; (800c344 <AES_Mix_Collums+0x128>)
 800c2da:	4413      	add	r3, r2
 800c2dc:	460a      	mov	r2, r1
 800c2de:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800c2e0:	7a3a      	ldrb	r2, [r7, #8]
 800c2e2:	7a7b      	ldrb	r3, [r7, #9]
 800c2e4:	4053      	eors	r3, r2
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	79bb      	ldrb	r3, [r7, #6]
 800c2ea:	4053      	eors	r3, r2
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	7afb      	ldrb	r3, [r7, #11]
 800c2f0:	4053      	eors	r3, r2
 800c2f2:	b2d9      	uxtb	r1, r3
 800c2f4:	79fa      	ldrb	r2, [r7, #7]
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
 800c2f8:	404a      	eors	r2, r1
 800c2fa:	b2d1      	uxtb	r1, r2
 800c2fc:	4a11      	ldr	r2, [pc, #68]	; (800c344 <AES_Mix_Collums+0x128>)
 800c2fe:	4413      	add	r3, r2
 800c300:	460a      	mov	r2, r1
 800c302:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800c304:	7a3a      	ldrb	r2, [r7, #8]
 800c306:	793b      	ldrb	r3, [r7, #4]
 800c308:	4053      	eors	r3, r2
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	7a7b      	ldrb	r3, [r7, #9]
 800c30e:	4053      	eors	r3, r2
 800c310:	b2da      	uxtb	r2, r3
 800c312:	7abb      	ldrb	r3, [r7, #10]
 800c314:	4053      	eors	r3, r2
 800c316:	b2d9      	uxtb	r1, r3
 800c318:	79fa      	ldrb	r2, [r7, #7]
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	404a      	eors	r2, r1
 800c31e:	b2d1      	uxtb	r1, r2
 800c320:	4a08      	ldr	r2, [pc, #32]	; (800c344 <AES_Mix_Collums+0x128>)
 800c322:	4413      	add	r3, r2
 800c324:	460a      	mov	r2, r1
 800c326:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	3301      	adds	r3, #1
 800c32c:	73bb      	strb	r3, [r7, #14]
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b03      	cmp	r3, #3
 800c332:	f67f af79 	bls.w	800c228 <AES_Mix_Collums+0xc>
	}
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20000590 	.word	0x20000590

0800c348 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800c348:	b590      	push	{r4, r7, lr}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800c354:	2300      	movs	r3, #0
 800c356:	75fb      	strb	r3, [r7, #23]
 800c358:	e00c      	b.n	800c374 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	330c      	adds	r3, #12
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	441a      	add	r2, r3
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	7812      	ldrb	r2, [r2, #0]
 800c366:	3318      	adds	r3, #24
 800c368:	443b      	add	r3, r7
 800c36a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	3301      	adds	r3, #1
 800c372:	75fb      	strb	r3, [r7, #23]
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	2b03      	cmp	r3, #3
 800c378:	d9ef      	bls.n	800c35a <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800c37a:	7b3b      	ldrb	r3, [r7, #12]
 800c37c:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800c37e:	7b7b      	ldrb	r3, [r7, #13]
 800c380:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800c38a:	7d3b      	ldrb	r3, [r7, #20]
 800c38c:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800c38e:	2300      	movs	r3, #0
 800c390:	75fb      	strb	r3, [r7, #23]
 800c392:	e012      	b.n	800c3ba <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800c394:	7dfb      	ldrb	r3, [r7, #23]
 800c396:	3318      	adds	r3, #24
 800c398:	443b      	add	r3, r7
 800c39a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c39e:	7dfc      	ldrb	r4, [r7, #23]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fedd 	bl	800c160 <AES_Sub_Byte>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	f104 0318 	add.w	r3, r4, #24
 800c3ae:	443b      	add	r3, r7
 800c3b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	75fb      	strb	r3, [r7, #23]
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d9e9      	bls.n	800c394 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800c3c4:	e010      	b.n	800c3e8 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800c3c6:	7d7b      	ldrb	r3, [r7, #21]
 800c3c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3cc:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800c3ce:	7d7b      	ldrb	r3, [r7, #21]
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800c3d4:	7cfb      	ldrb	r3, [r7, #19]
 800c3d6:	2b80      	cmp	r3, #128	; 0x80
 800c3d8:	d103      	bne.n	800c3e2 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800c3da:	7d7b      	ldrb	r3, [r7, #21]
 800c3dc:	f083 031b 	eor.w	r3, r3, #27
 800c3e0:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800c3e8:	79fb      	ldrb	r3, [r7, #7]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d1eb      	bne.n	800c3c6 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800c3ee:	7b3a      	ldrb	r2, [r7, #12]
 800c3f0:	7d7b      	ldrb	r3, [r7, #21]
 800c3f2:	4053      	eors	r3, r2
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]
 800c3fc:	e02f      	b.n	800c45e <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800c3fe:	2300      	movs	r3, #0
 800c400:	75bb      	strb	r3, [r7, #22]
 800c402:	e026      	b.n	800c452 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800c404:	7dba      	ldrb	r2, [r7, #22]
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	461a      	mov	r2, r3
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	4413      	add	r3, r2
 800c412:	7819      	ldrb	r1, [r3, #0]
 800c414:	7dbb      	ldrb	r3, [r7, #22]
 800c416:	3318      	adds	r3, #24
 800c418:	443b      	add	r3, r7
 800c41a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c41e:	7db8      	ldrb	r0, [r7, #22]
 800c420:	7dfb      	ldrb	r3, [r7, #23]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4403      	add	r3, r0
 800c426:	4618      	mov	r0, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	4403      	add	r3, r0
 800c42c:	404a      	eors	r2, r1
 800c42e:	b2d2      	uxtb	r2, r2
 800c430:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800c432:	7dba      	ldrb	r2, [r7, #22]
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	461a      	mov	r2, r3
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	441a      	add	r2, r3
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	7812      	ldrb	r2, [r2, #0]
 800c444:	3318      	adds	r3, #24
 800c446:	443b      	add	r3, r7
 800c448:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800c44c:	7dbb      	ldrb	r3, [r7, #22]
 800c44e:	3301      	adds	r3, #1
 800c450:	75bb      	strb	r3, [r7, #22]
 800c452:	7dbb      	ldrb	r3, [r7, #22]
 800c454:	2b03      	cmp	r3, #3
 800c456:	d9d5      	bls.n	800c404 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	3301      	adds	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d9cc      	bls.n	800c3fe <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd90      	pop	{r4, r7, pc}

0800c46e <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b08a      	sub	sp, #40	; 0x28
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	461a      	mov	r2, r3
 800c47a:	460b      	mov	r3, r1
 800c47c:	72fb      	strb	r3, [r7, #11]
 800c47e:	4613      	mov	r3, r2
 800c480:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800c482:	2300      	movs	r3, #0
 800c484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800c488:	2300      	movs	r3, #0
 800c48a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800c48e:	2300      	movs	r3, #0
 800c490:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800c494:	7afb      	ldrb	r3, [r7, #11]
 800c496:	091b      	lsrs	r3, r3, #4
 800c498:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 800c4a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d004      	beq.n	800c4b8 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800c4ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4be:	e07e      	b.n	800c5be <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800c4d4:	7abb      	ldrb	r3, [r7, #10]
 800c4d6:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800c4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4da:	78db      	ldrb	r3, [r3, #3]
 800c4dc:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e0:	789b      	ldrb	r3, [r3, #2]
 800c4e2:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	0a1b      	lsrs	r3, r3, #8
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800c4fe:	2300      	movs	r3, #0
 800c500:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800c504:	2300      	movs	r3, #0
 800c506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800c50a:	2300      	movs	r3, #0
 800c50c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 800c510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800c518:	f107 0314 	add.w	r3, r7, #20
 800c51c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fd0a 	bl	800bf38 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800c524:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c528:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d01c      	beq.n	800c56a <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800c530:	2300      	movs	r3, #0
 800c532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c536:	e013      	b.n	800c560 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	781a      	ldrb	r2, [r3, #0]
 800c53c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c540:	3328      	adds	r3, #40	; 0x28
 800c542:	443b      	add	r3, r7
 800c544:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c548:	4053      	eors	r3, r2
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	701a      	strb	r2, [r3, #0]
				Data++;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3301      	adds	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800c556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c55a:	3301      	adds	r3, #1
 800c55c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c564:	2b0f      	cmp	r3, #15
 800c566:	d9e7      	bls.n	800c538 <Encrypt_Payload+0xca>
 800c568:	e024      	b.n	800c5b4 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800c56a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800c572:	2310      	movs	r3, #16
 800c574:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800c578:	2300      	movs	r3, #0
 800c57a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c57e:	e013      	b.n	800c5a8 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	781a      	ldrb	r2, [r3, #0]
 800c584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c588:	3328      	adds	r3, #40	; 0x28
 800c58a:	443b      	add	r3, r7
 800c58c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c590:	4053      	eors	r3, r2
 800c592:	b2da      	uxtb	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	701a      	strb	r2, [r3, #0]
				Data++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800c59e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d3e5      	bcc.n	800c580 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800c5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	f67f af7a 	bls.w	800c4c0 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	3728      	adds	r7, #40	; 0x28
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800c5d8:	b590      	push	{r4, r7, lr}
 800c5da:	b09b      	sub	sp, #108	; 0x6c
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800c5e8:	4bba      	ldr	r3, [pc, #744]	; (800c8d4 <Calculate_MIC+0x2fc>)
 800c5ea:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800c5ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800c5f4:	4bb7      	ldr	r3, [pc, #732]	; (800c8d4 <Calculate_MIC+0x2fc>)
 800c5f6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800c5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800c600:	4bb4      	ldr	r3, [pc, #720]	; (800c8d4 <Calculate_MIC+0x2fc>)
 800c602:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800c606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800c60c:	4bb1      	ldr	r3, [pc, #708]	; (800c8d4 <Calculate_MIC+0x2fc>)
 800c60e:	f107 0414 	add.w	r4, r7, #20
 800c612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800c618:	2300      	movs	r3, #0
 800c61a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800c61e:	2300      	movs	r3, #0
 800c620:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800c624:	2301      	movs	r3, #1
 800c626:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800c62a:	2349      	movs	r3, #73	; 0x49
 800c62c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 800c630:	2300      	movs	r3, #0
 800c632:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800c642:	2300      	movs	r3, #0
 800c644:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 800c648:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800c64c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 800c650:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c654:	78db      	ldrb	r3, [r3, #3]
 800c656:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 800c65a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c65e:	789b      	ldrb	r3, [r3, #2]
 800c660:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 800c664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 800c66e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	0a1b      	lsrs	r3, r3, #8
 800c684:	b2db      	uxtb	r3, r3
 800c686:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800c68a:	2300      	movs	r3, #0
 800c68c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 800c690:	2300      	movs	r3, #0
 800c692:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 800c696:	2300      	movs	r3, #0
 800c698:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	091b      	lsrs	r3, r3, #4
 800c6a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	f003 030f 	and.w	r3, r3, #15
 800c6b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 800c6b4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800c6bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800c6c6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c6ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c6ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 f901 	bl	800c8d8 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800c6d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c6da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fc2b 	bl	800bf38 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c6e8:	e010      	b.n	800c70c <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800c6ea:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c6ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c6f2:	3268      	adds	r2, #104	; 0x68
 800c6f4:	443a      	add	r2, r7
 800c6f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c6fa:	3368      	adds	r3, #104	; 0x68
 800c6fc:	443b      	add	r3, r7
 800c6fe:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800c702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c706:	3301      	adds	r3, #1
 800c708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c70c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c710:	2b0f      	cmp	r3, #15
 800c712:	d9ea      	bls.n	800c6ea <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800c714:	e043      	b.n	800c79e <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800c716:	2300      	movs	r3, #0
 800c718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c71c:	e00f      	b.n	800c73e <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800c71e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	3368      	adds	r3, #104	; 0x68
 800c728:	443b      	add	r3, r7
 800c72a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3301      	adds	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800c734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c738:	3301      	adds	r3, #1
 800c73a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c73e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c742:	2b0f      	cmp	r3, #15
 800c744:	d9eb      	bls.n	800c71e <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800c746:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c74a:	f107 0314 	add.w	r3, r7, #20
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f000 f949 	bl	800c9e8 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800c756:	f107 0314 	add.w	r3, r7, #20
 800c75a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fbeb 	bl	800bf38 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800c762:	2300      	movs	r3, #0
 800c764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c768:	e010      	b.n	800c78c <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800c76a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c76e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c772:	3268      	adds	r2, #104	; 0x68
 800c774:	443a      	add	r2, r7
 800c776:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800c77a:	3368      	adds	r3, #104	; 0x68
 800c77c:	443b      	add	r3, r7
 800c77e:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800c782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c786:	3301      	adds	r3, #1
 800c788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c78c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c790:	2b0f      	cmp	r3, #15
 800c792:	d9ea      	bls.n	800c76a <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800c794:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800c798:	3301      	adds	r3, #1
 800c79a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 800c79e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800c7a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d3b5      	bcc.n	800c716 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800c7aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d12e      	bne.n	800c810 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7b8:	e00f      	b.n	800c7da <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800c7ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	7812      	ldrb	r2, [r2, #0]
 800c7c2:	3368      	adds	r3, #104	; 0x68
 800c7c4:	443b      	add	r3, r7
 800c7c6:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800c7d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c7da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c7de:	2b0f      	cmp	r3, #15
 800c7e0:	d9eb      	bls.n	800c7ba <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800c7e2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800c7e6:	f107 0314 	add.w	r3, r7, #20
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 f8fb 	bl	800c9e8 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800c7f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c7f6:	f107 0314 	add.w	r3, r7, #20
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f8f3 	bl	800c9e8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800c802:	f107 0314 	add.w	r3, r7, #20
 800c806:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fb95 	bl	800bf38 <AES_Encrypt>
 800c80e:	e04d      	b.n	800c8ac <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800c810:	2300      	movs	r3, #0
 800c812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c816:	e02f      	b.n	800c878 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800c818:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c81c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c820:	429a      	cmp	r2, r3
 800c822:	d20a      	bcs.n	800c83a <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800c824:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	7812      	ldrb	r2, [r2, #0]
 800c82c:	3368      	adds	r3, #104	; 0x68
 800c82e:	443b      	add	r3, r7
 800c830:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3301      	adds	r3, #1
 800c838:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800c83a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c83e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c842:	429a      	cmp	r2, r3
 800c844:	d106      	bne.n	800c854 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800c846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c84a:	3368      	adds	r3, #104	; 0x68
 800c84c:	443b      	add	r3, r7
 800c84e:	2280      	movs	r2, #128	; 0x80
 800c850:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800c854:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c858:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d906      	bls.n	800c86e <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800c860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c864:	3368      	adds	r3, #104	; 0x68
 800c866:	443b      	add	r3, r7
 800c868:	2200      	movs	r2, #0
 800c86a:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800c86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c872:	3301      	adds	r3, #1
 800c874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c87c:	2b0f      	cmp	r3, #15
 800c87e:	d9cb      	bls.n	800c818 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800c880:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c884:	f107 0314 	add.w	r3, r7, #20
 800c888:	4611      	mov	r1, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f8ac 	bl	800c9e8 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800c890:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c894:	f107 0314 	add.w	r3, r7, #20
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 f8a4 	bl	800c9e8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800c8a0:	f107 0314 	add.w	r3, r7, #20
 800c8a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7ff fb46 	bl	800bf38 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800c8ac:	7d3a      	ldrb	r2, [r7, #20]
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	7d7a      	ldrb	r2, [r7, #21]
 800c8b8:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	3302      	adds	r3, #2
 800c8be:	7dba      	ldrb	r2, [r7, #22]
 800c8c0:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	7dfa      	ldrb	r2, [r7, #23]
 800c8c8:	701a      	strb	r2, [r3, #0]
}
 800c8ca:	bf00      	nop
 800c8cc:	376c      	adds	r7, #108	; 0x6c
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd90      	pop	{r4, r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	0800dc40 	.word	0x0800dc40

0800c8d8 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7ff fb26 	bl	800bf38 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b25b      	sxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	da02      	bge.n	800c8fc <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	75bb      	strb	r3, [r7, #22]
 800c8fa:	e001      	b.n	800c900 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 f83c 	bl	800c97e <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800c906:	7dbb      	ldrb	r3, [r7, #22]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d109      	bne.n	800c920 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	330f      	adds	r3, #15
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	320f      	adds	r2, #15
 800c916:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c91a:	43db      	mvns	r3, r3
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800c920:	2300      	movs	r3, #0
 800c922:	75fb      	strb	r3, [r7, #23]
 800c924:	e00a      	b.n	800c93c <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	441a      	add	r2, r3
 800c92c:	7dfb      	ldrb	r3, [r7, #23]
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	440b      	add	r3, r1
 800c932:	7812      	ldrb	r2, [r2, #0]
 800c934:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	3301      	adds	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	2b0f      	cmp	r3, #15
 800c940:	d9f1      	bls.n	800c926 <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	b25b      	sxtb	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da02      	bge.n	800c952 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800c94c:	2301      	movs	r3, #1
 800c94e:	75bb      	strb	r3, [r7, #22]
 800c950:	e001      	b.n	800c956 <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800c956:	68b8      	ldr	r0, [r7, #8]
 800c958:	f000 f811 	bl	800c97e <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800c95c:	7dbb      	ldrb	r3, [r7, #22]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d109      	bne.n	800c976 <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	330f      	adds	r3, #15
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	320f      	adds	r2, #15
 800c96c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c970:	43db      	mvns	r3, r3
 800c972:	b2db      	uxtb	r3, r3
 800c974:	7013      	strb	r3, [r2, #0]
	}
}
 800c976:	bf00      	nop
 800c978:	3718      	adds	r7, #24
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800c98a:	2300      	movs	r3, #0
 800c98c:	73fb      	strb	r3, [r7, #15]
 800c98e:	e022      	b.n	800c9d6 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800c990:	7bfb      	ldrb	r3, [r7, #15]
 800c992:	2b0e      	cmp	r3, #14
 800c994:	d80d      	bhi.n	800c9b2 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	3301      	adds	r3, #1
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	4413      	add	r3, r2
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	da02      	bge.n	800c9ac <Shift_Left+0x2e>
			{
				Overflow = 1;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	73bb      	strb	r3, [r7, #14]
 800c9aa:	e004      	b.n	800c9b6 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	73bb      	strb	r3, [r7, #14]
 800c9b0:	e001      	b.n	800c9b6 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800c9b6:	7bfb      	ldrb	r3, [r7, #15]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	b2d9      	uxtb	r1, r3
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	7bba      	ldrb	r2, [r7, #14]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	73fb      	strb	r3, [r7, #15]
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	2b0f      	cmp	r3, #15
 800c9da:	d9d9      	bls.n	800c990 <Shift_Left+0x12>
	}
}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr

0800c9e8 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
 800c9f6:	e010      	b.n	800ca1a <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	7819      	ldrb	r1, [r3, #0]
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	4413      	add	r3, r2
 800ca06:	781a      	ldrb	r2, [r3, #0]
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	4403      	add	r3, r0
 800ca0e:	404a      	eors	r2, r1
 800ca10:	b2d2      	uxtb	r2, r2
 800ca12:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	3301      	adds	r3, #1
 800ca18:	73fb      	strb	r3, [r7, #15]
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	2b0f      	cmp	r3, #15
 800ca1e:	d9eb      	bls.n	800c9f8 <XOR+0x10>
	}
}
 800ca20:	bf00      	nop
 800ca22:	bf00      	nop
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bc80      	pop	{r7}
 800ca2a:	4770      	bx	lr

0800ca2c <__assert_func>:
 800ca2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca2e:	4614      	mov	r4, r2
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <__assert_func+0x2c>)
 800ca34:	4605      	mov	r5, r0
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68d8      	ldr	r0, [r3, #12]
 800ca3a:	b14c      	cbz	r4, 800ca50 <__assert_func+0x24>
 800ca3c:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <__assert_func+0x30>)
 800ca3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca42:	9100      	str	r1, [sp, #0]
 800ca44:	462b      	mov	r3, r5
 800ca46:	4906      	ldr	r1, [pc, #24]	; (800ca60 <__assert_func+0x34>)
 800ca48:	f000 f8b2 	bl	800cbb0 <fiprintf>
 800ca4c:	f000 f9bd 	bl	800cdca <abort>
 800ca50:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <__assert_func+0x38>)
 800ca52:	461c      	mov	r4, r3
 800ca54:	e7f3      	b.n	800ca3e <__assert_func+0x12>
 800ca56:	bf00      	nop
 800ca58:	20000168 	.word	0x20000168
 800ca5c:	0800dcfa 	.word	0x0800dcfa
 800ca60:	0800dd07 	.word	0x0800dd07
 800ca64:	0800dd35 	.word	0x0800dd35

0800ca68 <std>:
 800ca68:	2300      	movs	r3, #0
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ca72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca76:	6083      	str	r3, [r0, #8]
 800ca78:	8181      	strh	r1, [r0, #12]
 800ca7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ca7c:	81c2      	strh	r2, [r0, #14]
 800ca7e:	6183      	str	r3, [r0, #24]
 800ca80:	4619      	mov	r1, r3
 800ca82:	2208      	movs	r2, #8
 800ca84:	305c      	adds	r0, #92	; 0x5c
 800ca86:	f000 f916 	bl	800ccb6 <memset>
 800ca8a:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <std+0x58>)
 800ca8c:	6224      	str	r4, [r4, #32]
 800ca8e:	6263      	str	r3, [r4, #36]	; 0x24
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <std+0x5c>)
 800ca92:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <std+0x60>)
 800ca96:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca98:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <std+0x64>)
 800ca9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca9c:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <std+0x68>)
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d006      	beq.n	800cab0 <std+0x48>
 800caa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800caa6:	4294      	cmp	r4, r2
 800caa8:	d002      	beq.n	800cab0 <std+0x48>
 800caaa:	33d0      	adds	r3, #208	; 0xd0
 800caac:	429c      	cmp	r4, r3
 800caae:	d105      	bne.n	800cabc <std+0x54>
 800cab0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cab8:	f000 b976 	b.w	800cda8 <__retarget_lock_init_recursive>
 800cabc:	bd10      	pop	{r4, pc}
 800cabe:	bf00      	nop
 800cac0:	0800cc11 	.word	0x0800cc11
 800cac4:	0800cc33 	.word	0x0800cc33
 800cac8:	0800cc6b 	.word	0x0800cc6b
 800cacc:	0800cc8f 	.word	0x0800cc8f
 800cad0:	200005a0 	.word	0x200005a0

0800cad4 <stdio_exit_handler>:
 800cad4:	4a02      	ldr	r2, [pc, #8]	; (800cae0 <stdio_exit_handler+0xc>)
 800cad6:	4903      	ldr	r1, [pc, #12]	; (800cae4 <stdio_exit_handler+0x10>)
 800cad8:	4803      	ldr	r0, [pc, #12]	; (800cae8 <stdio_exit_handler+0x14>)
 800cada:	f000 b87b 	b.w	800cbd4 <_fwalk_sglue>
 800cade:	bf00      	nop
 800cae0:	20000110 	.word	0x20000110
 800cae4:	0800d671 	.word	0x0800d671
 800cae8:	2000011c 	.word	0x2000011c

0800caec <cleanup_stdio>:
 800caec:	6841      	ldr	r1, [r0, #4]
 800caee:	4b0c      	ldr	r3, [pc, #48]	; (800cb20 <cleanup_stdio+0x34>)
 800caf0:	b510      	push	{r4, lr}
 800caf2:	4299      	cmp	r1, r3
 800caf4:	4604      	mov	r4, r0
 800caf6:	d001      	beq.n	800cafc <cleanup_stdio+0x10>
 800caf8:	f000 fdba 	bl	800d670 <_fflush_r>
 800cafc:	68a1      	ldr	r1, [r4, #8]
 800cafe:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <cleanup_stdio+0x38>)
 800cb00:	4299      	cmp	r1, r3
 800cb02:	d002      	beq.n	800cb0a <cleanup_stdio+0x1e>
 800cb04:	4620      	mov	r0, r4
 800cb06:	f000 fdb3 	bl	800d670 <_fflush_r>
 800cb0a:	68e1      	ldr	r1, [r4, #12]
 800cb0c:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <cleanup_stdio+0x3c>)
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	d004      	beq.n	800cb1c <cleanup_stdio+0x30>
 800cb12:	4620      	mov	r0, r4
 800cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb18:	f000 bdaa 	b.w	800d670 <_fflush_r>
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	bf00      	nop
 800cb20:	200005a0 	.word	0x200005a0
 800cb24:	20000608 	.word	0x20000608
 800cb28:	20000670 	.word	0x20000670

0800cb2c <global_stdio_init.part.0>:
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <global_stdio_init.part.0+0x30>)
 800cb30:	4c0b      	ldr	r4, [pc, #44]	; (800cb60 <global_stdio_init.part.0+0x34>)
 800cb32:	4a0c      	ldr	r2, [pc, #48]	; (800cb64 <global_stdio_init.part.0+0x38>)
 800cb34:	4620      	mov	r0, r4
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	2104      	movs	r1, #4
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7ff ff94 	bl	800ca68 <std>
 800cb40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb44:	2201      	movs	r2, #1
 800cb46:	2109      	movs	r1, #9
 800cb48:	f7ff ff8e 	bl	800ca68 <std>
 800cb4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb50:	2202      	movs	r2, #2
 800cb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb56:	2112      	movs	r1, #18
 800cb58:	f7ff bf86 	b.w	800ca68 <std>
 800cb5c:	200006d8 	.word	0x200006d8
 800cb60:	200005a0 	.word	0x200005a0
 800cb64:	0800cad5 	.word	0x0800cad5

0800cb68 <__sfp_lock_acquire>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__sfp_lock_acquire+0x8>)
 800cb6a:	f000 b91e 	b.w	800cdaa <__retarget_lock_acquire_recursive>
 800cb6e:	bf00      	nop
 800cb70:	200006e1 	.word	0x200006e1

0800cb74 <__sfp_lock_release>:
 800cb74:	4801      	ldr	r0, [pc, #4]	; (800cb7c <__sfp_lock_release+0x8>)
 800cb76:	f000 b919 	b.w	800cdac <__retarget_lock_release_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	200006e1 	.word	0x200006e1

0800cb80 <__sinit>:
 800cb80:	b510      	push	{r4, lr}
 800cb82:	4604      	mov	r4, r0
 800cb84:	f7ff fff0 	bl	800cb68 <__sfp_lock_acquire>
 800cb88:	6a23      	ldr	r3, [r4, #32]
 800cb8a:	b11b      	cbz	r3, 800cb94 <__sinit+0x14>
 800cb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb90:	f7ff bff0 	b.w	800cb74 <__sfp_lock_release>
 800cb94:	4b04      	ldr	r3, [pc, #16]	; (800cba8 <__sinit+0x28>)
 800cb96:	6223      	str	r3, [r4, #32]
 800cb98:	4b04      	ldr	r3, [pc, #16]	; (800cbac <__sinit+0x2c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1f5      	bne.n	800cb8c <__sinit+0xc>
 800cba0:	f7ff ffc4 	bl	800cb2c <global_stdio_init.part.0>
 800cba4:	e7f2      	b.n	800cb8c <__sinit+0xc>
 800cba6:	bf00      	nop
 800cba8:	0800caed 	.word	0x0800caed
 800cbac:	200006d8 	.word	0x200006d8

0800cbb0 <fiprintf>:
 800cbb0:	b40e      	push	{r1, r2, r3}
 800cbb2:	b503      	push	{r0, r1, lr}
 800cbb4:	4601      	mov	r1, r0
 800cbb6:	ab03      	add	r3, sp, #12
 800cbb8:	4805      	ldr	r0, [pc, #20]	; (800cbd0 <fiprintf+0x20>)
 800cbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbbe:	6800      	ldr	r0, [r0, #0]
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	f000 fa25 	bl	800d010 <_vfiprintf_r>
 800cbc6:	b002      	add	sp, #8
 800cbc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbcc:	b003      	add	sp, #12
 800cbce:	4770      	bx	lr
 800cbd0:	20000168 	.word	0x20000168

0800cbd4 <_fwalk_sglue>:
 800cbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd8:	4607      	mov	r7, r0
 800cbda:	4688      	mov	r8, r1
 800cbdc:	4614      	mov	r4, r2
 800cbde:	2600      	movs	r6, #0
 800cbe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbe4:	f1b9 0901 	subs.w	r9, r9, #1
 800cbe8:	d505      	bpl.n	800cbf6 <_fwalk_sglue+0x22>
 800cbea:	6824      	ldr	r4, [r4, #0]
 800cbec:	2c00      	cmp	r4, #0
 800cbee:	d1f7      	bne.n	800cbe0 <_fwalk_sglue+0xc>
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	89ab      	ldrh	r3, [r5, #12]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d907      	bls.n	800cc0c <_fwalk_sglue+0x38>
 800cbfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc00:	3301      	adds	r3, #1
 800cc02:	d003      	beq.n	800cc0c <_fwalk_sglue+0x38>
 800cc04:	4629      	mov	r1, r5
 800cc06:	4638      	mov	r0, r7
 800cc08:	47c0      	blx	r8
 800cc0a:	4306      	orrs	r6, r0
 800cc0c:	3568      	adds	r5, #104	; 0x68
 800cc0e:	e7e9      	b.n	800cbe4 <_fwalk_sglue+0x10>

0800cc10 <__sread>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	460c      	mov	r4, r1
 800cc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc18:	f000 f878 	bl	800cd0c <_read_r>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	bfab      	itete	ge
 800cc20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc22:	89a3      	ldrhlt	r3, [r4, #12]
 800cc24:	181b      	addge	r3, r3, r0
 800cc26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc2a:	bfac      	ite	ge
 800cc2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc2e:	81a3      	strhlt	r3, [r4, #12]
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <__swrite>:
 800cc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc36:	461f      	mov	r7, r3
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	05db      	lsls	r3, r3, #23
 800cc3e:	460c      	mov	r4, r1
 800cc40:	4616      	mov	r6, r2
 800cc42:	d505      	bpl.n	800cc50 <__swrite+0x1e>
 800cc44:	2302      	movs	r3, #2
 800cc46:	2200      	movs	r2, #0
 800cc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4c:	f000 f84c 	bl	800cce8 <_lseek_r>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	4632      	mov	r2, r6
 800cc54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	463b      	mov	r3, r7
 800cc5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc66:	f000 b863 	b.w	800cd30 <_write_r>

0800cc6a <__sseek>:
 800cc6a:	b510      	push	{r4, lr}
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc72:	f000 f839 	bl	800cce8 <_lseek_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	bf15      	itete	ne
 800cc7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc86:	81a3      	strheq	r3, [r4, #12]
 800cc88:	bf18      	it	ne
 800cc8a:	81a3      	strhne	r3, [r4, #12]
 800cc8c:	bd10      	pop	{r4, pc}

0800cc8e <__sclose>:
 800cc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc92:	f000 b819 	b.w	800ccc8 <_close_r>

0800cc96 <memcmp>:
 800cc96:	b510      	push	{r4, lr}
 800cc98:	3901      	subs	r1, #1
 800cc9a:	4402      	add	r2, r0
 800cc9c:	4290      	cmp	r0, r2
 800cc9e:	d101      	bne.n	800cca4 <memcmp+0xe>
 800cca0:	2000      	movs	r0, #0
 800cca2:	e005      	b.n	800ccb0 <memcmp+0x1a>
 800cca4:	7803      	ldrb	r3, [r0, #0]
 800cca6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccaa:	42a3      	cmp	r3, r4
 800ccac:	d001      	beq.n	800ccb2 <memcmp+0x1c>
 800ccae:	1b18      	subs	r0, r3, r4
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	e7f2      	b.n	800cc9c <memcmp+0x6>

0800ccb6 <memset>:
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4402      	add	r2, r0
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d100      	bne.n	800ccc0 <memset+0xa>
 800ccbe:	4770      	bx	lr
 800ccc0:	f803 1b01 	strb.w	r1, [r3], #1
 800ccc4:	e7f9      	b.n	800ccba <memset+0x4>
	...

0800ccc8 <_close_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	2300      	movs	r3, #0
 800cccc:	4d05      	ldr	r5, [pc, #20]	; (800cce4 <_close_r+0x1c>)
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	f7f8 f88e 	bl	8004df4 <_close>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_close_r+0x1a>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_close_r+0x1a>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	200006dc 	.word	0x200006dc

0800cce8 <_lseek_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4604      	mov	r4, r0
 800ccec:	4608      	mov	r0, r1
 800ccee:	4611      	mov	r1, r2
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	4d05      	ldr	r5, [pc, #20]	; (800cd08 <_lseek_r+0x20>)
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	f7f8 f8a0 	bl	8004e3c <_lseek>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_lseek_r+0x1e>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_lseek_r+0x1e>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	200006dc 	.word	0x200006dc

0800cd0c <_read_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	2200      	movs	r2, #0
 800cd16:	4d05      	ldr	r5, [pc, #20]	; (800cd2c <_read_r+0x20>)
 800cd18:	602a      	str	r2, [r5, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	f7f8 f831 	bl	8004d82 <_read>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d102      	bne.n	800cd2a <_read_r+0x1e>
 800cd24:	682b      	ldr	r3, [r5, #0]
 800cd26:	b103      	cbz	r3, 800cd2a <_read_r+0x1e>
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
 800cd2c:	200006dc 	.word	0x200006dc

0800cd30 <_write_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	4611      	mov	r1, r2
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4d05      	ldr	r5, [pc, #20]	; (800cd50 <_write_r+0x20>)
 800cd3c:	602a      	str	r2, [r5, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f7f8 f83c 	bl	8004dbc <_write>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	d102      	bne.n	800cd4e <_write_r+0x1e>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	b103      	cbz	r3, 800cd4e <_write_r+0x1e>
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	200006dc 	.word	0x200006dc

0800cd54 <__errno>:
 800cd54:	4b01      	ldr	r3, [pc, #4]	; (800cd5c <__errno+0x8>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	20000168 	.word	0x20000168

0800cd60 <__libc_init_array>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	2600      	movs	r6, #0
 800cd64:	4d0c      	ldr	r5, [pc, #48]	; (800cd98 <__libc_init_array+0x38>)
 800cd66:	4c0d      	ldr	r4, [pc, #52]	; (800cd9c <__libc_init_array+0x3c>)
 800cd68:	1b64      	subs	r4, r4, r5
 800cd6a:	10a4      	asrs	r4, r4, #2
 800cd6c:	42a6      	cmp	r6, r4
 800cd6e:	d109      	bne.n	800cd84 <__libc_init_array+0x24>
 800cd70:	f000 fe22 	bl	800d9b8 <_init>
 800cd74:	2600      	movs	r6, #0
 800cd76:	4d0a      	ldr	r5, [pc, #40]	; (800cda0 <__libc_init_array+0x40>)
 800cd78:	4c0a      	ldr	r4, [pc, #40]	; (800cda4 <__libc_init_array+0x44>)
 800cd7a:	1b64      	subs	r4, r4, r5
 800cd7c:	10a4      	asrs	r4, r4, #2
 800cd7e:	42a6      	cmp	r6, r4
 800cd80:	d105      	bne.n	800cd8e <__libc_init_array+0x2e>
 800cd82:	bd70      	pop	{r4, r5, r6, pc}
 800cd84:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd88:	4798      	blx	r3
 800cd8a:	3601      	adds	r6, #1
 800cd8c:	e7ee      	b.n	800cd6c <__libc_init_array+0xc>
 800cd8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd92:	4798      	blx	r3
 800cd94:	3601      	adds	r6, #1
 800cd96:	e7f2      	b.n	800cd7e <__libc_init_array+0x1e>
 800cd98:	0800dd74 	.word	0x0800dd74
 800cd9c:	0800dd74 	.word	0x0800dd74
 800cda0:	0800dd74 	.word	0x0800dd74
 800cda4:	0800dd78 	.word	0x0800dd78

0800cda8 <__retarget_lock_init_recursive>:
 800cda8:	4770      	bx	lr

0800cdaa <__retarget_lock_acquire_recursive>:
 800cdaa:	4770      	bx	lr

0800cdac <__retarget_lock_release_recursive>:
 800cdac:	4770      	bx	lr

0800cdae <memcpy>:
 800cdae:	440a      	add	r2, r1
 800cdb0:	4291      	cmp	r1, r2
 800cdb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdb6:	d100      	bne.n	800cdba <memcpy+0xc>
 800cdb8:	4770      	bx	lr
 800cdba:	b510      	push	{r4, lr}
 800cdbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc0:	4291      	cmp	r1, r2
 800cdc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdc6:	d1f9      	bne.n	800cdbc <memcpy+0xe>
 800cdc8:	bd10      	pop	{r4, pc}

0800cdca <abort>:
 800cdca:	2006      	movs	r0, #6
 800cdcc:	b508      	push	{r3, lr}
 800cdce:	f000 fd35 	bl	800d83c <raise>
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	f7f7 ffcb 	bl	8004d6e <_exit>

0800cdd8 <_free_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4605      	mov	r5, r0
 800cddc:	2900      	cmp	r1, #0
 800cdde:	d040      	beq.n	800ce62 <_free_r+0x8a>
 800cde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde4:	1f0c      	subs	r4, r1, #4
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bfb8      	it	lt
 800cdea:	18e4      	addlt	r4, r4, r3
 800cdec:	f000 f8dc 	bl	800cfa8 <__malloc_lock>
 800cdf0:	4a1c      	ldr	r2, [pc, #112]	; (800ce64 <_free_r+0x8c>)
 800cdf2:	6813      	ldr	r3, [r2, #0]
 800cdf4:	b933      	cbnz	r3, 800ce04 <_free_r+0x2c>
 800cdf6:	6063      	str	r3, [r4, #4]
 800cdf8:	6014      	str	r4, [r2, #0]
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce00:	f000 b8d8 	b.w	800cfb4 <__malloc_unlock>
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	d908      	bls.n	800ce1a <_free_r+0x42>
 800ce08:	6820      	ldr	r0, [r4, #0]
 800ce0a:	1821      	adds	r1, r4, r0
 800ce0c:	428b      	cmp	r3, r1
 800ce0e:	bf01      	itttt	eq
 800ce10:	6819      	ldreq	r1, [r3, #0]
 800ce12:	685b      	ldreq	r3, [r3, #4]
 800ce14:	1809      	addeq	r1, r1, r0
 800ce16:	6021      	streq	r1, [r4, #0]
 800ce18:	e7ed      	b.n	800cdf6 <_free_r+0x1e>
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	b10b      	cbz	r3, 800ce24 <_free_r+0x4c>
 800ce20:	42a3      	cmp	r3, r4
 800ce22:	d9fa      	bls.n	800ce1a <_free_r+0x42>
 800ce24:	6811      	ldr	r1, [r2, #0]
 800ce26:	1850      	adds	r0, r2, r1
 800ce28:	42a0      	cmp	r0, r4
 800ce2a:	d10b      	bne.n	800ce44 <_free_r+0x6c>
 800ce2c:	6820      	ldr	r0, [r4, #0]
 800ce2e:	4401      	add	r1, r0
 800ce30:	1850      	adds	r0, r2, r1
 800ce32:	4283      	cmp	r3, r0
 800ce34:	6011      	str	r1, [r2, #0]
 800ce36:	d1e0      	bne.n	800cdfa <_free_r+0x22>
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	4408      	add	r0, r1
 800ce3e:	6010      	str	r0, [r2, #0]
 800ce40:	6053      	str	r3, [r2, #4]
 800ce42:	e7da      	b.n	800cdfa <_free_r+0x22>
 800ce44:	d902      	bls.n	800ce4c <_free_r+0x74>
 800ce46:	230c      	movs	r3, #12
 800ce48:	602b      	str	r3, [r5, #0]
 800ce4a:	e7d6      	b.n	800cdfa <_free_r+0x22>
 800ce4c:	6820      	ldr	r0, [r4, #0]
 800ce4e:	1821      	adds	r1, r4, r0
 800ce50:	428b      	cmp	r3, r1
 800ce52:	bf01      	itttt	eq
 800ce54:	6819      	ldreq	r1, [r3, #0]
 800ce56:	685b      	ldreq	r3, [r3, #4]
 800ce58:	1809      	addeq	r1, r1, r0
 800ce5a:	6021      	streq	r1, [r4, #0]
 800ce5c:	6063      	str	r3, [r4, #4]
 800ce5e:	6054      	str	r4, [r2, #4]
 800ce60:	e7cb      	b.n	800cdfa <_free_r+0x22>
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
 800ce64:	200006e4 	.word	0x200006e4

0800ce68 <sbrk_aligned>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	4e0e      	ldr	r6, [pc, #56]	; (800cea4 <sbrk_aligned+0x3c>)
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	6831      	ldr	r1, [r6, #0]
 800ce70:	4605      	mov	r5, r0
 800ce72:	b911      	cbnz	r1, 800ce7a <sbrk_aligned+0x12>
 800ce74:	f000 fcfe 	bl	800d874 <_sbrk_r>
 800ce78:	6030      	str	r0, [r6, #0]
 800ce7a:	4621      	mov	r1, r4
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	f000 fcf9 	bl	800d874 <_sbrk_r>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d00a      	beq.n	800ce9c <sbrk_aligned+0x34>
 800ce86:	1cc4      	adds	r4, r0, #3
 800ce88:	f024 0403 	bic.w	r4, r4, #3
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d007      	beq.n	800cea0 <sbrk_aligned+0x38>
 800ce90:	1a21      	subs	r1, r4, r0
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 fcee 	bl	800d874 <_sbrk_r>
 800ce98:	3001      	adds	r0, #1
 800ce9a:	d101      	bne.n	800cea0 <sbrk_aligned+0x38>
 800ce9c:	f04f 34ff 	mov.w	r4, #4294967295
 800cea0:	4620      	mov	r0, r4
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	200006e8 	.word	0x200006e8

0800cea8 <_malloc_r>:
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceac:	1ccd      	adds	r5, r1, #3
 800ceae:	f025 0503 	bic.w	r5, r5, #3
 800ceb2:	3508      	adds	r5, #8
 800ceb4:	2d0c      	cmp	r5, #12
 800ceb6:	bf38      	it	cc
 800ceb8:	250c      	movcc	r5, #12
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	4607      	mov	r7, r0
 800cebe:	db01      	blt.n	800cec4 <_malloc_r+0x1c>
 800cec0:	42a9      	cmp	r1, r5
 800cec2:	d905      	bls.n	800ced0 <_malloc_r+0x28>
 800cec4:	230c      	movs	r3, #12
 800cec6:	2600      	movs	r6, #0
 800cec8:	603b      	str	r3, [r7, #0]
 800ceca:	4630      	mov	r0, r6
 800cecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cfa4 <_malloc_r+0xfc>
 800ced4:	f000 f868 	bl	800cfa8 <__malloc_lock>
 800ced8:	f8d8 3000 	ldr.w	r3, [r8]
 800cedc:	461c      	mov	r4, r3
 800cede:	bb5c      	cbnz	r4, 800cf38 <_malloc_r+0x90>
 800cee0:	4629      	mov	r1, r5
 800cee2:	4638      	mov	r0, r7
 800cee4:	f7ff ffc0 	bl	800ce68 <sbrk_aligned>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	4604      	mov	r4, r0
 800ceec:	d155      	bne.n	800cf9a <_malloc_r+0xf2>
 800ceee:	f8d8 4000 	ldr.w	r4, [r8]
 800cef2:	4626      	mov	r6, r4
 800cef4:	2e00      	cmp	r6, #0
 800cef6:	d145      	bne.n	800cf84 <_malloc_r+0xdc>
 800cef8:	2c00      	cmp	r4, #0
 800cefa:	d048      	beq.n	800cf8e <_malloc_r+0xe6>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	4631      	mov	r1, r6
 800cf00:	4638      	mov	r0, r7
 800cf02:	eb04 0903 	add.w	r9, r4, r3
 800cf06:	f000 fcb5 	bl	800d874 <_sbrk_r>
 800cf0a:	4581      	cmp	r9, r0
 800cf0c:	d13f      	bne.n	800cf8e <_malloc_r+0xe6>
 800cf0e:	6821      	ldr	r1, [r4, #0]
 800cf10:	4638      	mov	r0, r7
 800cf12:	1a6d      	subs	r5, r5, r1
 800cf14:	4629      	mov	r1, r5
 800cf16:	f7ff ffa7 	bl	800ce68 <sbrk_aligned>
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d037      	beq.n	800cf8e <_malloc_r+0xe6>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	442b      	add	r3, r5
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	f8d8 3000 	ldr.w	r3, [r8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d038      	beq.n	800cf9e <_malloc_r+0xf6>
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	42a2      	cmp	r2, r4
 800cf30:	d12b      	bne.n	800cf8a <_malloc_r+0xe2>
 800cf32:	2200      	movs	r2, #0
 800cf34:	605a      	str	r2, [r3, #4]
 800cf36:	e00f      	b.n	800cf58 <_malloc_r+0xb0>
 800cf38:	6822      	ldr	r2, [r4, #0]
 800cf3a:	1b52      	subs	r2, r2, r5
 800cf3c:	d41f      	bmi.n	800cf7e <_malloc_r+0xd6>
 800cf3e:	2a0b      	cmp	r2, #11
 800cf40:	d917      	bls.n	800cf72 <_malloc_r+0xca>
 800cf42:	1961      	adds	r1, r4, r5
 800cf44:	42a3      	cmp	r3, r4
 800cf46:	6025      	str	r5, [r4, #0]
 800cf48:	bf18      	it	ne
 800cf4a:	6059      	strne	r1, [r3, #4]
 800cf4c:	6863      	ldr	r3, [r4, #4]
 800cf4e:	bf08      	it	eq
 800cf50:	f8c8 1000 	streq.w	r1, [r8]
 800cf54:	5162      	str	r2, [r4, r5]
 800cf56:	604b      	str	r3, [r1, #4]
 800cf58:	4638      	mov	r0, r7
 800cf5a:	f104 060b 	add.w	r6, r4, #11
 800cf5e:	f000 f829 	bl	800cfb4 <__malloc_unlock>
 800cf62:	f026 0607 	bic.w	r6, r6, #7
 800cf66:	1d23      	adds	r3, r4, #4
 800cf68:	1af2      	subs	r2, r6, r3
 800cf6a:	d0ae      	beq.n	800ceca <_malloc_r+0x22>
 800cf6c:	1b9b      	subs	r3, r3, r6
 800cf6e:	50a3      	str	r3, [r4, r2]
 800cf70:	e7ab      	b.n	800ceca <_malloc_r+0x22>
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	6862      	ldr	r2, [r4, #4]
 800cf76:	d1dd      	bne.n	800cf34 <_malloc_r+0x8c>
 800cf78:	f8c8 2000 	str.w	r2, [r8]
 800cf7c:	e7ec      	b.n	800cf58 <_malloc_r+0xb0>
 800cf7e:	4623      	mov	r3, r4
 800cf80:	6864      	ldr	r4, [r4, #4]
 800cf82:	e7ac      	b.n	800cede <_malloc_r+0x36>
 800cf84:	4634      	mov	r4, r6
 800cf86:	6876      	ldr	r6, [r6, #4]
 800cf88:	e7b4      	b.n	800cef4 <_malloc_r+0x4c>
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	e7cc      	b.n	800cf28 <_malloc_r+0x80>
 800cf8e:	230c      	movs	r3, #12
 800cf90:	4638      	mov	r0, r7
 800cf92:	603b      	str	r3, [r7, #0]
 800cf94:	f000 f80e 	bl	800cfb4 <__malloc_unlock>
 800cf98:	e797      	b.n	800ceca <_malloc_r+0x22>
 800cf9a:	6025      	str	r5, [r4, #0]
 800cf9c:	e7dc      	b.n	800cf58 <_malloc_r+0xb0>
 800cf9e:	605b      	str	r3, [r3, #4]
 800cfa0:	deff      	udf	#255	; 0xff
 800cfa2:	bf00      	nop
 800cfa4:	200006e4 	.word	0x200006e4

0800cfa8 <__malloc_lock>:
 800cfa8:	4801      	ldr	r0, [pc, #4]	; (800cfb0 <__malloc_lock+0x8>)
 800cfaa:	f7ff befe 	b.w	800cdaa <__retarget_lock_acquire_recursive>
 800cfae:	bf00      	nop
 800cfb0:	200006e0 	.word	0x200006e0

0800cfb4 <__malloc_unlock>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	; (800cfbc <__malloc_unlock+0x8>)
 800cfb6:	f7ff bef9 	b.w	800cdac <__retarget_lock_release_recursive>
 800cfba:	bf00      	nop
 800cfbc:	200006e0 	.word	0x200006e0

0800cfc0 <__sfputc_r>:
 800cfc0:	6893      	ldr	r3, [r2, #8]
 800cfc2:	b410      	push	{r4}
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	6093      	str	r3, [r2, #8]
 800cfca:	da07      	bge.n	800cfdc <__sfputc_r+0x1c>
 800cfcc:	6994      	ldr	r4, [r2, #24]
 800cfce:	42a3      	cmp	r3, r4
 800cfd0:	db01      	blt.n	800cfd6 <__sfputc_r+0x16>
 800cfd2:	290a      	cmp	r1, #10
 800cfd4:	d102      	bne.n	800cfdc <__sfputc_r+0x1c>
 800cfd6:	bc10      	pop	{r4}
 800cfd8:	f000 bb72 	b.w	800d6c0 <__swbuf_r>
 800cfdc:	6813      	ldr	r3, [r2, #0]
 800cfde:	1c58      	adds	r0, r3, #1
 800cfe0:	6010      	str	r0, [r2, #0]
 800cfe2:	7019      	strb	r1, [r3, #0]
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	bc10      	pop	{r4}
 800cfe8:	4770      	bx	lr

0800cfea <__sfputs_r>:
 800cfea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfec:	4606      	mov	r6, r0
 800cfee:	460f      	mov	r7, r1
 800cff0:	4614      	mov	r4, r2
 800cff2:	18d5      	adds	r5, r2, r3
 800cff4:	42ac      	cmp	r4, r5
 800cff6:	d101      	bne.n	800cffc <__sfputs_r+0x12>
 800cff8:	2000      	movs	r0, #0
 800cffa:	e007      	b.n	800d00c <__sfputs_r+0x22>
 800cffc:	463a      	mov	r2, r7
 800cffe:	4630      	mov	r0, r6
 800d000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d004:	f7ff ffdc 	bl	800cfc0 <__sfputc_r>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d1f3      	bne.n	800cff4 <__sfputs_r+0xa>
 800d00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d010 <_vfiprintf_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	460d      	mov	r5, r1
 800d016:	4614      	mov	r4, r2
 800d018:	4698      	mov	r8, r3
 800d01a:	4606      	mov	r6, r0
 800d01c:	b09d      	sub	sp, #116	; 0x74
 800d01e:	b118      	cbz	r0, 800d028 <_vfiprintf_r+0x18>
 800d020:	6a03      	ldr	r3, [r0, #32]
 800d022:	b90b      	cbnz	r3, 800d028 <_vfiprintf_r+0x18>
 800d024:	f7ff fdac 	bl	800cb80 <__sinit>
 800d028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d02a:	07d9      	lsls	r1, r3, #31
 800d02c:	d405      	bmi.n	800d03a <_vfiprintf_r+0x2a>
 800d02e:	89ab      	ldrh	r3, [r5, #12]
 800d030:	059a      	lsls	r2, r3, #22
 800d032:	d402      	bmi.n	800d03a <_vfiprintf_r+0x2a>
 800d034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d036:	f7ff feb8 	bl	800cdaa <__retarget_lock_acquire_recursive>
 800d03a:	89ab      	ldrh	r3, [r5, #12]
 800d03c:	071b      	lsls	r3, r3, #28
 800d03e:	d501      	bpl.n	800d044 <_vfiprintf_r+0x34>
 800d040:	692b      	ldr	r3, [r5, #16]
 800d042:	b99b      	cbnz	r3, 800d06c <_vfiprintf_r+0x5c>
 800d044:	4629      	mov	r1, r5
 800d046:	4630      	mov	r0, r6
 800d048:	f000 fb78 	bl	800d73c <__swsetup_r>
 800d04c:	b170      	cbz	r0, 800d06c <_vfiprintf_r+0x5c>
 800d04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d050:	07dc      	lsls	r4, r3, #31
 800d052:	d504      	bpl.n	800d05e <_vfiprintf_r+0x4e>
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	b01d      	add	sp, #116	; 0x74
 800d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	0598      	lsls	r0, r3, #22
 800d062:	d4f7      	bmi.n	800d054 <_vfiprintf_r+0x44>
 800d064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d066:	f7ff fea1 	bl	800cdac <__retarget_lock_release_recursive>
 800d06a:	e7f3      	b.n	800d054 <_vfiprintf_r+0x44>
 800d06c:	2300      	movs	r3, #0
 800d06e:	9309      	str	r3, [sp, #36]	; 0x24
 800d070:	2320      	movs	r3, #32
 800d072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d076:	2330      	movs	r3, #48	; 0x30
 800d078:	f04f 0901 	mov.w	r9, #1
 800d07c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d080:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d230 <_vfiprintf_r+0x220>
 800d084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d088:	4623      	mov	r3, r4
 800d08a:	469a      	mov	sl, r3
 800d08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d090:	b10a      	cbz	r2, 800d096 <_vfiprintf_r+0x86>
 800d092:	2a25      	cmp	r2, #37	; 0x25
 800d094:	d1f9      	bne.n	800d08a <_vfiprintf_r+0x7a>
 800d096:	ebba 0b04 	subs.w	fp, sl, r4
 800d09a:	d00b      	beq.n	800d0b4 <_vfiprintf_r+0xa4>
 800d09c:	465b      	mov	r3, fp
 800d09e:	4622      	mov	r2, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f7ff ffa1 	bl	800cfea <__sfputs_r>
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	f000 80a9 	beq.w	800d200 <_vfiprintf_r+0x1f0>
 800d0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b0:	445a      	add	r2, fp
 800d0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80a1 	beq.w	800d200 <_vfiprintf_r+0x1f0>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0c8:	f10a 0a01 	add.w	sl, sl, #1
 800d0cc:	9304      	str	r3, [sp, #16]
 800d0ce:	9307      	str	r3, [sp, #28]
 800d0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d0d6:	4654      	mov	r4, sl
 800d0d8:	2205      	movs	r2, #5
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	4854      	ldr	r0, [pc, #336]	; (800d230 <_vfiprintf_r+0x220>)
 800d0e0:	f000 fbd8 	bl	800d894 <memchr>
 800d0e4:	9a04      	ldr	r2, [sp, #16]
 800d0e6:	b9d8      	cbnz	r0, 800d120 <_vfiprintf_r+0x110>
 800d0e8:	06d1      	lsls	r1, r2, #27
 800d0ea:	bf44      	itt	mi
 800d0ec:	2320      	movmi	r3, #32
 800d0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f2:	0713      	lsls	r3, r2, #28
 800d0f4:	bf44      	itt	mi
 800d0f6:	232b      	movmi	r3, #43	; 0x2b
 800d0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d100:	2b2a      	cmp	r3, #42	; 0x2a
 800d102:	d015      	beq.n	800d130 <_vfiprintf_r+0x120>
 800d104:	4654      	mov	r4, sl
 800d106:	2000      	movs	r0, #0
 800d108:	f04f 0c0a 	mov.w	ip, #10
 800d10c:	9a07      	ldr	r2, [sp, #28]
 800d10e:	4621      	mov	r1, r4
 800d110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d114:	3b30      	subs	r3, #48	; 0x30
 800d116:	2b09      	cmp	r3, #9
 800d118:	d94d      	bls.n	800d1b6 <_vfiprintf_r+0x1a6>
 800d11a:	b1b0      	cbz	r0, 800d14a <_vfiprintf_r+0x13a>
 800d11c:	9207      	str	r2, [sp, #28]
 800d11e:	e014      	b.n	800d14a <_vfiprintf_r+0x13a>
 800d120:	eba0 0308 	sub.w	r3, r0, r8
 800d124:	fa09 f303 	lsl.w	r3, r9, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	46a2      	mov	sl, r4
 800d12c:	9304      	str	r3, [sp, #16]
 800d12e:	e7d2      	b.n	800d0d6 <_vfiprintf_r+0xc6>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	1d19      	adds	r1, r3, #4
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	9103      	str	r1, [sp, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bfbb      	ittet	lt
 800d13c:	425b      	neglt	r3, r3
 800d13e:	f042 0202 	orrlt.w	r2, r2, #2
 800d142:	9307      	strge	r3, [sp, #28]
 800d144:	9307      	strlt	r3, [sp, #28]
 800d146:	bfb8      	it	lt
 800d148:	9204      	strlt	r2, [sp, #16]
 800d14a:	7823      	ldrb	r3, [r4, #0]
 800d14c:	2b2e      	cmp	r3, #46	; 0x2e
 800d14e:	d10c      	bne.n	800d16a <_vfiprintf_r+0x15a>
 800d150:	7863      	ldrb	r3, [r4, #1]
 800d152:	2b2a      	cmp	r3, #42	; 0x2a
 800d154:	d134      	bne.n	800d1c0 <_vfiprintf_r+0x1b0>
 800d156:	9b03      	ldr	r3, [sp, #12]
 800d158:	3402      	adds	r4, #2
 800d15a:	1d1a      	adds	r2, r3, #4
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	9203      	str	r2, [sp, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	bfb8      	it	lt
 800d164:	f04f 33ff 	movlt.w	r3, #4294967295
 800d168:	9305      	str	r3, [sp, #20]
 800d16a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d234 <_vfiprintf_r+0x224>
 800d16e:	2203      	movs	r2, #3
 800d170:	4650      	mov	r0, sl
 800d172:	7821      	ldrb	r1, [r4, #0]
 800d174:	f000 fb8e 	bl	800d894 <memchr>
 800d178:	b138      	cbz	r0, 800d18a <_vfiprintf_r+0x17a>
 800d17a:	2240      	movs	r2, #64	; 0x40
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	eba0 000a 	sub.w	r0, r0, sl
 800d182:	4082      	lsls	r2, r0
 800d184:	4313      	orrs	r3, r2
 800d186:	3401      	adds	r4, #1
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18e:	2206      	movs	r2, #6
 800d190:	4829      	ldr	r0, [pc, #164]	; (800d238 <_vfiprintf_r+0x228>)
 800d192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d196:	f000 fb7d 	bl	800d894 <memchr>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d03f      	beq.n	800d21e <_vfiprintf_r+0x20e>
 800d19e:	4b27      	ldr	r3, [pc, #156]	; (800d23c <_vfiprintf_r+0x22c>)
 800d1a0:	bb1b      	cbnz	r3, 800d1ea <_vfiprintf_r+0x1da>
 800d1a2:	9b03      	ldr	r3, [sp, #12]
 800d1a4:	3307      	adds	r3, #7
 800d1a6:	f023 0307 	bic.w	r3, r3, #7
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	9303      	str	r3, [sp, #12]
 800d1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b0:	443b      	add	r3, r7
 800d1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b4:	e768      	b.n	800d088 <_vfiprintf_r+0x78>
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1be:	e7a6      	b.n	800d10e <_vfiprintf_r+0xfe>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f04f 0c0a 	mov.w	ip, #10
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	3401      	adds	r4, #1
 800d1ca:	9305      	str	r3, [sp, #20]
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1d2:	3a30      	subs	r2, #48	; 0x30
 800d1d4:	2a09      	cmp	r2, #9
 800d1d6:	d903      	bls.n	800d1e0 <_vfiprintf_r+0x1d0>
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d0c6      	beq.n	800d16a <_vfiprintf_r+0x15a>
 800d1dc:	9105      	str	r1, [sp, #20]
 800d1de:	e7c4      	b.n	800d16a <_vfiprintf_r+0x15a>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1e8:	e7f0      	b.n	800d1cc <_vfiprintf_r+0x1bc>
 800d1ea:	ab03      	add	r3, sp, #12
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	462a      	mov	r2, r5
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <_vfiprintf_r+0x230>)
 800d1f4:	a904      	add	r1, sp, #16
 800d1f6:	f3af 8000 	nop.w
 800d1fa:	4607      	mov	r7, r0
 800d1fc:	1c78      	adds	r0, r7, #1
 800d1fe:	d1d6      	bne.n	800d1ae <_vfiprintf_r+0x19e>
 800d200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d202:	07d9      	lsls	r1, r3, #31
 800d204:	d405      	bmi.n	800d212 <_vfiprintf_r+0x202>
 800d206:	89ab      	ldrh	r3, [r5, #12]
 800d208:	059a      	lsls	r2, r3, #22
 800d20a:	d402      	bmi.n	800d212 <_vfiprintf_r+0x202>
 800d20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d20e:	f7ff fdcd 	bl	800cdac <__retarget_lock_release_recursive>
 800d212:	89ab      	ldrh	r3, [r5, #12]
 800d214:	065b      	lsls	r3, r3, #25
 800d216:	f53f af1d 	bmi.w	800d054 <_vfiprintf_r+0x44>
 800d21a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d21c:	e71c      	b.n	800d058 <_vfiprintf_r+0x48>
 800d21e:	ab03      	add	r3, sp, #12
 800d220:	9300      	str	r3, [sp, #0]
 800d222:	462a      	mov	r2, r5
 800d224:	4630      	mov	r0, r6
 800d226:	4b06      	ldr	r3, [pc, #24]	; (800d240 <_vfiprintf_r+0x230>)
 800d228:	a904      	add	r1, sp, #16
 800d22a:	f000 f87d 	bl	800d328 <_printf_i>
 800d22e:	e7e4      	b.n	800d1fa <_vfiprintf_r+0x1ea>
 800d230:	0800dd36 	.word	0x0800dd36
 800d234:	0800dd3c 	.word	0x0800dd3c
 800d238:	0800dd40 	.word	0x0800dd40
 800d23c:	00000000 	.word	0x00000000
 800d240:	0800cfeb 	.word	0x0800cfeb

0800d244 <_printf_common>:
 800d244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d248:	4616      	mov	r6, r2
 800d24a:	4699      	mov	r9, r3
 800d24c:	688a      	ldr	r2, [r1, #8]
 800d24e:	690b      	ldr	r3, [r1, #16]
 800d250:	4607      	mov	r7, r0
 800d252:	4293      	cmp	r3, r2
 800d254:	bfb8      	it	lt
 800d256:	4613      	movlt	r3, r2
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d25e:	460c      	mov	r4, r1
 800d260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d264:	b10a      	cbz	r2, 800d26a <_printf_common+0x26>
 800d266:	3301      	adds	r3, #1
 800d268:	6033      	str	r3, [r6, #0]
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	0699      	lsls	r1, r3, #26
 800d26e:	bf42      	ittt	mi
 800d270:	6833      	ldrmi	r3, [r6, #0]
 800d272:	3302      	addmi	r3, #2
 800d274:	6033      	strmi	r3, [r6, #0]
 800d276:	6825      	ldr	r5, [r4, #0]
 800d278:	f015 0506 	ands.w	r5, r5, #6
 800d27c:	d106      	bne.n	800d28c <_printf_common+0x48>
 800d27e:	f104 0a19 	add.w	sl, r4, #25
 800d282:	68e3      	ldr	r3, [r4, #12]
 800d284:	6832      	ldr	r2, [r6, #0]
 800d286:	1a9b      	subs	r3, r3, r2
 800d288:	42ab      	cmp	r3, r5
 800d28a:	dc2b      	bgt.n	800d2e4 <_printf_common+0xa0>
 800d28c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d290:	1e13      	subs	r3, r2, #0
 800d292:	6822      	ldr	r2, [r4, #0]
 800d294:	bf18      	it	ne
 800d296:	2301      	movne	r3, #1
 800d298:	0692      	lsls	r2, r2, #26
 800d29a:	d430      	bmi.n	800d2fe <_printf_common+0xba>
 800d29c:	4649      	mov	r1, r9
 800d29e:	4638      	mov	r0, r7
 800d2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2a4:	47c0      	blx	r8
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d023      	beq.n	800d2f2 <_printf_common+0xae>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	6922      	ldr	r2, [r4, #16]
 800d2ae:	f003 0306 	and.w	r3, r3, #6
 800d2b2:	2b04      	cmp	r3, #4
 800d2b4:	bf14      	ite	ne
 800d2b6:	2500      	movne	r5, #0
 800d2b8:	6833      	ldreq	r3, [r6, #0]
 800d2ba:	f04f 0600 	mov.w	r6, #0
 800d2be:	bf08      	it	eq
 800d2c0:	68e5      	ldreq	r5, [r4, #12]
 800d2c2:	f104 041a 	add.w	r4, r4, #26
 800d2c6:	bf08      	it	eq
 800d2c8:	1aed      	subeq	r5, r5, r3
 800d2ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d2ce:	bf08      	it	eq
 800d2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	bfc4      	itt	gt
 800d2d8:	1a9b      	subgt	r3, r3, r2
 800d2da:	18ed      	addgt	r5, r5, r3
 800d2dc:	42b5      	cmp	r5, r6
 800d2de:	d11a      	bne.n	800d316 <_printf_common+0xd2>
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	e008      	b.n	800d2f6 <_printf_common+0xb2>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4652      	mov	r2, sl
 800d2e8:	4649      	mov	r1, r9
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	47c0      	blx	r8
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	d103      	bne.n	800d2fa <_printf_common+0xb6>
 800d2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fa:	3501      	adds	r5, #1
 800d2fc:	e7c1      	b.n	800d282 <_printf_common+0x3e>
 800d2fe:	2030      	movs	r0, #48	; 0x30
 800d300:	18e1      	adds	r1, r4, r3
 800d302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d306:	1c5a      	adds	r2, r3, #1
 800d308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d30c:	4422      	add	r2, r4
 800d30e:	3302      	adds	r3, #2
 800d310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d314:	e7c2      	b.n	800d29c <_printf_common+0x58>
 800d316:	2301      	movs	r3, #1
 800d318:	4622      	mov	r2, r4
 800d31a:	4649      	mov	r1, r9
 800d31c:	4638      	mov	r0, r7
 800d31e:	47c0      	blx	r8
 800d320:	3001      	adds	r0, #1
 800d322:	d0e6      	beq.n	800d2f2 <_printf_common+0xae>
 800d324:	3601      	adds	r6, #1
 800d326:	e7d9      	b.n	800d2dc <_printf_common+0x98>

0800d328 <_printf_i>:
 800d328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	7e0f      	ldrb	r7, [r1, #24]
 800d32e:	4691      	mov	r9, r2
 800d330:	2f78      	cmp	r7, #120	; 0x78
 800d332:	4680      	mov	r8, r0
 800d334:	460c      	mov	r4, r1
 800d336:	469a      	mov	sl, r3
 800d338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d33a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d33e:	d807      	bhi.n	800d350 <_printf_i+0x28>
 800d340:	2f62      	cmp	r7, #98	; 0x62
 800d342:	d80a      	bhi.n	800d35a <_printf_i+0x32>
 800d344:	2f00      	cmp	r7, #0
 800d346:	f000 80d5 	beq.w	800d4f4 <_printf_i+0x1cc>
 800d34a:	2f58      	cmp	r7, #88	; 0x58
 800d34c:	f000 80c1 	beq.w	800d4d2 <_printf_i+0x1aa>
 800d350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d358:	e03a      	b.n	800d3d0 <_printf_i+0xa8>
 800d35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d35e:	2b15      	cmp	r3, #21
 800d360:	d8f6      	bhi.n	800d350 <_printf_i+0x28>
 800d362:	a101      	add	r1, pc, #4	; (adr r1, 800d368 <_printf_i+0x40>)
 800d364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d368:	0800d3c1 	.word	0x0800d3c1
 800d36c:	0800d3d5 	.word	0x0800d3d5
 800d370:	0800d351 	.word	0x0800d351
 800d374:	0800d351 	.word	0x0800d351
 800d378:	0800d351 	.word	0x0800d351
 800d37c:	0800d351 	.word	0x0800d351
 800d380:	0800d3d5 	.word	0x0800d3d5
 800d384:	0800d351 	.word	0x0800d351
 800d388:	0800d351 	.word	0x0800d351
 800d38c:	0800d351 	.word	0x0800d351
 800d390:	0800d351 	.word	0x0800d351
 800d394:	0800d4db 	.word	0x0800d4db
 800d398:	0800d401 	.word	0x0800d401
 800d39c:	0800d495 	.word	0x0800d495
 800d3a0:	0800d351 	.word	0x0800d351
 800d3a4:	0800d351 	.word	0x0800d351
 800d3a8:	0800d4fd 	.word	0x0800d4fd
 800d3ac:	0800d351 	.word	0x0800d351
 800d3b0:	0800d401 	.word	0x0800d401
 800d3b4:	0800d351 	.word	0x0800d351
 800d3b8:	0800d351 	.word	0x0800d351
 800d3bc:	0800d49d 	.word	0x0800d49d
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	602a      	str	r2, [r5, #0]
 800d3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e0a0      	b.n	800d516 <_printf_i+0x1ee>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	0607      	lsls	r7, r0, #24
 800d3da:	f103 0104 	add.w	r1, r3, #4
 800d3de:	6029      	str	r1, [r5, #0]
 800d3e0:	d501      	bpl.n	800d3e6 <_printf_i+0xbe>
 800d3e2:	681e      	ldr	r6, [r3, #0]
 800d3e4:	e003      	b.n	800d3ee <_printf_i+0xc6>
 800d3e6:	0646      	lsls	r6, r0, #25
 800d3e8:	d5fb      	bpl.n	800d3e2 <_printf_i+0xba>
 800d3ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	da03      	bge.n	800d3fa <_printf_i+0xd2>
 800d3f2:	232d      	movs	r3, #45	; 0x2d
 800d3f4:	4276      	negs	r6, r6
 800d3f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3fa:	230a      	movs	r3, #10
 800d3fc:	4859      	ldr	r0, [pc, #356]	; (800d564 <_printf_i+0x23c>)
 800d3fe:	e012      	b.n	800d426 <_printf_i+0xfe>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	6820      	ldr	r0, [r4, #0]
 800d404:	1d19      	adds	r1, r3, #4
 800d406:	6029      	str	r1, [r5, #0]
 800d408:	0605      	lsls	r5, r0, #24
 800d40a:	d501      	bpl.n	800d410 <_printf_i+0xe8>
 800d40c:	681e      	ldr	r6, [r3, #0]
 800d40e:	e002      	b.n	800d416 <_printf_i+0xee>
 800d410:	0641      	lsls	r1, r0, #25
 800d412:	d5fb      	bpl.n	800d40c <_printf_i+0xe4>
 800d414:	881e      	ldrh	r6, [r3, #0]
 800d416:	2f6f      	cmp	r7, #111	; 0x6f
 800d418:	bf0c      	ite	eq
 800d41a:	2308      	moveq	r3, #8
 800d41c:	230a      	movne	r3, #10
 800d41e:	4851      	ldr	r0, [pc, #324]	; (800d564 <_printf_i+0x23c>)
 800d420:	2100      	movs	r1, #0
 800d422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d426:	6865      	ldr	r5, [r4, #4]
 800d428:	2d00      	cmp	r5, #0
 800d42a:	bfa8      	it	ge
 800d42c:	6821      	ldrge	r1, [r4, #0]
 800d42e:	60a5      	str	r5, [r4, #8]
 800d430:	bfa4      	itt	ge
 800d432:	f021 0104 	bicge.w	r1, r1, #4
 800d436:	6021      	strge	r1, [r4, #0]
 800d438:	b90e      	cbnz	r6, 800d43e <_printf_i+0x116>
 800d43a:	2d00      	cmp	r5, #0
 800d43c:	d04b      	beq.n	800d4d6 <_printf_i+0x1ae>
 800d43e:	4615      	mov	r5, r2
 800d440:	fbb6 f1f3 	udiv	r1, r6, r3
 800d444:	fb03 6711 	mls	r7, r3, r1, r6
 800d448:	5dc7      	ldrb	r7, [r0, r7]
 800d44a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d44e:	4637      	mov	r7, r6
 800d450:	42bb      	cmp	r3, r7
 800d452:	460e      	mov	r6, r1
 800d454:	d9f4      	bls.n	800d440 <_printf_i+0x118>
 800d456:	2b08      	cmp	r3, #8
 800d458:	d10b      	bne.n	800d472 <_printf_i+0x14a>
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	07de      	lsls	r6, r3, #31
 800d45e:	d508      	bpl.n	800d472 <_printf_i+0x14a>
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	6861      	ldr	r1, [r4, #4]
 800d464:	4299      	cmp	r1, r3
 800d466:	bfde      	ittt	le
 800d468:	2330      	movle	r3, #48	; 0x30
 800d46a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d46e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d472:	1b52      	subs	r2, r2, r5
 800d474:	6122      	str	r2, [r4, #16]
 800d476:	464b      	mov	r3, r9
 800d478:	4621      	mov	r1, r4
 800d47a:	4640      	mov	r0, r8
 800d47c:	f8cd a000 	str.w	sl, [sp]
 800d480:	aa03      	add	r2, sp, #12
 800d482:	f7ff fedf 	bl	800d244 <_printf_common>
 800d486:	3001      	adds	r0, #1
 800d488:	d14a      	bne.n	800d520 <_printf_i+0x1f8>
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	b004      	add	sp, #16
 800d490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	f043 0320 	orr.w	r3, r3, #32
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	2778      	movs	r7, #120	; 0x78
 800d49e:	4832      	ldr	r0, [pc, #200]	; (800d568 <_printf_i+0x240>)
 800d4a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	6829      	ldr	r1, [r5, #0]
 800d4a8:	061f      	lsls	r7, r3, #24
 800d4aa:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4ae:	d402      	bmi.n	800d4b6 <_printf_i+0x18e>
 800d4b0:	065f      	lsls	r7, r3, #25
 800d4b2:	bf48      	it	mi
 800d4b4:	b2b6      	uxthmi	r6, r6
 800d4b6:	07df      	lsls	r7, r3, #31
 800d4b8:	bf48      	it	mi
 800d4ba:	f043 0320 	orrmi.w	r3, r3, #32
 800d4be:	6029      	str	r1, [r5, #0]
 800d4c0:	bf48      	it	mi
 800d4c2:	6023      	strmi	r3, [r4, #0]
 800d4c4:	b91e      	cbnz	r6, 800d4ce <_printf_i+0x1a6>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	f023 0320 	bic.w	r3, r3, #32
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	2310      	movs	r3, #16
 800d4d0:	e7a6      	b.n	800d420 <_printf_i+0xf8>
 800d4d2:	4824      	ldr	r0, [pc, #144]	; (800d564 <_printf_i+0x23c>)
 800d4d4:	e7e4      	b.n	800d4a0 <_printf_i+0x178>
 800d4d6:	4615      	mov	r5, r2
 800d4d8:	e7bd      	b.n	800d456 <_printf_i+0x12e>
 800d4da:	682b      	ldr	r3, [r5, #0]
 800d4dc:	6826      	ldr	r6, [r4, #0]
 800d4de:	1d18      	adds	r0, r3, #4
 800d4e0:	6961      	ldr	r1, [r4, #20]
 800d4e2:	6028      	str	r0, [r5, #0]
 800d4e4:	0635      	lsls	r5, r6, #24
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	d501      	bpl.n	800d4ee <_printf_i+0x1c6>
 800d4ea:	6019      	str	r1, [r3, #0]
 800d4ec:	e002      	b.n	800d4f4 <_printf_i+0x1cc>
 800d4ee:	0670      	lsls	r0, r6, #25
 800d4f0:	d5fb      	bpl.n	800d4ea <_printf_i+0x1c2>
 800d4f2:	8019      	strh	r1, [r3, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4615      	mov	r5, r2
 800d4f8:	6123      	str	r3, [r4, #16]
 800d4fa:	e7bc      	b.n	800d476 <_printf_i+0x14e>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	2100      	movs	r1, #0
 800d500:	1d1a      	adds	r2, r3, #4
 800d502:	602a      	str	r2, [r5, #0]
 800d504:	681d      	ldr	r5, [r3, #0]
 800d506:	6862      	ldr	r2, [r4, #4]
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 f9c3 	bl	800d894 <memchr>
 800d50e:	b108      	cbz	r0, 800d514 <_printf_i+0x1ec>
 800d510:	1b40      	subs	r0, r0, r5
 800d512:	6060      	str	r0, [r4, #4]
 800d514:	6863      	ldr	r3, [r4, #4]
 800d516:	6123      	str	r3, [r4, #16]
 800d518:	2300      	movs	r3, #0
 800d51a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d51e:	e7aa      	b.n	800d476 <_printf_i+0x14e>
 800d520:	462a      	mov	r2, r5
 800d522:	4649      	mov	r1, r9
 800d524:	4640      	mov	r0, r8
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	47d0      	blx	sl
 800d52a:	3001      	adds	r0, #1
 800d52c:	d0ad      	beq.n	800d48a <_printf_i+0x162>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	079b      	lsls	r3, r3, #30
 800d532:	d413      	bmi.n	800d55c <_printf_i+0x234>
 800d534:	68e0      	ldr	r0, [r4, #12]
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	4298      	cmp	r0, r3
 800d53a:	bfb8      	it	lt
 800d53c:	4618      	movlt	r0, r3
 800d53e:	e7a6      	b.n	800d48e <_printf_i+0x166>
 800d540:	2301      	movs	r3, #1
 800d542:	4632      	mov	r2, r6
 800d544:	4649      	mov	r1, r9
 800d546:	4640      	mov	r0, r8
 800d548:	47d0      	blx	sl
 800d54a:	3001      	adds	r0, #1
 800d54c:	d09d      	beq.n	800d48a <_printf_i+0x162>
 800d54e:	3501      	adds	r5, #1
 800d550:	68e3      	ldr	r3, [r4, #12]
 800d552:	9903      	ldr	r1, [sp, #12]
 800d554:	1a5b      	subs	r3, r3, r1
 800d556:	42ab      	cmp	r3, r5
 800d558:	dcf2      	bgt.n	800d540 <_printf_i+0x218>
 800d55a:	e7eb      	b.n	800d534 <_printf_i+0x20c>
 800d55c:	2500      	movs	r5, #0
 800d55e:	f104 0619 	add.w	r6, r4, #25
 800d562:	e7f5      	b.n	800d550 <_printf_i+0x228>
 800d564:	0800dd47 	.word	0x0800dd47
 800d568:	0800dd58 	.word	0x0800dd58

0800d56c <__sflush_r>:
 800d56c:	898a      	ldrh	r2, [r1, #12]
 800d56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d570:	4605      	mov	r5, r0
 800d572:	0710      	lsls	r0, r2, #28
 800d574:	460c      	mov	r4, r1
 800d576:	d457      	bmi.n	800d628 <__sflush_r+0xbc>
 800d578:	684b      	ldr	r3, [r1, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	dc04      	bgt.n	800d588 <__sflush_r+0x1c>
 800d57e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc01      	bgt.n	800d588 <__sflush_r+0x1c>
 800d584:	2000      	movs	r0, #0
 800d586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	d0fa      	beq.n	800d584 <__sflush_r+0x18>
 800d58e:	2300      	movs	r3, #0
 800d590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d594:	682f      	ldr	r7, [r5, #0]
 800d596:	6a21      	ldr	r1, [r4, #32]
 800d598:	602b      	str	r3, [r5, #0]
 800d59a:	d032      	beq.n	800d602 <__sflush_r+0x96>
 800d59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	075a      	lsls	r2, r3, #29
 800d5a2:	d505      	bpl.n	800d5b0 <__sflush_r+0x44>
 800d5a4:	6863      	ldr	r3, [r4, #4]
 800d5a6:	1ac0      	subs	r0, r0, r3
 800d5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5aa:	b10b      	cbz	r3, 800d5b0 <__sflush_r+0x44>
 800d5ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5ae:	1ac0      	subs	r0, r0, r3
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	6a21      	ldr	r1, [r4, #32]
 800d5ba:	47b0      	blx	r6
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	d106      	bne.n	800d5d0 <__sflush_r+0x64>
 800d5c2:	6829      	ldr	r1, [r5, #0]
 800d5c4:	291d      	cmp	r1, #29
 800d5c6:	d82b      	bhi.n	800d620 <__sflush_r+0xb4>
 800d5c8:	4a28      	ldr	r2, [pc, #160]	; (800d66c <__sflush_r+0x100>)
 800d5ca:	410a      	asrs	r2, r1
 800d5cc:	07d6      	lsls	r6, r2, #31
 800d5ce:	d427      	bmi.n	800d620 <__sflush_r+0xb4>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	6062      	str	r2, [r4, #4]
 800d5d4:	6922      	ldr	r2, [r4, #16]
 800d5d6:	04d9      	lsls	r1, r3, #19
 800d5d8:	6022      	str	r2, [r4, #0]
 800d5da:	d504      	bpl.n	800d5e6 <__sflush_r+0x7a>
 800d5dc:	1c42      	adds	r2, r0, #1
 800d5de:	d101      	bne.n	800d5e4 <__sflush_r+0x78>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b903      	cbnz	r3, 800d5e6 <__sflush_r+0x7a>
 800d5e4:	6560      	str	r0, [r4, #84]	; 0x54
 800d5e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e8:	602f      	str	r7, [r5, #0]
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	d0ca      	beq.n	800d584 <__sflush_r+0x18>
 800d5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d002      	beq.n	800d5fc <__sflush_r+0x90>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f7ff fbee 	bl	800cdd8 <_free_r>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	6360      	str	r0, [r4, #52]	; 0x34
 800d600:	e7c1      	b.n	800d586 <__sflush_r+0x1a>
 800d602:	2301      	movs	r3, #1
 800d604:	4628      	mov	r0, r5
 800d606:	47b0      	blx	r6
 800d608:	1c41      	adds	r1, r0, #1
 800d60a:	d1c8      	bne.n	800d59e <__sflush_r+0x32>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d0c5      	beq.n	800d59e <__sflush_r+0x32>
 800d612:	2b1d      	cmp	r3, #29
 800d614:	d001      	beq.n	800d61a <__sflush_r+0xae>
 800d616:	2b16      	cmp	r3, #22
 800d618:	d101      	bne.n	800d61e <__sflush_r+0xb2>
 800d61a:	602f      	str	r7, [r5, #0]
 800d61c:	e7b2      	b.n	800d584 <__sflush_r+0x18>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d624:	81a3      	strh	r3, [r4, #12]
 800d626:	e7ae      	b.n	800d586 <__sflush_r+0x1a>
 800d628:	690f      	ldr	r7, [r1, #16]
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	d0aa      	beq.n	800d584 <__sflush_r+0x18>
 800d62e:	0793      	lsls	r3, r2, #30
 800d630:	bf18      	it	ne
 800d632:	2300      	movne	r3, #0
 800d634:	680e      	ldr	r6, [r1, #0]
 800d636:	bf08      	it	eq
 800d638:	694b      	ldreq	r3, [r1, #20]
 800d63a:	1bf6      	subs	r6, r6, r7
 800d63c:	600f      	str	r7, [r1, #0]
 800d63e:	608b      	str	r3, [r1, #8]
 800d640:	2e00      	cmp	r6, #0
 800d642:	dd9f      	ble.n	800d584 <__sflush_r+0x18>
 800d644:	4633      	mov	r3, r6
 800d646:	463a      	mov	r2, r7
 800d648:	4628      	mov	r0, r5
 800d64a:	6a21      	ldr	r1, [r4, #32]
 800d64c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d650:	47e0      	blx	ip
 800d652:	2800      	cmp	r0, #0
 800d654:	dc06      	bgt.n	800d664 <__sflush_r+0xf8>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	e790      	b.n	800d586 <__sflush_r+0x1a>
 800d664:	4407      	add	r7, r0
 800d666:	1a36      	subs	r6, r6, r0
 800d668:	e7ea      	b.n	800d640 <__sflush_r+0xd4>
 800d66a:	bf00      	nop
 800d66c:	dfbffffe 	.word	0xdfbffffe

0800d670 <_fflush_r>:
 800d670:	b538      	push	{r3, r4, r5, lr}
 800d672:	690b      	ldr	r3, [r1, #16]
 800d674:	4605      	mov	r5, r0
 800d676:	460c      	mov	r4, r1
 800d678:	b913      	cbnz	r3, 800d680 <_fflush_r+0x10>
 800d67a:	2500      	movs	r5, #0
 800d67c:	4628      	mov	r0, r5
 800d67e:	bd38      	pop	{r3, r4, r5, pc}
 800d680:	b118      	cbz	r0, 800d68a <_fflush_r+0x1a>
 800d682:	6a03      	ldr	r3, [r0, #32]
 800d684:	b90b      	cbnz	r3, 800d68a <_fflush_r+0x1a>
 800d686:	f7ff fa7b 	bl	800cb80 <__sinit>
 800d68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0f3      	beq.n	800d67a <_fflush_r+0xa>
 800d692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d694:	07d0      	lsls	r0, r2, #31
 800d696:	d404      	bmi.n	800d6a2 <_fflush_r+0x32>
 800d698:	0599      	lsls	r1, r3, #22
 800d69a:	d402      	bmi.n	800d6a2 <_fflush_r+0x32>
 800d69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d69e:	f7ff fb84 	bl	800cdaa <__retarget_lock_acquire_recursive>
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	f7ff ff61 	bl	800d56c <__sflush_r>
 800d6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	07da      	lsls	r2, r3, #31
 800d6b0:	d4e4      	bmi.n	800d67c <_fflush_r+0xc>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	059b      	lsls	r3, r3, #22
 800d6b6:	d4e1      	bmi.n	800d67c <_fflush_r+0xc>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ba:	f7ff fb77 	bl	800cdac <__retarget_lock_release_recursive>
 800d6be:	e7dd      	b.n	800d67c <_fflush_r+0xc>

0800d6c0 <__swbuf_r>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	b118      	cbz	r0, 800d6d2 <__swbuf_r+0x12>
 800d6ca:	6a03      	ldr	r3, [r0, #32]
 800d6cc:	b90b      	cbnz	r3, 800d6d2 <__swbuf_r+0x12>
 800d6ce:	f7ff fa57 	bl	800cb80 <__sinit>
 800d6d2:	69a3      	ldr	r3, [r4, #24]
 800d6d4:	60a3      	str	r3, [r4, #8]
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	071a      	lsls	r2, r3, #28
 800d6da:	d525      	bpl.n	800d728 <__swbuf_r+0x68>
 800d6dc:	6923      	ldr	r3, [r4, #16]
 800d6de:	b31b      	cbz	r3, 800d728 <__swbuf_r+0x68>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	6922      	ldr	r2, [r4, #16]
 800d6e4:	b2f6      	uxtb	r6, r6
 800d6e6:	1a98      	subs	r0, r3, r2
 800d6e8:	6963      	ldr	r3, [r4, #20]
 800d6ea:	4637      	mov	r7, r6
 800d6ec:	4283      	cmp	r3, r0
 800d6ee:	dc04      	bgt.n	800d6fa <__swbuf_r+0x3a>
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f7ff ffbc 	bl	800d670 <_fflush_r>
 800d6f8:	b9e0      	cbnz	r0, 800d734 <__swbuf_r+0x74>
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	60a3      	str	r3, [r4, #8]
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	6022      	str	r2, [r4, #0]
 800d706:	701e      	strb	r6, [r3, #0]
 800d708:	6962      	ldr	r2, [r4, #20]
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d004      	beq.n	800d71a <__swbuf_r+0x5a>
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	07db      	lsls	r3, r3, #31
 800d714:	d506      	bpl.n	800d724 <__swbuf_r+0x64>
 800d716:	2e0a      	cmp	r6, #10
 800d718:	d104      	bne.n	800d724 <__swbuf_r+0x64>
 800d71a:	4621      	mov	r1, r4
 800d71c:	4628      	mov	r0, r5
 800d71e:	f7ff ffa7 	bl	800d670 <_fflush_r>
 800d722:	b938      	cbnz	r0, 800d734 <__swbuf_r+0x74>
 800d724:	4638      	mov	r0, r7
 800d726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d728:	4621      	mov	r1, r4
 800d72a:	4628      	mov	r0, r5
 800d72c:	f000 f806 	bl	800d73c <__swsetup_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	d0d5      	beq.n	800d6e0 <__swbuf_r+0x20>
 800d734:	f04f 37ff 	mov.w	r7, #4294967295
 800d738:	e7f4      	b.n	800d724 <__swbuf_r+0x64>
	...

0800d73c <__swsetup_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4b2a      	ldr	r3, [pc, #168]	; (800d7e8 <__swsetup_r+0xac>)
 800d740:	4605      	mov	r5, r0
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	460c      	mov	r4, r1
 800d746:	b118      	cbz	r0, 800d750 <__swsetup_r+0x14>
 800d748:	6a03      	ldr	r3, [r0, #32]
 800d74a:	b90b      	cbnz	r3, 800d750 <__swsetup_r+0x14>
 800d74c:	f7ff fa18 	bl	800cb80 <__sinit>
 800d750:	89a3      	ldrh	r3, [r4, #12]
 800d752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d756:	0718      	lsls	r0, r3, #28
 800d758:	d422      	bmi.n	800d7a0 <__swsetup_r+0x64>
 800d75a:	06d9      	lsls	r1, r3, #27
 800d75c:	d407      	bmi.n	800d76e <__swsetup_r+0x32>
 800d75e:	2309      	movs	r3, #9
 800d760:	602b      	str	r3, [r5, #0]
 800d762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d766:	f04f 30ff 	mov.w	r0, #4294967295
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	e034      	b.n	800d7d8 <__swsetup_r+0x9c>
 800d76e:	0758      	lsls	r0, r3, #29
 800d770:	d512      	bpl.n	800d798 <__swsetup_r+0x5c>
 800d772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d774:	b141      	cbz	r1, 800d788 <__swsetup_r+0x4c>
 800d776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d77a:	4299      	cmp	r1, r3
 800d77c:	d002      	beq.n	800d784 <__swsetup_r+0x48>
 800d77e:	4628      	mov	r0, r5
 800d780:	f7ff fb2a 	bl	800cdd8 <_free_r>
 800d784:	2300      	movs	r3, #0
 800d786:	6363      	str	r3, [r4, #52]	; 0x34
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d78e:	81a3      	strh	r3, [r4, #12]
 800d790:	2300      	movs	r3, #0
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	6023      	str	r3, [r4, #0]
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f043 0308 	orr.w	r3, r3, #8
 800d79e:	81a3      	strh	r3, [r4, #12]
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	b94b      	cbnz	r3, 800d7b8 <__swsetup_r+0x7c>
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7ae:	d003      	beq.n	800d7b8 <__swsetup_r+0x7c>
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f000 f8a1 	bl	800d8fa <__smakebuf_r>
 800d7b8:	89a0      	ldrh	r0, [r4, #12]
 800d7ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7be:	f010 0301 	ands.w	r3, r0, #1
 800d7c2:	d00a      	beq.n	800d7da <__swsetup_r+0x9e>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	6963      	ldr	r3, [r4, #20]
 800d7ca:	425b      	negs	r3, r3
 800d7cc:	61a3      	str	r3, [r4, #24]
 800d7ce:	6923      	ldr	r3, [r4, #16]
 800d7d0:	b943      	cbnz	r3, 800d7e4 <__swsetup_r+0xa8>
 800d7d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7d6:	d1c4      	bne.n	800d762 <__swsetup_r+0x26>
 800d7d8:	bd38      	pop	{r3, r4, r5, pc}
 800d7da:	0781      	lsls	r1, r0, #30
 800d7dc:	bf58      	it	pl
 800d7de:	6963      	ldrpl	r3, [r4, #20]
 800d7e0:	60a3      	str	r3, [r4, #8]
 800d7e2:	e7f4      	b.n	800d7ce <__swsetup_r+0x92>
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	e7f7      	b.n	800d7d8 <__swsetup_r+0x9c>
 800d7e8:	20000168 	.word	0x20000168

0800d7ec <_raise_r>:
 800d7ec:	291f      	cmp	r1, #31
 800d7ee:	b538      	push	{r3, r4, r5, lr}
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	460d      	mov	r5, r1
 800d7f4:	d904      	bls.n	800d800 <_raise_r+0x14>
 800d7f6:	2316      	movs	r3, #22
 800d7f8:	6003      	str	r3, [r0, #0]
 800d7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d802:	b112      	cbz	r2, 800d80a <_raise_r+0x1e>
 800d804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d808:	b94b      	cbnz	r3, 800d81e <_raise_r+0x32>
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 f830 	bl	800d870 <_getpid_r>
 800d810:	462a      	mov	r2, r5
 800d812:	4601      	mov	r1, r0
 800d814:	4620      	mov	r0, r4
 800d816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d81a:	f000 b817 	b.w	800d84c <_kill_r>
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d00a      	beq.n	800d838 <_raise_r+0x4c>
 800d822:	1c59      	adds	r1, r3, #1
 800d824:	d103      	bne.n	800d82e <_raise_r+0x42>
 800d826:	2316      	movs	r3, #22
 800d828:	6003      	str	r3, [r0, #0]
 800d82a:	2001      	movs	r0, #1
 800d82c:	e7e7      	b.n	800d7fe <_raise_r+0x12>
 800d82e:	2400      	movs	r4, #0
 800d830:	4628      	mov	r0, r5
 800d832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d836:	4798      	blx	r3
 800d838:	2000      	movs	r0, #0
 800d83a:	e7e0      	b.n	800d7fe <_raise_r+0x12>

0800d83c <raise>:
 800d83c:	4b02      	ldr	r3, [pc, #8]	; (800d848 <raise+0xc>)
 800d83e:	4601      	mov	r1, r0
 800d840:	6818      	ldr	r0, [r3, #0]
 800d842:	f7ff bfd3 	b.w	800d7ec <_raise_r>
 800d846:	bf00      	nop
 800d848:	20000168 	.word	0x20000168

0800d84c <_kill_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	2300      	movs	r3, #0
 800d850:	4d06      	ldr	r5, [pc, #24]	; (800d86c <_kill_r+0x20>)
 800d852:	4604      	mov	r4, r0
 800d854:	4608      	mov	r0, r1
 800d856:	4611      	mov	r1, r2
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	f7f7 fa78 	bl	8004d4e <_kill>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	d102      	bne.n	800d868 <_kill_r+0x1c>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	b103      	cbz	r3, 800d868 <_kill_r+0x1c>
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	bd38      	pop	{r3, r4, r5, pc}
 800d86a:	bf00      	nop
 800d86c:	200006dc 	.word	0x200006dc

0800d870 <_getpid_r>:
 800d870:	f7f7 ba66 	b.w	8004d40 <_getpid>

0800d874 <_sbrk_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	2300      	movs	r3, #0
 800d878:	4d05      	ldr	r5, [pc, #20]	; (800d890 <_sbrk_r+0x1c>)
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	602b      	str	r3, [r5, #0]
 800d880:	f7f7 fae8 	bl	8004e54 <_sbrk>
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	d102      	bne.n	800d88e <_sbrk_r+0x1a>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	b103      	cbz	r3, 800d88e <_sbrk_r+0x1a>
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	bd38      	pop	{r3, r4, r5, pc}
 800d890:	200006dc 	.word	0x200006dc

0800d894 <memchr>:
 800d894:	4603      	mov	r3, r0
 800d896:	b510      	push	{r4, lr}
 800d898:	b2c9      	uxtb	r1, r1
 800d89a:	4402      	add	r2, r0
 800d89c:	4293      	cmp	r3, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	d101      	bne.n	800d8a6 <memchr+0x12>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e003      	b.n	800d8ae <memchr+0x1a>
 800d8a6:	7804      	ldrb	r4, [r0, #0]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	428c      	cmp	r4, r1
 800d8ac:	d1f6      	bne.n	800d89c <memchr+0x8>
 800d8ae:	bd10      	pop	{r4, pc}

0800d8b0 <__swhatbuf_r>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b8:	4615      	mov	r5, r2
 800d8ba:	2900      	cmp	r1, #0
 800d8bc:	461e      	mov	r6, r3
 800d8be:	b096      	sub	sp, #88	; 0x58
 800d8c0:	da0c      	bge.n	800d8dc <__swhatbuf_r+0x2c>
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d8ca:	bf0c      	ite	eq
 800d8cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d8d0:	2340      	movne	r3, #64	; 0x40
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	6031      	str	r1, [r6, #0]
 800d8d6:	602b      	str	r3, [r5, #0]
 800d8d8:	b016      	add	sp, #88	; 0x58
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	466a      	mov	r2, sp
 800d8de:	f000 f849 	bl	800d974 <_fstat_r>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	dbed      	blt.n	800d8c2 <__swhatbuf_r+0x12>
 800d8e6:	9901      	ldr	r1, [sp, #4]
 800d8e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d8ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d8f0:	4259      	negs	r1, r3
 800d8f2:	4159      	adcs	r1, r3
 800d8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8f8:	e7eb      	b.n	800d8d2 <__swhatbuf_r+0x22>

0800d8fa <__smakebuf_r>:
 800d8fa:	898b      	ldrh	r3, [r1, #12]
 800d8fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8fe:	079d      	lsls	r5, r3, #30
 800d900:	4606      	mov	r6, r0
 800d902:	460c      	mov	r4, r1
 800d904:	d507      	bpl.n	800d916 <__smakebuf_r+0x1c>
 800d906:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d90a:	6023      	str	r3, [r4, #0]
 800d90c:	6123      	str	r3, [r4, #16]
 800d90e:	2301      	movs	r3, #1
 800d910:	6163      	str	r3, [r4, #20]
 800d912:	b002      	add	sp, #8
 800d914:	bd70      	pop	{r4, r5, r6, pc}
 800d916:	466a      	mov	r2, sp
 800d918:	ab01      	add	r3, sp, #4
 800d91a:	f7ff ffc9 	bl	800d8b0 <__swhatbuf_r>
 800d91e:	9900      	ldr	r1, [sp, #0]
 800d920:	4605      	mov	r5, r0
 800d922:	4630      	mov	r0, r6
 800d924:	f7ff fac0 	bl	800cea8 <_malloc_r>
 800d928:	b948      	cbnz	r0, 800d93e <__smakebuf_r+0x44>
 800d92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d92e:	059a      	lsls	r2, r3, #22
 800d930:	d4ef      	bmi.n	800d912 <__smakebuf_r+0x18>
 800d932:	f023 0303 	bic.w	r3, r3, #3
 800d936:	f043 0302 	orr.w	r3, r3, #2
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	e7e3      	b.n	800d906 <__smakebuf_r+0xc>
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	6020      	str	r0, [r4, #0]
 800d942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d946:	81a3      	strh	r3, [r4, #12]
 800d948:	9b00      	ldr	r3, [sp, #0]
 800d94a:	6120      	str	r0, [r4, #16]
 800d94c:	6163      	str	r3, [r4, #20]
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	b15b      	cbz	r3, 800d96a <__smakebuf_r+0x70>
 800d952:	4630      	mov	r0, r6
 800d954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d958:	f000 f81e 	bl	800d998 <_isatty_r>
 800d95c:	b128      	cbz	r0, 800d96a <__smakebuf_r+0x70>
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	f023 0303 	bic.w	r3, r3, #3
 800d964:	f043 0301 	orr.w	r3, r3, #1
 800d968:	81a3      	strh	r3, [r4, #12]
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	431d      	orrs	r5, r3
 800d96e:	81a5      	strh	r5, [r4, #12]
 800d970:	e7cf      	b.n	800d912 <__smakebuf_r+0x18>
	...

0800d974 <_fstat_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	2300      	movs	r3, #0
 800d978:	4d06      	ldr	r5, [pc, #24]	; (800d994 <_fstat_r+0x20>)
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	4611      	mov	r1, r2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f7f7 fa42 	bl	8004e0a <_fstat>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	d102      	bne.n	800d990 <_fstat_r+0x1c>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	b103      	cbz	r3, 800d990 <_fstat_r+0x1c>
 800d98e:	6023      	str	r3, [r4, #0]
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	bf00      	nop
 800d994:	200006dc 	.word	0x200006dc

0800d998 <_isatty_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	2300      	movs	r3, #0
 800d99c:	4d05      	ldr	r5, [pc, #20]	; (800d9b4 <_isatty_r+0x1c>)
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f7 fa40 	bl	8004e28 <_isatty>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_isatty_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_isatty_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	200006dc 	.word	0x200006dc

0800d9b8 <_init>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	bf00      	nop
 800d9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9be:	bc08      	pop	{r3}
 800d9c0:	469e      	mov	lr, r3
 800d9c2:	4770      	bx	lr

0800d9c4 <_fini>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	bf00      	nop
 800d9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ca:	bc08      	pop	{r3}
 800d9cc:	469e      	mov	lr, r3
 800d9ce:	4770      	bx	lr
