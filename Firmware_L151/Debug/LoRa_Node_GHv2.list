
LoRa_Node_GHv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc74  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800ddb4  0800ddb4  0000edb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e124  0800e124  0001016c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e124  0800e124  0000f124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e12c  0800e12c  0001016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e12c  0800e12c  0000f12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e130  0800e130  0000f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800e134  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  2000016c  0800e2a0  0001016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800e2a0  00010718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bd3  00000000  00000000  00010195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004034  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134f  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189e3  00000000  00000000  000309d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6a7  00000000  00000000  000493ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fc7  00000000  00000000  00067a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8a28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007580  00000000  00000000  000f8a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000fffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dd9c 	.word	0x0800dd9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	0800dd9c 	.word	0x0800dd9c

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	@ 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__gedf2>:
 800074c:	f04f 3cff 	mov.w	ip, #4294967295
 8000750:	e006      	b.n	8000760 <__cmpdf2+0x4>
 8000752:	bf00      	nop

08000754 <__ledf2>:
 8000754:	f04f 0c01 	mov.w	ip, #1
 8000758:	e002      	b.n	8000760 <__cmpdf2+0x4>
 800075a:	bf00      	nop

0800075c <__cmpdf2>:
 800075c:	f04f 0c01 	mov.w	ip, #1
 8000760:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000776:	d01b      	beq.n	80007b0 <__cmpdf2+0x54>
 8000778:	b001      	add	sp, #4
 800077a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800077e:	bf0c      	ite	eq
 8000780:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000784:	ea91 0f03 	teqne	r1, r3
 8000788:	bf02      	ittt	eq
 800078a:	ea90 0f02 	teqeq	r0, r2
 800078e:	2000      	moveq	r0, #0
 8000790:	4770      	bxeq	lr
 8000792:	f110 0f00 	cmn.w	r0, #0
 8000796:	ea91 0f03 	teq	r1, r3
 800079a:	bf58      	it	pl
 800079c:	4299      	cmppl	r1, r3
 800079e:	bf08      	it	eq
 80007a0:	4290      	cmpeq	r0, r2
 80007a2:	bf2c      	ite	cs
 80007a4:	17d8      	asrcs	r0, r3, #31
 80007a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007aa:	f040 0001 	orr.w	r0, r0, #1
 80007ae:	4770      	bx	lr
 80007b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b8:	d102      	bne.n	80007c0 <__cmpdf2+0x64>
 80007ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007be:	d107      	bne.n	80007d0 <__cmpdf2+0x74>
 80007c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c8:	d1d6      	bne.n	8000778 <__cmpdf2+0x1c>
 80007ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ce:	d0d3      	beq.n	8000778 <__cmpdf2+0x1c>
 80007d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_cdrcmple>:
 80007d8:	4684      	mov	ip, r0
 80007da:	4610      	mov	r0, r2
 80007dc:	4662      	mov	r2, ip
 80007de:	468c      	mov	ip, r1
 80007e0:	4619      	mov	r1, r3
 80007e2:	4663      	mov	r3, ip
 80007e4:	e000      	b.n	80007e8 <__aeabi_cdcmpeq>
 80007e6:	bf00      	nop

080007e8 <__aeabi_cdcmpeq>:
 80007e8:	b501      	push	{r0, lr}
 80007ea:	f7ff ffb7 	bl	800075c <__cmpdf2>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	bf48      	it	mi
 80007f2:	f110 0f00 	cmnmi.w	r0, #0
 80007f6:	bd01      	pop	{r0, pc}

080007f8 <__aeabi_dcmpeq>:
 80007f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007fc:	f7ff fff4 	bl	80007e8 <__aeabi_cdcmpeq>
 8000800:	bf0c      	ite	eq
 8000802:	2001      	moveq	r0, #1
 8000804:	2000      	movne	r0, #0
 8000806:	f85d fb08 	ldr.w	pc, [sp], #8
 800080a:	bf00      	nop

0800080c <__aeabi_dcmplt>:
 800080c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000810:	f7ff ffea 	bl	80007e8 <__aeabi_cdcmpeq>
 8000814:	bf34      	ite	cc
 8000816:	2001      	movcc	r0, #1
 8000818:	2000      	movcs	r0, #0
 800081a:	f85d fb08 	ldr.w	pc, [sp], #8
 800081e:	bf00      	nop

08000820 <__aeabi_dcmple>:
 8000820:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000824:	f7ff ffe0 	bl	80007e8 <__aeabi_cdcmpeq>
 8000828:	bf94      	ite	ls
 800082a:	2001      	movls	r0, #1
 800082c:	2000      	movhi	r0, #0
 800082e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000832:	bf00      	nop

08000834 <__aeabi_dcmpge>:
 8000834:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000838:	f7ff ffce 	bl	80007d8 <__aeabi_cdrcmple>
 800083c:	bf94      	ite	ls
 800083e:	2001      	movls	r0, #1
 8000840:	2000      	movhi	r0, #0
 8000842:	f85d fb08 	ldr.w	pc, [sp], #8
 8000846:	bf00      	nop

08000848 <__aeabi_dcmpgt>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff ffc4 	bl	80007d8 <__aeabi_cdrcmple>
 8000850:	bf34      	ite	cc
 8000852:	2001      	movcc	r0, #1
 8000854:	2000      	movcs	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	@ 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000baa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	@ 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	@ 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_ldivmod>:
 8000f24:	b97b      	cbnz	r3, 8000f46 <__aeabi_ldivmod+0x22>
 8000f26:	b972      	cbnz	r2, 8000f46 <__aeabi_ldivmod+0x22>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	bfbe      	ittt	lt
 8000f2c:	2000      	movlt	r0, #0
 8000f2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f32:	e006      	blt.n	8000f42 <__aeabi_ldivmod+0x1e>
 8000f34:	bf08      	it	eq
 8000f36:	2800      	cmpeq	r0, #0
 8000f38:	bf1c      	itt	ne
 8000f3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f42:	f000 b9d7 	b.w	80012f4 <__aeabi_idiv0>
 8000f46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	db09      	blt.n	8000f66 <__aeabi_ldivmod+0x42>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db1a      	blt.n	8000f8c <__aeabi_ldivmod+0x68>
 8000f56:	f000 f84d 	bl	8000ff4 <__udivmoddi4>
 8000f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f62:	b004      	add	sp, #16
 8000f64:	4770      	bx	lr
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db1b      	blt.n	8000fa8 <__aeabi_ldivmod+0x84>
 8000f70:	f000 f840 	bl	8000ff4 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4240      	negs	r0, r0
 8000f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f84:	4252      	negs	r2, r2
 8000f86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8a:	4770      	bx	lr
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	f000 f82f 	bl	8000ff4 <__udivmoddi4>
 8000f96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa6:	4770      	bx	lr
 8000fa8:	4252      	negs	r2, r2
 8000faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fae:	f000 f821 	bl	8000ff4 <__udivmoddi4>
 8000fb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fba:	b004      	add	sp, #16
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b98c 	b.w	80012f4 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	468e      	mov	lr, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14a      	bne.n	800109a <__udivmoddi4+0xa6>
 8001004:	428a      	cmp	r2, r1
 8001006:	4617      	mov	r7, r2
 8001008:	d962      	bls.n	80010d0 <__udivmoddi4+0xdc>
 800100a:	fab2 f682 	clz	r6, r2
 800100e:	b14e      	cbz	r6, 8001024 <__udivmoddi4+0x30>
 8001010:	f1c6 0320 	rsb	r3, r6, #32
 8001014:	fa01 f806 	lsl.w	r8, r1, r6
 8001018:	fa20 f303 	lsr.w	r3, r0, r3
 800101c:	40b7      	lsls	r7, r6
 800101e:	ea43 0808 	orr.w	r8, r3, r8
 8001022:	40b4      	lsls	r4, r6
 8001024:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001028:	fbb8 f1fe 	udiv	r1, r8, lr
 800102c:	fa1f fc87 	uxth.w	ip, r7
 8001030:	fb0e 8811 	mls	r8, lr, r1, r8
 8001034:	fb01 f20c 	mul.w	r2, r1, ip
 8001038:	0c23      	lsrs	r3, r4, #16
 800103a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800103e:	429a      	cmp	r2, r3
 8001040:	d909      	bls.n	8001056 <__udivmoddi4+0x62>
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	f101 30ff 	add.w	r0, r1, #4294967295
 8001048:	f080 80eb 	bcs.w	8001222 <__udivmoddi4+0x22e>
 800104c:	429a      	cmp	r2, r3
 800104e:	f240 80e8 	bls.w	8001222 <__udivmoddi4+0x22e>
 8001052:	3902      	subs	r1, #2
 8001054:	443b      	add	r3, r7
 8001056:	1a9a      	subs	r2, r3, r2
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 fc0c 	mul.w	ip, r0, ip
 8001064:	b2a3      	uxth	r3, r4
 8001066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800106a:	459c      	cmp	ip, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x8e>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	f080 80d7 	bcs.w	8001226 <__udivmoddi4+0x232>
 8001078:	459c      	cmp	ip, r3
 800107a:	f240 80d4 	bls.w	8001226 <__udivmoddi4+0x232>
 800107e:	443b      	add	r3, r7
 8001080:	3802      	subs	r0, #2
 8001082:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001086:	2100      	movs	r1, #0
 8001088:	eba3 030c 	sub.w	r3, r3, ip
 800108c:	b11d      	cbz	r5, 8001096 <__udivmoddi4+0xa2>
 800108e:	2200      	movs	r2, #0
 8001090:	40f3      	lsrs	r3, r6
 8001092:	e9c5 3200 	strd	r3, r2, [r5]
 8001096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109a:	428b      	cmp	r3, r1
 800109c:	d905      	bls.n	80010aa <__udivmoddi4+0xb6>
 800109e:	b10d      	cbz	r5, 80010a4 <__udivmoddi4+0xb0>
 80010a0:	e9c5 0100 	strd	r0, r1, [r5]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4608      	mov	r0, r1
 80010a8:	e7f5      	b.n	8001096 <__udivmoddi4+0xa2>
 80010aa:	fab3 f183 	clz	r1, r3
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d146      	bne.n	8001140 <__udivmoddi4+0x14c>
 80010b2:	4573      	cmp	r3, lr
 80010b4:	d302      	bcc.n	80010bc <__udivmoddi4+0xc8>
 80010b6:	4282      	cmp	r2, r0
 80010b8:	f200 8108 	bhi.w	80012cc <__udivmoddi4+0x2d8>
 80010bc:	1a84      	subs	r4, r0, r2
 80010be:	eb6e 0203 	sbc.w	r2, lr, r3
 80010c2:	2001      	movs	r0, #1
 80010c4:	4690      	mov	r8, r2
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d0e5      	beq.n	8001096 <__udivmoddi4+0xa2>
 80010ca:	e9c5 4800 	strd	r4, r8, [r5]
 80010ce:	e7e2      	b.n	8001096 <__udivmoddi4+0xa2>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f000 8091 	beq.w	80011f8 <__udivmoddi4+0x204>
 80010d6:	fab2 f682 	clz	r6, r2
 80010da:	2e00      	cmp	r6, #0
 80010dc:	f040 80a5 	bne.w	800122a <__udivmoddi4+0x236>
 80010e0:	1a8a      	subs	r2, r1, r2
 80010e2:	2101      	movs	r1, #1
 80010e4:	0c03      	lsrs	r3, r0, #16
 80010e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010ea:	b280      	uxth	r0, r0
 80010ec:	b2bc      	uxth	r4, r7
 80010ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80010f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80010f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010fa:	fb04 f20c 	mul.w	r2, r4, ip
 80010fe:	429a      	cmp	r2, r3
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x11e>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001108:	d202      	bcs.n	8001110 <__udivmoddi4+0x11c>
 800110a:	429a      	cmp	r2, r3
 800110c:	f200 80e3 	bhi.w	80012d6 <__udivmoddi4+0x2e2>
 8001110:	46c4      	mov	ip, r8
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	fbb3 f2fe 	udiv	r2, r3, lr
 8001118:	fb0e 3312 	mls	r3, lr, r2, r3
 800111c:	fb02 f404 	mul.w	r4, r2, r4
 8001120:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001124:	429c      	cmp	r4, r3
 8001126:	d907      	bls.n	8001138 <__udivmoddi4+0x144>
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	f102 30ff 	add.w	r0, r2, #4294967295
 800112e:	d202      	bcs.n	8001136 <__udivmoddi4+0x142>
 8001130:	429c      	cmp	r4, r3
 8001132:	f200 80cd 	bhi.w	80012d0 <__udivmoddi4+0x2dc>
 8001136:	4602      	mov	r2, r0
 8001138:	1b1b      	subs	r3, r3, r4
 800113a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800113e:	e7a5      	b.n	800108c <__udivmoddi4+0x98>
 8001140:	f1c1 0620 	rsb	r6, r1, #32
 8001144:	408b      	lsls	r3, r1
 8001146:	fa22 f706 	lsr.w	r7, r2, r6
 800114a:	431f      	orrs	r7, r3
 800114c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001150:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001154:	fbba f8f9 	udiv	r8, sl, r9
 8001158:	fa0e fe01 	lsl.w	lr, lr, r1
 800115c:	fa20 f306 	lsr.w	r3, r0, r6
 8001160:	fb09 aa18 	mls	sl, r9, r8, sl
 8001164:	fa1f fc87 	uxth.w	ip, r7
 8001168:	ea43 030e 	orr.w	r3, r3, lr
 800116c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001170:	fb08 f00c 	mul.w	r0, r8, ip
 8001174:	0c1c      	lsrs	r4, r3, #16
 8001176:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800117a:	42a0      	cmp	r0, r4
 800117c:	fa02 f201 	lsl.w	r2, r2, r1
 8001180:	d90a      	bls.n	8001198 <__udivmoddi4+0x1a4>
 8001182:	193c      	adds	r4, r7, r4
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 809e 	bcs.w	80012c8 <__udivmoddi4+0x2d4>
 800118c:	42a0      	cmp	r0, r4
 800118e:	f240 809b 	bls.w	80012c8 <__udivmoddi4+0x2d4>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	443c      	add	r4, r7
 8001198:	1a24      	subs	r4, r4, r0
 800119a:	b298      	uxth	r0, r3
 800119c:	fbb4 f3f9 	udiv	r3, r4, r9
 80011a0:	fb09 4413 	mls	r4, r9, r3, r4
 80011a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80011ac:	45a4      	cmp	ip, r4
 80011ae:	d909      	bls.n	80011c4 <__udivmoddi4+0x1d0>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80011b6:	f080 8085 	bcs.w	80012c4 <__udivmoddi4+0x2d0>
 80011ba:	45a4      	cmp	ip, r4
 80011bc:	f240 8082 	bls.w	80012c4 <__udivmoddi4+0x2d0>
 80011c0:	3b02      	subs	r3, #2
 80011c2:	443c      	add	r4, r7
 80011c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011c8:	eba4 040c 	sub.w	r4, r4, ip
 80011cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80011d0:	4564      	cmp	r4, ip
 80011d2:	4643      	mov	r3, r8
 80011d4:	46e1      	mov	r9, ip
 80011d6:	d364      	bcc.n	80012a2 <__udivmoddi4+0x2ae>
 80011d8:	d061      	beq.n	800129e <__udivmoddi4+0x2aa>
 80011da:	b15d      	cbz	r5, 80011f4 <__udivmoddi4+0x200>
 80011dc:	ebbe 0203 	subs.w	r2, lr, r3
 80011e0:	eb64 0409 	sbc.w	r4, r4, r9
 80011e4:	fa04 f606 	lsl.w	r6, r4, r6
 80011e8:	fa22 f301 	lsr.w	r3, r2, r1
 80011ec:	431e      	orrs	r6, r3
 80011ee:	40cc      	lsrs	r4, r1
 80011f0:	e9c5 6400 	strd	r6, r4, [r5]
 80011f4:	2100      	movs	r1, #0
 80011f6:	e74e      	b.n	8001096 <__udivmoddi4+0xa2>
 80011f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80011fc:	0c01      	lsrs	r1, r0, #16
 80011fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001202:	b280      	uxth	r0, r0
 8001204:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001208:	463b      	mov	r3, r7
 800120a:	fbb1 f1f7 	udiv	r1, r1, r7
 800120e:	4638      	mov	r0, r7
 8001210:	463c      	mov	r4, r7
 8001212:	46b8      	mov	r8, r7
 8001214:	46be      	mov	lr, r7
 8001216:	2620      	movs	r6, #32
 8001218:	eba2 0208 	sub.w	r2, r2, r8
 800121c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001220:	e765      	b.n	80010ee <__udivmoddi4+0xfa>
 8001222:	4601      	mov	r1, r0
 8001224:	e717      	b.n	8001056 <__udivmoddi4+0x62>
 8001226:	4610      	mov	r0, r2
 8001228:	e72b      	b.n	8001082 <__udivmoddi4+0x8e>
 800122a:	f1c6 0120 	rsb	r1, r6, #32
 800122e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001232:	40b7      	lsls	r7, r6
 8001234:	fa0e fe06 	lsl.w	lr, lr, r6
 8001238:	fa20 f101 	lsr.w	r1, r0, r1
 800123c:	ea41 010e 	orr.w	r1, r1, lr
 8001240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001244:	fbbc f8fe 	udiv	r8, ip, lr
 8001248:	b2bc      	uxth	r4, r7
 800124a:	fb0e cc18 	mls	ip, lr, r8, ip
 800124e:	fb08 f904 	mul.w	r9, r8, r4
 8001252:	0c0a      	lsrs	r2, r1, #16
 8001254:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001258:	40b0      	lsls	r0, r6
 800125a:	4591      	cmp	r9, r2
 800125c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001260:	b280      	uxth	r0, r0
 8001262:	d93e      	bls.n	80012e2 <__udivmoddi4+0x2ee>
 8001264:	18ba      	adds	r2, r7, r2
 8001266:	f108 3cff 	add.w	ip, r8, #4294967295
 800126a:	d201      	bcs.n	8001270 <__udivmoddi4+0x27c>
 800126c:	4591      	cmp	r9, r2
 800126e:	d81f      	bhi.n	80012b0 <__udivmoddi4+0x2bc>
 8001270:	eba2 0209 	sub.w	r2, r2, r9
 8001274:	fbb2 f9fe 	udiv	r9, r2, lr
 8001278:	fb09 f804 	mul.w	r8, r9, r4
 800127c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001280:	b28a      	uxth	r2, r1
 8001282:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001286:	4542      	cmp	r2, r8
 8001288:	d229      	bcs.n	80012de <__udivmoddi4+0x2ea>
 800128a:	18ba      	adds	r2, r7, r2
 800128c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001290:	d2c2      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001292:	4542      	cmp	r2, r8
 8001294:	d2c0      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001296:	f1a9 0102 	sub.w	r1, r9, #2
 800129a:	443a      	add	r2, r7
 800129c:	e7bc      	b.n	8001218 <__udivmoddi4+0x224>
 800129e:	45c6      	cmp	lr, r8
 80012a0:	d29b      	bcs.n	80011da <__udivmoddi4+0x1e6>
 80012a2:	ebb8 0302 	subs.w	r3, r8, r2
 80012a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012aa:	3801      	subs	r0, #1
 80012ac:	46e1      	mov	r9, ip
 80012ae:	e794      	b.n	80011da <__udivmoddi4+0x1e6>
 80012b0:	eba7 0909 	sub.w	r9, r7, r9
 80012b4:	444a      	add	r2, r9
 80012b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80012be:	fb09 f804 	mul.w	r8, r9, r4
 80012c2:	e7db      	b.n	800127c <__udivmoddi4+0x288>
 80012c4:	4603      	mov	r3, r0
 80012c6:	e77d      	b.n	80011c4 <__udivmoddi4+0x1d0>
 80012c8:	46d0      	mov	r8, sl
 80012ca:	e765      	b.n	8001198 <__udivmoddi4+0x1a4>
 80012cc:	4608      	mov	r0, r1
 80012ce:	e6fa      	b.n	80010c6 <__udivmoddi4+0xd2>
 80012d0:	443b      	add	r3, r7
 80012d2:	3a02      	subs	r2, #2
 80012d4:	e730      	b.n	8001138 <__udivmoddi4+0x144>
 80012d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80012da:	443b      	add	r3, r7
 80012dc:	e719      	b.n	8001112 <__udivmoddi4+0x11e>
 80012de:	4649      	mov	r1, r9
 80012e0:	e79a      	b.n	8001218 <__udivmoddi4+0x224>
 80012e2:	eba2 0209 	sub.w	r2, r2, r9
 80012e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ea:	46c4      	mov	ip, r8
 80012ec:	fb09 f804 	mul.w	r8, r9, r4
 80012f0:	e7c4      	b.n	800127c <__udivmoddi4+0x288>
 80012f2:	bf00      	nop

080012f4 <__aeabi_idiv0>:
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001308:	f107 030e 	add.w	r3, r7, #14
 800130c:	461a      	mov	r2, r3
 800130e:	21d0      	movs	r1, #208	@ 0xd0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fd88 	bl	8001e26 <BME280_ReadRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 8001320:	2301      	movs	r3, #1
 8001322:	e005      	b.n	8001330 <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b76      	cmp	r3, #118	@ 0x76
 8001328:	d101      	bne.n	800132e <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 800132a:	2302      	movs	r3, #2
 800132c:	e000      	b.n	8001330 <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 800132e:	2300      	movs	r3, #0
		}
	}
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->dig_H2 = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev->dig_H3 = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->dig_H4 = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev->dig_H5 = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev->dig_H6 = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	dev->dig_P1 = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev->dig_P6 = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev->dig_P7 = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev->dig_P8 = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev->dig_P9 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 80013d8:	22b6      	movs	r2, #182	@ 0xb6
 80013da:	21e0      	movs	r1, #224	@ 0xe0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fd5a 	bl	8001e96 <BME280_WriteRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <BME280_Reset+0xb8>
	{
		return 1;	// NOK
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <BME280_Reset+0xba>
	}
	else
	{
		return 0; // OK
 80013f0:	2300      	movs	r3, #0
	}
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]

	/* Modified for weather monitoring, page: 19; Weather monitoring*/

	// Humidity; Set value: 001 = oversampling x1
	static const uint8_t ctrl_humData = 0x01;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <BME280_Init+0x70>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	21f2      	movs	r1, #242	@ 0xf2
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd3e 	bl	8001e96 <BME280_WriteRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 8001424:	2301      	movs	r3, #1
 8001426:	e01c      	b.n	8001462 <BME280_Init+0x66>
	}

	// Temp | Press | Mode; Set value: 00100100 = oversampling x1, oversampling x1, sleep mode
	static const uint8_t scrl_meadData = 0x24;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <BME280_Init+0x74>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	21f4      	movs	r1, #244	@ 0xf4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fd30 	bl	8001e96 <BME280_WriteRegister>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <BME280_Init+0x48>
	{
		return 1;	// NOK
 8001440:	2301      	movs	r3, #1
 8001442:	e00e      	b.n	8001462 <BME280_Init+0x66>
	}

	// Standbay time | IIR filter | 3-wire SPI; Set value: 0000010 = standbay 0.5ms, IIR off, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <BME280_Init+0x78>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	21f5      	movs	r1, #245	@ 0xf5
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fd22 	bl	8001e96 <BME280_WriteRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <BME280_Init+0x64>
	{
		return 1;	// NOK
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 8001460:	2300      	movs	r3, #0
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800e023 	.word	0x0800e023
 8001470:	0800e024 	.word	0x0800e024
 8001474:	0800e025 	.word	0x0800e025

08001478 <BME280_GoToFromSleep>:


uint8_t BME280_GoToFromSleep(BME280 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t sleep){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]

	// sleep value controls if the devide is put to sleep or wake up
	// 1 - wake up, 0 - go to sleep

	dev -> i2cHandle = i2cHandle;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	601a      	str	r2, [r3, #0]
	uint8_t reg_data;

	if (BME280_ReadRegister(dev, CTRL_MEAS, &reg_data) != HAL_OK) return 1; // Read register value
 800148c:	f107 0317 	add.w	r3, r7, #23
 8001490:	461a      	mov	r2, r3
 8001492:	21f4      	movs	r1, #244	@ 0xf4
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fcc6 	bl	8001e26 <BME280_ReadRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <BME280_GoToFromSleep+0x2c>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01b      	b.n	80014dc <BME280_GoToFromSleep+0x64>

	if (sleep == 0) reg_data = reg_data & 0xFC; // sleep mode
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <BME280_GoToFromSleep+0x3c>
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	75fb      	strb	r3, [r7, #23]
	if (sleep == 1) reg_data = (reg_data & 0xFC) | 0x03; // normal mode
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <BME280_GoToFromSleep+0x4c>
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	f043 0303 	orr.w	r3, r3, #3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	75fb      	strb	r3, [r7, #23]

	if (BME280_WriteRegister(dev, CTRL_MEAS, reg_data) != HAL_OK) return 1;
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	461a      	mov	r2, r3
 80014c8:	21f4      	movs	r1, #244	@ 0xf4
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fce3 	bl	8001e96 <BME280_WriteRegister>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <BME280_GoToFromSleep+0x62>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <BME280_GoToFromSleep+0x64>

	return 0; // OK
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	@ 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	761a      	strb	r2, [r3, #24]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	2319      	movs	r3, #25
 800150e:	2188      	movs	r1, #136	@ 0x88
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fca2 	bl	8001e5a <BME280_ReadRegisters>
 8001516:	4603      	mov	r3, r0
 8001518:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 800151c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <BME280_ReadCalibData+0x44>
	{
		return 1;	// NOK
 8001524:	2301      	movs	r3, #1
 8001526:	e0b7      	b.n	8001698 <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 8001528:	7d7b      	ldrb	r3, [r7, #21]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	7d3a      	ldrb	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	7dba      	ldrb	r2, [r7, #22]
 8001540:	4313      	orrs	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 800154a:	7e7b      	ldrb	r3, [r7, #25]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	7e3a      	ldrb	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 800155c:	7efb      	ldrb	r3, [r7, #27]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	7eba      	ldrb	r2, [r7, #26]
 8001564:	4313      	orrs	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800156c:	7f7b      	ldrb	r3, [r7, #29]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	7f3a      	ldrb	r2, [r7, #28]
 8001574:	4313      	orrs	r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	7fba      	ldrb	r2, [r7, #30]
 8001586:	4313      	orrs	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 8001590:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159c:	4313      	orrs	r3, r2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80015bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 80015d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015de:	4313      	orrs	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 80015e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 80015fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b29b      	uxth	r3, r3
 8001606:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800160a:	4313      	orrs	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21a      	sxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	855a      	strh	r2, [r3, #42]	@ 0x2a
	dev -> dig_H1 = CalibData[24];
 8001614:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	2307      	movs	r3, #7
 8001624:	21e1      	movs	r1, #225	@ 0xe1
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fc17 	bl	8001e5a <BME280_ReadRegisters>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 8001632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <BME280_ReadCalibData+0x15a>
	{
		return 1;	// NOK
 800163a:	2301      	movs	r3, #1
 800163c:	e02c      	b.n	8001698 <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 800163e:	7b7b      	ldrb	r3, [r7, #13]
 8001640:	b21b      	sxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21a      	sxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev -> dig_H3 = CalibData2[2];
 8001652:	7bba      	ldrb	r2, [r7, #14]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	b29b      	uxth	r3, r3
 8001660:	b21a      	sxth	r2, r3
 8001662:	7c3b      	ldrb	r3, [r7, #16]
 8001664:	b21b      	sxth	r3, r3
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 8001674:	7c7b      	ldrb	r3, [r7, #17]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	b29b      	uxth	r3, r3
 800167a:	b21a      	sxth	r2, r3
 800167c:	7c3b      	ldrb	r3, [r7, #16]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev -> dig_H6 = CalibData2[6];
 800168c:	7cbb      	ldrb	r3, [r7, #18]
 800168e:	b25a      	sxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	return 0; // OK
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3730      	adds	r7, #48	@ 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	10da      	asrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	8a9b      	ldrh	r3, [r3, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	12db      	asrs	r3, r3, #11
 80016c2:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	111b      	asrs	r3, r3, #4
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	8a92      	ldrh	r2, [r2, #20]
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	1112      	asrs	r2, r2, #4
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	8a89      	ldrh	r1, [r1, #20]
 80016d6:	1a52      	subs	r2, r2, r1
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	131b      	asrs	r3, r3, #12
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	139b      	asrs	r3, r3, #14
 80016ea:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	441a      	add	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3380      	adds	r3, #128	@ 0x80
 8001702:	121b      	asrs	r3, r3, #8
 8001704:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8001712:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001716:	b0ca      	sub	sp, #296	@ 0x128
 8001718:	af00      	add	r7, sp, #0
 800171a:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800171e:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8001722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	17da      	asrs	r2, r3, #31
 800172a:	461c      	mov	r4, r3
 800172c:	4615      	mov	r5, r2
 800172e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001732:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001736:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800173a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800173e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001742:	fb03 f102 	mul.w	r1, r3, r2
 8001746:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	18ca      	adds	r2, r1, r3
 8001754:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001758:	fba3 8903 	umull	r8, r9, r3, r3
 800175c:	eb02 0309 	add.w	r3, r2, r9
 8001760:	4699      	mov	r9, r3
 8001762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001766:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800176a:	b21b      	sxth	r3, r3
 800176c:	17da      	asrs	r2, r3, #31
 800176e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001772:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001776:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800177a:	4603      	mov	r3, r0
 800177c:	fb03 f209 	mul.w	r2, r3, r9
 8001780:	460b      	mov	r3, r1
 8001782:	fb08 f303 	mul.w	r3, r8, r3
 8001786:	4413      	add	r3, r2
 8001788:	4602      	mov	r2, r0
 800178a:	fba8 2102 	umull	r2, r1, r8, r2
 800178e:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001792:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800179a:	4413      	add	r3, r2
 800179c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80017a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80017a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80017ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017b0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017bc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017c4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80017c8:	462a      	mov	r2, r5
 80017ca:	fb02 f203 	mul.w	r2, r2, r3
 80017ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017d2:	4621      	mov	r1, r4
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	441a      	add	r2, r3
 80017da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017de:	4621      	mov	r1, r4
 80017e0:	fba3 3101 	umull	r3, r1, r3, r1
 80017e4:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80017e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80017ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001802:	462b      	mov	r3, r5
 8001804:	0459      	lsls	r1, r3, #17
 8001806:	4622      	mov	r2, r4
 8001808:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800180c:	4623      	mov	r3, r4
 800180e:	0458      	lsls	r0, r3, #17
 8001810:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001814:	1814      	adds	r4, r2, r0
 8001816:	643c      	str	r4, [r7, #64]	@ 0x40
 8001818:	414b      	adcs	r3, r1
 800181a:	647b      	str	r3, [r7, #68]	@ 0x44
 800181c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001820:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001828:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800182c:	b21b      	sxth	r3, r3
 800182e:	17da      	asrs	r2, r3, #31
 8001830:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001834:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001844:	00d9      	lsls	r1, r3, #3
 8001846:	2000      	movs	r0, #0
 8001848:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800184c:	1814      	adds	r4, r2, r0
 800184e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001850:	414b      	adcs	r3, r1
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001854:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001858:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 800185c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001860:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001864:	fb03 f102 	mul.w	r1, r3, r2
 8001868:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800186c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	18ca      	adds	r2, r1, r3
 8001876:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800187a:	fba3 3103 	umull	r3, r1, r3, r3
 800187e:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001882:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001894:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001898:	b21b      	sxth	r3, r3
 800189a:	17da      	asrs	r2, r3, #31
 800189c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80018a0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80018a4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80018a8:	4622      	mov	r2, r4
 80018aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80018ae:	4641      	mov	r1, r8
 80018b0:	fb01 f202 	mul.w	r2, r1, r2
 80018b4:	464d      	mov	r5, r9
 80018b6:	4618      	mov	r0, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	4603      	mov	r3, r0
 80018bc:	fb03 f305 	mul.w	r3, r3, r5
 80018c0:	4413      	add	r3, r2
 80018c2:	4602      	mov	r2, r0
 80018c4:	4641      	mov	r1, r8
 80018c6:	fba2 2101 	umull	r2, r1, r2, r1
 80018ca:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80018ce:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018d6:	4413      	add	r3, r2
 80018d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018e8:	4623      	mov	r3, r4
 80018ea:	0a18      	lsrs	r0, r3, #8
 80018ec:	462a      	mov	r2, r5
 80018ee:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80018f2:	462b      	mov	r3, r5
 80018f4:	1219      	asrs	r1, r3, #8
 80018f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018fa:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	17da      	asrs	r2, r3, #31
 8001902:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001906:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800190a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800190e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001912:	464a      	mov	r2, r9
 8001914:	fb02 f203 	mul.w	r2, r2, r3
 8001918:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191c:	4644      	mov	r4, r8
 800191e:	fb04 f303 	mul.w	r3, r4, r3
 8001922:	441a      	add	r2, r3
 8001924:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001928:	4644      	mov	r4, r8
 800192a:	fba3 3404 	umull	r3, r4, r3, r4
 800192e:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001936:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800193a:	18d3      	adds	r3, r2, r3
 800193c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800194c:	464c      	mov	r4, r9
 800194e:	0323      	lsls	r3, r4, #12
 8001950:	46c4      	mov	ip, r8
 8001952:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001956:	4644      	mov	r4, r8
 8001958:	0322      	lsls	r2, r4, #12
 800195a:	1884      	adds	r4, r0, r2
 800195c:	633c      	str	r4, [r7, #48]	@ 0x30
 800195e:	eb41 0303 	adc.w	r3, r1, r3
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
 8001964:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001968:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001970:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001974:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001978:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800197c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001980:	8b5b      	ldrh	r3, [r3, #26]
 8001982:	b29b      	uxth	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800198a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800198e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001992:	4622      	mov	r2, r4
 8001994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001998:	4641      	mov	r1, r8
 800199a:	fb01 f202 	mul.w	r2, r1, r2
 800199e:	464d      	mov	r5, r9
 80019a0:	4618      	mov	r0, r3
 80019a2:	4621      	mov	r1, r4
 80019a4:	4603      	mov	r3, r0
 80019a6:	fb03 f305 	mul.w	r3, r3, r5
 80019aa:	4413      	add	r3, r2
 80019ac:	4602      	mov	r2, r0
 80019ae:	4641      	mov	r1, r8
 80019b0:	fba2 2101 	umull	r2, r1, r2, r1
 80019b4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80019b8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80019bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019c0:	4413      	add	r3, r2
 80019c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019d2:	4629      	mov	r1, r5
 80019d4:	104a      	asrs	r2, r1, #1
 80019d6:	4629      	mov	r1, r5
 80019d8:	17cb      	asrs	r3, r1, #31
 80019da:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 80019de:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019e2:	4313      	orrs	r3, r2
 80019e4:	d101      	bne.n	80019ea <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e146      	b.n	8001c78 <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 80019ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80019ee:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80019f2:	17da      	asrs	r2, r3, #31
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80019fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a04:	105b      	asrs	r3, r3, #1
 8001a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a0e:	07db      	lsls	r3, r3, #31
 8001a10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a18:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	1aa4      	subs	r4, r4, r2
 8001a20:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001a22:	eb61 0303 	sbc.w	r3, r1, r3
 8001a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a28:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	462b      	mov	r3, r5
 8001a30:	1891      	adds	r1, r2, r2
 8001a32:	6239      	str	r1, [r7, #32]
 8001a34:	415b      	adcs	r3, r3
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	1851      	adds	r1, r2, r1
 8001a40:	61b9      	str	r1, [r7, #24]
 8001a42:	4629      	mov	r1, r5
 8001a44:	414b      	adcs	r3, r1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a54:	4649      	mov	r1, r9
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4641      	mov	r1, r8
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4641      	mov	r1, r8
 8001a64:	1889      	adds	r1, r1, r2
 8001a66:	6139      	str	r1, [r7, #16]
 8001a68:	4649      	mov	r1, r9
 8001a6a:	eb43 0101 	adc.w	r1, r3, r1
 8001a6e:	6179      	str	r1, [r7, #20]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	008b      	lsls	r3, r1, #2
 8001a80:	46c4      	mov	ip, r8
 8001a82:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001a86:	4641      	mov	r1, r8
 8001a88:	008a      	lsls	r2, r1, #2
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4622      	mov	r2, r4
 8001a92:	189b      	adds	r3, r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	460b      	mov	r3, r1
 8001a98:	462a      	mov	r2, r5
 8001a9a:	eb42 0303 	adc.w	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001aac:	4649      	mov	r1, r9
 8001aae:	008b      	lsls	r3, r1, #2
 8001ab0:	46c4      	mov	ip, r8
 8001ab2:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ab6:	4641      	mov	r1, r8
 8001ab8:	008a      	lsls	r2, r1, #2
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	460a      	mov	r2, r1
 8001aca:	eb42 0303 	adc.w	r3, r2, r3
 8001ace:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ad0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ad4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ad8:	f7ff fa24 	bl	8000f24 <__aeabi_ldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ae8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	17da      	asrs	r2, r3, #31
 8001af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001af2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001af4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	0b50      	lsrs	r0, r2, #13
 8001b02:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b06:	1359      	asrs	r1, r3, #13
 8001b08:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b0c:	462b      	mov	r3, r5
 8001b0e:	fb00 f203 	mul.w	r2, r0, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	fb03 f301 	mul.w	r3, r3, r1
 8001b18:	4413      	add	r3, r2
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	fba2 2100 	umull	r2, r1, r2, r0
 8001b20:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001b24:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001b28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b32:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0b50      	lsrs	r0, r2, #13
 8001b40:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b44:	1359      	asrs	r1, r3, #13
 8001b46:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	fb00 f203 	mul.w	r2, r0, r3
 8001b50:	4623      	mov	r3, r4
 8001b52:	fb03 f301 	mul.w	r3, r3, r1
 8001b56:	4413      	add	r3, r2
 8001b58:	4622      	mov	r2, r4
 8001b5a:	fba2 2100 	umull	r2, r1, r2, r0
 8001b5e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001b62:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	0e4a      	lsrs	r2, r1, #25
 8001b80:	4620      	mov	r0, r4
 8001b82:	4629      	mov	r1, r5
 8001b84:	460c      	mov	r4, r1
 8001b86:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001b8a:	164b      	asrs	r3, r1, #25
 8001b8c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 8001b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b94:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	17da      	asrs	r2, r3, #31
 8001b9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ba4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ba8:	462a      	mov	r2, r5
 8001baa:	fb02 f203 	mul.w	r2, r2, r3
 8001bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc4:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001bc8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001bcc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001be2:	4621      	mov	r1, r4
 8001be4:	0cca      	lsrs	r2, r1, #19
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	460c      	mov	r4, r1
 8001bec:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001bf0:	14cb      	asrs	r3, r1, #19
 8001bf2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001bf6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001bfa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bfe:	1884      	adds	r4, r0, r2
 8001c00:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001c02:	eb41 0303 	adc.w	r3, r1, r3
 8001c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c08:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c0c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001c10:	4621      	mov	r1, r4
 8001c12:	1889      	adds	r1, r1, r2
 8001c14:	6539      	str	r1, [r7, #80]	@ 0x50
 8001c16:	4629      	mov	r1, r5
 8001c18:	eb43 0101 	adc.w	r1, r3, r1
 8001c1c:	6579      	str	r1, [r7, #84]	@ 0x54
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	0a18      	lsrs	r0, r3, #8
 8001c2e:	462a      	mov	r2, r5
 8001c30:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001c34:	462b      	mov	r3, r5
 8001c36:	1219      	asrs	r1, r3, #8
 8001c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c3c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	17da      	asrs	r2, r3, #31
 8001c44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c54:	464c      	mov	r4, r9
 8001c56:	0123      	lsls	r3, r4, #4
 8001c58:	46c4      	mov	ip, r8
 8001c5a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001c5e:	4644      	mov	r4, r8
 8001c60:	0122      	lsls	r2, r4, #4
 8001c62:	1884      	adds	r4, r0, r2
 8001c64:	603c      	str	r4, [r7, #0]
 8001c66:	eb41 0303 	adc.w	r3, r1, r3
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c70:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)pressure;
 8001c74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c84 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c96:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	039a      	lsls	r2, r3, #14
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001ca2:	051b      	lsls	r3, r3, #20
 8001ca4:	1ad2      	subs	r2, r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001cac:	4619      	mov	r1, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cba:	13db      	asrs	r3, r3, #15
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	f992 2036 	ldrsb.w	r2, [r2, #54]	@ 0x36
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	fb01 f202 	mul.w	r2, r1, r2
 8001cca:	1292      	asrs	r2, r2, #10
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f891 1030 	ldrb.w	r1, [r1, #48]	@ 0x30
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	fb00 f101 	mul.w	r1, r0, r1
 8001cda:	12c9      	asrs	r1, r1, #11
 8001cdc:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001ce0:	fb01 f202 	mul.w	r2, r1, r2
 8001ce4:	1292      	asrs	r2, r2, #10
 8001ce6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	@ 0x2e
 8001cf0:	fb01 f202 	mul.w	r2, r1, r2
 8001cf4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001cf8:	1392      	asrs	r2, r2, #14
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	13db      	asrs	r3, r3, #15
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	13d2      	asrs	r2, r2, #15
 8001d08:	fb02 f303 	mul.w	r3, r2, r3
 8001d0c:	11db      	asrs	r3, r3, #7
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	111b      	asrs	r3, r3, #4
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d26:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001d2e:	bfa8      	it	ge
 8001d30:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001d34:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	131b      	asrs	r3, r3, #12
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08e      	sub	sp, #56	@ 0x38
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t Data[8] = {};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
	int32_t RawTemp = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t RawPressure = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t RawHumidity = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001d70:	f107 020c 	add.w	r2, r7, #12
 8001d74:	2308      	movs	r3, #8
 8001d76:	21f7      	movs	r1, #247	@ 0xf7
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f86e 	bl	8001e5a <BME280_ReadRegisters>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8001d84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <BME280_ReadAllData+0x4c>
	{
		return 1;	// NOK
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e046      	b.n	8001e1e <BME280_ReadAllData+0xda>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	031b      	lsls	r3, r3, #12
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001d96:	7c3b      	ldrb	r3, [r7, #16]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001d9c:	7c7b      	ldrb	r3, [r7, #17]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001db0:	7b3b      	ldrb	r3, [r7, #12]
 8001db2:	031b      	lsls	r3, r3, #12
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001dd0:	7cbb      	ldrb	r3, [r7, #18]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[7];
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001de2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc5b 	bl	80016a0 <BME280_TemperatureCompesation>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fc8d 	bl	8001712 <BME280_PressureCompesation>
 8001df8:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe52 	bl	8000aa8 <__aeabi_ui2f>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001e0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff39 	bl	8001c84 <BME280_HumidityCompesation>
 8001e12:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	0a9a      	lsrs	r2, r3, #10
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3738      	adds	r7, #56	@ 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b088      	sub	sp, #32
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	7afb      	ldrb	r3, [r7, #11]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2364      	movs	r3, #100	@ 0x64
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	2301      	movs	r3, #1
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	21ec      	movs	r1, #236	@ 0xec
 8001e4c:	f005 f8ba 	bl	8006fc4 <HAL_I2C_Mem_Read>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b088      	sub	sp, #32
 8001e5e:	af04      	add	r7, sp, #16
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	7abb      	ldrb	r3, [r7, #10]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2164      	movs	r1, #100	@ 0x64
 8001e7c:	9102      	str	r1, [sp, #8]
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	21ec      	movs	r1, #236	@ 0xec
 8001e88:	f005 f89c 	bl	8006fc4 <HAL_I2C_Mem_Read>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af04      	add	r7, sp, #16
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	2364      	movs	r3, #100	@ 0x64
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	1cbb      	adds	r3, r7, #2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	21ec      	movs	r1, #236	@ 0xec
 8001ebe:	f004 ff87 	bl	8006dd0 <HAL_I2C_Mem_Write>
 8001ec2:	4603      	mov	r3, r0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <GetPage>:

/* STM32F103C8Tx have 128 PAGES (Page 0 to Page 127) of 1 KB each = 128 KB Flash Memory */
/* STM32L151C8T6 have 64 PAGES (Page 0 to Page 63) of 1 KB each = 64 KB Flash Memory */

static uint32_t GetPage(uint32_t Address)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	// FLASH_PAGE_SIZE is STM function
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e016      	b.n	8001f08 <GetPage+0x3c>
	{
		if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d20b      	bcs.n	8001f02 <GetPage+0x36>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d304      	bcc.n	8001f02 <GetPage+0x36>
	    {
			return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	e007      	b.n	8001f12 <GetPage+0x46>
	for (int indx=0; indx<FLASH_PAGE_NO; indx++)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f0e:	dbe4      	blt.n	8001eda <GetPage+0xe>
	    }
	}

  return 0;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <Flash_Write_Data>:
}


// Write data to MCU flash
uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_FLASH_Unlock();
 8001f2e:	f004 f9f5 	bl	800631c <HAL_FLASH_Unlock>

	uint32_t StartPage = GetPage(StartPageAddress);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff ffca 	bl	8001ecc <GetPage>
 8001f38:	6238      	str	r0, [r7, #32]
	uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	61fb      	str	r3, [r7, #28]
	uint32_t EndPage = GetPage(EndPageAdress);
 8001f46:	69f8      	ldr	r0, [r7, #28]
 8001f48:	f7ff ffc0 	bl	8001ecc <GetPage>
 8001f4c:	61b8      	str	r0, [r7, #24]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <Flash_Write_Data+0xac>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = StartPage;
 8001f54:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <Flash_Write_Data+0xac>)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages     = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <Flash_Write_Data+0xac>)
 8001f66:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4816      	ldr	r0, [pc, #88]	@ (8001fc8 <Flash_Write_Data+0xac>)
 8001f70:	f004 face 	bl	8006510 <HAL_FLASHEx_Erase>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01b      	beq.n	8001fb2 <Flash_Write_Data+0x96>
	{
		return HAL_FLASH_GetError ();
 8001f7a:	f004 fa19 	bl	80063b0 <HAL_FLASH_GetError>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	e01e      	b.n	8001fc0 <Flash_Write_Data+0xa4>
	}

	while (sofar < numberofwords)
	{
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4413      	add	r3, r2
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	2002      	movs	r0, #2
 8001f92:	f004 f995 	bl	80062c0 <HAL_FLASH_Program>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <Flash_Write_Data+0x8e>
		{
			StartPageAddress += 4;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
			sofar++;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	e003      	b.n	8001fb2 <Flash_Write_Data+0x96>
		}
		else
		{
			 return HAL_FLASH_GetError ();
 8001faa:	f004 fa01 	bl	80063b0 <HAL_FLASH_GetError>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	e006      	b.n	8001fc0 <Flash_Write_Data+0xa4>
	while (sofar < numberofwords)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbe3      	blt.n	8001f82 <Flash_Write_Data+0x66>
		}
	}

	HAL_FLASH_Lock();
 8001fba:	f004 f9e9 	bl	8006390 <HAL_FLASH_Lock>

	return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3728      	adds	r7, #40	@ 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000188 	.word	0x20000188

08001fcc <Flash_Read_Data>:


// Read data from MCU flash
void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3304      	adds	r3, #4
 8001fec:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	80fa      	strh	r2, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d000      	beq.n	8001ffa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8001ff8:	e7ef      	b.n	8001fda <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001ffa:	bf00      	nop
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
	...

08002008 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0c      	blt.n	8002034 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_ClearPendingIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	3360      	adds	r3, #96	@ 0x60
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100
 8002044:	00000000 	.word	0x00000000

08002048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b08d      	sub	sp, #52	@ 0x34
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800204e:	f003 f89e 	bl	800518e <HAL_Init>
  	#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002052:	f000 fc79 	bl	8002948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002056:	f000 ff3d 	bl	8002ed4 <MX_GPIO_Init>
  MX_RTC_Init();
 800205a:	f000 fd8f 	bl	8002b7c <MX_RTC_Init>
  MX_SPI2_Init();
 800205e:	f000 fe45 	bl	8002cec <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002062:	f000 ff0d 	bl	8002e80 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002066:	f000 fd2d 	bl	8002ac4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800206a:	f000 fd59 	bl	8002b20 <MX_I2C2_Init>
  MX_SPI1_Init();
 800206e:	f000 fe0d 	bl	8002c8c <MX_SPI1_Init>
  MX_ADC_Init();
 8002072:	f000 fccf 	bl	8002a14 <MX_ADC_Init>
  MX_TIM2_Init();
 8002076:	f000 fe69 	bl	8002d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 800207a:	f000 feb3 	bl	8002de4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100 / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  uint8_t status = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* MAIN STATE MACHINE */
	  switch(state)
 800208a:	4bad      	ldr	r3, [pc, #692]	@ (8002340 <main+0x2f8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b05      	cmp	r3, #5
 8002090:	f200 842e 	bhi.w	80028f0 <main+0x8a8>
 8002094:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <main+0x54>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020b5 	.word	0x080020b5
 80020a0:	0800237d 	.word	0x0800237d
 80020a4:	080023db 	.word	0x080023db
 80020a8:	08002679 	.word	0x08002679
 80020ac:	080027b9 	.word	0x080027b9
 80020b0:	080028f1 	.word	0x080028f1


	  ////////* DEVICE BOOT *////////
	  case STATE_INIT:

		  if (measurements.ADC_read_cnt == 0 && measurements.init_end == 0)
 80020b4:	4ba3      	ldr	r3, [pc, #652]	@ (8002344 <main+0x2fc>)
 80020b6:	78db      	ldrb	r3, [r3, #3]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d15e      	bne.n	800217a <main+0x132>
 80020bc:	4ba1      	ldr	r3, [pc, #644]	@ (8002344 <main+0x2fc>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d15a      	bne.n	800217a <main+0x132>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 80020c4:	49a0      	ldr	r1, [pc, #640]	@ (8002348 <main+0x300>)
 80020c6:	48a1      	ldr	r0, [pc, #644]	@ (800234c <main+0x304>)
 80020c8:	f7ff f936 	bl	8001338 <BME280_Reset>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020d4:	4413      	add	r3, r2
 80020d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  HAL_Delay(200);
 80020da:	20c8      	movs	r0, #200	@ 0xc8
 80020dc:	f003 f8c6 	bl	800526c <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 80020e0:	4999      	ldr	r1, [pc, #612]	@ (8002348 <main+0x300>)
 80020e2:	489a      	ldr	r0, [pc, #616]	@ (800234c <main+0x304>)
 80020e4:	f7ff f908 	bl	80012f8 <BME280_ReadDeviceID>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020f0:	4413      	add	r3, r2
 80020f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 80020f6:	4994      	ldr	r1, [pc, #592]	@ (8002348 <main+0x300>)
 80020f8:	4894      	ldr	r0, [pc, #592]	@ (800234c <main+0x304>)
 80020fa:	f7ff f9f3 	bl	80014e4 <BME280_ReadCalibData>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002106:	4413      	add	r3, r2
 8002108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  status += BME280_Init(&bme280, &hi2c2);
 800210c:	498e      	ldr	r1, [pc, #568]	@ (8002348 <main+0x300>)
 800210e:	488f      	ldr	r0, [pc, #572]	@ (800234c <main+0x304>)
 8002110:	f7ff f974 	bl	80013fc <BME280_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800211c:	4413      	add	r3, r2
 800211e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2108      	movs	r1, #8
 8002126:	488a      	ldr	r0, [pc, #552]	@ (8002350 <main+0x308>)
 8002128:	f004 fcca 	bl	8006ac0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	2101      	movs	r1, #1
 8002130:	4888      	ldr	r0, [pc, #544]	@ (8002354 <main+0x30c>)
 8002132:	f004 fcc5 	bl	8006ac0 <HAL_GPIO_WritePin>

			  // Set some pins
			  HAL_GPIO_WritePin(SPI_CS_EX_GPIO_Port, SPI_CS_EX_Pin, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	2110      	movs	r1, #16
 800213a:	4885      	ldr	r0, [pc, #532]	@ (8002350 <main+0x308>)
 800213c:	f004 fcc0 	bl	8006ac0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002146:	4883      	ldr	r0, [pc, #524]	@ (8002354 <main+0x30c>)
 8002148:	f004 fcba 	bl	8006ac0 <HAL_GPIO_WritePin>

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800214c:	4b82      	ldr	r3, [pc, #520]	@ (8002358 <main+0x310>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b80      	ldr	r3, [pc, #512]	@ (8002358 <main+0x310>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800215c:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800215e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002162:	487d      	ldr	r0, [pc, #500]	@ (8002358 <main+0x310>)
 8002164:	f008 fc38 	bl	800a9d8 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8002168:	487c      	ldr	r0, [pc, #496]	@ (800235c <main+0x314>)
 800216a:	f009 fc23 	bl	800b9b4 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 800216e:	487c      	ldr	r0, [pc, #496]	@ (8002360 <main+0x318>)
 8002170:	f009 fc20 	bl	800b9b4 <HAL_TIM_Base_Start_IT>

			  measurements.init_end = 1;	// Signal init complete
 8002174:	4b73      	ldr	r3, [pc, #460]	@ (8002344 <main+0x2fc>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 800217a:	4b72      	ldr	r3, [pc, #456]	@ (8002344 <main+0x2fc>)
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 83b9 	bne.w	80028f6 <main+0x8ae>
 8002184:	4b6f      	ldr	r3, [pc, #444]	@ (8002344 <main+0x2fc>)
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b01      	cmp	r3, #1
 800218a:	f040 83b4 	bne.w	80028f6 <main+0x8ae>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800218e:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <main+0x2fc>)
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	461c      	mov	r4, r3
 8002194:	4873      	ldr	r0, [pc, #460]	@ (8002364 <main+0x31c>)
 8002196:	f000 ffeb 	bl	8003170 <ADC_Read_Battery>
 800219a:	4602      	mov	r2, r0
 800219c:	4969      	ldr	r1, [pc, #420]	@ (8002344 <main+0x2fc>)
 800219e:	f104 030a 	add.w	r3, r4, #10
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	4619      	mov	r1, r3
 80021ac:	486e      	ldr	r0, [pc, #440]	@ (8002368 <main+0x320>)
 80021ae:	f001 f8cd 	bl	800334c <ADC_Read_EHum>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <main+0x2fc>)
 80021b8:	78db      	ldrb	r3, [r3, #3]
 80021ba:	461c      	mov	r4, r3
 80021bc:	4610      	mov	r0, r2
 80021be:	f7fe fc73 	bl	8000aa8 <__aeabi_ui2f>
 80021c2:	4602      	mov	r2, r0
 80021c4:	495f      	ldr	r1, [pc, #380]	@ (8002344 <main+0x2fc>)
 80021c6:	1ca3      	adds	r3, r4, #2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <main+0x2fc>)
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002344 <main+0x2fc>)
 80021d8:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 80021da:	4b5a      	ldr	r3, [pc, #360]	@ (8002344 <main+0x2fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 		// reset timer read flag
 80021e0:	4b58      	ldr	r3, [pc, #352]	@ (8002344 <main+0x2fc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 80021e6:	485d      	ldr	r0, [pc, #372]	@ (800235c <main+0x314>)
 80021e8:	f009 fbe4 	bl	800b9b4 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80021ec:	4b55      	ldr	r3, [pc, #340]	@ (8002344 <main+0x2fc>)
 80021ee:	78db      	ldrb	r3, [r3, #3]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	f040 8380 	bne.w	80028f6 <main+0x8ae>
			  {
				  measurements.ADC_read_cnt = 0;
 80021f6:	4b53      	ldr	r3, [pc, #332]	@ (8002344 <main+0x2fc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80021fc:	4857      	ldr	r0, [pc, #348]	@ (800235c <main+0x314>)
 80021fe:	f009 fc2b 	bl	800ba58 <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2108      	movs	r1, #8
 8002206:	4852      	ldr	r0, [pc, #328]	@ (8002350 <main+0x308>)
 8002208:	f004 fc5a 	bl	8006ac0 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	2101      	movs	r1, #1
 8002210:	4850      	ldr	r0, [pc, #320]	@ (8002354 <main+0x30c>)
 8002212:	f004 fc55 	bl	8006ac0 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 8002216:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <main+0x2fc>)
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 800221e:	4b49      	ldr	r3, [pc, #292]	@ (8002344 <main+0x2fc>)
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222a:	e021      	b.n	8002270 <main+0x228>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 800222c:	4b45      	ldr	r3, [pc, #276]	@ (8002344 <main+0x2fc>)
 800222e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002230:	4944      	ldr	r1, [pc, #272]	@ (8002344 <main+0x2fc>)
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	330a      	adds	r3, #10
 8002236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7fe fb83 	bl	8000948 <__addsf3>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	4b3f      	ldr	r3, [pc, #252]	@ (8002344 <main+0x2fc>)
 8002248:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 800224a:	4b3e      	ldr	r3, [pc, #248]	@ (8002344 <main+0x2fc>)
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	493d      	ldr	r1, [pc, #244]	@ (8002344 <main+0x2fc>)
 8002250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002252:	3302      	adds	r3, #2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f7fe fb73 	bl	8000948 <__addsf3>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <main+0x2fc>)
 8002268:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	3301      	adds	r3, #1
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002272:	2b04      	cmp	r3, #4
 8002274:	ddda      	ble.n	800222c <main+0x1e4>
				  }

				  measurements.battery_voltage /= 5;
 8002276:	4b33      	ldr	r3, [pc, #204]	@ (8002344 <main+0x2fc>)
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	493c      	ldr	r1, [pc, #240]	@ (800236c <main+0x324>)
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd1f 	bl	8000cc0 <__aeabi_fdiv>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <main+0x2fc>)
 8002288:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 800228a:	4b2e      	ldr	r3, [pc, #184]	@ (8002344 <main+0x2fc>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4937      	ldr	r1, [pc, #220]	@ (800236c <main+0x324>)
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fd15 	bl	8000cc0 <__aeabi_fdiv>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <main+0x2fc>)
 800229c:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 800229e:	2201      	movs	r2, #1
 80022a0:	4929      	ldr	r1, [pc, #164]	@ (8002348 <main+0x300>)
 80022a2:	482a      	ldr	r0, [pc, #168]	@ (800234c <main+0x304>)
 80022a4:	f7ff f8e8 	bl	8001478 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 80022a8:	4927      	ldr	r1, [pc, #156]	@ (8002348 <main+0x300>)
 80022aa:	4828      	ldr	r0, [pc, #160]	@ (800234c <main+0x304>)
 80022ac:	f7ff fd4a 	bl	8001d44 <BME280_ReadAllData>
				  //BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 80022b0:	482f      	ldr	r0, [pc, #188]	@ (8002370 <main+0x328>)
 80022b2:	f000 ff93 	bl	80031dc <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 80022b6:	482e      	ldr	r0, [pc, #184]	@ (8002370 <main+0x328>)
 80022b8:	f001 fac2 	bl	8003840 <rfm95_init>
 80022bc:	4603      	mov	r3, r0
 80022be:	f083 0301 	eor.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <main+0x28a>
 80022c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022cc:	3301      	adds	r3, #1
 80022ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); 		// Clear EXTI1 NVIC pending flag
 80022d2:	2007      	movs	r0, #7
 80022d4:	f7ff fe98 	bl	8002008 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); 		// Clear EXTI3 NVIC pending
 80022d8:	2009      	movs	r0, #9
 80022da:	f7ff fe95 	bl	8002008 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); 	// Clear EXTI15_10 NVIC pending flag
 80022de:	2028      	movs	r0, #40	@ 0x28
 80022e0:	f7ff fe92 	bl	8002008 <__NVIC_ClearPendingIRQ>
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022e4:	2009      	movs	r0, #9
 80022e6:	f003 ff74 	bl	80061d2 <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022ea:	2007      	movs	r0, #7
 80022ec:	f003 ff71 	bl	80061d2 <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 2.8f) status++; //Vbat NEEDS TO BE SET
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <main+0x2fc>)
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	491f      	ldr	r1, [pc, #124]	@ (8002374 <main+0x32c>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fdcc 	bl	8000e94 <__aeabi_fcmplt>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <main+0x2c4>
 8002302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002306:	3301      	adds	r3, #1
 8002308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				  lora_data.errSendCnt += status;
 800230c:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <main+0x330>)
 800230e:	785a      	ldrb	r2, [r3, #1]
 8002310:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002314:	4413      	add	r3, r2
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <main+0x330>)
 800231a:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 800231c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <main+0x2f0>
				  {
					  //state = STATE_FIRST_CONN;
					  state = STATE_SEND;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <main+0x2f8>)
 8002326:	2203      	movs	r2, #3
 8002328:	701a      	strb	r2, [r3, #0]
					  status = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					  lora_data.errSendCnt = 0;
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <main+0x330>)
 8002332:	2200      	movs	r2, #0
 8002334:	705a      	strb	r2, [r3, #1]
					  state = STATE_GO_SLEEP;
				  }
			  }
		  }

		  break;
 8002336:	e2de      	b.n	80028f6 <main+0x8ae>
					  state = STATE_GO_SLEEP;
 8002338:	4b01      	ldr	r3, [pc, #4]	@ (8002340 <main+0x2f8>)
 800233a:	2204      	movs	r2, #4
 800233c:	701a      	strb	r2, [r3, #0]
		  break;
 800233e:	e2da      	b.n	80028f6 <main+0x8ae>
 8002340:	20000594 	.word	0x20000594
 8002344:	200001cc 	.word	0x200001cc
 8002348:	200003a8 	.word	0x200003a8
 800234c:	20000194 	.word	0x20000194
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	200003fc 	.word	0x200003fc
 800235c:	200004cc 	.word	0x200004cc
 8002360:	2000050c 	.word	0x2000050c
 8002364:	200001d0 	.word	0x200001d0
 8002368:	200001d4 	.word	0x200001d4
 800236c:	40a00000 	.word	0x40a00000
 8002370:	2000021c 	.word	0x2000021c
 8002374:	40333333 	.word	0x40333333
 8002378:	2000020c 	.word	0x2000020c

	  ////////* FIRST LoRa/SIM CONNECTION TEST *////////
	  case STATE_FIRST_CONN:

		  // Create data packet that will be send - dummy
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 800237c:	4baa      	ldr	r3, [pc, #680]	@ (8002628 <main+0x5e0>)
 800237e:	61fb      	str	r3, [r7, #28]

		  // Read number of TX packets from flash
		  uint32_t tx_count = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 8002384:	f107 0318 	add.w	r3, r7, #24
 8002388:	2201      	movs	r2, #1
 800238a:	4619      	mov	r1, r3
 800238c:	48a7      	ldr	r0, [pc, #668]	@ (800262c <main+0x5e4>)
 800238e:	f7ff fe1d 	bl	8001fcc <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	b29a      	uxth	r2, r3
 8002396:	4ba6      	ldr	r3, [pc, #664]	@ (8002630 <main+0x5e8>)
 8002398:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2204      	movs	r2, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	48a2      	ldr	r0, [pc, #648]	@ (8002630 <main+0x5e8>)
 80023a6:	f002 fa4e 	bl	8004846 <rfm95_send_receive_cycle>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <main+0x376>
		  {
			  // Put device in error state
			  state = STATE_ERROR;
 80023b6:	4b9f      	ldr	r3, [pc, #636]	@ (8002634 <main+0x5ec>)
 80023b8:	2205      	movs	r2, #5
 80023ba:	701a      	strb	r2, [r3, #0]

			  // Send data packet
			  //state = STATE_SEND;
		  }

		  break;
 80023bc:	e29f      	b.n	80028fe <main+0x8b6>
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 80023be:	4b9c      	ldr	r3, [pc, #624]	@ (8002630 <main+0x5e8>)
 80023c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80023c4:	607b      	str	r3, [r7, #4]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2201      	movs	r2, #1
 80023ca:	4619      	mov	r1, r3
 80023cc:	4897      	ldr	r0, [pc, #604]	@ (800262c <main+0x5e4>)
 80023ce:	f7ff fda5 	bl	8001f1c <Flash_Write_Data>
			  state = STATE_GO_SLEEP;
 80023d2:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <main+0x5ec>)
 80023d4:	2204      	movs	r2, #4
 80023d6:	701a      	strb	r2, [r3, #0]
		  break;
 80023d8:	e291      	b.n	80028fe <main+0x8b6>

	  ////////* DEVICE WAKEUP ROUTINE *////////
	  case STATE_RUN:

		  // Start all clocks
		  if (awake == 1)
 80023da:	4b97      	ldr	r3, [pc, #604]	@ (8002638 <main+0x5f0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d135      	bne.n	800244e <main+0x406>
		  {
			  awake = 0;
 80023e2:	4b95      	ldr	r3, [pc, #596]	@ (8002638 <main+0x5f0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 80023e8:	f000 faae 	bl	8002948 <SystemClock_Config>
			  HAL_ResumeTick();
 80023ec:	f002 ff6e 	bl	80052cc <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023f0:	4b92      	ldr	r3, [pc, #584]	@ (800263c <main+0x5f4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b90      	ldr	r3, [pc, #576]	@ (800263c <main+0x5f4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002400:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002402:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002406:	488d      	ldr	r0, [pc, #564]	@ (800263c <main+0x5f4>)
 8002408:	f008 fae6 	bl	800a9d8 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Init(&htim2);
 800240c:	488c      	ldr	r0, [pc, #560]	@ (8002640 <main+0x5f8>)
 800240e:	f009 fa91 	bl	800b934 <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Init(&htim3);
 8002412:	488c      	ldr	r0, [pc, #560]	@ (8002644 <main+0x5fc>)
 8002414:	f009 fa8e 	bl	800b934 <HAL_TIM_Base_Init>
			  HAL_NVIC_EnableIRQ(TIM2_IRQn); 	// Disable Timer 2 interrupt
 8002418:	201c      	movs	r0, #28
 800241a:	f003 feda 	bl	80061d2 <HAL_NVIC_EnableIRQ>
			  HAL_NVIC_EnableIRQ(TIM3_IRQn); 	// Disable Timer 3 interrupt
 800241e:	201d      	movs	r0, #29
 8002420:	f003 fed7 	bl	80061d2 <HAL_NVIC_EnableIRQ>

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2108      	movs	r1, #8
 8002428:	4887      	ldr	r0, [pc, #540]	@ (8002648 <main+0x600>)
 800242a:	f004 fb49 	bl	8006ac0 <HAL_GPIO_WritePin>
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 800242e:	4b87      	ldr	r3, [pc, #540]	@ (800264c <main+0x604>)
 8002430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002434:	2b17      	cmp	r3, #23
 8002436:	d904      	bls.n	8002442 <main+0x3fa>
 8002438:	2201      	movs	r2, #1
 800243a:	2101      	movs	r1, #1
 800243c:	4884      	ldr	r0, [pc, #528]	@ (8002650 <main+0x608>)
 800243e:	f004 fb3f 	bl	8006ac0 <HAL_GPIO_WritePin>

			  HAL_ADC_Init(&hadc);
 8002442:	4884      	ldr	r0, [pc, #528]	@ (8002654 <main+0x60c>)
 8002444:	f002 ff5e 	bl	8005304 <HAL_ADC_Init>
			  HAL_ADC_Start(&hadc);
 8002448:	4882      	ldr	r0, [pc, #520]	@ (8002654 <main+0x60c>)
 800244a:	f003 f975 	bl	8005738 <HAL_ADC_Start>
  //			  __HAL_RCC_GPIOC_CLK_ENABLE();
  //			  __HAL_RCC_GPIOD_CLK_ENABLE();

		  }

		  if (measurements.ADC_read_cnt == 0)
 800244e:	4b7f      	ldr	r3, [pc, #508]	@ (800264c <main+0x604>)
 8002450:	78db      	ldrb	r3, [r3, #3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <main+0x41a>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
			  status += BME280_Init(&bme280, &hi2c2);
			#endif

			  HAL_TIM_Base_Start_IT(&htim2);
 8002456:	487a      	ldr	r0, [pc, #488]	@ (8002640 <main+0x5f8>)
 8002458:	f009 faac 	bl	800b9b4 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 800245c:	4879      	ldr	r0, [pc, #484]	@ (8002644 <main+0x5fc>)
 800245e:	f009 faa9 	bl	800b9b4 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002462:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <main+0x604>)
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f040 8248 	bne.w	80028fc <main+0x8b4>
 800246c:	4b77      	ldr	r3, [pc, #476]	@ (800264c <main+0x604>)
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 8243 	bne.w	80028fc <main+0x8b4>
		  {
			  // Read analog values
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8002476:	4b75      	ldr	r3, [pc, #468]	@ (800264c <main+0x604>)
 8002478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800247c:	2b17      	cmp	r3, #23
 800247e:	d90b      	bls.n	8002498 <main+0x450>
 8002480:	4b72      	ldr	r3, [pc, #456]	@ (800264c <main+0x604>)
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	461c      	mov	r4, r3
 8002486:	4874      	ldr	r0, [pc, #464]	@ (8002658 <main+0x610>)
 8002488:	f000 fe72 	bl	8003170 <ADC_Read_Battery>
 800248c:	4602      	mov	r2, r0
 800248e:	496f      	ldr	r1, [pc, #444]	@ (800264c <main+0x604>)
 8002490:	f104 030a 	add.w	r3, r4, #10
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8002498:	f107 0320 	add.w	r3, r7, #32
 800249c:	4619      	mov	r1, r3
 800249e:	486f      	ldr	r0, [pc, #444]	@ (800265c <main+0x614>)
 80024a0:	f000 ff54 	bl	800334c <ADC_Read_EHum>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b68      	ldr	r3, [pc, #416]	@ (800264c <main+0x604>)
 80024aa:	78db      	ldrb	r3, [r3, #3]
 80024ac:	461c      	mov	r4, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7fe fafa 	bl	8000aa8 <__aeabi_ui2f>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4965      	ldr	r1, [pc, #404]	@ (800264c <main+0x604>)
 80024b8:	1ca3      	adds	r3, r4, #2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 80024c0:	4b62      	ldr	r3, [pc, #392]	@ (800264c <main+0x604>)
 80024c2:	78db      	ldrb	r3, [r3, #3]
 80024c4:	3301      	adds	r3, #1
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b60      	ldr	r3, [pc, #384]	@ (800264c <main+0x604>)
 80024ca:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <main+0x604>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 			// reset timer read flag
 80024d2:	4b5e      	ldr	r3, [pc, #376]	@ (800264c <main+0x604>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 80024d8:	4859      	ldr	r0, [pc, #356]	@ (8002640 <main+0x5f8>)
 80024da:	f009 fa6b 	bl	800b9b4 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80024de:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <main+0x604>)
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	f040 820a 	bne.w	80028fc <main+0x8b4>
			  {
				  measurements.ADC_read_cnt = 0;
 80024e8:	4b58      	ldr	r3, [pc, #352]	@ (800264c <main+0x604>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80024ee:	4854      	ldr	r0, [pc, #336]	@ (8002640 <main+0x5f8>)
 80024f0:	f009 fab2 	bl	800ba58 <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2108      	movs	r1, #8
 80024f8:	4853      	ldr	r0, [pc, #332]	@ (8002648 <main+0x600>)
 80024fa:	f004 fae1 	bl	8006ac0 <HAL_GPIO_WritePin>
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 80024fe:	4b53      	ldr	r3, [pc, #332]	@ (800264c <main+0x604>)
 8002500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002504:	2b17      	cmp	r3, #23
 8002506:	d904      	bls.n	8002512 <main+0x4ca>
 8002508:	2200      	movs	r2, #0
 800250a:	2101      	movs	r1, #1
 800250c:	4850      	ldr	r0, [pc, #320]	@ (8002650 <main+0x608>)
 800250e:	f004 fad7 	bl	8006ac0 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage //

				  // Reset values
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage = 0; // Between reads keep the same voltage
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <main+0x604>)
 8002514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002518:	2b17      	cmp	r3, #23
 800251a:	d903      	bls.n	8002524 <main+0x4dc>
 800251c:	4b4b      	ldr	r3, [pc, #300]	@ (800264c <main+0x604>)
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 8002524:	4b49      	ldr	r3, [pc, #292]	@ (800264c <main+0x604>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	621a      	str	r2, [r3, #32]

				  // Sum the measured values
				  for (int i = 0; i < 5; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e026      	b.n	8002580 <main+0x538>
				  {
					  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage += measurements.bat_voltage[i];
 8002532:	4b46      	ldr	r3, [pc, #280]	@ (800264c <main+0x604>)
 8002534:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002538:	2b17      	cmp	r3, #23
 800253a:	d90e      	bls.n	800255a <main+0x512>
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <main+0x604>)
 800253e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002540:	4942      	ldr	r1, [pc, #264]	@ (800264c <main+0x604>)
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	330a      	adds	r3, #10
 8002546:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f7fe f9fb 	bl	8000948 <__addsf3>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <main+0x604>)
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 800255a:	4b3c      	ldr	r3, [pc, #240]	@ (800264c <main+0x604>)
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	493b      	ldr	r1, [pc, #236]	@ (800264c <main+0x604>)
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	3302      	adds	r3, #2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7fe f9eb 	bl	8000948 <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b35      	ldr	r3, [pc, #212]	@ (800264c <main+0x604>)
 8002578:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	2b04      	cmp	r3, #4
 8002584:	ddd5      	ble.n	8002532 <main+0x4ea>
				  }

				  // Calculate average value
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage /= 5;
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <main+0x604>)
 8002588:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800258c:	2b17      	cmp	r3, #23
 800258e:	d909      	bls.n	80025a4 <main+0x55c>
 8002590:	4b2e      	ldr	r3, [pc, #184]	@ (800264c <main+0x604>)
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	4932      	ldr	r1, [pc, #200]	@ (8002660 <main+0x618>)
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fb92 	bl	8000cc0 <__aeabi_fdiv>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <main+0x604>)
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 80025a4:	4b29      	ldr	r3, [pc, #164]	@ (800264c <main+0x604>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	492d      	ldr	r1, [pc, #180]	@ (8002660 <main+0x618>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fb88 	bl	8000cc0 <__aeabi_fdiv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <main+0x604>)
 80025b6:	621a      	str	r2, [r3, #32]

				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_period_counter = 0; // Reset hour counter for battery measurement
 80025b8:	4b24      	ldr	r3, [pc, #144]	@ (800264c <main+0x604>)
 80025ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025be:	2b17      	cmp	r3, #23
 80025c0:	d903      	bls.n	80025ca <main+0x582>
 80025c2:	4b22      	ldr	r3, [pc, #136]	@ (800264c <main+0x604>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 80025ca:	2201      	movs	r2, #1
 80025cc:	4925      	ldr	r1, [pc, #148]	@ (8002664 <main+0x61c>)
 80025ce:	4826      	ldr	r0, [pc, #152]	@ (8002668 <main+0x620>)
 80025d0:	f7fe ff52 	bl	8001478 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 80025d4:	4923      	ldr	r1, [pc, #140]	@ (8002664 <main+0x61c>)
 80025d6:	4824      	ldr	r0, [pc, #144]	@ (8002668 <main+0x620>)
 80025d8:	f7ff fbb4 	bl	8001d44 <BME280_ReadAllData>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX
				#endif

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < VBAT_CRYTHICAL) status++; // TODO Vbat NEED TO BE SET
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <main+0x604>)
 80025de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f85b 	bl	800069c <__aeabi_f2d>
 80025e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002620 <main+0x5d8>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f90e 	bl	800080c <__aeabi_dcmplt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <main+0x5b8>
 80025f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025fa:	3301      	adds	r3, #1
 80025fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

				  lora_data.errSendCnt += status;
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <main+0x624>)
 8002602:	785a      	ldrb	r2, [r3, #1]
 8002604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002608:	4413      	add	r3, r2
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b17      	ldr	r3, [pc, #92]	@ (800266c <main+0x624>)
 800260e:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 8002610:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002614:	2b09      	cmp	r3, #9
 8002616:	d82b      	bhi.n	8002670 <main+0x628>
				  {
					  state = STATE_SEND;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <main+0x5ec>)
 800261a:	2203      	movs	r2, #3
 800261c:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 800261e:	e16d      	b.n	80028fc <main+0x8b4>
 8002620:	33333333 	.word	0x33333333
 8002624:	40033333 	.word	0x40033333
 8002628:	04030201 	.word	0x04030201
 800262c:	0800f800 	.word	0x0800f800
 8002630:	2000021c 	.word	0x2000021c
 8002634:	20000594 	.word	0x20000594
 8002638:	20000000 	.word	0x20000000
 800263c:	200003fc 	.word	0x200003fc
 8002640:	200004cc 	.word	0x200004cc
 8002644:	2000050c 	.word	0x2000050c
 8002648:	40020000 	.word	0x40020000
 800264c:	200001cc 	.word	0x200001cc
 8002650:	40020400 	.word	0x40020400
 8002654:	20000300 	.word	0x20000300
 8002658:	200001d0 	.word	0x200001d0
 800265c:	200001d4 	.word	0x200001d4
 8002660:	40a00000 	.word	0x40a00000
 8002664:	200003a8 	.word	0x200003a8
 8002668:	20000194 	.word	0x20000194
 800266c:	2000020c 	.word	0x2000020c
					  state = STATE_ERROR;
 8002670:	4ba4      	ldr	r3, [pc, #656]	@ (8002904 <main+0x8bc>)
 8002672:	2205      	movs	r2, #5
 8002674:	701a      	strb	r2, [r3, #0]
		  break;
 8002676:	e141      	b.n	80028fc <main+0x8b4>

	  ////////* SEND DATA *////////
	  case STATE_SEND:

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 8002678:	4ba3      	ldr	r3, [pc, #652]	@ (8002908 <main+0x8c0>)
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <main+0x63e>
 8002680:	4ba1      	ldr	r3, [pc, #644]	@ (8002908 <main+0x8c0>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t)(measurements.battery_voltage * 10);		// Battery voltage [3.5V -> 35V, no float]
 8002686:	4ba1      	ldr	r3, [pc, #644]	@ (800290c <main+0x8c4>)
 8002688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268a:	49a1      	ldr	r1, [pc, #644]	@ (8002910 <main+0x8c8>)
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fa63 	bl	8000b58 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fc25 	bl	8000ee4 <__aeabi_f2uiz>
 800269a:	4603      	mov	r3, r0
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b9a      	ldr	r3, [pc, #616]	@ (8002908 <main+0x8c0>)
 80026a0:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int32_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 80026a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002914 <main+0x8cc>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	4b97      	ldr	r3, [pc, #604]	@ (8002908 <main+0x8c0>)
 80026aa:	809a      	strh	r2, [r3, #4]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in perscents [0-100%]
 80026ac:	4b99      	ldr	r3, [pc, #612]	@ (8002914 <main+0x8cc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b95      	ldr	r3, [pc, #596]	@ (8002908 <main+0x8c0>)
 80026b4:	719a      	strb	r2, [r3, #6]
		  lora_data.air_pressure = (uint32_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_ts]
 80026b6:	4b97      	ldr	r3, [pc, #604]	@ (8002914 <main+0x8cc>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fc12 	bl	8000ee4 <__aeabi_f2uiz>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a91      	ldr	r2, [pc, #580]	@ (8002908 <main+0x8c0>)
 80026c4:	6093      	str	r3, [r2, #8]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 80026c6:	4b91      	ldr	r3, [pc, #580]	@ (800290c <main+0x8c4>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fc0a 	bl	8000ee4 <__aeabi_f2uiz>
 80026d0:	4603      	mov	r3, r0
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002908 <main+0x8c0>)
 80026d6:	731a      	strb	r2, [r3, #12]

		  // Data packet that will be send (modify if needed)
		  uint8_t data_packet[14];

		  data_packet[0] = DEVICE_ID;                              // Device ID number
 80026d8:	2301      	movs	r3, #1
 80026da:	723b      	strb	r3, [r7, #8]
		  data_packet[1] = lora_data.error;                        // Error flag
 80026dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002908 <main+0x8c0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	727b      	strb	r3, [r7, #9]
		  data_packet[2] = lora_data.errSendCnt;                   // No. of errors
 80026e2:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <main+0x8c0>)
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	72bb      	strb	r3, [r7, #10]
		  data_packet[3] = lora_data.battery;                      // battery voltage
 80026e8:	4b87      	ldr	r3, [pc, #540]	@ (8002908 <main+0x8c0>)
 80026ea:	789b      	ldrb	r3, [r3, #2]
 80026ec:	72fb      	strb	r3, [r7, #11]

		  // Encode air_temperature (int32_t -> 4 bytes)
		  data_packet[4] = (uint8_t)(lora_data.air_temperature & 0xFF);
 80026ee:	4b86      	ldr	r3, [pc, #536]	@ (8002908 <main+0x8c0>)
 80026f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	733b      	strb	r3, [r7, #12]
		  data_packet[5] = (uint8_t)((lora_data.air_temperature >> 8) & 0xFF);
 80026f8:	4b83      	ldr	r3, [pc, #524]	@ (8002908 <main+0x8c0>)
 80026fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026fe:	121b      	asrs	r3, r3, #8
 8002700:	b21b      	sxth	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	737b      	strb	r3, [r7, #13]
		  data_packet[6] = (uint8_t)((lora_data.air_temperature >> 16) & 0xFF);
 8002706:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <main+0x8c0>)
 8002708:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800270c:	141b      	asrs	r3, r3, #16
 800270e:	b2db      	uxtb	r3, r3
 8002710:	73bb      	strb	r3, [r7, #14]
		  data_packet[7] = (uint8_t)((lora_data.air_temperature >> 24) & 0xFF);
 8002712:	4b7d      	ldr	r3, [pc, #500]	@ (8002908 <main+0x8c0>)
 8002714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002718:	161b      	asrs	r3, r3, #24
 800271a:	b2db      	uxtb	r3, r3
 800271c:	73fb      	strb	r3, [r7, #15]

		  // Encode air_humidity
		  data_packet[8] = lora_data.air_humidity;
 800271e:	4b7a      	ldr	r3, [pc, #488]	@ (8002908 <main+0x8c0>)
 8002720:	799b      	ldrb	r3, [r3, #6]
 8002722:	743b      	strb	r3, [r7, #16]

		  // Encode air_pressure (uint32_t -> 4 bytes)
		  data_packet[9] = (uint8_t)(lora_data.air_pressure & 0xFF);
 8002724:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <main+0x8c0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	747b      	strb	r3, [r7, #17]
		  data_packet[10] = (uint8_t)((lora_data.air_pressure >> 8) & 0xFF);
 800272c:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <main+0x8c0>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	b2db      	uxtb	r3, r3
 8002734:	74bb      	strb	r3, [r7, #18]
		  data_packet[11] = (uint8_t)((lora_data.air_pressure >> 16) & 0xFF);
 8002736:	4b74      	ldr	r3, [pc, #464]	@ (8002908 <main+0x8c0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0c1b      	lsrs	r3, r3, #16
 800273c:	b2db      	uxtb	r3, r3
 800273e:	74fb      	strb	r3, [r7, #19]
		  data_packet[12] = (uint8_t)((lora_data.air_pressure >> 24) & 0xFF);
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <main+0x8c0>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	b2db      	uxtb	r3, r3
 8002748:	753b      	strb	r3, [r7, #20]

		  // Encode earth_humidity
		  data_packet[13] = lora_data.earth_humudity;
 800274a:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <main+0x8c0>)
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	757b      	strb	r3, [r7, #21]

		  // Read number of TX packets from flash
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	2201      	movs	r2, #1
 8002756:	4619      	mov	r1, r3
 8002758:	486f      	ldr	r0, [pc, #444]	@ (8002918 <main+0x8d0>)
 800275a:	f7ff fc37 	bl	8001fcc <Flash_Read_Data>
		  rfm95_handle.config.tx_frame_count = tx_count;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b6e      	ldr	r3, [pc, #440]	@ (800291c <main+0x8d4>)
 8002764:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) // test_data_packet
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	220e      	movs	r2, #14
 800276e:	4619      	mov	r1, r3
 8002770:	486a      	ldr	r0, [pc, #424]	@ (800291c <main+0x8d4>)
 8002772:	f002 f868 	bl	8004846 <rfm95_send_receive_cycle>
 8002776:	4603      	mov	r3, r0
 8002778:	f083 0301 	eor.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <main+0x748>
		  {
			  lora_data.errSendCnt++; // Not used
 8002782:	4b61      	ldr	r3, [pc, #388]	@ (8002908 <main+0x8c0>)
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	3301      	adds	r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <main+0x8c0>)
 800278c:	705a      	strb	r2, [r3, #1]
 800278e:	e009      	b.n	80027a4 <main+0x75c>
		  }
		  else
		  {
			  // Write number of TX packets to flash
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 8002790:	4b62      	ldr	r3, [pc, #392]	@ (800291c <main+0x8d4>)
 8002792:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002796:	603b      	str	r3, [r7, #0]
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
 8002798:	463b      	mov	r3, r7
 800279a:	2201      	movs	r2, #1
 800279c:	4619      	mov	r1, r3
 800279e:	485e      	ldr	r0, [pc, #376]	@ (8002918 <main+0x8d0>)
 80027a0:	f7ff fbbc 	bl	8001f1c <Flash_Write_Data>
		  }

		  state = STATE_GO_SLEEP;
 80027a4:	4b57      	ldr	r3, [pc, #348]	@ (8002904 <main+0x8bc>)
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]

		  // Reset error counter
		  status = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  lora_data.errSendCnt = 0;
 80027b0:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <main+0x8c0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	705a      	strb	r2, [r3, #1]

		  break;
 80027b6:	e0a2      	b.n	80028fe <main+0x8b6>


	  ////////* PUT DEVICE TO SLEEP *////////
	  case STATE_GO_SLEEP:

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027b8:	2200      	movs	r2, #0
 80027ba:	4959      	ldr	r1, [pc, #356]	@ (8002920 <main+0x8d8>)
 80027bc:	4859      	ldr	r0, [pc, #356]	@ (8002924 <main+0x8dc>)
 80027be:	f007 feb4 	bl	800a52a <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80027c2:	2200      	movs	r2, #0
 80027c4:	4958      	ldr	r1, [pc, #352]	@ (8002928 <main+0x8e0>)
 80027c6:	4857      	ldr	r0, [pc, #348]	@ (8002924 <main+0x8dc>)
 80027c8:	f007 ff85 	bl	800a6d6 <HAL_RTC_GetDate>

		  // Based on defines select sleep period
		#ifdef SLEEP_PERIOD_TEST
		  time.Seconds += 10;
 80027cc:	4b54      	ldr	r3, [pc, #336]	@ (8002920 <main+0x8d8>)
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	330a      	adds	r3, #10
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b52      	ldr	r3, [pc, #328]	@ (8002920 <main+0x8d8>)
 80027d6:	709a      	strb	r2, [r3, #2]
		#ifdef SLEEP_PERIOD_CUSTOM
		  time.Minutes += SLEEP_PERIOD_CUSTOM;
		#endif


		  if(time.Seconds >= 60)
 80027d8:	4b51      	ldr	r3, [pc, #324]	@ (8002920 <main+0x8d8>)
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	2b3b      	cmp	r3, #59	@ 0x3b
 80027de:	d908      	bls.n	80027f2 <main+0x7aa>
		  {
			  time.Minutes ++;
 80027e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002920 <main+0x8d8>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002920 <main+0x8d8>)
 80027ea:	705a      	strb	r2, [r3, #1]
			  time.Seconds = 0;
 80027ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002920 <main+0x8d8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 80027f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002920 <main+0x8d8>)
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80027f8:	d908      	bls.n	800280c <main+0x7c4>
		  {
			  time.Hours++;
 80027fa:	4b49      	ldr	r3, [pc, #292]	@ (8002920 <main+0x8d8>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b47      	ldr	r3, [pc, #284]	@ (8002920 <main+0x8d8>)
 8002804:	701a      	strb	r2, [r3, #0]
			  time.Minutes = 0;
 8002806:	4b46      	ldr	r3, [pc, #280]	@ (8002920 <main+0x8d8>)
 8002808:	2200      	movs	r2, #0
 800280a:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 800280c:	4b44      	ldr	r3, [pc, #272]	@ (8002920 <main+0x8d8>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b17      	cmp	r3, #23
 8002812:	d902      	bls.n	800281a <main+0x7d2>
		  {
			  time.Hours = 0;
 8002814:	4b42      	ldr	r3, [pc, #264]	@ (8002920 <main+0x8d8>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm 					= RTC_ALARM_A;
 800281a:	4b44      	ldr	r3, [pc, #272]	@ (800292c <main+0x8e4>)
 800281c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002820:	619a      	str	r2, [r3, #24]
		  sAlarm.AlarmTime.Hours 		= time.Hours;
 8002822:	4b3f      	ldr	r3, [pc, #252]	@ (8002920 <main+0x8d8>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <main+0x8e4>)
 8002828:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes 		= time.Minutes;
 800282a:	4b3d      	ldr	r3, [pc, #244]	@ (8002920 <main+0x8d8>)
 800282c:	785a      	ldrb	r2, [r3, #1]
 800282e:	4b3f      	ldr	r3, [pc, #252]	@ (800292c <main+0x8e4>)
 8002830:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds 		= time.Seconds;
 8002832:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <main+0x8d8>)
 8002834:	789a      	ldrb	r2, [r3, #2]
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <main+0x8e4>)
 8002838:	709a      	strb	r2, [r3, #2]
		  sAlarm.AlarmMask            	= RTC_ALARMMASK_DATEWEEKDAY; /* ignore date   */
 800283a:	4b3c      	ldr	r3, [pc, #240]	@ (800292c <main+0x8e4>)
 800283c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002840:	60da      	str	r2, [r3, #12]
		  sAlarm.AlarmDateWeekDaySel  	= RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002842:	4b3a      	ldr	r3, [pc, #232]	@ (800292c <main+0x8e4>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
		  sAlarm.AlarmDateWeekDay     	= 1;                           /* don’t care   */
 8002848:	4b38      	ldr	r3, [pc, #224]	@ (800292c <main+0x8e4>)
 800284a:	2201      	movs	r2, #1
 800284c:	751a      	strb	r2, [r3, #20]
		  sAlarm.Alarm                	= RTC_ALARM_A;
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <main+0x8e4>)
 8002850:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002854:	619a      	str	r2, [r3, #24]

		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800285a:	4832      	ldr	r0, [pc, #200]	@ (8002924 <main+0x8dc>)
 800285c:	f008 f8bc 	bl	800a9d8 <HAL_RTC_DeactivateAlarm>

		  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8002860:	2200      	movs	r2, #0
 8002862:	4932      	ldr	r1, [pc, #200]	@ (800292c <main+0x8e4>)
 8002864:	482f      	ldr	r0, [pc, #188]	@ (8002924 <main+0x8dc>)
 8002866:	f007 ff85 	bl	800a774 <HAL_RTC_SetAlarm_IT>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <main+0x82c>
 8002870:	f000 fd94 	bl	800339c <Error_Handler>

		  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	2029      	movs	r0, #41	@ 0x29
 800287a:	f003 fc8e 	bl	800619a <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800287e:	2029      	movs	r0, #41	@ 0x29
 8002880:	f003 fca7 	bl	80061d2 <HAL_NVIC_EnableIRQ>


		  // Put devices and sensors to sleep
		  rfm95_goto_sleep(&rfm95_handle); // If the module is not in sleep mode (it should be)
 8002884:	4825      	ldr	r0, [pc, #148]	@ (800291c <main+0x8d4>)
 8002886:	f001 f923 	bl	8003ad0 <rfm95_goto_sleep>
		  BME280_GoToFromSleep(&bme280, &hi2c2, 0); // If the sensor is not in sleep mode (it should be)
 800288a:	2200      	movs	r2, #0
 800288c:	4928      	ldr	r1, [pc, #160]	@ (8002930 <main+0x8e8>)
 800288e:	4821      	ldr	r0, [pc, #132]	@ (8002914 <main+0x8cc>)
 8002890:	f7fe fdf2 	bl	8001478 <BME280_GoToFromSleep>

		  // Disable power to humidity probe and to voltage divider for battery measurement
		  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2108      	movs	r1, #8
 8002898:	4826      	ldr	r0, [pc, #152]	@ (8002934 <main+0x8ec>)
 800289a:	f004 f911 	bl	8006ac0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	2101      	movs	r1, #1
 80028a2:	4825      	ldr	r0, [pc, #148]	@ (8002938 <main+0x8f0>)
 80028a4:	f004 f90c 	bl	8006ac0 <HAL_GPIO_WritePin>

		  // Stop Timers if they running and disable their interrupts
		  HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer 2
 80028a8:	4824      	ldr	r0, [pc, #144]	@ (800293c <main+0x8f4>)
 80028aa:	f009 f8d5 	bl	800ba58 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer 3
 80028ae:	4824      	ldr	r0, [pc, #144]	@ (8002940 <main+0x8f8>)
 80028b0:	f009 f8d2 	bl	800ba58 <HAL_TIM_Base_Stop_IT>
		  HAL_NVIC_DisableIRQ(TIM2_IRQn); // Disable Timer 2 interrupt
 80028b4:	201c      	movs	r0, #28
 80028b6:	f003 fc9a 	bl	80061ee <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(TIM3_IRQn); // Disable Timer 3 interrupt
 80028ba:	201d      	movs	r0, #29
 80028bc:	f003 fc97 	bl	80061ee <HAL_NVIC_DisableIRQ>

		  HAL_ADC_Stop(&hadc);
 80028c0:	4820      	ldr	r0, [pc, #128]	@ (8002944 <main+0x8fc>)
 80028c2:	f002 ff99 	bl	80057f8 <HAL_ADC_Stop>
		  HAL_ADC_DeInit(&hadc);
 80028c6:	481f      	ldr	r0, [pc, #124]	@ (8002944 <main+0x8fc>)
 80028c8:	f002 fe62 	bl	8005590 <HAL_ADC_DeInit>
		  //HAL_GPIO_Init(GPIOA, &g);
		  //g.Pin = D_VBAT_EN_Pin | DIO5_Pin | DIO0_Pin | DIO4_Pin | DIO3_Pin | SIM_ISR_Pin | SIM_SLP_Pin | SPI2_NSS_Pin;
		  //HAL_GPIO_Init(GPIOB, &g);


		  HAL_SuspendTick(); // disable interrupt
 80028cc:	f002 fcf0 	bl	80052b0 <HAL_SuspendTick>
		  HAL_PWREx_EnableUltraLowPower();
 80028d0:	f006 fe72 	bl	80095b8 <HAL_PWREx_EnableUltraLowPower>

		  // Set sleep mode
		#ifdef SLEEP_MODE_STOP
		  HAL_DBGMCU_DisableDBGStopMode();
 80028d4:	f002 fd08 	bl	80052e8 <HAL_DBGMCU_DisableDBGStopMode>
		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // PWR_MAINREGULATOR_ON
 80028d8:	2101      	movs	r1, #1
 80028da:	2001      	movs	r0, #1
 80028dc:	f006 fe40 	bl	8009560 <HAL_PWR_EnterSTOPMode>
		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80028e0:	4810      	ldr	r0, [pc, #64]	@ (8002924 <main+0x8dc>)
 80028e2:	f008 fa01 	bl	800ace8 <HAL_RTCEx_DeactivateWakeUpTimer>
		  HAL_DBGMCU_DisableDBGStandbyMode();
		  HAL_PWR_EnterSTANDBYMode();
		#endif

		  // Resume clock and ticks ! Done in wake up irq
		  SystemClock_Config();
 80028e6:	f000 f82f 	bl	8002948 <SystemClock_Config>
		  HAL_ResumeTick();
 80028ea:	f002 fcef 	bl	80052cc <HAL_ResumeTick>
		  //HAL_Init();

		  break;
 80028ee:	e006      	b.n	80028fe <main+0x8b6>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 80028f0:	bf00      	nop
 80028f2:	f7ff bbca 	b.w	800208a <main+0x42>
		  break;
 80028f6:	bf00      	nop
 80028f8:	f7ff bbc7 	b.w	800208a <main+0x42>
		  break;
 80028fc:	bf00      	nop
	  switch(state)
 80028fe:	f7ff bbc4 	b.w	800208a <main+0x42>
 8002902:	bf00      	nop
 8002904:	20000594 	.word	0x20000594
 8002908:	2000020c 	.word	0x2000020c
 800290c:	200001cc 	.word	0x200001cc
 8002910:	41200000 	.word	0x41200000
 8002914:	20000194 	.word	0x20000194
 8002918:	0800f800 	.word	0x0800f800
 800291c:	2000021c 	.word	0x2000021c
 8002920:	200002d4 	.word	0x200002d4
 8002924:	200003fc 	.word	0x200003fc
 8002928:	200002e0 	.word	0x200002e0
 800292c:	200002e4 	.word	0x200002e4
 8002930:	200003a8 	.word	0x200003a8
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	200004cc 	.word	0x200004cc
 8002940:	2000050c 	.word	0x2000050c
 8002944:	20000300 	.word	0x20000300

08002948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b094      	sub	sp, #80	@ 0x50
 800294c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	2234      	movs	r2, #52	@ 0x34
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f00a fba7 	bl	800d0aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295c:	f107 0308 	add.w	r3, r7, #8
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296c:	463b      	mov	r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <SystemClock_Config+0xc8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <SystemClock_Config+0xc8>)
 800297e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002982:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002984:	2307      	movs	r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002990:	2301      	movs	r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002994:	2310      	movs	r3, #16
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800299c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80029a2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80029a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80029a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80029ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 fe1c 	bl	80095f0 <HAL_RCC_OscConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80029be:	f000 fced 	bl	800339c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c2:	230f      	movs	r3, #15
 80029c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c6:	2303      	movs	r3, #3
 80029c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f007 f937 	bl	8009c50 <HAL_RCC_ClockConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80029e8:	f000 fcd8 	bl	800339c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029ec:	2301      	movs	r3, #1
 80029ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029f4:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f6:	463b      	mov	r3, r7
 80029f8:	4618      	mov	r0, r3
 80029fa:	f007 fbad 	bl	800a158 <HAL_RCCEx_PeriphCLKConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a04:	f000 fcca 	bl	800339c <Error_Handler>
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3750      	adds	r7, #80	@ 0x50
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40007000 	.word	0x40007000

08002a14 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002a24:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a26:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <MX_ADC_Init+0xac>)
 8002a28:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002a30:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002a48:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002a5a:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a72:	2210      	movs	r2, #16
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002a84:	480d      	ldr	r0, [pc, #52]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002a86:	f002 fc3d 	bl	8005304 <HAL_ADC_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002a90:	f000 fc84 	bl	800339c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	@ (8002abc <MX_ADC_Init+0xa8>)
 8002aa6:	f003 f887 	bl	8005bb8 <HAL_ADC_ConfigChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002ab0:	f000 fc74 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000300 	.word	0x20000300
 8002ac0:	40012400 	.word	0x40012400

08002ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002aca:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <MX_I2C1_Init+0x54>)
 8002acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ad0:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <MX_I2C1_Init+0x58>)
 8002ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af4:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b00:	4804      	ldr	r0, [pc, #16]	@ (8002b14 <MX_I2C1_Init+0x50>)
 8002b02:	f004 f80d 	bl	8006b20 <HAL_I2C_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b0c:	f000 fc46 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000354 	.word	0x20000354
 8002b18:	40005400 	.word	0x40005400
 8002b1c:	000186a0 	.word	0x000186a0

08002b20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b26:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <MX_I2C2_Init+0x54>)
 8002b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b2c:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <MX_I2C2_Init+0x58>)
 8002b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b50:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b5c:	4804      	ldr	r0, [pc, #16]	@ (8002b70 <MX_I2C2_Init+0x50>)
 8002b5e:	f003 ffdf 	bl	8006b20 <HAL_I2C_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b68:	f000 fc18 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200003a8 	.word	0x200003a8
 8002b74:	40005800 	.word	0x40005800
 8002b78:	000186a0 	.word	0x000186a0

08002b7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ba4:	4b37      	ldr	r3, [pc, #220]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002ba6:	4a38      	ldr	r2, [pc, #224]	@ (8002c88 <MX_RTC_Init+0x10c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002baa:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002bb0:	4b34      	ldr	r3, [pc, #208]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bb2:	227f      	movs	r2, #127	@ 0x7f
 8002bb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bb8:	22ff      	movs	r2, #255	@ 0xff
 8002bba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bbc:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bc2:	4b30      	ldr	r3, [pc, #192]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bce:	482d      	ldr	r0, [pc, #180]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002bd0:	f007 fb90 	bl	800a2f4 <HAL_RTC_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8002bda:	f000 fbdf 	bl	800339c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4820      	ldr	r0, [pc, #128]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002c02:	f007 fbf8 	bl	800a3f6 <HAL_RTC_SetTime>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002c0c:	f000 fbc6 	bl	800339c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002c32:	f007 fccc 	bl	800a5ce <HAL_RTC_SetDate>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002c3c:	f000 fbae 	bl	800339c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c64:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_RTC_Init+0x108>)
 8002c6e:	f007 fd81 	bl	800a774 <HAL_RTC_SetAlarm_IT>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8002c78:	f000 fb90 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	3730      	adds	r7, #48	@ 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200003fc 	.word	0x200003fc
 8002c88:	40002800 	.word	0x40002800

08002c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c90:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002c92:	4a15      	ldr	r2, [pc, #84]	@ (8002ce8 <MX_SPI1_Init+0x5c>)
 8002c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c96:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002ccc:	220a      	movs	r2, #10
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cd0:	4804      	ldr	r0, [pc, #16]	@ (8002ce4 <MX_SPI1_Init+0x58>)
 8002cd2:	f008 f86a 	bl	800adaa <HAL_SPI_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_SPI1_Init+0x54>
  {
    Error_Handler();
 8002cdc:	f000 fb5e 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000041c 	.word	0x2000041c
 8002ce8:	40013000 	.word	0x40013000

08002cec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002cf0:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <MX_SPI2_Init+0x5c>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cf6:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002cf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d04:	4b0f      	ldr	r3, [pc, #60]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d10:	4b0c      	ldr	r3, [pc, #48]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	61da      	str	r2, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d24:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d2c:	220a      	movs	r2, #10
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d30:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <MX_SPI2_Init+0x58>)
 8002d32:	f008 f83a 	bl	800adaa <HAL_SPI_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_SPI2_Init+0x54>
  {
    Error_Handler();
 8002d3c:	f000 fb2e 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000474 	.word	0x20000474
 8002d48:	40003800 	.word	0x40003800

08002d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d60:	463b      	mov	r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d72:	223f      	movs	r2, #63	@ 0x3f
 8002d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d7e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d90:	4813      	ldr	r0, [pc, #76]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002d92:	f008 fdcf 	bl	800b934 <HAL_TIM_Base_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d9c:	f000 fafe 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	4619      	mov	r1, r3
 8002dac:	480c      	ldr	r0, [pc, #48]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002dae:	f008 ff45 	bl	800bc3c <HAL_TIM_ConfigClockSource>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002db8:	f000 faf0 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_TIM2_Init+0x94>)
 8002dca:	f009 f921 	bl	800c010 <HAL_TIMEx_MasterConfigSynchronization>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002dd4:	f000 fae2 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200004cc 	.word	0x200004cc

08002de4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e02:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <MX_TIM3_Init+0x98>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1983;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e08:	f240 72bf 	movw	r2, #1983	@ 0x7bf
 8002e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64515;
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e16:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 8002e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e28:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e2a:	f008 fd83 	bl	800b934 <HAL_TIM_Base_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e34:	f000 fab2 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	4619      	mov	r1, r3
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e46:	f008 fef9 	bl	800bc3c <HAL_TIM_ConfigClockSource>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e50:	f000 faa4 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e54:	2300      	movs	r3, #0
 8002e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_TIM3_Init+0x94>)
 8002e62:	f009 f8d5 	bl	800c010 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002e6c:	f000 fa96 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000050c 	.word	0x2000050c
 8002e7c:	40000400 	.word	0x40000400

08002e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <MX_USART1_UART_Init+0x50>)
 8002e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eb6:	4805      	ldr	r0, [pc, #20]	@ (8002ecc <MX_USART1_UART_Init+0x4c>)
 8002eb8:	f009 f908 	bl	800c0cc <HAL_UART_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ec2:	f000 fa6b 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000054c 	.word	0x2000054c
 8002ed0:	40013800 	.word	0x40013800

08002ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
 8002ee8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eea:	4b65      	ldr	r3, [pc, #404]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a64      	ldr	r2, [pc, #400]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b62      	ldr	r3, [pc, #392]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f02:	4b5f      	ldr	r3, [pc, #380]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a5e      	ldr	r2, [pc, #376]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f08:	f043 0320 	orr.w	r3, r3, #32
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	4b59      	ldr	r3, [pc, #356]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	4a58      	ldr	r2, [pc, #352]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	61d3      	str	r3, [r2, #28]
 8002f26:	4b56      	ldr	r3, [pc, #344]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a52      	ldr	r2, [pc, #328]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <MX_GPIO_Init+0x1ac>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOOST_EN_Pin|EHUM_PWR_Pin|SPI_CS_EX_Pin|RESET_Pin
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f241 1119 	movw	r1, #4377	@ 0x1119
 8002f50:	484c      	ldr	r0, [pc, #304]	@ (8003084 <MX_GPIO_Init+0x1b0>)
 8002f52:	f003 fdb5 	bl	8006ac0 <HAL_GPIO_WritePin>
                          |SIM_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 8002f56:	2201      	movs	r2, #1
 8002f58:	2101      	movs	r1, #1
 8002f5a:	484b      	ldr	r0, [pc, #300]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8002f5c:	f003 fdb0 	bl	8006ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|SIM_SLP_Pin, GPIO_PIN_RESET);
 8002f60:	2200      	movs	r2, #0
 8002f62:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 8002f66:	4848      	ldr	r0, [pc, #288]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8002f68:	f003 fdaa 	bl	8006ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOST_EN_Pin EHUM_PWR_Pin SPI_CS_EX_Pin RESET_Pin
                           SIM_RST_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin|EHUM_PWR_Pin|SPI_CS_EX_Pin|RESET_Pin
 8002f6c:	f241 1319 	movw	r3, #4377	@ 0x1119
 8002f70:	617b      	str	r3, [r7, #20]
                          |SIM_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	4619      	mov	r1, r3
 8002f84:	483f      	ldr	r0, [pc, #252]	@ (8003084 <MX_GPIO_Init+0x1b0>)
 8002f86:	f003 fb3b 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_VBAT_EN_Pin SPI2_NSS_Pin SIM_SLP_Pin */
  GPIO_InitStruct.Pin = D_VBAT_EN_Pin|SPI2_NSS_Pin|SIM_SLP_Pin;
 8002f8a:	f241 2301 	movw	r3, #4609	@ 0x1201
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4839      	ldr	r0, [pc, #228]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8002fa4:	f003 fb2c 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin;
 8002fa8:	230a      	movs	r3, #10
 8002faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4832      	ldr	r0, [pc, #200]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8002fbe:	f003 fb1f 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : UNUSED1_Pin */
  GPIO_InitStruct.Pin = UNUSED1_Pin;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNUSED1_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	482c      	ldr	r0, [pc, #176]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8002fd6:	f003 fb13 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8002fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4619      	mov	r1, r3
 8002fee:	4825      	ldr	r0, [pc, #148]	@ (8003084 <MX_GPIO_Init+0x1b0>)
 8002ff0:	f003 fb06 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8002ff4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ffa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003000:	2302      	movs	r3, #2
 8003002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4619      	mov	r1, r3
 800300a:	481e      	ldr	r0, [pc, #120]	@ (8003084 <MX_GPIO_Init+0x1b0>)
 800300c:	f003 faf8 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 8003010:	2330      	movs	r3, #48	@ 0x30
 8003012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003018:	2302      	movs	r3, #2
 800301a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	4819      	ldr	r0, [pc, #100]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8003024:	f003 faec 	bl	8006600 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_ISR_Pin */
  GPIO_InitStruct.Pin = SIM_ISR_Pin;
 8003028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800302e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_ISR_GPIO_Port, &GPIO_InitStruct);
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4619      	mov	r1, r3
 800303e:	4812      	ldr	r0, [pc, #72]	@ (8003088 <MX_GPIO_Init+0x1b4>)
 8003040:	f003 fade 	bl	8006600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2101      	movs	r1, #1
 8003048:	2007      	movs	r0, #7
 800304a:	f003 f8a6 	bl	800619a <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2101      	movs	r1, #1
 8003052:	2009      	movs	r0, #9
 8003054:	f003 f8a1 	bl	800619a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  // ^^^^^^^^ COMMENT ALL IRQ ENABLE WRITEN BY IDE ^^^^^^^^
  // Manual setup IRQs - interrupt signal already at startup
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2101      	movs	r1, #1
 800305c:	2007      	movs	r0, #7
 800305e:	f003 f89c 	bl	800619a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1); // 1,0
 8003062:	2201      	movs	r2, #1
 8003064:	2101      	movs	r1, #1
 8003066:	2009      	movs	r0, #9
 8003068:	f003 f897 	bl	800619a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800306c:	2009      	movs	r0, #9
 800306e:	f003 f8be 	bl	80061ee <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8003072:	2007      	movs	r0, #7
 8003074:	f003 f8bb 	bl	80061ee <HAL_NVIC_DisableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003078:	bf00      	nop
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400

0800308c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Wake up interrupt - STOP mode //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	awake = 1;
 8003094:	4b07      	ldr	r3, [pc, #28]	@ (80030b4 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 800309a:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RTC_AlarmAEventCallback+0x1c>
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80030a4:	2202      	movs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000594 	.word	0x20000594

080030bc <HAL_TIM_PeriodElapsedCallback>:
}


// TIMER Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (measurements.ADC_read == 0)
 80030ce:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d108      	bne.n	80030e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80030d6:	480e      	ldr	r0, [pc, #56]	@ (8003110 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80030d8:	f008 fcbe 	bl	800ba58 <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Start_IT(&hadc);
 80030dc:	480d      	ldr	r0, [pc, #52]	@ (8003114 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80030de:	f002 fbb7 	bl	8005850 <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	705a      	strb	r2, [r3, #1]
		}
	}

	if (htim->Instance == TIM3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM2 overflows
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80030fa:	4a08      	ldr	r2, [pc, #32]	@ (800311c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80030fc:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 80030fe:	4808      	ldr	r0, [pc, #32]	@ (8003120 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003100:	f008 fc58 	bl	800b9b4 <HAL_TIM_Base_Start_IT>
	}
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200001cc 	.word	0x200001cc
 8003110:	200004cc 	.word	0x200004cc
 8003114:	20000300 	.word	0x20000300
 8003118:	40000400 	.word	0x40000400
 800311c:	20000598 	.word	0x20000598
 8003120:	2000050c 	.word	0x2000050c

08003124 <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <HAL_ADC_ConvCpltCallback+0x40>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <HAL_ADC_ConvCpltCallback+0x36>
    {
    	measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f002 fc28 	bl	800598c <HAL_ADC_GetValue>
 800313c:	4603      	mov	r3, r0
 800313e:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_ADC_ConvCpltCallback+0x44>)
 8003140:	6053      	str	r3, [r2, #4]
    	measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f002 fc22 	bl	800598c <HAL_ADC_GetValue>
 8003148:	4603      	mov	r3, r0
 800314a:	4a07      	ldr	r2, [pc, #28]	@ (8003168 <HAL_ADC_ConvCpltCallback+0x44>)
 800314c:	6093      	str	r3, [r2, #8]
    	HAL_ADC_Stop_IT(hadc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f002 fbe8 	bl	8005924 <HAL_ADC_Stop_IT>
    	measurements.ADC_read_end = 1;
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <HAL_ADC_ConvCpltCallback+0x44>)
 8003156:	2201      	movs	r2, #1
 8003158:	709a      	strb	r2, [r3, #2]
    }
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40012400 	.word	0x40012400
 8003168:	200001cc 	.word	0x200001cc
 800316c:	00000000 	.word	0x00000000

08003170 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	// If LDO is used to power the board
#ifdef LDO_USE
	float Vout = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fa6b 	bl	8000658 <__aeabi_ui2d>
 8003182:	a311      	add	r3, pc, #68	@ (adr r3, 80031c8 <ADC_Read_Battery+0x58>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fc fffa 	bl	8000180 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fb82 	bl	800089c <__aeabi_d2f>
 8003198:	4603      	mov	r3, r0
 800319a:	490d      	ldr	r1, [pc, #52]	@ (80031d0 <ADC_Read_Battery+0x60>)
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd fd8f 	bl	8000cc0 <__aeabi_fdiv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	60fb      	str	r3, [r7, #12]
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
 80031a6:	490b      	ldr	r1, [pc, #44]	@ (80031d4 <ADC_Read_Battery+0x64>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7fd fd89 	bl	8000cc0 <__aeabi_fdiv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4909      	ldr	r1, [pc, #36]	@ (80031d8 <ADC_Read_Battery+0x68>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fcd0 	bl	8000b58 <__aeabi_fmul>
 80031b8:	4603      	mov	r3, r0
 80031ba:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 80031bc:	68bb      	ldr	r3, [r7, #8]
#ifndef LDO_USE
	float Vout = ((float)(*ADC_value * BAT_U)) / 4095;
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
	return (float) voltage;
#endif
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	400ccccc 	.word	0x400ccccc
 80031d0:	457ff000 	.word	0x457ff000
 80031d4:	42c80000 	.word	0x42c80000
 80031d8:	43480000 	.word	0x43480000

080031dc <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 80031dc:	b4b0      	push	{r4, r5, r7}
 80031de:	b08d      	sub	sp, #52	@ 0x34
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <RFM95W_Struct_Init+0xa4>)
 80031e8:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <RFM95W_Struct_Init+0xa8>)
 80031ee:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f6:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a23      	ldr	r2, [pc, #140]	@ (8003288 <RFM95W_Struct_Init+0xac>)
 80031fc:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003204:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003214:	63da      	str	r2, [r3, #60]	@ 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <RFM95W_Struct_Init+0xb0>)
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <RFM95W_Struct_Init+0xb4>)
 8003228:	64da      	str	r2, [r3, #76]	@ 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <RFM95W_Struct_Init+0xb8>)
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3312      	adds	r3, #18
 8003232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003234:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 8003236:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <RFM95W_Struct_Init+0xbc>)
 8003238:	f107 041c 	add.w	r4, r7, #28
 800323c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800323e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3326      	adds	r3, #38	@ 0x26
 8003246:	461d      	mov	r5, r3
 8003248:	f107 041c 	add.w	r4, r7, #28
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	6028      	str	r0, [r5, #0]
 8003250:	6069      	str	r1, [r5, #4]
 8003252:	60aa      	str	r2, [r5, #8]
 8003254:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 8003256:	4b11      	ldr	r3, [pc, #68]	@ (800329c <RFM95W_Struct_Init+0xc0>)
 8003258:	f107 040c 	add.w	r4, r7, #12
 800325c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800325e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3316      	adds	r3, #22
 8003266:	461d      	mov	r5, r3
 8003268:	f107 040c 	add.w	r4, r7, #12
 800326c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326e:	6028      	str	r0, [r5, #0]
 8003270:	6069      	str	r1, [r5, #4]
 8003272:	60aa      	str	r2, [r5, #8]
 8003274:	60eb      	str	r3, [r5, #12]
}
 8003276:	bf00      	nop
 8003278:	3734      	adds	r7, #52	@ 0x34
 800327a:	46bd      	mov	sp, r7
 800327c:	bcb0      	pop	{r4, r5, r7}
 800327e:	4770      	bx	lr
 8003280:	20000474 	.word	0x20000474
 8003284:	40020400 	.word	0x40020400
 8003288:	40020000 	.word	0x40020000
 800328c:	0800331d 	.word	0x0800331d
 8003290:	080032f9 	.word	0x080032f9
 8003294:	e9780b26 	.word	0xe9780b26
 8003298:	0800ddb4 	.word	0x0800ddb4
 800329c:	0800ddc4 	.word	0x0800ddc4

080032a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
	//__disable_irq();
    if (GPIO_Pin == DIO0_Pin) {
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 80032b0:	2100      	movs	r1, #0
 80032b2:	480f      	ldr	r0, [pc, #60]	@ (80032f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80032b4:	f001 fbb0 	bl	8004a18 <rfm95_on_interrupt>
 80032b8:	e013      	b.n	80032e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO1_Pin) {
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c0:	d104      	bne.n	80032cc <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 80032c2:	2101      	movs	r1, #1
 80032c4:	480a      	ldr	r0, [pc, #40]	@ (80032f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80032c6:	f001 fba7 	bl	8004a18 <rfm95_on_interrupt>
 80032ca:	e00a      	b.n	80032e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO5_Pin) {
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d104      	bne.n	80032dc <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 80032d2:	2102      	movs	r1, #2
 80032d4:	4806      	ldr	r0, [pc, #24]	@ (80032f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80032d6:	f001 fb9f 	bl	8004a18 <rfm95_on_interrupt>
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear any unexpected interrupt
 80032dc:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	6153      	str	r3, [r2, #20]
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the flag
 80032e2:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	6153      	str	r3, [r2, #20]
    //__enable_irq();
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000021c 	.word	0x2000021c
 80032f4:	40010400 	.word	0x40010400

080032f8 <random_int>:

static uint8_t random_int(uint8_t max)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <random_int+0x20>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2db      	uxtb	r3, r3
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	200001cc 	.word	0x200001cc

0800331c <get_precision_tick>:

static uint32_t get_precision_tick()
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003322:	b672      	cpsid	i
}
 8003324:	bf00      	nop
    __disable_irq(); // Disable interrupts to ensure atomic access to tick variables
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 8003326:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <get_precision_tick+0x28>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <get_precision_tick+0x2c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003334:	b662      	cpsie	i
}
 8003336:	bf00      	nop
    __enable_irq(); // Re-enable interrupts
    return precision_tick;
 8003338:	687b      	ldr	r3, [r7, #4]
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	2000050c 	.word	0x2000050c
 8003348:	20000598 	.word	0x20000598

0800334c <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	uint8_t humidity = (uint8_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3bf0      	subs	r3, #240	@ 0xf0
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f97b 	bl	8000658 <__aeabi_ui2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f7fd fa77 	bl	800085c <__aeabi_d2uiz>
 800336e:	4603      	mov	r3, r0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fb9c 	bl	8000ab0 <__aeabi_i2f>
 8003378:	4602      	mov	r2, r0
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fd fbe9 	bl	8000b58 <__aeabi_fmul>
 8003386:	4603      	mov	r3, r0
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fdab 	bl	8000ee4 <__aeabi_f2uiz>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]
	return humidity;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <Error_Handler+0x8>

080033a8 <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6858      	ldr	r0, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	891b      	ldrh	r3, [r3, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	4619      	mov	r1, r3
 80033c4:	f003 fb7c 	bl	8006ac0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f107 0117 	add.w	r1, r7, #23
 80033da:	2364      	movs	r3, #100	@ 0x64
 80033dc:	2201      	movs	r2, #1
 80033de:	f007 fd60 	bl	800aea2 <HAL_SPI_Transmit>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <read_register+0x44>
		return false;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e015      	b.n	8003418 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	2364      	movs	r3, #100	@ 0x64
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	f007 fe97 	bl	800b12a <HAL_SPI_Receive>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <read_register+0x5e>
		return false;
 8003402:	2300      	movs	r3, #0
 8003404:	e008      	b.n	8003418 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6858      	ldr	r0, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	891b      	ldrh	r3, [r3, #8]
 800340e:	2201      	movs	r2, #1
 8003410:	4619      	mov	r1, r3
 8003412:	f003 fb55 	bl	8006ac0 <HAL_GPIO_WritePin>

	return true;
 8003416:	2301      	movs	r3, #1

}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
 800342c:	4613      	mov	r3, r2
 800342e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6858      	ldr	r0, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	891b      	ldrh	r3, [r3, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	4619      	mov	r1, r3
 800343c:	f003 fb40 	bl	8006ac0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003446:	b2db      	uxtb	r3, r3
 8003448:	733b      	strb	r3, [r7, #12]
 800344a:	78bb      	ldrb	r3, [r7, #2]
 800344c:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f107 010c 	add.w	r1, r7, #12
 8003456:	2364      	movs	r3, #100	@ 0x64
 8003458:	2202      	movs	r2, #2
 800345a:	f007 fd22 	bl	800aea2 <HAL_SPI_Transmit>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <write_register+0x48>
		return false;
 8003464:	2300      	movs	r3, #0
 8003466:	e008      	b.n	800347a <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6858      	ldr	r0, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	891b      	ldrh	r3, [r3, #8]
 8003470:	2201      	movs	r2, #1
 8003472:	4619      	mov	r1, r3
 8003474:	f003 fb24 	bl	8006ac0 <HAL_GPIO_WritePin>

	return true;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	460b      	mov	r3, r1
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8003492:	7afb      	ldrb	r3, [r7, #11]
 8003494:	2b0f      	cmp	r3, #15
 8003496:	d905      	bls.n	80034a4 <config_set_channel+0x20>
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <config_set_channel+0x54>)
 800349a:	4a10      	ldr	r2, [pc, #64]	@ (80034dc <config_set_channel+0x58>)
 800349c:	2175      	movs	r1, #117	@ 0x75
 800349e:	4810      	ldr	r0, [pc, #64]	@ (80034e0 <config_set_channel+0x5c>)
 80034a0:	f009 fcbe 	bl	800ce20 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80034a4:	7afa      	ldrb	r2, [r7, #11]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	321a      	adds	r2, #26
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	4313      	orrs	r3, r2
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	0800ddd4 	.word	0x0800ddd4
 80034dc:	0800e028 	.word	0x0800e028
 80034e0:	0800dde8 	.word	0x0800dde8

080034e4 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f64a 3267 	movw	r2, #43879	@ 0xab67
 80034f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	handle->config.tx_frame_count = 0;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	handle->config.rx_frame_count = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	handle->config.rx1_delay = 1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	handle->config.channel_mask = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	config_set_channel(handle, 0, 868100000);
 8003516:	4a09      	ldr	r2, [pc, #36]	@ (800353c <config_load_default+0x58>)
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffb2 	bl	8003484 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8003520:	4a07      	ldr	r2, [pc, #28]	@ (8003540 <config_load_default+0x5c>)
 8003522:	2101      	movs	r1, #1
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ffad 	bl	8003484 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 800352a:	4a06      	ldr	r2, [pc, #24]	@ (8003544 <config_load_default+0x60>)
 800352c:	2102      	movs	r1, #2
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffa8 	bl	8003484 <config_set_channel>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	33be27a0 	.word	0x33be27a0
 8003540:	33c134e0 	.word	0x33c134e0
 8003544:	33c44220 	.word	0x33c44220

08003548 <reset>:


static void reset(rfm95_handle_t *handle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68d8      	ldr	r0, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8a1b      	ldrh	r3, [r3, #16]
 8003558:	2200      	movs	r2, #0
 800355a:	4619      	mov	r1, r3
 800355c:	f003 fab0 	bl	8006ac0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8003560:	2001      	movs	r0, #1
 8003562:	f001 fe83 	bl	800526c <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68d8      	ldr	r0, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8a1b      	ldrh	r3, [r3, #16]
 800356e:	2201      	movs	r2, #1
 8003570:	4619      	mov	r1, r3
 8003572:	f003 faa5 	bl	8006ac0 <HAL_GPIO_WritePin>
	HAL_Delay(20);//5
 8003576:	2014      	movs	r0, #20
 8003578:	f001 fe78 	bl	800526c <HAL_Delay>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	2000      	movs	r0, #0
 8003592:	460a      	mov	r2, r1
 8003594:	4603      	mov	r3, r0
 8003596:	0b55      	lsrs	r5, r2, #13
 8003598:	04d4      	lsls	r4, r2, #19
 800359a:	4a27      	ldr	r2, [pc, #156]	@ (8003638 <configure_frequency+0xb4>)
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	4620      	mov	r0, r4
 80035a2:	4629      	mov	r1, r5
 80035a4:	f7fd fd0e 	bl	8000fc4 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80035b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	0c02      	lsrs	r2, r0, #16
 80035be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035c2:	0c0b      	lsrs	r3, r1, #16
 80035c4:	b2d3      	uxtb	r3, r2
 80035c6:	461a      	mov	r2, r3
 80035c8:	2106      	movs	r1, #6
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ff28 	bl	8003420 <write_register>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f083 0301 	eor.w	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <configure_frequency+0x5c>
 80035dc:	2300      	movs	r3, #0
 80035de:	e026      	b.n	800362e <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80035e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	0a02      	lsrs	r2, r0, #8
 80035ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035f2:	0a0b      	lsrs	r3, r1, #8
 80035f4:	b2d3      	uxtb	r3, r2
 80035f6:	461a      	mov	r2, r3
 80035f8:	2107      	movs	r1, #7
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff10 	bl	8003420 <write_register>
 8003600:	4603      	mov	r3, r0
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <configure_frequency+0x8c>
 800360c:	2300      	movs	r3, #0
 800360e:	e00e      	b.n	800362e <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8003610:	7a3b      	ldrb	r3, [r7, #8]
 8003612:	461a      	mov	r2, r3
 8003614:	2108      	movs	r1, #8
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff02 	bl	8003420 <write_register>
 800361c:	4603      	mov	r3, r0
 800361e:	f083 0301 	eor.w	r3, r3, #1
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <configure_frequency+0xa8>
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <configure_frequency+0xaa>

	return true;
 800362c:	2301      	movs	r3, #1
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bdb0      	pop	{r4, r5, r7, pc}
 8003636:	bf00      	nop
 8003638:	01e84800 	.word	0x01e84800

0800363c <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800364c:	461a      	mov	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	fa42 f303 	asr.w	r3, r2, r3
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <configure_channel+0x2c>
 800365c:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <configure_channel+0x48>)
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <configure_channel+0x4c>)
 8003660:	21a1      	movs	r1, #161	@ 0xa1
 8003662:	480a      	ldr	r0, [pc, #40]	@ (800368c <configure_channel+0x50>)
 8003664:	f009 fbdc 	bl	800ce20 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	321a      	adds	r2, #26
 800366e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff85 	bl	8003584 <configure_frequency>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	0800ddfc 	.word	0x0800ddfc
 8003688:	0800e03c 	.word	0x0800e03c
 800368c:	0800dde8 	.word	0x0800dde8

08003690 <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	460b      	mov	r3, r1
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	72fb      	strb	r3, [r7, #11]
	// Works with interrupt but it needs more testing for timeout
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	4798      	blx	r3
 80036a4:	4601      	mov	r1, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <wait_for_irq+0x5c>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	440b      	add	r3, r1
 80036ba:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 80036bc:	e008      	b.n	80036d0 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	4798      	blx	r3
 80036c4:	4602      	mov	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d801      	bhi.n	80036d0 <wait_for_irq+0x40>
			return false;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e008      	b.n	80036e2 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	332a      	adds	r3, #42	@ 0x2a
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <wait_for_irq+0x2e>
		}
	}
	return true;
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	4798      	blx	r3
 80036fe:	4602      	mov	r2, r0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4912      	ldr	r1, [pc, #72]	@ (8003758 <wait_for_rx_irqs+0x68>)
 800370e:	fba1 1303 	umull	r1, r3, r1, r3
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8003718:	e008      	b.n	800372c <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	4798      	blx	r3
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4293      	cmp	r3, r2
 8003726:	d801      	bhi.n	800372c <wait_for_rx_irqs+0x3c>
			return false;
 8003728:	2300      	movs	r3, #0
 800372a:	e011      	b.n	8003750 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <wait_for_rx_irqs+0x50>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ec      	beq.n	800371a <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	10624dd3 	.word	0x10624dd3

0800375c <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8003768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376c:	2b01      	cmp	r3, #1
 800376e:	dd03      	ble.n	8003778 <rfm95_set_power+0x1c>
 8003770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003774:	2b11      	cmp	r3, #17
 8003776:	dd09      	ble.n	800378c <rfm95_set_power+0x30>
 8003778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377c:	2b14      	cmp	r3, #20
 800377e:	d005      	beq.n	800378c <rfm95_set_power+0x30>
 8003780:	4b2c      	ldr	r3, [pc, #176]	@ (8003834 <rfm95_set_power+0xd8>)
 8003782:	4a2d      	ldr	r2, [pc, #180]	@ (8003838 <rfm95_set_power+0xdc>)
 8003784:	21c3      	movs	r1, #195	@ 0xc3
 8003786:	482d      	ldr	r0, [pc, #180]	@ (800383c <rfm95_set_power+0xe0>)
 8003788:	f009 fb4a 	bl	800ce20 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 800378c:	2300      	movs	r3, #0
 800378e:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003798:	2b01      	cmp	r3, #1
 800379a:	dd18      	ble.n	80037ce <rfm95_set_power+0x72>
 800379c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a0:	2b11      	cmp	r3, #17
 80037a2:	dc14      	bgt.n	80037ce <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 80037a4:	7b3b      	ldrb	r3, [r7, #12]
 80037a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80037aa:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80037ac:	7b3b      	ldrb	r3, [r7, #12]
 80037ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b2:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	3b02      	subs	r3, #2
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	7b3b      	ldrb	r3, [r7, #12]
 80037c2:	f362 0303 	bfi	r3, r2, #0, #4
 80037c6:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER; //0x14;
 80037c8:	2384      	movs	r3, #132	@ 0x84
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e011      	b.n	80037f2 <rfm95_set_power+0x96>

	} else if (power == 20) {
 80037ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d2:	2b14      	cmp	r3, #20
 80037d4:	d10d      	bne.n	80037f2 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 80037d6:	7b3b      	ldrb	r3, [r7, #12]
 80037d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80037dc:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80037de:	7b3b      	ldrb	r3, [r7, #12]
 80037e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037e4:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 80037e6:	7b3b      	ldrb	r3, [r7, #12]
 80037e8:	f043 030f 	orr.w	r3, r3, #15
 80037ec:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80037ee:	2387      	movs	r3, #135	@ 0x87
 80037f0:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80037f2:	7b3b      	ldrb	r3, [r7, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	2109      	movs	r1, #9
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe11 	bl	8003420 <write_register>
 80037fe:	4603      	mov	r3, r0
 8003800:	f083 0301 	eor.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <rfm95_set_power+0xb2>
 800380a:	2300      	movs	r3, #0
 800380c:	e00e      	b.n	800382c <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	461a      	mov	r2, r3
 8003812:	214d      	movs	r1, #77	@ 0x4d
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fe03 	bl	8003420 <write_register>
 800381a:	4603      	mov	r3, r0
 800381c:	f083 0301 	eor.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <rfm95_set_power+0xce>
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <rfm95_set_power+0xd0>

	return true;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	0800de30 	.word	0x0800de30
 8003838:	0800e050 	.word	0x0800e050
 800383c:	0800dde8 	.word	0x0800dde8

08003840 <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003852:	d005      	beq.n	8003860 <rfm95_init+0x20>
 8003854:	4b94      	ldr	r3, [pc, #592]	@ (8003aa8 <rfm95_init+0x268>)
 8003856:	4a95      	ldr	r2, [pc, #596]	@ (8003aac <rfm95_init+0x26c>)
 8003858:	21de      	movs	r1, #222	@ 0xde
 800385a:	4895      	ldr	r0, [pc, #596]	@ (8003ab0 <rfm95_init+0x270>)
 800385c:	f009 fae0 	bl	800ce20 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <rfm95_init+0x36>
 800386a:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <rfm95_init+0x274>)
 800386c:	4a8f      	ldr	r2, [pc, #572]	@ (8003aac <rfm95_init+0x26c>)
 800386e:	21df      	movs	r1, #223	@ 0xdf
 8003870:	488f      	ldr	r0, [pc, #572]	@ (8003ab0 <rfm95_init+0x270>)
 8003872:	f009 fad5 	bl	800ce20 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <rfm95_init+0x4c>
 8003880:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab8 <rfm95_init+0x278>)
 8003882:	4a8a      	ldr	r2, [pc, #552]	@ (8003aac <rfm95_init+0x26c>)
 8003884:	21e0      	movs	r1, #224	@ 0xe0
 8003886:	488a      	ldr	r0, [pc, #552]	@ (8003ab0 <rfm95_init+0x270>)
 8003888:	f009 faca 	bl	800ce20 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <rfm95_init+0x62>
 8003896:	4b89      	ldr	r3, [pc, #548]	@ (8003abc <rfm95_init+0x27c>)
 8003898:	4a84      	ldr	r2, [pc, #528]	@ (8003aac <rfm95_init+0x26c>)
 800389a:	21e1      	movs	r1, #225	@ 0xe1
 800389c:	4884      	ldr	r0, [pc, #528]	@ (8003ab0 <rfm95_init+0x270>)
 800389e:	f009 fabf 	bl	800ce20 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <rfm95_init+0x78>
 80038ac:	4b84      	ldr	r3, [pc, #528]	@ (8003ac0 <rfm95_init+0x280>)
 80038ae:	4a7f      	ldr	r2, [pc, #508]	@ (8003aac <rfm95_init+0x26c>)
 80038b0:	21e2      	movs	r1, #226	@ 0xe2
 80038b2:	487f      	ldr	r0, [pc, #508]	@ (8003ab0 <rfm95_init+0x270>)
 80038b4:	f009 fab4 	bl	800ce20 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <rfm95_init+0x8c>
 80038c0:	4b80      	ldr	r3, [pc, #512]	@ (8003ac4 <rfm95_init+0x284>)
 80038c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003aac <rfm95_init+0x26c>)
 80038c4:	21e3      	movs	r1, #227	@ 0xe3
 80038c6:	487a      	ldr	r0, [pc, #488]	@ (8003ab0 <rfm95_init+0x270>)
 80038c8:	f009 faaa 	bl	800ce20 <__assert_func>
	assert(handle->random_int != NULL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <rfm95_init+0xa0>
 80038d4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ac8 <rfm95_init+0x288>)
 80038d6:	4a75      	ldr	r2, [pc, #468]	@ (8003aac <rfm95_init+0x26c>)
 80038d8:	21e4      	movs	r1, #228	@ 0xe4
 80038da:	4875      	ldr	r0, [pc, #468]	@ (8003ab0 <rfm95_init+0x270>)
 80038dc:	f009 faa0 	bl	800ce20 <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d805      	bhi.n	80038f8 <rfm95_init+0xb8>
 80038ec:	4b77      	ldr	r3, [pc, #476]	@ (8003acc <rfm95_init+0x28c>)
 80038ee:	4a6f      	ldr	r2, [pc, #444]	@ (8003aac <rfm95_init+0x26c>)
 80038f0:	21e6      	movs	r1, #230	@ 0xe6
 80038f2:	486f      	ldr	r0, [pc, #444]	@ (8003ab0 <rfm95_init+0x270>)
 80038f4:	f009 fa94 	bl	800ce20 <__assert_func>

	reset(handle);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fe25 	bl	8003548 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <rfm95_init+0xec>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	3260      	adds	r2, #96	@ 0x60
 800390e:	4610      	mov	r0, r2
 8003910:	4798      	blx	r3
 8003912:	4603      	mov	r3, r0
 8003914:	f083 0301 	eor.w	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003924:	f64a 3267 	movw	r2, #43879	@ 0xab67
 8003928:	4293      	cmp	r3, r2
 800392a:	d002      	beq.n	8003932 <rfm95_init+0xf2>
		config_load_default(handle);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fdd9 	bl	80034e4 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8003932:	f107 020f 	add.w	r2, r7, #15
 8003936:	2301      	movs	r3, #1
 8003938:	2142      	movs	r1, #66	@ 0x42
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fd34 	bl	80033a8 <read_register>
 8003940:	4603      	mov	r3, r0
 8003942:	f083 0301 	eor.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <rfm95_init+0x110>
 800394c:	2300      	movs	r3, #0
 800394e:	e0a7      	b.n	8003aa0 <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b12      	cmp	r3, #18
 8003954:	d001      	beq.n	800395a <rfm95_init+0x11a>
 8003956:	2300      	movs	r3, #0
 8003958:	e0a2      	b.n	8003aa0 <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 800395a:	2200      	movs	r2, #0
 800395c:	2101      	movs	r1, #1
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fd5e 	bl	8003420 <write_register>
 8003964:	4603      	mov	r3, r0
 8003966:	f083 0301 	eor.w	r3, r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <rfm95_init+0x134>
 8003970:	2300      	movs	r3, #0
 8003972:	e095      	b.n	8003aa0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fd51 	bl	8003420 <write_register>
 800397e:	4603      	mov	r3, r0
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <rfm95_init+0x14e>
 800398a:	2300      	movs	r3, #0
 800398c:	e088      	b.n	8003aa0 <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz RX_DONE
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 800398e:	2240      	movs	r2, #64	@ 0x40
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fd44 	bl	8003420 <write_register>
 8003998:	4603      	mov	r3, r0
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <rfm95_init+0x168>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e07b      	b.n	8003aa0 <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b4:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 80039b6:	2111      	movs	r1, #17
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fecf 	bl	800375c <rfm95_set_power>
 80039be:	4603      	mov	r3, r0
 80039c0:	f083 0301 	eor.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <rfm95_init+0x18e>
 80039ca:	2300      	movs	r3, #0
 80039cc:	e068      	b.n	8003aa0 <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80039ce:	2223      	movs	r2, #35	@ 0x23
 80039d0:	210c      	movs	r1, #12
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fd24 	bl	8003420 <write_register>
 80039d8:	4603      	mov	r3, r0
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <rfm95_init+0x1a8>
 80039e4:	2300      	movs	r3, #0
 80039e6:	e05b      	b.n	8003aa0 <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 80039e8:	2200      	movs	r2, #0
 80039ea:	2120      	movs	r1, #32
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fd17 	bl	8003420 <write_register>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <rfm95_init+0x1c2>
 80039fe:	2300      	movs	r3, #0
 8003a00:	e04e      	b.n	8003aa0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8003a02:	2208      	movs	r2, #8
 8003a04:	2121      	movs	r1, #33	@ 0x21
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fd0a 	bl	8003420 <write_register>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <rfm95_init+0x1dc>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e041      	b.n	8003aa0 <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8003a1c:	2234      	movs	r2, #52	@ 0x34
 8003a1e:	2139      	movs	r1, #57	@ 0x39
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fcfd 	bl	8003420 <write_register>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <rfm95_init+0x1f6>
 8003a32:	2300      	movs	r3, #0
 8003a34:	e034      	b.n	8003aa0 <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	210e      	movs	r1, #14
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fcf0 	bl	8003420 <write_register>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <rfm95_init+0x210>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e027      	b.n	8003aa0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8003a50:	2200      	movs	r2, #0
 8003a52:	210f      	movs	r1, #15
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fce3 	bl	8003420 <write_register>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f083 0301 	eor.w	r3, r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <rfm95_init+0x22a>
 8003a66:	2300      	movs	r3, #0
 8003a68:	e01a      	b.n	8003aa0 <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8003a6a:	2240      	movs	r2, #64	@ 0x40
 8003a6c:	2123      	movs	r1, #35	@ 0x23
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fcd6 	bl	8003420 <write_register>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f083 0301 	eor.w	r3, r3, #1
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <rfm95_init+0x244>
 8003a80:	2300      	movs	r3, #0
 8003a82:	e00d      	b.n	8003aa0 <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	2101      	movs	r1, #1
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fcc9 	bl	8003420 <write_register>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f083 0301 	eor.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <rfm95_init+0x25e>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <rfm95_init+0x260>

	return true;
 8003a9e:	2301      	movs	r3, #1
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	0800de5c 	.word	0x0800de5c
 8003aac:	0800e060 	.word	0x0800e060
 8003ab0:	0800dde8 	.word	0x0800dde8
 8003ab4:	0800de90 	.word	0x0800de90
 8003ab8:	0800decc 	.word	0x0800decc
 8003abc:	0800df04 	.word	0x0800df04
 8003ac0:	0800df40 	.word	0x0800df40
 8003ac4:	0800df78 	.word	0x0800df78
 8003ac8:	0800df9c 	.word	0x0800df9c
 8003acc:	0800dfb8 	.word	0x0800dfb8

08003ad0 <rfm95_goto_sleep>:


bool rfm95_goto_sleep(rfm95_handle_t *handle)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	// Put module to sleep
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	2101      	movs	r1, #1
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fc9f 	bl	8003420 <write_register>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f083 0301 	eor.w	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <rfm95_goto_sleep+0x22>
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <rfm95_goto_sleep+0x24>

	return true;
 8003af2:	2301      	movs	r3, #1
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <process_mac_commands>:


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t answer_index = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	while (index < frame_payload_length) {
 8003b16:	e1a1      	b.n	8003e5c <process_mac_commands+0x360>
		switch (frame_payload[index++])
 8003b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4413      	add	r3, r2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	f200 8195 	bhi.w	8003e5c <process_mac_commands+0x360>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <process_mac_commands+0x3c>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b87 	.word	0x08003b87
 8003b40:	08003ba5 	.word	0x08003ba5
 8003b44:	08003bc3 	.word	0x08003bc3
 8003b48:	08003bdd 	.word	0x08003bdd
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c8f 	.word	0x08003c8f
 8003b54:	08003db3 	.word	0x08003db3
 8003b58:	08003e13 	.word	0x08003e13
 8003b5c:	08003e21 	.word	0x08003e21
 8003b60:	08003e33 	.word	0x08003e33
 8003b64:	08003e41 	.word	0x08003e41
 8003b68:	08003e5d 	.word	0x08003e5d
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8003b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d801      	bhi.n	8003b7a <process_mac_commands+0x7e>
 8003b76:	2300      	movs	r3, #0
 8003b78:	e17b      	b.n	8003e72 <process_mac_commands+0x376>

				index += 1;
 8003b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003b84:	e16a      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8003b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d801      	bhi.n	8003b98 <process_mac_commands+0x9c>
 8003b94:	2300      	movs	r3, #0
 8003b96:	e16c      	b.n	8003e72 <process_mac_commands+0x376>

				index += 2;
 8003b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003ba2:	e15b      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8003ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ba8:	3303      	adds	r3, #3
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d801      	bhi.n	8003bb6 <process_mac_commands+0xba>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e15d      	b.n	8003e72 <process_mac_commands+0x376>

				index += 4;
 8003bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bba:	3304      	adds	r3, #4
 8003bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003bc0:	e14c      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8003bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d801      	bhi.n	8003bd0 <process_mac_commands+0xd4>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e150      	b.n	8003e72 <process_mac_commands+0x376>

				index += 1;
 8003bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003bda:	e13f      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be0:	3304      	adds	r3, #4
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d801      	bhi.n	8003bee <process_mac_commands+0xf2>
 8003bea:	2300      	movs	r3, #0
 8003bec:	e141      	b.n	8003e72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003bee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bf2:	2b30      	cmp	r3, #48	@ 0x30
 8003bf4:	d901      	bls.n	8003bfa <process_mac_commands+0xfe>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e13b      	b.n	8003e72 <process_mac_commands+0x376>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 8003bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003c04:	461a      	mov	r2, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8003c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003c18:	461a      	mov	r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2207      	movs	r2, #7
 8003c20:	701a      	strb	r2, [r3, #0]
				break;
 8003c22:	e11b      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8003c24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c28:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c2a:	d901      	bls.n	8003c30 <process_mac_commands+0x134>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e120      	b.n	8003e72 <process_mac_commands+0x376>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8003c30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <process_mac_commands+0x150>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c46:	4798      	blx	r3
 8003c48:	4603      	mov	r3, r0
 8003c4a:	e000      	b.n	8003c4e <process_mac_commands+0x152>
 8003c4c:	23ff      	movs	r3, #255	@ 0xff
 8003c4e:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 8003c50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4413      	add	r3, r2
 8003c60:	2206      	movs	r2, #6
 8003c62:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8003c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003c6e:	461a      	mov	r2, r3
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	7dfa      	ldrb	r2, [r7, #23]
 8003c76:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8003c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003c82:	461a      	mov	r2, r3
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	7e3a      	ldrb	r2, [r7, #24]
 8003c8a:	701a      	strb	r2, [r3, #0]
				break;
 8003c8c:	e0e6      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c92:	3304      	adds	r3, #4
 8003c94:	461a      	mov	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d801      	bhi.n	8003ca0 <process_mac_commands+0x1a4>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e0e8      	b.n	8003e72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003ca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ca4:	2b30      	cmp	r3, #48	@ 0x30
 8003ca6:	d901      	bls.n	8003cac <process_mac_commands+0x1b0>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e0e2      	b.n	8003e72 <process_mac_commands+0x376>

				uint8_t channel_index = frame_payload[index++];
 8003cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 8003cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				uint8_t frequency_msb = frame_payload[index++];
 8003cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 8003cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8003d1a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	431a      	orrs	r2, r3
 8003d26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	2264      	movs	r2, #100	@ 0x64
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 8003d36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8003d40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 8003d48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d906      	bls.n	8003d5e <process_mac_commands+0x262>
					config_set_channel(handle, channel_index, frequency);
 8003d50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	4619      	mov	r1, r3
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fb93 	bl	8003484 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8003d5e:	7efb      	ldrb	r3, [r7, #27]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d902      	bls.n	8003d6a <process_mac_commands+0x26e>
 8003d64:	7ebb      	ldrb	r3, [r7, #26]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d901      	bls.n	8003d6e <process_mac_commands+0x272>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <process_mac_commands+0x274>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	767b      	strb	r3, [r7, #25]
 8003d72:	7e7b      	ldrb	r3, [r7, #25]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 8003d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d84:	461a      	mov	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	2207      	movs	r2, #7
 8003d8c:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8003d8e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	b25a      	sxtb	r2, r3
 8003d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8003da6:	4619      	mov	r1, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	440b      	add	r3, r1
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
				break;
 8003db0:	e054      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d801      	bhi.n	8003dc0 <process_mac_commands+0x2c4>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e058      	b.n	8003e72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dc4:	2b30      	cmp	r3, #48	@ 0x30
 8003dc6:	d901      	bls.n	8003dcc <process_mac_commands+0x2d0>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e052      	b.n	8003e72 <process_mac_commands+0x376>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8003dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				if (handle->config.rx1_delay == 0) {
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <process_mac_commands+0x300>
					handle->config.rx1_delay = 1;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8003dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003e06:	461a      	mov	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	701a      	strb	r2, [r3, #0]
				break;
 8003e10:	e024      	b.n	8003e5c <process_mac_commands+0x360>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d818      	bhi.n	8003e4e <process_mac_commands+0x352>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e028      	b.n	8003e72 <process_mac_commands+0x376>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e24:	3304      	adds	r3, #4
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d811      	bhi.n	8003e52 <process_mac_commands+0x356>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e01f      	b.n	8003e72 <process_mac_commands+0x376>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d80c      	bhi.n	8003e56 <process_mac_commands+0x35a>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e018      	b.n	8003e72 <process_mac_commands+0x376>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d807      	bhi.n	8003e5a <process_mac_commands+0x35e>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e011      	b.n	8003e72 <process_mac_commands+0x376>
				break;
 8003e4e:	bf00      	nop
 8003e50:	e004      	b.n	8003e5c <process_mac_commands+0x360>
				break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <process_mac_commands+0x360>
				break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <process_mac_commands+0x360>

				break;
 8003e5a:	bf00      	nop
	while (index < frame_payload_length) {
 8003e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f63f ae58 	bhi.w	8003b18 <process_mac_commands+0x1c>
				break;
			}
		}
	}

	*answer_buffer_length = answer_index;
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003e6e:	701a      	strb	r2, [r3, #0]
	return true;
 8003e70:	2301      	movs	r3, #1
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3728      	adds	r7, #40	@ 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop

08003e7c <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e8e:	492b      	ldr	r1, [pc, #172]	@ (8003f3c <receive_at_scheduled_time+0xc0>)
 8003e90:	fba1 1202 	umull	r1, r2, r1, r2
 8003e94:	0992      	lsrs	r2, r2, #6
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	1a8a      	subs	r2, r1, r2
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2140      	movs	r1, #64	@ 0x40
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fabc 	bl	8003420 <write_register>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f083 0301 	eor.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <receive_at_scheduled_time+0x3c>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e03c      	b.n	8003f32 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8003eb8:	22ff      	movs	r2, #255	@ 0xff
 8003eba:	2112      	movs	r1, #18
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff faaf 	bl	8003420 <write_register>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f083 0301 	eor.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <receive_at_scheduled_time+0x56>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e02f      	b.n	8003f32 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8003eea:	2281      	movs	r2, #129	@ 0x81
 8003eec:	2101      	movs	r1, #1
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fa96 	bl	8003420 <write_register>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <receive_at_scheduled_time+0x88>
 8003f00:	2300      	movs	r3, #0
 8003f02:	e016      	b.n	8003f32 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8003f04:	22c8      	movs	r2, #200	@ 0xc8
 8003f06:	2102      	movs	r1, #2
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fbc1 	bl	8003690 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8003f16:	2286      	movs	r2, #134	@ 0x86
 8003f18:	2101      	movs	r1, #1
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fa80 	bl	8003420 <write_register>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <receive_at_scheduled_time+0xb4>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <receive_at_scheduled_time+0xb6>

	return true;
 8003f30:	2301      	movs	r3, #1
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	10624dd3 	.word	0x10624dd3

08003f40 <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8003f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f44:	b08a      	sub	sp, #40	@ 0x28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	2202      	movs	r2, #2
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <calculate_rx_timings+0xc4>)
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	4413      	add	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	0fd9      	lsrs	r1, r3, #31
 8003f8e:	440b      	add	r3, r1
 8003f90:	105b      	asrs	r3, r3, #1
 8003f92:	425b      	negs	r3, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	17da      	asrs	r2, r3, #31
 8003f9c:	469a      	mov	sl, r3
 8003f9e:	4693      	mov	fp, r2
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4698      	mov	r8, r3
 8003fa8:	4691      	mov	r9, r2
 8003faa:	fb08 f20b 	mul.w	r2, r8, fp
 8003fae:	fb0a f309 	mul.w	r3, sl, r9
 8003fb2:	4413      	add	r3, r2
 8003fb4:	fbaa 4508 	umull	r4, r5, sl, r8
 8003fb8:	442b      	add	r3, r5
 8003fba:	461d      	mov	r5, r3
 8003fbc:	4a11      	ldr	r2, [pc, #68]	@ (8004004 <calculate_rx_timings+0xc4>)
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc ffad 	bl	8000f24 <__aeabi_ldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4613      	mov	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8003fdc:	fb03 f202 	mul.w	r2, r3, r2
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fea:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3728      	adds	r7, #40	@ 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004004:	000f4240 	.word	0x000f4240

08004008 <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 800401c:	f107 0320 	add.w	r3, r7, #32
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2207      	movs	r2, #7
 800402c:	49ab      	ldr	r1, [pc, #684]	@ (80042dc <receive_package+0x2d4>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff ff86 	bl	8003f40 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d306      	bcc.n	800404a <receive_package+0x42>
 800403c:	4ba8      	ldr	r3, [pc, #672]	@ (80042e0 <receive_package+0x2d8>)
 800403e:	4aa9      	ldr	r2, [pc, #676]	@ (80042e4 <receive_package+0x2dc>)
 8004040:	f240 11df 	movw	r1, #479	@ 0x1df
 8004044:	48a8      	ldr	r0, [pc, #672]	@ (80042e8 <receive_package+0x2e0>)
 8004046:	f008 feeb 	bl	800ce20 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800404a:	2272      	movs	r2, #114	@ 0x72
 800404c:	211d      	movs	r1, #29
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff f9e6 	bl	8003420 <write_register>
 8004054:	4603      	mov	r3, r0
 8004056:	f083 0301 	eor.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <receive_package+0x5c>
 8004060:	2300      	movs	r3, #0
 8004062:	e136      	b.n	80042d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	211e      	movs	r1, #30
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff f9d0 	bl	8003420 <write_register>
 8004080:	4603      	mov	r3, r0
 8004082:	f083 0301 	eor.w	r3, r3, #1
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <receive_package+0x88>
 800408c:	2300      	movs	r3, #0
 800408e:	e120      	b.n	80042d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8004090:	2204      	movs	r2, #4
 8004092:	2126      	movs	r1, #38	@ 0x26
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff f9c3 	bl	8003420 <write_register>
 800409a:	4603      	mov	r3, r0
 800409c:	f083 0301 	eor.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <receive_package+0xa2>
 80040a6:	2300      	movs	r3, #0
 80040a8:	e113      	b.n	80042d2 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	211f      	movs	r1, #31
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff f9b4 	bl	8003420 <write_register>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f083 0301 	eor.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <receive_package+0xc0>
 80040c4:	2300      	movs	r3, #0
 80040c6:	e104      	b.n	80042d2 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 80040c8:	2267      	movs	r2, #103	@ 0x67
 80040ca:	2133      	movs	r1, #51	@ 0x33
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff f9a7 	bl	8003420 <write_register>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <receive_package+0xda>
 80040de:	2300      	movs	r3, #0
 80040e0:	e0f7      	b.n	80042d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 80040e2:	2219      	movs	r2, #25
 80040e4:	213b      	movs	r1, #59	@ 0x3b
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff f99a 	bl	8003420 <write_register>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f083 0301 	eor.w	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <receive_package+0xf4>
 80040f8:	2300      	movs	r3, #0
 80040fa:	e0ea      	b.n	80042d2 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff febb 	bl	8003e7c <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff faf2 	bl	80036f0 <wait_for_rx_irqs>
 800410c:	4603      	mov	r3, r0
 800410e:	f083 0301 	eor.w	r3, r3, #1
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d07a      	beq.n	800420e <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004118:	2280      	movs	r2, #128	@ 0x80
 800411a:	2101      	movs	r1, #1
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff f97f 	bl	8003420 <write_register>
 8004122:	4603      	mov	r3, r0
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <receive_package+0x12a>
 800412e:	2300      	movs	r3, #0
 8004130:	e0cf      	b.n	80042d2 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004138:	2b02      	cmp	r3, #2
 800413a:	d166      	bne.n	800420a <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	f107 0318 	add.w	r3, r7, #24
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	220c      	movs	r2, #12
 800414c:	4963      	ldr	r1, [pc, #396]	@ (80042dc <receive_package+0x2d4>)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fef6 	bl	8003f40 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8004154:	4965      	ldr	r1, [pc, #404]	@ (80042ec <receive_package+0x2e4>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff fa14 	bl	8003584 <configure_frequency>
 800415c:	4603      	mov	r3, r0
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <receive_package+0x164>
 8004168:	2300      	movs	r3, #0
 800416a:	e0b2      	b.n	80042d2 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 800416c:	22c2      	movs	r2, #194	@ 0xc2
 800416e:	211d      	movs	r1, #29
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff f955 	bl	8003420 <write_register>
 8004176:	4603      	mov	r3, r0
 8004178:	f083 0301 	eor.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <receive_package+0x17e>
 8004182:	2300      	movs	r3, #0
 8004184:	e0a5      	b.n	80042d2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	211e      	movs	r1, #30
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff f93f 	bl	8003420 <write_register>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <receive_package+0x1aa>
 80041ae:	2300      	movs	r3, #0
 80041b0:	e08f      	b.n	80042d2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80041b2:	2204      	movs	r2, #4
 80041b4:	2126      	movs	r1, #38	@ 0x26
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff f932 	bl	8003420 <write_register>
 80041bc:	4603      	mov	r3, r0
 80041be:	f083 0301 	eor.w	r3, r3, #1
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <receive_package+0x1c4>
 80041c8:	2300      	movs	r3, #0
 80041ca:	e082      	b.n	80042d2 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	211f      	movs	r1, #31
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff f923 	bl	8003420 <write_register>
 80041da:	4603      	mov	r3, r0
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <receive_package+0x1e2>
 80041e6:	2300      	movs	r3, #0
 80041e8:	e073      	b.n	80042d2 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	4619      	mov	r1, r3
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fe44 	bl	8003e7c <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fa7b 	bl	80036f0 <wait_for_rx_irqs>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f083 0301 	eor.w	r3, r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8004206:	2301      	movs	r3, #1
 8004208:	e063      	b.n	80042d2 <receive_package+0x2ca>
			}
		}

		return true;
 800420a:	2301      	movs	r3, #1
 800420c:	e061      	b.n	80042d2 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800420e:	f107 021f 	add.w	r2, r7, #31
 8004212:	2301      	movs	r3, #1
 8004214:	2112      	movs	r1, #18
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff f8c6 	bl	80033a8 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 800421c:	7ffb      	ldrb	r3, [r7, #31]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <receive_package+0x222>
		return true;
 8004226:	2301      	movs	r3, #1
 8004228:	e053      	b.n	80042d2 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 800422a:	f107 021e 	add.w	r2, r7, #30
 800422e:	2301      	movs	r3, #1
 8004230:	2119      	movs	r1, #25
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff f8b8 	bl	80033a8 <read_register>
 8004238:	4603      	mov	r3, r0
 800423a:	f083 0301 	eor.w	r3, r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <receive_package+0x240>
 8004244:	2300      	movs	r3, #0
 8004246:	e044      	b.n	80042d2 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8004248:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800424c:	2b00      	cmp	r3, #0
 800424e:	da00      	bge.n	8004252 <receive_package+0x24a>
 8004250:	3303      	adds	r3, #3
 8004252:	109b      	asrs	r3, r3, #2
 8004254:	b25a      	sxtb	r2, r3
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 800425a:	f107 021d 	add.w	r2, r7, #29
 800425e:	2301      	movs	r3, #1
 8004260:	2113      	movs	r1, #19
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff f8a0 	bl	80033a8 <read_register>
 8004268:	4603      	mov	r3, r0
 800426a:	f083 0301 	eor.w	r3, r3, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <receive_package+0x270>
 8004274:	2300      	movs	r3, #0
 8004276:	e02c      	b.n	80042d2 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8004278:	2200      	movs	r2, #0
 800427a:	210d      	movs	r1, #13
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff f8cf 	bl	8003420 <write_register>
 8004282:	4603      	mov	r3, r0
 8004284:	f083 0301 	eor.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <receive_package+0x28a>
 800428e:	2300      	movs	r3, #0
 8004290:	e01f      	b.n	80042d2 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8004292:	7f7b      	ldrb	r3, [r7, #29]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2100      	movs	r1, #0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff f885 	bl	80033a8 <read_register>
 800429e:	4603      	mov	r3, r0
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <receive_package+0x2a6>
 80042aa:	2300      	movs	r3, #0
 80042ac:	e011      	b.n	80042d2 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	2101      	movs	r1, #1
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff f8b4 	bl	8003420 <write_register>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <receive_package+0x2c0>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e004      	b.n	80042d2 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80042c8:	7f7b      	ldrb	r3, [r7, #29]
 80042ca:	461a      	mov	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]
	return true;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3728      	adds	r7, #40	@ 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	0001e848 	.word	0x0001e848
 80042e0:	0800dfe4 	.word	0x0800dfe4
 80042e4:	0800e06c 	.word	0x0800e06c
 80042e8:	0800dde8 	.word	0x0800dde8
 80042ec:	33d3e608 	.word	0x33d3e608

080042f0 <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff f99a 	bl	800363c <configure_channel>
 8004308:	4603      	mov	r3, r0
 800430a:	f083 0301 	eor.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <send_package+0x28>
 8004314:	2300      	movs	r3, #0
 8004316:	e0d9      	b.n	80044cc <send_package+0x1dc>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8004318:	2272      	movs	r2, #114	@ 0x72
 800431a:	211d      	movs	r1, #29
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff f87f 	bl	8003420 <write_register>
 8004322:	4603      	mov	r3, r0
 8004324:	f083 0301 	eor.w	r3, r3, #1
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <send_package+0x42>
 800432e:	2300      	movs	r3, #0
 8004330:	e0cc      	b.n	80044cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8004332:	2274      	movs	r2, #116	@ 0x74
 8004334:	211e      	movs	r1, #30
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff f872 	bl	8003420 <write_register>
 800433c:	4603      	mov	r3, r0
 800433e:	f083 0301 	eor.w	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <send_package+0x5c>
 8004348:	2300      	movs	r3, #0
 800434a:	e0bf      	b.n	80044cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800434c:	2204      	movs	r2, #4
 800434e:	2126      	movs	r1, #38	@ 0x26
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff f865 	bl	8003420 <write_register>
 8004356:	4603      	mov	r3, r0
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <send_package+0x76>
 8004362:	2300      	movs	r3, #0
 8004364:	e0b2      	b.n	80044cc <send_package+0x1dc>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8004366:	2227      	movs	r2, #39	@ 0x27
 8004368:	2133      	movs	r1, #51	@ 0x33
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff f858 	bl	8003420 <write_register>
 8004370:	4603      	mov	r3, r0
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <send_package+0x90>
 800437c:	2300      	movs	r3, #0
 800437e:	e0a5      	b.n	80044cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8004380:	221d      	movs	r2, #29
 8004382:	213b      	movs	r1, #59	@ 0x3b
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff f84b 	bl	8003420 <write_register>
 800438a:	4603      	mov	r3, r0
 800438c:	f083 0301 	eor.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <send_package+0xaa>
 8004396:	2300      	movs	r3, #0
 8004398:	e098      	b.n	80044cc <send_package+0x1dc>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	2122      	movs	r1, #34	@ 0x22
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff f83c 	bl	8003420 <write_register>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f083 0301 	eor.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <send_package+0xc8>
 80043b4:	2300      	movs	r3, #0
 80043b6:	e089      	b.n	80044cc <send_package+0x1dc>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff f82f 	bl	8003420 <write_register>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f083 0301 	eor.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <send_package+0xe2>
 80043ce:	2300      	movs	r3, #0
 80043d0:	e07c      	b.n	80044cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80043d2:	22ff      	movs	r2, #255	@ 0xff
 80043d4:	2112      	movs	r1, #18
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff f822 	bl	8003420 <write_register>
 80043dc:	4603      	mov	r3, r0
 80043de:	f083 0301 	eor.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <send_package+0xfc>
 80043e8:	2300      	movs	r3, #0
 80043ea:	e06f      	b.n	80044cc <send_package+0x1dc>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80043fc:	2281      	movs	r2, #129	@ 0x81
 80043fe:	2101      	movs	r1, #1
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff f80d 	bl	8003420 <write_register>
 8004406:	4603      	mov	r3, r0
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <send_package+0x126>
 8004412:	2300      	movs	r3, #0
 8004414:	e05a      	b.n	80044cc <send_package+0x1dc>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8004416:	22c8      	movs	r2, #200	@ 0xc8
 8004418:	2102      	movs	r1, #2
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff f938 	bl	8003690 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8004420:	2280      	movs	r2, #128	@ 0x80
 8004422:	210d      	movs	r1, #13
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7fe fffb 	bl	8003420 <write_register>
 800442a:	4603      	mov	r3, r0
 800442c:	f083 0301 	eor.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <send_package+0x14a>
 8004436:	2300      	movs	r3, #0
 8004438:	e048      	b.n	80044cc <send_package+0x1dc>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e00b      	b.n	8004458 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	2100      	movs	r1, #0
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7fe ffe7 	bl	8003420 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3301      	adds	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d3ef      	bcc.n	8004440 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8004460:	2283      	movs	r2, #131	@ 0x83
 8004462:	2101      	movs	r1, #1
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7fe ffdb 	bl	8003420 <write_register>
 800446a:	4603      	mov	r3, r0
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <send_package+0x18a>
 8004476:	2300      	movs	r3, #0
 8004478:	e028      	b.n	80044cc <send_package+0x1dc>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 800447a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800447e:	2100      	movs	r1, #0
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff f905 	bl	8003690 <wait_for_irq>
 8004486:	4603      	mov	r3, r0
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <send_package+0x1a6>
 8004492:	2300      	movs	r3, #0
 8004494:	e01a      	b.n	80044cc <send_package+0x1dc>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80044a0:	2280      	movs	r2, #128	@ 0x80
 80044a2:	2101      	movs	r1, #1
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7fe ffbb 	bl	8003420 <write_register>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f083 0301 	eor.w	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <send_package+0x1ca>
 80044b6:	2300      	movs	r3, #0
 80044b8:	e008      	b.n	80044cc <send_package+0x1dc>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80044c0:	3301      	adds	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

	return true;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b08d      	sub	sp, #52	@ 0x34
 80044d8:	af04      	add	r7, sp, #16
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	330d      	adds	r3, #13
 80044ea:	2b40      	cmp	r3, #64	@ 0x40
 80044ec:	d906      	bls.n	80044fc <encode_phy_payload+0x28>
 80044ee:	4b51      	ldr	r3, [pc, #324]	@ (8004634 <encode_phy_payload+0x160>)
 80044f0:	4a51      	ldr	r2, [pc, #324]	@ (8004638 <encode_phy_payload+0x164>)
 80044f2:	f240 216a 	movw	r1, #618	@ 0x26a
 80044f6:	4851      	ldr	r0, [pc, #324]	@ (800463c <encode_phy_payload+0x168>)
 80044f8:	f008 fc92 	bl	800ce20 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	7d52      	ldrb	r2, [r2, #21]
 800450a:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3302      	adds	r3, #2
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	7d12      	ldrb	r2, [r2, #20]
 8004514:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3303      	adds	r3, #3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	7cd2      	ldrb	r2, [r2, #19]
 800451e:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3304      	adds	r3, #4
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	7c92      	ldrb	r2, [r2, #18]
 8004528:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3305      	adds	r3, #5
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3306      	adds	r3, #6
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b29a      	uxth	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3307      	adds	r3, #7
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3308      	adds	r3, #8
 8004556:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800455a:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	3309      	adds	r3, #9
 8004560:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4413      	add	r3, r2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4618      	mov	r0, r3
 800456e:	f008 fe18 	bl	800d1a2 <memcpy>
	if (port == 0) {
 8004572:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004576:	2b00      	cmp	r3, #0
 8004578:	d113      	bne.n	80045a2 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	18d0      	adds	r0, r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	b2d9      	uxtb	r1, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800458a:	461c      	mov	r4, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3316      	adds	r3, #22
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	3212      	adds	r2, #18
 8004594:	9201      	str	r2, [sp, #4]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2300      	movs	r3, #0
 800459a:	4622      	mov	r2, r4
 800459c:	f008 f965 	bl	800c86a <Encrypt_Payload>
 80045a0:	e012      	b.n	80045c8 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	18d0      	adds	r0, r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2d9      	uxtb	r1, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80045b2:	461c      	mov	r4, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3326      	adds	r3, #38	@ 0x26
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	3212      	adds	r2, #18
 80045bc:	9201      	str	r2, [sp, #4]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2300      	movs	r3, #0
 80045c2:	4622      	mov	r2, r4
 80045c4:	f008 f951 	bl	800c86a <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	b2d8      	uxtb	r0, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80045da:	461c      	mov	r4, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3316      	adds	r3, #22
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	3212      	adds	r2, #18
 80045e4:	f107 0114 	add.w	r1, r7, #20
 80045e8:	9202      	str	r2, [sp, #8]
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	2300      	movs	r3, #0
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4623      	mov	r3, r4
 80045f2:	4602      	mov	r2, r0
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f008 f9ec 	bl	800c9d2 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 80045fa:	2300      	movs	r3, #0
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e00d      	b.n	800461c <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8004600:	7ffa      	ldrb	r2, [r7, #31]
 8004602:	7ff9      	ldrb	r1, [r7, #31]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	440b      	add	r3, r1
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	440b      	add	r3, r1
 800460c:	3220      	adds	r2, #32
 800460e:	443a      	add	r2, r7
 8004610:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004614:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	3301      	adds	r3, #1
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	7ffb      	ldrb	r3, [r7, #31]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d9ee      	bls.n	8004600 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	3304      	adds	r3, #4
 8004626:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8004628:	69bb      	ldr	r3, [r7, #24]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3724      	adds	r7, #36	@ 0x24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd90      	pop	{r4, r7, pc}
 8004632:	bf00      	nop
 8004634:	0800e000 	.word	0x0800e000
 8004638:	0800e07c 	.word	0x0800e07c
 800463c:	0800dde8 	.word	0x0800dde8

08004640 <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b08d      	sub	sp, #52	@ 0x34
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b60      	cmp	r3, #96	@ 0x60
 8004656:	d001      	beq.n	800465c <decode_phy_payload+0x1c>
		return false;
 8004658:	2300      	movs	r3, #0
 800465a:	e0ab      	b.n	80047b4 <decode_phy_payload+0x174>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3301      	adds	r3, #1
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	7d5b      	ldrb	r3, [r3, #21]
 8004666:	429a      	cmp	r2, r3
 8004668:	d114      	bne.n	8004694 <decode_phy_payload+0x54>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3302      	adds	r3, #2
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	7d1b      	ldrb	r3, [r3, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	d10d      	bne.n	8004694 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	3303      	adds	r3, #3
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d106      	bne.n	8004694 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3304      	adds	r3, #4
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	7c9b      	ldrb	r3, [r3, #18]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <decode_phy_payload+0x58>
		return false;
 8004694:	2300      	movs	r3, #0
 8004696:	e08d      	b.n	80047b4 <decode_phy_payload+0x174>
	}

	uint8_t frame_control = payload_buf[5];
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	795b      	ldrb	r3, [r3, #5]
 800469c:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 800469e:	7ffb      	ldrb	r3, [r7, #31]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3307      	adds	r3, #7
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b21a      	sxth	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3306      	adds	r3, #6
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b21b      	sxth	r3, r3
 80046be:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046c6:	8bba      	ldrh	r2, [r7, #28]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d201      	bcs.n	80046d0 <decode_phy_payload+0x90>
		return false;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e071      	b.n	80047b4 <decode_phy_payload+0x174>
	}
	handle->config.rx_frame_count = rx_frame_count;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8bba      	ldrh	r2, [r7, #28]
 80046d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	3b04      	subs	r3, #4
 80046dc:	b2d8      	uxtb	r0, r3
 80046de:	8bbc      	ldrh	r4, [r7, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3316      	adds	r3, #22
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	3212      	adds	r2, #18
 80046e8:	f107 0114 	add.w	r1, r7, #20
 80046ec:	9202      	str	r2, [sp, #8]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	2301      	movs	r3, #1
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4623      	mov	r3, r4
 80046f6:	4602      	mov	r2, r0
 80046f8:	68b8      	ldr	r0, [r7, #8]
 80046fa:	f008 f96a 	bl	800c9d2 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	3b04      	subs	r3, #4
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	18d1      	adds	r1, r2, r3
 8004706:	f107 0314 	add.w	r3, r7, #20
 800470a:	2204      	movs	r2, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f008 fcbc 	bl	800d08a <memcmp>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <decode_phy_payload+0xdc>
		return false;
 8004718:	2300      	movs	r3, #0
 800471a:	e04b      	b.n	80047b4 <decode_phy_payload+0x174>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f1a3 020c 	sub.w	r2, r3, #12
 8004722:	7fbb      	ldrb	r3, [r7, #30]
 8004724:	429a      	cmp	r2, r3
 8004726:	d10b      	bne.n	8004740 <decode_phy_payload+0x100>
		*frame_port = 0;
 8004728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f103 0208 	add.w	r2, r3, #8
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	7fba      	ldrb	r2, [r7, #30]
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e038      	b.n	80047b2 <decode_phy_payload+0x172>

	} else {
		*frame_port = payload_buf[8];
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	7a1a      	ldrb	r2, [r3, #8]
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8004748:	7fbb      	ldrb	r3, [r7, #30]
 800474a:	3309      	adds	r3, #9
 800474c:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	3b04      	subs	r3, #4
 8004752:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8004754:	7eba      	ldrb	r2, [r7, #26]
 8004756:	7efb      	ldrb	r3, [r7, #27]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 800475c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <decode_phy_payload+0x144>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 8004764:	7efb      	ldrb	r3, [r7, #27]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	18d0      	adds	r0, r2, r3
 800476a:	8bbc      	ldrh	r4, [r7, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3316      	adds	r3, #22
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	3212      	adds	r2, #18
 8004774:	7e79      	ldrb	r1, [r7, #25]
 8004776:	9201      	str	r2, [sp, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2301      	movs	r3, #1
 800477c:	4622      	mov	r2, r4
 800477e:	f008 f874 	bl	800c86a <Encrypt_Payload>
 8004782:	e00e      	b.n	80047a2 <decode_phy_payload+0x162>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 8004784:	7efb      	ldrb	r3, [r7, #27]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	18d0      	adds	r0, r2, r3
 800478a:	8bbc      	ldrh	r4, [r7, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3326      	adds	r3, #38	@ 0x26
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	3212      	adds	r2, #18
 8004794:	7e79      	ldrb	r1, [r7, #25]
 8004796:	9201      	str	r2, [sp, #4]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2301      	movs	r3, #1
 800479c:	4622      	mov	r2, r4
 800479e:	f008 f864 	bl	800c86a <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 80047a2:	7efb      	ldrb	r3, [r7, #27]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	441a      	add	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	7e7a      	ldrb	r2, [r7, #25]
 80047b0:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80047b2:	2301      	movs	r3, #1
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3724      	adds	r7, #36	@ 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}

080047bc <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	73bb      	strb	r3, [r7, #14]
 80047cc:	e010      	b.n	80047f0 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80047d4:	461a      	mov	r2, r3
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	fa42 f303 	asr.w	r3, r2, r3
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <select_random_channel+0x2e>
			channel_count++;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	3301      	adds	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 80047ea:	7bbb      	ldrb	r3, [r7, #14]
 80047ec:	3301      	adds	r3, #1
 80047ee:	73bb      	strb	r3, [r7, #14]
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	d9eb      	bls.n	80047ce <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4798      	blx	r3
 8004800:	4603      	mov	r3, r0
 8004802:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8004804:	2300      	movs	r3, #0
 8004806:	733b      	strb	r3, [r7, #12]
 8004808:	e015      	b.n	8004836 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8004810:	461a      	mov	r2, r3
 8004812:	7b3b      	ldrb	r3, [r7, #12]
 8004814:	fa42 f303 	asr.w	r3, r2, r3
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <select_random_channel+0x74>
			if (random_channel == 0) {
 8004820:	7b7b      	ldrb	r3, [r7, #13]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <select_random_channel+0x6e>
				return i;
 8004826:	7b3b      	ldrb	r3, [r7, #12]
 8004828:	e009      	b.n	800483e <select_random_channel+0x82>
			} else {
				random_channel--;
 800482a:	7b7b      	ldrb	r3, [r7, #13]
 800482c:	3b01      	subs	r3, #1
 800482e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8004830:	7b3b      	ldrb	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	733b      	strb	r3, [r7, #12]
 8004836:	7b3b      	ldrb	r3, [r7, #12]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d9e6      	bls.n	800480a <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b0aa      	sub	sp, #168	@ 0xa8
 800484a:	af02      	add	r7, sp, #8
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8004852:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f008 fc25 	bl	800d0aa <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8004860:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004864:	2301      	movs	r3, #1
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff fe31 	bl	80044d4 <encode_phy_payload>
 8004872:	4603      	mov	r3, r0
 8004874:	65bb      	str	r3, [r7, #88]	@ 0x58

	uint8_t random_channel = select_random_channel(handle);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ffa0 	bl	80047bc <select_random_channel>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks))
 8004882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004884:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8004888:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800488c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	4603      	mov	r3, r0
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff fd2b 	bl	80042f0 <send_package>
 800489a:	4603      	mov	r3, r0
 800489c:	f083 0301 	eor.w	r3, r3, #1
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <rfm95_send_receive_cycle+0x6e>
	{
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80048a6:	2280      	movs	r2, #128	@ 0x80
 80048a8:	2101      	movs	r1, #1
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7fe fdb8 	bl	8003420 <write_register>
		return false;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e0ad      	b.n	8004a10 <rfm95_send_receive_cycle+0x1ca>
	}


	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 80048b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80048b8:	2240      	movs	r2, #64	@ 0x40
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f008 fbf4 	bl	800d0aa <memset>
	phy_payload_len = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8094 	beq.w	80049fa <rfm95_send_receive_cycle+0x1b4>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 80048d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80048d8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80048dc:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4603      	mov	r3, r0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fb8f 	bl	8004008 <receive_package>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f083 0301 	eor.w	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d010      	beq.n	8004918 <rfm95_send_receive_cycle+0xd2>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80048f6:	2280      	movs	r2, #128	@ 0x80
 80048f8:	2101      	movs	r1, #1
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7fe fd90 	bl	8003420 <write_register>
			if (handle->save_config) {
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <rfm95_send_receive_cycle+0xce>
				handle->save_config(&(handle->config));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	3260      	adds	r2, #96	@ 0x60
 8004910:	4610      	mov	r0, r2
 8004912:	4798      	blx	r3
			}
			return false;
 8004914:	2300      	movs	r3, #0
 8004916:	e07b      	b.n	8004a10 <rfm95_send_receive_cycle+0x1ca>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8004918:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800491a:	2b00      	cmp	r3, #0
 800491c:	d06d      	beq.n	80049fa <rfm95_send_receive_cycle+0x1b4>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 8004924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004926:	b2da      	uxtb	r2, r3
 8004928:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800492c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004930:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4603      	mov	r3, r0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fe7e 	bl	8004640 <decode_phy_payload>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d057      	beq.n	80049fa <rfm95_send_receive_cycle+0x1b4>

				// Process Mac Commands
				if (frame_port == 0) {
 800494a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800494e:	2b00      	cmp	r3, #0
 8004950:	d153      	bne.n	80049fa <rfm95_send_receive_cycle+0x1b4>

					uint8_t mac_response_data[51] = {0};
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	2233      	movs	r2, #51	@ 0x33
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f008 fba5 	bl	800d0aa <memset>
					uint8_t mac_response_len = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 8004966:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004968:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800496c:	4618      	mov	r0, r3
 800496e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004972:	f107 0214 	add.w	r2, r7, #20
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f107 0349 	add.w	r3, r7, #73	@ 0x49
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	4602      	mov	r2, r0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff f8ba 	bl	8003afc <process_mac_commands>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d035      	beq.n	80049fa <rfm95_send_receive_cycle+0x1b4>
 800498e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004992:	2b00      	cmp	r3, #0
 8004994:	d031      	beq.n	80049fa <rfm95_send_receive_cycle+0x1b4>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 8004996:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800499a:	4618      	mov	r0, r3
 800499c:	f107 0214 	add.w	r2, r7, #20
 80049a0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80049a4:	2300      	movs	r3, #0
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fd92 	bl	80044d4 <encode_phy_payload>
 80049b0:	4603      	mov	r3, r0
 80049b2:	65bb      	str	r3, [r7, #88]	@ 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 80049b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049b6:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 80049ba:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80049be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fc92 	bl	80042f0 <send_package>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <rfm95_send_receive_cycle+0x1b4>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80049d8:	2280      	movs	r2, #128	@ 0x80
 80049da:	2101      	movs	r1, #1
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7fe fd1f 	bl	8003420 <write_register>
							if (handle->save_config) {
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <rfm95_send_receive_cycle+0x1b0>
								handle->save_config(&(handle->config));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	3260      	adds	r2, #96	@ 0x60
 80049f2:	4610      	mov	r0, r2
 80049f4:	4798      	blx	r3
							}
							return false;
 80049f6:	2300      	movs	r3, #0
			return false;
 80049f8:	e00a      	b.n	8004a10 <rfm95_send_receive_cycle+0x1ca>
				}
			}
		}
	}

	if (handle->save_config) {
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <rfm95_send_receive_cycle+0x1c8>
		handle->save_config(&(handle->config));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	3260      	adds	r2, #96	@ 0x60
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4798      	blx	r3
	}

	return true;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	37a0      	adds	r7, #160	@ 0xa0
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	78fc      	ldrb	r4, [r7, #3]
 8004a2a:	4798      	blx	r3
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	6059      	str	r1, [r3, #4]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}
	...

08004a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004a4a:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a54:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6213      	str	r3, [r2, #32]
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	6253      	str	r3, [r2, #36]	@ 0x24
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_MspInit+0x58>)
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	@ 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	@ (8004b24 <HAL_ADC_MspInit+0x84>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d12b      	bne.n	8004b1a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004acc:	6213      	str	r3, [r2, #32]
 8004ace:	4b16      	ldr	r3, [pc, #88]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ada:	4b13      	ldr	r3, [pc, #76]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	61d3      	str	r3, [r2, #28]
 8004ae6:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_ADC_MspInit+0x88>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004af2:	2306      	movs	r3, #6
 8004af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004af6:	2303      	movs	r3, #3
 8004af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	4619      	mov	r1, r3
 8004b04:	4809      	ldr	r0, [pc, #36]	@ (8004b2c <HAL_ADC_MspInit+0x8c>)
 8004b06:	f001 fd7b 	bl	8006600 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	2012      	movs	r0, #18
 8004b10:	f001 fb43 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004b14:	2012      	movs	r0, #18
 8004b16:	f001 fb5c 	bl	80061d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004b1a:	bf00      	nop
 8004b1c:	3728      	adds	r7, #40	@ 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40012400 	.word	0x40012400
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020000 	.word	0x40020000

08004b30 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_ADC_MspDeInit+0x34>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10c      	bne.n	8004b5c <HAL_ADC_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_ADC_MspDeInit+0x38>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <HAL_ADC_MspDeInit+0x38>)
 8004b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b4c:	6213      	str	r3, [r2, #32]

    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    HAL_GPIO_DeInit(GPIOA, AN_BAT_Pin|AN_E_HUM_Pin);
 8004b4e:	2106      	movs	r1, #6
 8004b50:	4806      	ldr	r0, [pc, #24]	@ (8004b6c <HAL_ADC_MspDeInit+0x3c>)
 8004b52:	f001 fed5 	bl	8006900 <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8004b56:	2012      	movs	r0, #18
 8004b58:	f001 fb49 	bl	80061ee <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40012400 	.word	0x40012400
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40020000 	.word	0x40020000

08004b70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	@ 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b78:	f107 031c 	add.w	r3, r7, #28
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c78 <HAL_I2C_MspInit+0x108>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d138      	bne.n	8004c04 <HAL_I2C_MspInit+0x94>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b92:	4b3a      	ldr	r3, [pc, #232]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4a39      	ldr	r2, [pc, #228]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004b98:	f043 0302 	orr.w	r3, r3, #2
 8004b9c:	61d3      	str	r3, [r2, #28]
 8004b9e:	4b37      	ldr	r3, [pc, #220]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004baa:	23c0      	movs	r3, #192	@ 0xc0
 8004bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bae:	2312      	movs	r3, #18
 8004bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bba:	2304      	movs	r3, #4
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bbe:	f107 031c 	add.w	r3, r7, #28
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	482e      	ldr	r0, [pc, #184]	@ (8004c80 <HAL_I2C_MspInit+0x110>)
 8004bc6:	f001 fd1b 	bl	8006600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bca:	4b2c      	ldr	r3, [pc, #176]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	4a2b      	ldr	r2, [pc, #172]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bd4:	6253      	str	r3, [r2, #36]	@ 0x24
 8004bd6:	4b29      	ldr	r3, [pc, #164]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	201f      	movs	r0, #31
 8004be8:	f001 fad7 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004bec:	201f      	movs	r0, #31
 8004bee:	f001 faf0 	bl	80061d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2020      	movs	r0, #32
 8004bf8:	f001 facf 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004bfc:	2020      	movs	r0, #32
 8004bfe:	f001 fae8 	bl	80061d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004c02:	e035      	b.n	8004c70 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <HAL_I2C_MspInit+0x114>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d130      	bne.n	8004c70 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4a1a      	ldr	r2, [pc, #104]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	61d3      	str	r3, [r2, #28]
 8004c1a:	4b18      	ldr	r3, [pc, #96]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c2c:	2312      	movs	r3, #18
 8004c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c34:	2303      	movs	r3, #3
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c38:	2304      	movs	r3, #4
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3c:	f107 031c 	add.w	r3, r7, #28
 8004c40:	4619      	mov	r1, r3
 8004c42:	480f      	ldr	r0, [pc, #60]	@ (8004c80 <HAL_I2C_MspInit+0x110>)
 8004c44:	f001 fcdc 	bl	8006600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c48:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c52:	6253      	str	r3, [r2, #36]	@ 0x24
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_I2C_MspInit+0x10c>)
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2021      	movs	r0, #33	@ 0x21
 8004c66:	f001 fa98 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004c6a:	2021      	movs	r0, #33	@ 0x21
 8004c6c:	f001 fab1 	bl	80061d2 <HAL_NVIC_EnableIRQ>
}
 8004c70:	bf00      	nop
 8004c72:	3730      	adds	r7, #48	@ 0x30
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40005400 	.word	0x40005400
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40005800 	.word	0x40005800

08004c88 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <HAL_RTC_MspInit+0x30>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d10a      	bne.n	8004cb0 <HAL_RTC_MspInit+0x28>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c9a:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <HAL_RTC_MspInit+0x34>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2029      	movs	r0, #41	@ 0x29
 8004ca6:	f001 fa78 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004caa:	2029      	movs	r0, #41	@ 0x29
 8004cac:	f001 fa91 	bl	80061d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40002800 	.word	0x40002800
 8004cbc:	424706d8 	.word	0x424706d8

08004cc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	@ 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_SPI_MspInit+0xd8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d128      	bne.n	8004d34 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfa:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4a27      	ldr	r2, [pc, #156]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	61d3      	str	r3, [r2, #28]
 8004d06:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004d12:	23e0      	movs	r3, #224	@ 0xe0
 8004d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d16:	2302      	movs	r3, #2
 8004d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d22:	2305      	movs	r3, #5
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d26:	f107 031c 	add.w	r3, r7, #28
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	481c      	ldr	r0, [pc, #112]	@ (8004da0 <HAL_SPI_MspInit+0xe0>)
 8004d2e:	f001 fc67 	bl	8006600 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d32:	e02d      	b.n	8004d90 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_SPI_MspInit+0xe4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d128      	bne.n	8004d90 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d3e:	4b17      	ldr	r3, [pc, #92]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d48:	6253      	str	r3, [r2, #36]	@ 0x24
 8004d4a:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d56:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	61d3      	str	r3, [r2, #28]
 8004d62:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <HAL_SPI_MspInit+0xdc>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d6e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d74:	2302      	movs	r3, #2
 8004d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d80:	2305      	movs	r3, #5
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4807      	ldr	r0, [pc, #28]	@ (8004da8 <HAL_SPI_MspInit+0xe8>)
 8004d8c:	f001 fc38 	bl	8006600 <HAL_GPIO_Init>
}
 8004d90:	bf00      	nop
 8004d92:	3730      	adds	r7, #48	@ 0x30
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40013000 	.word	0x40013000
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40020000 	.word	0x40020000
 8004da4:	40003800 	.word	0x40003800
 8004da8:	40020400 	.word	0x40020400

08004dac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dbc:	d114      	bne.n	8004de8 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dbe:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	4a18      	ldr	r2, [pc, #96]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6253      	str	r3, [r2, #36]	@ 0x24
 8004dca:	4b16      	ldr	r3, [pc, #88]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	201c      	movs	r0, #28
 8004ddc:	f001 f9dd 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004de0:	201c      	movs	r0, #28
 8004de2:	f001 f9f6 	bl	80061d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004de6:	e018      	b.n	8004e1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0e      	ldr	r2, [pc, #56]	@ (8004e28 <HAL_TIM_Base_MspInit+0x7c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d113      	bne.n	8004e1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004df2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	4a0b      	ldr	r2, [pc, #44]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	6253      	str	r3, [r2, #36]	@ 0x24
 8004dfe:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_TIM_Base_MspInit+0x78>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	201d      	movs	r0, #29
 8004e10:	f001 f9c3 	bl	800619a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e14:	201d      	movs	r0, #29
 8004e16:	f001 f9dc 	bl	80061d2 <HAL_NVIC_EnableIRQ>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40000400 	.word	0x40000400

08004e2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	@ 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a17      	ldr	r2, [pc, #92]	@ (8004ea8 <HAL_UART_MspInit+0x7c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d128      	bne.n	8004ea0 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e4e:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e66:	4b11      	ldr	r3, [pc, #68]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4a10      	ldr	r2, [pc, #64]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	61d3      	str	r3, [r2, #28]
 8004e72:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <HAL_UART_MspInit+0x80>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e84:	2302      	movs	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e90:	2307      	movs	r3, #7
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4805      	ldr	r0, [pc, #20]	@ (8004eb0 <HAL_UART_MspInit+0x84>)
 8004e9c:	f001 fbb0 	bl	8006600 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004ea0:	bf00      	nop
 8004ea2:	3728      	adds	r7, #40	@ 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40020000 	.word	0x40020000

08004eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <NMI_Handler+0x4>

08004ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <HardFault_Handler+0x4>

08004ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ec8:	bf00      	nop
 8004eca:	e7fd      	b.n	8004ec8 <MemManage_Handler+0x4>

08004ecc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <BusFault_Handler+0x4>

08004ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed8:	bf00      	nop
 8004eda:	e7fd      	b.n	8004ed8 <UsageFault_Handler+0x4>

08004edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f04:	f000 f996 	bl	8005234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO5_Pin);
 8004f10:	2002      	movs	r0, #2
 8004f12:	f001 fded 	bl	8006af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8004f1e:	2008      	movs	r0, #8
 8004f20:	f001 fde6 	bl	8006af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004f2c:	4802      	ldr	r0, [pc, #8]	@ (8004f38 <ADC1_IRQHandler+0x10>)
 8004f2e:	f000 fd39 	bl	80059a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000300 	.word	0x20000300

08004f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f40:	4802      	ldr	r0, [pc, #8]	@ (8004f4c <TIM2_IRQHandler+0x10>)
 8004f42:	f006 fdaf 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f46:	bf00      	nop
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200004cc 	.word	0x200004cc

08004f50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f54:	4802      	ldr	r0, [pc, #8]	@ (8004f60 <TIM3_IRQHandler+0x10>)
 8004f56:	f006 fda5 	bl	800baa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f5a:	bf00      	nop
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	2000050c 	.word	0x2000050c

08004f64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004f68:	4802      	ldr	r0, [pc, #8]	@ (8004f74 <I2C1_EV_IRQHandler+0x10>)
 8004f6a:	f002 fa5d 	bl	8007428 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000354 	.word	0x20000354

08004f78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004f7c:	4802      	ldr	r0, [pc, #8]	@ (8004f88 <I2C1_ER_IRQHandler+0x10>)
 8004f7e:	f002 fbc4 	bl	800770a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000354 	.word	0x20000354

08004f8c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004f90:	4802      	ldr	r0, [pc, #8]	@ (8004f9c <I2C2_EV_IRQHandler+0x10>)
 8004f92:	f002 fa49 	bl	8007428 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200003a8 	.word	0x200003a8

08004fa0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004fa4:	4802      	ldr	r0, [pc, #8]	@ (8004fb0 <RTC_Alarm_IRQHandler+0x10>)
 8004fa6:	f005 fda5 	bl	800aaf4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200003fc 	.word	0x200003fc

08004fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return 1;
 8004fb8:	2301      	movs	r3, #1
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <_kill>:

int _kill(int pid, int sig)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004fcc:	f008 f8bc 	bl	800d148 <__errno>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2216      	movs	r2, #22
 8004fd4:	601a      	str	r2, [r3, #0]
  return -1;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <_exit>:

void _exit (int status)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fea:	f04f 31ff 	mov.w	r1, #4294967295
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ffe7 	bl	8004fc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <_exit+0x12>

08004ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e00a      	b.n	8005020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800500a:	f3af 8000 	nop.w
 800500e:	4601      	mov	r1, r0
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	60ba      	str	r2, [r7, #8]
 8005016:	b2ca      	uxtb	r2, r1
 8005018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	3301      	adds	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	dbf0      	blt.n	800500a <_read+0x12>
  }

  return len;
 8005028:	687b      	ldr	r3, [r7, #4]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e009      	b.n	8005058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	60ba      	str	r2, [r7, #8]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	3301      	adds	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	dbf1      	blt.n	8005044 <_write+0x12>
  }
  return len;
 8005060:	687b      	ldr	r3, [r7, #4]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_close>:

int _close(int file)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005090:	605a      	str	r2, [r3, #4]
  return 0;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <_isatty>:

int _isatty(int file)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80050a6:	2301      	movs	r3, #1
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b085      	sub	sp, #20
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050d4:	4a14      	ldr	r2, [pc, #80]	@ (8005128 <_sbrk+0x5c>)
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <_sbrk+0x60>)
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050e0:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <_sbrk+0x64>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <_sbrk+0x64>)
 80050ea:	4a12      	ldr	r2, [pc, #72]	@ (8005134 <_sbrk+0x68>)
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <_sbrk+0x64>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d207      	bcs.n	800510c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050fc:	f008 f824 	bl	800d148 <__errno>
 8005100:	4603      	mov	r3, r0
 8005102:	220c      	movs	r2, #12
 8005104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	e009      	b.n	8005120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800510c:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <_sbrk+0x64>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <_sbrk+0x64>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	4a05      	ldr	r2, [pc, #20]	@ (8005130 <_sbrk+0x64>)
 800511c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20002800 	.word	0x20002800
 800512c:	00000400 	.word	0x00000400
 8005130:	2000059c 	.word	0x2000059c
 8005134:	20000718 	.word	0x20000718

08005138 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8005144:	f7ff fff8 	bl	8005138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005148:	480b      	ldr	r0, [pc, #44]	@ (8005178 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800514a:	490c      	ldr	r1, [pc, #48]	@ (800517c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800514c:	4a0c      	ldr	r2, [pc, #48]	@ (8005180 <LoopFillZerobss+0x16>)
  movs r3, #0
 800514e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005150:	e002      	b.n	8005158 <LoopCopyDataInit>

08005152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005156:	3304      	adds	r3, #4

08005158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800515a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800515c:	d3f9      	bcc.n	8005152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800515e:	4a09      	ldr	r2, [pc, #36]	@ (8005184 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005160:	4c09      	ldr	r4, [pc, #36]	@ (8005188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005164:	e001      	b.n	800516a <LoopFillZerobss>

08005166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005168:	3204      	adds	r2, #4

0800516a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800516a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800516c:	d3fb      	bcc.n	8005166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800516e:	f007 fff1 	bl	800d154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005172:	f7fc ff69 	bl	8002048 <main>
  bx lr
 8005176:	4770      	bx	lr
  ldr r0, =_sdata
 8005178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800517c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8005180:	0800e134 	.word	0x0800e134
  ldr r2, =_sbss
 8005184:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8005188:	20000718 	.word	0x20000718

0800518c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800518c:	e7fe      	b.n	800518c <COMP_IRQHandler>

0800518e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005198:	2003      	movs	r0, #3
 800519a:	f000 fff3 	bl	8006184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800519e:	200f      	movs	r0, #15
 80051a0:	f000 f80e 	bl	80051c0 <HAL_InitTick>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	71fb      	strb	r3, [r7, #7]
 80051ae:	e001      	b.n	80051b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051b0:	f7ff fc48 	bl	8004a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051b4:	79fb      	ldrb	r3, [r7, #7]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80051cc:	4b16      	ldr	r3, [pc, #88]	@ (8005228 <HAL_InitTick+0x68>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d022      	beq.n	800521a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80051d4:	4b15      	ldr	r3, [pc, #84]	@ (800522c <HAL_InitTick+0x6c>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <HAL_InitTick+0x68>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80051e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 f80e 	bl	800620a <HAL_SYSTICK_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10f      	bne.n	8005214 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d809      	bhi.n	800520e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051fa:	2200      	movs	r2, #0
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	f000 ffca 	bl	800619a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005206:	4a0a      	ldr	r2, [pc, #40]	@ (8005230 <HAL_InitTick+0x70>)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e007      	b.n	800521e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	e004      	b.n	800521e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]
 8005218:	e001      	b.n	800521e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800521e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	2000000c 	.word	0x2000000c
 800522c:	20000004 	.word	0x20000004
 8005230:	20000008 	.word	0x20000008

08005234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_IncTick+0x1c>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <HAL_IncTick+0x20>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4413      	add	r3, r2
 8005242:	4a03      	ldr	r2, [pc, #12]	@ (8005250 <HAL_IncTick+0x1c>)
 8005244:	6013      	str	r3, [r2, #0]
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	200005a0 	.word	0x200005a0
 8005254:	2000000c 	.word	0x2000000c

08005258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return uwTick;
 800525c:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <HAL_GetTick+0x10>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr
 8005268:	200005a0 	.word	0x200005a0

0800526c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005274:	f7ff fff0 	bl	8005258 <HAL_GetTick>
 8005278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d004      	beq.n	8005290 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005286:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <HAL_Delay+0x40>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005290:	bf00      	nop
 8005292:	f7ff ffe1 	bl	8005258 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <HAL_Delay+0x26>
  {
  }
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2000000c 	.word	0x2000000c

080052b0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80052b4:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <HAL_SuspendTick+0x18>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a03      	ldr	r2, [pc, #12]	@ (80052c8 <HAL_SuspendTick+0x18>)
 80052ba:	f023 0302 	bic.w	r3, r3, #2
 80052be:	6013      	str	r3, [r2, #0]
}
 80052c0:	bf00      	nop
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	e000e010 	.word	0xe000e010

080052cc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80052d0:	4b04      	ldr	r3, [pc, #16]	@ (80052e4 <HAL_ResumeTick+0x18>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a03      	ldr	r2, [pc, #12]	@ (80052e4 <HAL_ResumeTick+0x18>)
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	e000e010 	.word	0xe000e010

080052e8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a03      	ldr	r2, [pc, #12]	@ (8005300 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80052f2:	f023 0302 	bic.w	r3, r3, #2
 80052f6:	6053      	str	r3, [r2, #4]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	e0042000 	.word	0xe0042000

08005304 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	@ 0x38
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e127      	b.n	8005574 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d115      	bne.n	800535e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005340:	4b8e      	ldr	r3, [pc, #568]	@ (800557c <HAL_ADC_Init+0x278>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	4a8d      	ldr	r2, [pc, #564]	@ (800557c <HAL_ADC_Init+0x278>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6213      	str	r3, [r2, #32]
 800534c:	4b8b      	ldr	r3, [pc, #556]	@ (800557c <HAL_ADC_Init+0x278>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fba1 	bl	8004aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 80ff 	bne.w	800556a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005370:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005374:	f023 0302 	bic.w	r3, r3, #2
 8005378:	f043 0202 	orr.w	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8005380:	4b7f      	ldr	r3, [pc, #508]	@ (8005580 <HAL_ADC_Init+0x27c>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	497c      	ldr	r1, [pc, #496]	@ (8005580 <HAL_ADC_Init+0x27c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800539a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a2:	4619      	mov	r1, r3
 80053a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053a8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	fa93 f3a3 	rbit	r3, r3
 80053b0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	fab3 f383 	clz	r3, r3
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80053be:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80053c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053cc:	4619      	mov	r1, r3
 80053ce:	2302      	movs	r3, #2
 80053d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	fab3 f383 	clz	r3, r3
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80053e6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	4313      	orrs	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d007      	beq.n	8005406 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80053fe:	4313      	orrs	r3, r2
 8005400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005402:	4313      	orrs	r3, r2
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d04f      	beq.n	80054b4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800541a:	4313      	orrs	r3, r2
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005426:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6912      	ldr	r2, [r2, #16]
 800542c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005430:	d003      	beq.n	800543a <HAL_ADC_Init+0x136>
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6912      	ldr	r2, [r2, #16]
 8005436:	2a01      	cmp	r2, #1
 8005438:	d102      	bne.n	8005440 <HAL_ADC_Init+0x13c>
 800543a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800543e:	e000      	b.n	8005442 <HAL_ADC_Init+0x13e>
 8005440:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8005442:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005446:	4313      	orrs	r3, r2
 8005448:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d125      	bne.n	80054a0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d114      	bne.n	8005488 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	3b01      	subs	r3, #1
 8005464:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8005468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	fa92 f2a2 	rbit	r2, r2
 8005470:	617a      	str	r2, [r7, #20]
  return result;
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	4093      	lsls	r3, r2
 800547c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005482:	4313      	orrs	r3, r2
 8005484:	633b      	str	r3, [r7, #48]	@ 0x30
 8005486:	e00b      	b.n	80054a0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b37      	ldr	r3, [pc, #220]	@ (8005584 <HAL_ADC_Init+0x280>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	4b33      	ldr	r3, [pc, #204]	@ (8005588 <HAL_ADC_Init+0x284>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054d0:	d003      	beq.n	80054da <HAL_ADC_Init+0x1d6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d119      	bne.n	800550e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80054ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	fa92 f2a2 	rbit	r2, r2
 80054f6:	60fa      	str	r2, [r7, #12]
  return result;
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	fab2 f282 	clz	r2, r2
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	fa03 f202 	lsl.w	r2, r3, r2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	631a      	str	r2, [r3, #48]	@ 0x30
 800550c:	e007      	b.n	800551e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	4b19      	ldr	r3, [pc, #100]	@ (800558c <HAL_ADC_Init+0x288>)
 8005526:	4013      	ands	r3, r2
 8005528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800552a:	429a      	cmp	r2, r3
 800552c:	d10b      	bne.n	8005546 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005538:	f023 0303 	bic.w	r3, r3, #3
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005544:	e014      	b.n	8005570 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	f023 0312 	bic.w	r3, r3, #18
 800554e:	f043 0210 	orr.w	r2, r3, #16
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005568:	e002      	b.n	8005570 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005570:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8005574:	4618      	mov	r0, r3
 8005576:	3738      	adds	r7, #56	@ 0x38
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	40012700 	.word	0x40012700
 8005584:	fcfc16ff 	.word	0xfcfc16ff
 8005588:	c0fff18d 	.word	0xc0fff18d
 800558c:	bf80fffe 	.word	0xbf80fffe

08005590 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0bc      	b.n	8005720 <HAL_ADC_DeInit+0x190>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055aa:	f043 0202 	orr.w	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fcac 	bl	8005f10 <ADC_ConversionStop_Disable>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 80a9 	bne.w	8005716 <HAL_ADC_DeInit+0x186>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 021f 	mvn.w	r2, #31
 80055cc:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b53      	ldr	r3, [pc, #332]	@ (8005728 <HAL_ADC_DeInit+0x198>)
 80055da:	400b      	ands	r3, r1
 80055dc:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
                                    ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
                                    ADC_CR1_AWDCH                                       ));
    
    /* Reset register CR2 */
    ADC_CR2_CLEAR(hadc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b50      	ldr	r3, [pc, #320]	@ (800572c <HAL_ADC_DeInit+0x19c>)
 80055ea:	400b      	ands	r3, r1
 80055ec:	6093      	str	r3, [r2, #8]
    
    /* Reset register SMPR0 */
    ADC_SMPR0_CLEAR(hadc);
 80055ee:	bf00      	nop
    
    /* Reset register SMPR1 */
    ADC_SMPR1_CLEAR(hadc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	0d5b      	lsrs	r3, r3, #21
 80055fc:	055b      	lsls	r3, r3, #21
 80055fe:	60d3      	str	r3, [r2, #12]
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800560e:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
                                      ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
                                      ADC_SMPR2_SMP10                                      ));
    
    /* Reset register SMPR3 */
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800561e:	615a      	str	r2, [r3, #20]
                                      ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
                                      ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
                                      ADC_SMPR3_SMP0                                    ));
    
    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800562e:	f023 030f 	bic.w	r3, r3, #15
 8005632:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005642:	f023 030f 	bic.w	r3, r3, #15
 8005646:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005656:	f023 030f 	bic.w	r3, r3, #15
 800565a:	6213      	str	r3, [r2, #32]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800566a:	f023 030f 	bic.w	r3, r3, #15
 800566e:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800567e:	f023 030f 	bic.w	r3, r3, #15
 8005682:	6293      	str	r3, [r2, #40]	@ 0x28
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005692:	f023 030f 	bic.w	r3, r3, #15
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b23      	ldr	r3, [pc, #140]	@ (8005730 <HAL_ADC_DeInit+0x1a0>)
 80056a4:	400b      	ands	r3, r1
 80056a6:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056b6:	635a      	str	r2, [r3, #52]	@ 0x34
                                     ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
                                     ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056d6:	63da      	str	r2, [r3, #60]	@ 0x3c
                                     ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
    
    /* Reset register SQR5 */
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
                                     ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
    
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	0d9b      	lsrs	r3, r3, #22
 80056f4:	059b      	lsls	r3, r3, #22
 80056f6:	6453      	str	r3, [r2, #68]	@ 0x44
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80056f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_ADC_DeInit+0x1a4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <HAL_ADC_DeInit+0x1a4>)
 80056fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005702:	6053      	str	r3, [r2, #4]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fa13 	bl	8004b30 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	64da      	str	r2, [r3, #76]	@ 0x4c
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	f83c0000 	.word	0xf83c0000
 800572c:	8080f08c 	.word	0x8080f08c
 8005730:	fe0f8000 	.word	0xfe0f8000
 8005734:	40012700 	.word	0x40012700

08005738 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_ADC_Start+0x1a>
 800574e:	2302      	movs	r3, #2
 8005750:	e04e      	b.n	80057f0 <HAL_ADC_Start+0xb8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb7c 	bl	8005e58 <ADC_Enable>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d141      	bne.n	80057ee <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005790:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005794:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a8:	d106      	bne.n	80057b8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ae:	f023 0206 	bic.w	r2, r3, #6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057b6:	e002      	b.n	80057be <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80057ce:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057ec:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_ADC_Stop+0x1a>
 800580e:	2302      	movs	r3, #2
 8005810:	e01a      	b.n	8005848 <HAL_ADC_Stop+0x50>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fb78 	bl	8005f10 <ADC_ConversionStop_Disable>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_ADC_Start_IT+0x1a>
 8005866:	2302      	movs	r3, #2
 8005868:	e058      	b.n	800591c <HAL_ADC_Start_IT+0xcc>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 faf0 	bl	8005e58 <ADC_Enable>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d14b      	bne.n	800591a <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005886:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c0:	d106      	bne.n	80058d0 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058c6:	f023 0206 	bic.w	r2, r3, #6
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80058ce:	e002      	b.n	80058d6 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80058e6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058f6:	f043 0320 	orr.w	r3, r3, #32
 80058fa:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d107      	bne.n	800591a <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005918:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_ADC_Stop_IT+0x1a>
 800593a:	2302      	movs	r3, #2
 800593c:	e022      	b.n	8005984 <HAL_ADC_Stop_IT+0x60>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fae2 	bl	8005f10 <ADC_ConversionStop_Disable>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d111      	bne.n	800597a <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0220 	bic.w	r2, r2, #32
 8005964:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	f043 0201 	orr.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04c      	beq.n	8005a60 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d047      	beq.n	8005a60 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d12c      	bne.n	8005a50 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d127      	bne.n	8005a50 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d119      	bne.n	8005a50 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0220 	bic.w	r2, r2, #32
 8005a2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fd fb67 	bl	8003124 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0212 	mvn.w	r2, #18
 8005a5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05a      	beq.n	8005b20 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d055      	beq.n	8005b20 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d105      	bne.n	8005a8c <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a84:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d13a      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d12c      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d125      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11e      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d119      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b08:	f043 0201 	orr.w	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa3e 	bl	8005f92 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f06f 020c 	mvn.w	r2, #12
 8005b1e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d012      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f826 	bl	8005b92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0201 	mvn.w	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d017      	beq.n	8005b8a <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d012      	beq.n	8005b8a <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b68:	f043 0202 	orr.w	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0220 	mvn.w	r2, #32
 8005b78:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f812 	bl	8005ba4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0220 	mvn.w	r2, #32
 8005b88:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0x20>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e134      	b.n	8005e42 <HAL_ADC_ConfigChannel+0x28a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b06      	cmp	r3, #6
 8005be6:	d81c      	bhi.n	8005c22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3b05      	subs	r3, #5
 8005bfa:	221f      	movs	r2, #31
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	4019      	ands	r1, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	3b05      	subs	r3, #5
 8005c14:	fa00 f203 	lsl.w	r2, r0, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c20:	e07e      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	d81c      	bhi.n	8005c64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	3b23      	subs	r3, #35	@ 0x23
 8005c3c:	221f      	movs	r2, #31
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	4019      	ands	r1, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	3b23      	subs	r3, #35	@ 0x23
 8005c56:	fa00 f203 	lsl.w	r2, r0, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c62:	e05d      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b12      	cmp	r3, #18
 8005c6a:	d81c      	bhi.n	8005ca6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3b41      	subs	r3, #65	@ 0x41
 8005c7e:	221f      	movs	r2, #31
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	4019      	ands	r1, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	3b41      	subs	r3, #65	@ 0x41
 8005c98:	fa00 f203 	lsl.w	r2, r0, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ca4:	e03c      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b18      	cmp	r3, #24
 8005cac:	d81c      	bhi.n	8005ce8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3b5f      	subs	r3, #95	@ 0x5f
 8005cc0:	221f      	movs	r2, #31
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	4019      	ands	r1, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3b5f      	subs	r3, #95	@ 0x5f
 8005cda:	fa00 f203 	lsl.w	r2, r0, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ce6:	e01b      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3b7d      	subs	r3, #125	@ 0x7d
 8005cfa:	221f      	movs	r2, #31
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	4019      	ands	r1, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	3b7d      	subs	r3, #125	@ 0x7d
 8005d14:	fa00 f203 	lsl.w	r2, r0, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d81a      	bhi.n	8005d5e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6959      	ldr	r1, [r3, #20]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	2207      	movs	r2, #7
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	4019      	ands	r1, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6898      	ldr	r0, [r3, #8]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	fa00 f203 	lsl.w	r2, r0, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	615a      	str	r2, [r3, #20]
 8005d5c:	e042      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b13      	cmp	r3, #19
 8005d64:	d81c      	bhi.n	8005da0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6919      	ldr	r1, [r3, #16]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4413      	add	r3, r2
 8005d76:	3b1e      	subs	r3, #30
 8005d78:	2207      	movs	r2, #7
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	4019      	ands	r1, r3
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6898      	ldr	r0, [r3, #8]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	4413      	add	r3, r2
 8005d90:	3b1e      	subs	r3, #30
 8005d92:	fa00 f203 	lsl.w	r2, r0, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e021      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b1a      	cmp	r3, #26
 8005da6:	d81c      	bhi.n	8005de2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68d9      	ldr	r1, [r3, #12]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4413      	add	r3, r2
 8005db8:	3b3c      	subs	r3, #60	@ 0x3c
 8005dba:	2207      	movs	r2, #7
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	4019      	ands	r1, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6898      	ldr	r0, [r3, #8]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3b3c      	subs	r3, #60	@ 0x3c
 8005dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	e000      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005de2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d003      	beq.n	8005df4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005df0:	2b11      	cmp	r3, #17
 8005df2:	d121      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <HAL_ADC_ConfigChannel+0x294>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11b      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005e00:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <HAL_ADC_ConfigChannel+0x294>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <HAL_ADC_ConfigChannel+0x294>)
 8005e06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e0a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d111      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e14:	4b0e      	ldr	r3, [pc, #56]	@ (8005e50 <HAL_ADC_ConfigChannel+0x298>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a0e      	ldr	r2, [pc, #56]	@ (8005e54 <HAL_ADC_ConfigChannel+0x29c>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0c9a      	lsrs	r2, r3, #18
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005e2a:	e002      	b.n	8005e32 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f9      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr
 8005e4c:	40012700 	.word	0x40012700
 8005e50:	20000004 	.word	0x20000004
 8005e54:	431bde83 	.word	0x431bde83

08005e58 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e72:	2b40      	cmp	r3, #64	@ 0x40
 8005e74:	d043      	beq.n	8005efe <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005e86:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <ADC_Enable+0xb0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a20      	ldr	r2, [pc, #128]	@ (8005f0c <ADC_Enable+0xb4>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	0c9a      	lsrs	r2, r3, #18
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005e9a:	e002      	b.n	8005ea2 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f9      	bne.n	8005e9c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005ea8:	f7ff f9d6 	bl	8005258 <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005eae:	e01f      	b.n	8005ef0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005eb0:	f7ff f9d2 	bl	8005258 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d918      	bls.n	8005ef0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec8:	2b40      	cmp	r3, #64	@ 0x40
 8005eca:	d011      	beq.n	8005ef0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed0:	f043 0210 	orr.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e007      	b.n	8005f00 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d1d8      	bne.n	8005eb0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000004 	.word	0x20000004
 8005f0c:	431bde83 	.word	0x431bde83

08005f10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b40      	cmp	r3, #64	@ 0x40
 8005f28:	d12e      	bne.n	8005f88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f3a:	f7ff f98d 	bl	8005258 <HAL_GetTick>
 8005f3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005f40:	e01b      	b.n	8005f7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8005f42:	f7ff f989 	bl	8005258 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d914      	bls.n	8005f7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5a:	2b40      	cmp	r3, #64	@ 0x40
 8005f5c:	d10d      	bne.n	8005f7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f62:	f043 0210 	orr.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e007      	b.n	8005f8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	d0dc      	beq.n	8005f42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <__NVIC_SetPriorityGrouping>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fd6:	4a04      	ldr	r2, [pc, #16]	@ (8005fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	60d3      	str	r3, [r2, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	e000ed00 	.word	0xe000ed00

08005fec <__NVIC_GetPriorityGrouping>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff0:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <__NVIC_GetPriorityGrouping+0x18>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0a1b      	lsrs	r3, r3, #8
 8005ff6:	f003 0307 	and.w	r3, r3, #7
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	e000ed00 	.word	0xe000ed00

08006008 <__NVIC_EnableIRQ>:
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006016:	2b00      	cmp	r3, #0
 8006018:	db0b      	blt.n	8006032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	f003 021f 	and.w	r2, r3, #31
 8006020:	4906      	ldr	r1, [pc, #24]	@ (800603c <__NVIC_EnableIRQ+0x34>)
 8006022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2001      	movs	r0, #1
 800602a:	fa00 f202 	lsl.w	r2, r0, r2
 800602e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	e000e100 	.word	0xe000e100

08006040 <__NVIC_DisableIRQ>:
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800604a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604e:	2b00      	cmp	r3, #0
 8006050:	db12      	blt.n	8006078 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	f003 021f 	and.w	r2, r3, #31
 8006058:	490a      	ldr	r1, [pc, #40]	@ (8006084 <__NVIC_DisableIRQ+0x44>)
 800605a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2001      	movs	r0, #1
 8006062:	fa00 f202 	lsl.w	r2, r0, r2
 8006066:	3320      	adds	r3, #32
 8006068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800606c:	f3bf 8f4f 	dsb	sy
}
 8006070:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006072:	f3bf 8f6f 	isb	sy
}
 8006076:	bf00      	nop
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000e100 	.word	0xe000e100

08006088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	db0a      	blt.n	80060b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	490c      	ldr	r1, [pc, #48]	@ (80060d4 <__NVIC_SetPriority+0x4c>)
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	440b      	add	r3, r1
 80060ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060b0:	e00a      	b.n	80060c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	4908      	ldr	r1, [pc, #32]	@ (80060d8 <__NVIC_SetPriority+0x50>)
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	3b04      	subs	r3, #4
 80060c0:	0112      	lsls	r2, r2, #4
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	440b      	add	r3, r1
 80060c6:	761a      	strb	r2, [r3, #24]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	e000e100 	.word	0xe000e100
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	@ 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f1c3 0307 	rsb	r3, r3, #7
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf28      	it	cs
 80060fa:	2304      	movcs	r3, #4
 80060fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3304      	adds	r3, #4
 8006102:	2b06      	cmp	r3, #6
 8006104:	d902      	bls.n	800610c <NVIC_EncodePriority+0x30>
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3b03      	subs	r3, #3
 800610a:	e000      	b.n	800610e <NVIC_EncodePriority+0x32>
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43da      	mvns	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	401a      	ands	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006124:	f04f 31ff 	mov.w	r1, #4294967295
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	43d9      	mvns	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	4313      	orrs	r3, r2
         );
}
 8006136:	4618      	mov	r0, r3
 8006138:	3724      	adds	r7, #36	@ 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3b01      	subs	r3, #1
 800614c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006150:	d301      	bcc.n	8006156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006152:	2301      	movs	r3, #1
 8006154:	e00f      	b.n	8006176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006156:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <SysTick_Config+0x40>)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3b01      	subs	r3, #1
 800615c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800615e:	210f      	movs	r1, #15
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	f7ff ff90 	bl	8006088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006168:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <SysTick_Config+0x40>)
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800616e:	4b04      	ldr	r3, [pc, #16]	@ (8006180 <SysTick_Config+0x40>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	e000e010 	.word	0xe000e010

08006184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff09 	bl	8005fa4 <__NVIC_SetPriorityGrouping>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4603      	mov	r3, r0
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061ac:	f7ff ff1e 	bl	8005fec <__NVIC_GetPriorityGrouping>
 80061b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	6978      	ldr	r0, [r7, #20]
 80061b8:	f7ff ff90 	bl	80060dc <NVIC_EncodePriority>
 80061bc:	4602      	mov	r2, r0
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff5f 	bl	8006088 <__NVIC_SetPriority>
}
 80061ca:	bf00      	nop
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4603      	mov	r3, r0
 80061da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ff11 	bl	8006008 <__NVIC_EnableIRQ>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	4603      	mov	r3, r0
 80061f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80061f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff ff1f 	bl	8006040 <__NVIC_DisableIRQ>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff94 	bl	8006140 <SysTick_Config>
 8006218:	4603      	mov	r3, r0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d005      	beq.n	8006246 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2204      	movs	r2, #4
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e029      	b.n	800629a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 020e 	bic.w	r2, r2, #14
 8006254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f003 021c 	and.w	r2, r3, #28
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006272:	2101      	movs	r1, #1
 8006274:	fa01 f202 	lsl.w	r2, r1, r2
 8006278:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
    }
  }
  return status;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80062b2:	b2db      	uxtb	r3, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80062cc:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <HAL_FLASH_Program+0x58>)
 80062ce:	7c1b      	ldrb	r3, [r3, #16]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_FLASH_Program+0x18>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e01b      	b.n	8006310 <HAL_FLASH_Program+0x50>
 80062d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006318 <HAL_FLASH_Program+0x58>)
 80062da:	2201      	movs	r2, #1
 80062dc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80062e2:	f000 f86f 	bl	80063c4 <FLASH_WaitForLastOperation>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <HAL_FLASH_Program+0x48>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062f0:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <HAL_FLASH_Program+0x58>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006300:	f000 f860 	bl	80063c4 <FLASH_WaitForLastOperation>
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006308:	4b03      	ldr	r3, [pc, #12]	@ (8006318 <HAL_FLASH_Program+0x58>)
 800630a:	2200      	movs	r2, #0
 800630c:	741a      	strb	r2, [r3, #16]

  return status;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200005a4 	.word	0x200005a4

0800631c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8006320:	4b16      	ldr	r3, [pc, #88]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d121      	bne.n	8006370 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10d      	bne.n	8006354 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8006338:	4b10      	ldr	r3, [pc, #64]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 800633a:	4a11      	ldr	r2, [pc, #68]	@ (8006380 <HAL_FLASH_Unlock+0x64>)
 800633c:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800633e:	4b0f      	ldr	r3, [pc, #60]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 8006340:	4a10      	ldr	r2, [pc, #64]	@ (8006384 <HAL_FLASH_Unlock+0x68>)
 8006342:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8006344:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e00e      	b.n	8006372 <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 8006356:	4a0c      	ldr	r2, [pc, #48]	@ (8006388 <HAL_FLASH_Unlock+0x6c>)
 8006358:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800635a:	4b08      	ldr	r3, [pc, #32]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 800635c:	4a0b      	ldr	r2, [pc, #44]	@ (800638c <HAL_FLASH_Unlock+0x70>)
 800635e:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8006360:	4b06      	ldr	r3, [pc, #24]	@ (800637c <HAL_FLASH_Unlock+0x60>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d101      	bne.n	8006370 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40023c00 	.word	0x40023c00
 8006380:	89abcdef 	.word	0x89abcdef
 8006384:	02030405 	.word	0x02030405
 8006388:	8c9daebf 	.word	0x8c9daebf
 800638c:	13141516 	.word	0x13141516

08006390 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8006394:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <HAL_FLASH_Lock+0x1c>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	4a04      	ldr	r2, [pc, #16]	@ (80063ac <HAL_FLASH_Lock+0x1c>)
 800639a:	f043 0302 	orr.w	r3, r3, #2
 800639e:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40023c00 	.word	0x40023c00

080063b0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80063b4:	4b02      	ldr	r3, [pc, #8]	@ (80063c0 <HAL_FLASH_GetError+0x10>)
 80063b6:	695b      	ldr	r3, [r3, #20]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	200005a4 	.word	0x200005a4

080063c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80063cc:	f7fe ff44 	bl	8005258 <HAL_GetTick>
 80063d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80063d2:	e010      	b.n	80063f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d00c      	beq.n	80063f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <FLASH_WaitForLastOperation+0x2e>
 80063e2:	f7fe ff39 	bl	8005258 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d201      	bcs.n	80063f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e02f      	b.n	8006456 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80063f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d0e8      	beq.n	80063d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006402:	4b17      	ldr	r3, [pc, #92]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d102      	bne.n	8006414 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800640e:	4b14      	ldr	r3, [pc, #80]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006410:	2202      	movs	r2, #2
 8006412:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006414:	4b12      	ldr	r3, [pc, #72]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006420:	d014      	beq.n	800644c <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006422:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800642e:	d00d      	beq.n	800644c <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8006430:	4b0b      	ldr	r3, [pc, #44]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643c:	d006      	beq.n	800644c <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800643e:	4b08      	ldr	r3, [pc, #32]	@ (8006460 <FLASH_WaitForLastOperation+0x9c>)
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8006446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800644a:	d103      	bne.n	8006454 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800644c:	f000 f80a 	bl	8006464 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40023c00 	.word	0x40023c00

08006464 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <FLASH_SetErrorCode+0xa4>)
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800647a:	d109      	bne.n	8006490 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800647c:	4b23      	ldr	r3, [pc, #140]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f043 0302 	orr.w	r3, r3, #2
 8006484:	4a21      	ldr	r2, [pc, #132]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 8006486:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800648e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8006490:	4b1d      	ldr	r3, [pc, #116]	@ (8006508 <FLASH_SetErrorCode+0xa4>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d109      	bne.n	80064b2 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800649e:	4b1b      	ldr	r3, [pc, #108]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	4a19      	ldr	r2, [pc, #100]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064a8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80064b2:	4b15      	ldr	r3, [pc, #84]	@ (8006508 <FLASH_SetErrorCode+0xa4>)
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064be:	d109      	bne.n	80064d4 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80064c0:	4b12      	ldr	r3, [pc, #72]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	4a10      	ldr	r2, [pc, #64]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064ca:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80064d2:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <FLASH_SetErrorCode+0xa4>)
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e0:	d109      	bne.n	80064f6 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f043 0308 	orr.w	r3, r3, #8
 80064ea:	4a08      	ldr	r2, [pc, #32]	@ (800650c <FLASH_SetErrorCode+0xa8>)
 80064ec:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064f4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80064f6:	4a04      	ldr	r2, [pc, #16]	@ (8006508 <FLASH_SetErrorCode+0xa4>)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6193      	str	r3, [r2, #24]
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40023c00 	.word	0x40023c00
 800650c:	200005a4 	.word	0x200005a4

08006510 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t address = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800651e:	4b25      	ldr	r3, [pc, #148]	@ (80065b4 <HAL_FLASHEx_Erase+0xa4>)
 8006520:	7c1b      	ldrb	r3, [r3, #16]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_FLASHEx_Erase+0x1a>
 8006526:	2302      	movs	r3, #2
 8006528:	e040      	b.n	80065ac <HAL_FLASHEx_Erase+0x9c>
 800652a:	4b22      	ldr	r3, [pc, #136]	@ (80065b4 <HAL_FLASHEx_Erase+0xa4>)
 800652c:	2201      	movs	r2, #1
 800652e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006530:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006534:	f7ff ff46 	bl	80063c4 <FLASH_WaitForLastOperation>
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d130      	bne.n	80065a4 <HAL_FLASHEx_Erase+0x94>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f04f 32ff 	mov.w	r2, #4294967295
 8006548:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	60bb      	str	r3, [r7, #8]
 8006550:	e01f      	b.n	8006592 <HAL_FLASHEx_Erase+0x82>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8006552:	68b8      	ldr	r0, [r7, #8]
 8006554:	f000 f832 	bl	80065bc <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006558:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800655c:	f7ff ff32 	bl	80063c4 <FLASH_WaitForLastOperation>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8006564:	4b14      	ldr	r3, [pc, #80]	@ (80065b8 <HAL_FLASHEx_Erase+0xa8>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a13      	ldr	r2, [pc, #76]	@ (80065b8 <HAL_FLASHEx_Erase+0xa8>)
 800656a:	f023 0308 	bic.w	r3, r3, #8
 800656e:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8006570:	4b11      	ldr	r3, [pc, #68]	@ (80065b8 <HAL_FLASHEx_Erase+0xa8>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a10      	ldr	r2, [pc, #64]	@ (80065b8 <HAL_FLASHEx_Erase+0xa8>)
 8006576:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800657a:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_FLASHEx_Erase+0x7a>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	601a      	str	r2, [r3, #0]
        break;
 8006588:	e00c      	b.n	80065a4 <HAL_FLASHEx_Erase+0x94>
        address += FLASH_PAGE_SIZE)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006590:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4413      	add	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d3d6      	bcc.n	8006552 <HAL_FLASHEx_Erase+0x42>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065a4:	4b03      	ldr	r3, [pc, #12]	@ (80065b4 <HAL_FLASHEx_Erase+0xa4>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	741a      	strb	r2, [r3, #16]

  return status;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	200005a4 	.word	0x200005a4
 80065b8:	40023c00 	.word	0x40023c00

080065bc <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <FLASH_PageErase+0x3c>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80065ca:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <FLASH_PageErase+0x40>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4a0b      	ldr	r2, [pc, #44]	@ (80065fc <FLASH_PageErase+0x40>)
 80065d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065d4:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80065d6:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <FLASH_PageErase+0x40>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4a08      	ldr	r2, [pc, #32]	@ (80065fc <FLASH_PageErase+0x40>)
 80065dc:	f043 0308 	orr.w	r3, r3, #8
 80065e0:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6013      	str	r3, [r2, #0]
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	200005a4 	.word	0x200005a4
 80065fc:	40023c00 	.word	0x40023c00

08006600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006616:	e154      	b.n	80068c2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	2101      	movs	r1, #1
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	fa01 f303 	lsl.w	r3, r1, r3
 8006624:	4013      	ands	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8146 	beq.w	80068bc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d005      	beq.n	8006648 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006644:	2b02      	cmp	r3, #2
 8006646:	d130      	bne.n	80066aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	2203      	movs	r2, #3
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4013      	ands	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800667e:	2201      	movs	r2, #1
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	091b      	lsrs	r3, r3, #4
 8006694:	f003 0201 	and.w	r2, r3, #1
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d017      	beq.n	80066e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	2203      	movs	r2, #3
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4013      	ands	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d123      	bne.n	800673a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	08da      	lsrs	r2, r3, #3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3208      	adds	r2, #8
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	220f      	movs	r2, #15
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4013      	ands	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	08da      	lsrs	r2, r3, #3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3208      	adds	r2, #8
 8006734:	6939      	ldr	r1, [r7, #16]
 8006736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	2203      	movs	r2, #3
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 0203 	and.w	r2, r3, #3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80a0 	beq.w	80068bc <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800677c:	4b58      	ldr	r3, [pc, #352]	@ (80068e0 <HAL_GPIO_Init+0x2e0>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	4a57      	ldr	r2, [pc, #348]	@ (80068e0 <HAL_GPIO_Init+0x2e0>)
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	6213      	str	r3, [r2, #32]
 8006788:	4b55      	ldr	r3, [pc, #340]	@ (80068e0 <HAL_GPIO_Init+0x2e0>)
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006794:	4a53      	ldr	r2, [pc, #332]	@ (80068e4 <HAL_GPIO_Init+0x2e4>)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	089b      	lsrs	r3, r3, #2
 800679a:	3302      	adds	r3, #2
 800679c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	220f      	movs	r2, #15
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a4b      	ldr	r2, [pc, #300]	@ (80068e8 <HAL_GPIO_Init+0x2e8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d019      	beq.n	80067f4 <HAL_GPIO_Init+0x1f4>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a4a      	ldr	r2, [pc, #296]	@ (80068ec <HAL_GPIO_Init+0x2ec>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <HAL_GPIO_Init+0x1f0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a49      	ldr	r2, [pc, #292]	@ (80068f0 <HAL_GPIO_Init+0x2f0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00d      	beq.n	80067ec <HAL_GPIO_Init+0x1ec>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a48      	ldr	r2, [pc, #288]	@ (80068f4 <HAL_GPIO_Init+0x2f4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <HAL_GPIO_Init+0x1e8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a47      	ldr	r2, [pc, #284]	@ (80068f8 <HAL_GPIO_Init+0x2f8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_GPIO_Init+0x1e4>
 80067e0:	2304      	movs	r3, #4
 80067e2:	e008      	b.n	80067f6 <HAL_GPIO_Init+0x1f6>
 80067e4:	2305      	movs	r3, #5
 80067e6:	e006      	b.n	80067f6 <HAL_GPIO_Init+0x1f6>
 80067e8:	2303      	movs	r3, #3
 80067ea:	e004      	b.n	80067f6 <HAL_GPIO_Init+0x1f6>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e002      	b.n	80067f6 <HAL_GPIO_Init+0x1f6>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <HAL_GPIO_Init+0x1f6>
 80067f4:	2300      	movs	r3, #0
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	f002 0203 	and.w	r2, r2, #3
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	4093      	lsls	r3, r2
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006806:	4937      	ldr	r1, [pc, #220]	@ (80068e4 <HAL_GPIO_Init+0x2e4>)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	3302      	adds	r3, #2
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006814:	4b39      	ldr	r3, [pc, #228]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	43db      	mvns	r3, r3
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4013      	ands	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006838:	4a30      	ldr	r2, [pc, #192]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800683e:	4b2f      	ldr	r3, [pc, #188]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	43db      	mvns	r3, r3
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006862:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006868:	4b24      	ldr	r3, [pc, #144]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	43db      	mvns	r3, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800688c:	4a1b      	ldr	r2, [pc, #108]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006892:	4b1a      	ldr	r3, [pc, #104]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	43db      	mvns	r3, r3
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4013      	ands	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80068b6:	4a11      	ldr	r2, [pc, #68]	@ (80068fc <HAL_GPIO_Init+0x2fc>)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3301      	adds	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f47f aea3 	bne.w	8006618 <HAL_GPIO_Init+0x18>
  }
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40023800 	.word	0x40023800
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40020000 	.word	0x40020000
 80068ec:	40020400 	.word	0x40020400
 80068f0:	40020800 	.word	0x40020800
 80068f4:	40020c00 	.word	0x40020c00
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40010400 	.word	0x40010400

08006900 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8006916:	e0b8      	b.n	8006a8a <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8006918:	2201      	movs	r2, #1
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	4013      	ands	r3, r2
 8006924:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80ab 	beq.w	8006a84 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800692e:	4a5d      	ldr	r2, [pc, #372]	@ (8006aa4 <HAL_GPIO_DeInit+0x1a4>)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	3302      	adds	r3, #2
 8006936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693a:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	220f      	movs	r2, #15
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4013      	ands	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a55      	ldr	r2, [pc, #340]	@ (8006aa8 <HAL_GPIO_DeInit+0x1a8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d019      	beq.n	800698c <HAL_GPIO_DeInit+0x8c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a54      	ldr	r2, [pc, #336]	@ (8006aac <HAL_GPIO_DeInit+0x1ac>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_GPIO_DeInit+0x88>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a53      	ldr	r2, [pc, #332]	@ (8006ab0 <HAL_GPIO_DeInit+0x1b0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00d      	beq.n	8006984 <HAL_GPIO_DeInit+0x84>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a52      	ldr	r2, [pc, #328]	@ (8006ab4 <HAL_GPIO_DeInit+0x1b4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d007      	beq.n	8006980 <HAL_GPIO_DeInit+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a51      	ldr	r2, [pc, #324]	@ (8006ab8 <HAL_GPIO_DeInit+0x1b8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_GPIO_DeInit+0x7c>
 8006978:	2304      	movs	r3, #4
 800697a:	e008      	b.n	800698e <HAL_GPIO_DeInit+0x8e>
 800697c:	2305      	movs	r3, #5
 800697e:	e006      	b.n	800698e <HAL_GPIO_DeInit+0x8e>
 8006980:	2303      	movs	r3, #3
 8006982:	e004      	b.n	800698e <HAL_GPIO_DeInit+0x8e>
 8006984:	2302      	movs	r3, #2
 8006986:	e002      	b.n	800698e <HAL_GPIO_DeInit+0x8e>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <HAL_GPIO_DeInit+0x8e>
 800698c:	2300      	movs	r3, #0
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	f002 0203 	and.w	r2, r2, #3
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	4093      	lsls	r3, r2
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	429a      	cmp	r2, r3
 800699c:	d132      	bne.n	8006a04 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800699e:	4b47      	ldr	r3, [pc, #284]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	4945      	ldr	r1, [pc, #276]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80069ac:	4b43      	ldr	r3, [pc, #268]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	4941      	ldr	r1, [pc, #260]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80069ba:	4b40      	ldr	r3, [pc, #256]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	43db      	mvns	r3, r3
 80069c2:	493e      	ldr	r1, [pc, #248]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80069c8:	4b3c      	ldr	r3, [pc, #240]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	43db      	mvns	r3, r3
 80069d0:	493a      	ldr	r1, [pc, #232]	@ (8006abc <HAL_GPIO_DeInit+0x1bc>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	220f      	movs	r2, #15
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80069e6:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa4 <HAL_GPIO_DeInit+0x1a4>)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	3302      	adds	r3, #2
 80069ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	43da      	mvns	r2, r3
 80069f6:	482b      	ldr	r0, [pc, #172]	@ (8006aa4 <HAL_GPIO_DeInit+0x1a4>)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	400a      	ands	r2, r1
 80069fe:	3302      	adds	r3, #2
 8006a00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	2103      	movs	r1, #3
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	401a      	ands	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	08da      	lsrs	r2, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3208      	adds	r2, #8
 8006a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	220f      	movs	r2, #15
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	43db      	mvns	r3, r3
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	08d2      	lsrs	r2, r2, #3
 8006a3a:	4019      	ands	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3208      	adds	r2, #8
 8006a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2103      	movs	r1, #3
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	401a      	ands	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	2101      	movs	r1, #1
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	401a      	ands	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	2103      	movs	r1, #3
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	43db      	mvns	r3, r3
 8006a7e:	401a      	ands	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	3301      	adds	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f47f af40 	bne.w	8006918 <HAL_GPIO_DeInit+0x18>
  }
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr
 8006aa4:	40010000 	.word	0x40010000
 8006aa8:	40020000 	.word	0x40020000
 8006aac:	40020400 	.word	0x40020400
 8006ab0:	40020800 	.word	0x40020800
 8006ab4:	40020c00 	.word	0x40020c00
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40010400 	.word	0x40010400

08006ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	807b      	strh	r3, [r7, #2]
 8006acc:	4613      	mov	r3, r2
 8006ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ad0:	787b      	ldrb	r3, [r7, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006adc:	e003      	b.n	8006ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006ade:	887b      	ldrh	r3, [r7, #2]
 8006ae0:	041a      	lsls	r2, r3, #16
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006afa:	4b08      	ldr	r3, [pc, #32]	@ (8006b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b06:	4a05      	ldr	r2, [pc, #20]	@ (8006b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fc fbc6 	bl	80032a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e12b      	b.n	8006d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe f812 	bl	8004b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	@ 0x24
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b84:	f003 fa60 	bl	800a048 <HAL_RCC_GetPCLK1Freq>
 8006b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4a81      	ldr	r2, [pc, #516]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d807      	bhi.n	8006ba4 <HAL_I2C_Init+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a80      	ldr	r2, [pc, #512]	@ (8006d98 <HAL_I2C_Init+0x278>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	bf94      	ite	ls
 8006b9c:	2301      	movls	r3, #1
 8006b9e:	2300      	movhi	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e006      	b.n	8006bb2 <HAL_I2C_Init+0x92>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8006d9c <HAL_I2C_Init+0x27c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	bf94      	ite	ls
 8006bac:	2301      	movls	r3, #1
 8006bae:	2300      	movhi	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e0e7      	b.n	8006d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a78      	ldr	r2, [pc, #480]	@ (8006da0 <HAL_I2C_Init+0x280>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	0c9b      	lsrs	r3, r3, #18
 8006bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4a6a      	ldr	r2, [pc, #424]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d802      	bhi.n	8006bf4 <HAL_I2C_Init+0xd4>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	e009      	b.n	8006c08 <HAL_I2C_Init+0xe8>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	4a69      	ldr	r2, [pc, #420]	@ (8006da4 <HAL_I2C_Init+0x284>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	099b      	lsrs	r3, r3, #6
 8006c06:	3301      	adds	r3, #1
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	495c      	ldr	r1, [pc, #368]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d819      	bhi.n	8006c5c <HAL_I2C_Init+0x13c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1e59      	subs	r1, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_I2C_Init+0x138>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1e59      	subs	r1, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c50:	3301      	adds	r3, #1
 8006c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c56:	e051      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	e04f      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d111      	bne.n	8006c88 <HAL_I2C_Init+0x168>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	1e58      	subs	r0, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	440b      	add	r3, r1
 8006c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c76:	3301      	adds	r3, #1
 8006c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	e012      	b.n	8006cae <HAL_I2C_Init+0x18e>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	1e58      	subs	r0, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6859      	ldr	r1, [r3, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	0099      	lsls	r1, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf0c      	ite	eq
 8006ca8:	2301      	moveq	r3, #1
 8006caa:	2300      	movne	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Init+0x196>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e022      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10e      	bne.n	8006cdc <HAL_I2C_Init+0x1bc>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1e58      	subs	r0, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6859      	ldr	r1, [r3, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	440b      	add	r3, r1
 8006ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cda:	e00f      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1e58      	subs	r0, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	0099      	lsls	r1, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	6809      	ldr	r1, [r1, #0]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6911      	ldr	r1, [r2, #16]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68d2      	ldr	r2, [r2, #12]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	000186a0 	.word	0x000186a0
 8006d98:	001e847f 	.word	0x001e847f
 8006d9c:	003d08ff 	.word	0x003d08ff
 8006da0:	431bde83 	.word	0x431bde83
 8006da4:	10624dd3 	.word	0x10624dd3

08006da8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dba:	2b80      	cmp	r3, #128	@ 0x80
 8006dbc:	d103      	bne.n	8006dc6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	611a      	str	r2, [r3, #16]
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr

08006dd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	817b      	strh	r3, [r7, #10]
 8006de2:	460b      	mov	r3, r1
 8006de4:	813b      	strh	r3, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dea:	f7fe fa35 	bl	8005258 <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	f040 80d9 	bne.w	8006fb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2319      	movs	r3, #25
 8006e04:	2201      	movs	r2, #1
 8006e06:	496d      	ldr	r1, [pc, #436]	@ (8006fbc <HAL_I2C_Mem_Write+0x1ec>)
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f002 f927 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0cc      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_I2C_Mem_Write+0x56>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e0c5      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d007      	beq.n	8006e4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2221      	movs	r2, #33	@ 0x21
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2240      	movs	r2, #64	@ 0x40
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8006fc0 <HAL_I2C_Mem_Write+0x1f0>)
 8006e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e8e:	88f8      	ldrh	r0, [r7, #6]
 8006e90:	893a      	ldrh	r2, [r7, #8]
 8006e92:	8979      	ldrh	r1, [r7, #10]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f001 feb6 	bl	8008c10 <I2C_RequestMemoryWrite>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d052      	beq.n	8006f50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e081      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f002 f9ec 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00d      	beq.n	8006eda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d107      	bne.n	8006ed6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e06b      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d11b      	bne.n	8006f50 <HAL_I2C_Mem_Write+0x180>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1aa      	bne.n	8006eae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f002 f9df 	bl	8009320 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00d      	beq.n	8006f84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d107      	bne.n	8006f80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e016      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e000      	b.n	8006fb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
  }
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	00100002 	.word	0x00100002
 8006fc0:	ffff0000 	.word	0xffff0000

08006fc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08c      	sub	sp, #48	@ 0x30
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	4608      	mov	r0, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	817b      	strh	r3, [r7, #10]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	813b      	strh	r3, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fde:	f7fe f93b 	bl	8005258 <HAL_GetTick>
 8006fe2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	f040 8214 	bne.w	800741a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	2319      	movs	r3, #25
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	497b      	ldr	r1, [pc, #492]	@ (80071e8 <HAL_I2C_Mem_Read+0x224>)
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f002 f82d 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
 800700a:	e207      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_I2C_Mem_Read+0x56>
 8007016:	2302      	movs	r3, #2
 8007018:	e200      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d007      	beq.n	8007040 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800704e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2222      	movs	r2, #34	@ 0x22
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2240      	movs	r2, #64	@ 0x40
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4a5b      	ldr	r2, [pc, #364]	@ (80071ec <HAL_I2C_Mem_Read+0x228>)
 8007080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007082:	88f8      	ldrh	r0, [r7, #6]
 8007084:	893a      	ldrh	r2, [r7, #8]
 8007086:	8979      	ldrh	r1, [r7, #10]
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f001 fe52 	bl	8008d3c <I2C_RequestMemoryRead>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e1bc      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d113      	bne.n	80070d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070aa:	2300      	movs	r3, #0
 80070ac:	623b      	str	r3, [r7, #32]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	623b      	str	r3, [r7, #32]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e190      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d11b      	bne.n	8007112 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	e170      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007116:	2b02      	cmp	r3, #2
 8007118:	d11b      	bne.n	8007152 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007128:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	e150      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007168:	e144      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800716e:	2b03      	cmp	r3, #3
 8007170:	f200 80f1 	bhi.w	8007356 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007178:	2b01      	cmp	r3, #1
 800717a:	d123      	bne.n	80071c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800717c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800717e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f002 f947 	bl	8009414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e145      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80071c2:	e117      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d14e      	bne.n	800726a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	2200      	movs	r2, #0
 80071d4:	4906      	ldr	r1, [pc, #24]	@ (80071f0 <HAL_I2C_Mem_Read+0x22c>)
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 ff40 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e11a      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
 80071e6:	bf00      	nop
 80071e8:	00100002 	.word	0x00100002
 80071ec:	ffff0000 	.word	0xffff0000
 80071f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007268:	e0c4      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007270:	2200      	movs	r2, #0
 8007272:	496c      	ldr	r1, [pc, #432]	@ (8007424 <HAL_I2C_Mem_Read+0x460>)
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 fef1 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e0cb      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	2200      	movs	r2, #0
 80072ce:	4955      	ldr	r1, [pc, #340]	@ (8007424 <HAL_I2C_Mem_Read+0x460>)
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 fec3 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e09d      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007354:	e04e      	b.n	80073f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007358:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f002 f85a 	bl	8009414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e058      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d124      	bne.n	80073f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d107      	bne.n	80073c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f aeb6 	bne.w	800716a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800741a:	2302      	movs	r3, #2
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3728      	adds	r7, #40	@ 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	00010004 	.word	0x00010004

08007428 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007448:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007450:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	2b10      	cmp	r3, #16
 8007456:	d003      	beq.n	8007460 <HAL_I2C_EV_IRQHandler+0x38>
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	2b40      	cmp	r3, #64	@ 0x40
 800745c:	f040 80c1 	bne.w	80075e2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10d      	bne.n	8007496 <HAL_I2C_EV_IRQHandler+0x6e>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007480:	d003      	beq.n	800748a <HAL_I2C_EV_IRQHandler+0x62>
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007488:	d101      	bne.n	800748e <HAL_I2C_EV_IRQHandler+0x66>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_I2C_EV_IRQHandler+0x68>
 800748e:	2300      	movs	r3, #0
 8007490:	2b01      	cmp	r3, #1
 8007492:	f000 8132 	beq.w	80076fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00c      	beq.n	80074ba <HAL_I2C_EV_IRQHandler+0x92>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	0a5b      	lsrs	r3, r3, #9
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d006      	beq.n	80074ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 f83c 	bl	800952a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fd91 	bl	8007fda <I2C_Master_SB>
 80074b8:	e092      	b.n	80075e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	08db      	lsrs	r3, r3, #3
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_I2C_EV_IRQHandler+0xb2>
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	0a5b      	lsrs	r3, r3, #9
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fe06 	bl	80080e4 <I2C_Master_ADD10>
 80074d8:	e082      	b.n	80075e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <HAL_I2C_EV_IRQHandler+0xd2>
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	0a5b      	lsrs	r3, r3, #9
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fe1f 	bl	8008136 <I2C_Master_ADDR>
 80074f8:	e072      	b.n	80075e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d03b      	beq.n	800757e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007514:	f000 80f3 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	09db      	lsrs	r3, r3, #7
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <HAL_I2C_EV_IRQHandler+0x11c>
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	0a9b      	lsrs	r3, r3, #10
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_I2C_EV_IRQHandler+0x11c>
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	089b      	lsrs	r3, r3, #2
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9e9 	bl	8007914 <I2C_MasterTransmit_TXE>
 8007542:	e04d      	b.n	80075e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	089b      	lsrs	r3, r3, #2
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80d6 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	0a5b      	lsrs	r3, r3, #9
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80cf 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b21      	cmp	r3, #33	@ 0x21
 8007564:	d103      	bne.n	800756e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fa70 	bl	8007a4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800756c:	e0c7      	b.n	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b40      	cmp	r3, #64	@ 0x40
 8007572:	f040 80c4 	bne.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fade 	bl	8007b38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800757c:	e0bf      	b.n	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758c:	f000 80b7 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	099b      	lsrs	r3, r3, #6
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <HAL_I2C_EV_IRQHandler+0x194>
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	0a9b      	lsrs	r3, r3, #10
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <HAL_I2C_EV_IRQHandler+0x194>
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	089b      	lsrs	r3, r3, #2
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d103      	bne.n	80075bc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb57 	bl	8007c68 <I2C_MasterReceive_RXNE>
 80075ba:	e011      	b.n	80075e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	089b      	lsrs	r3, r3, #2
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 809a 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8093 	beq.w	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc0d 	bl	8007df8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075de:	e08e      	b.n	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80075e0:	e08d      	b.n	80076fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e007      	b.n	8007604 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <HAL_I2C_EV_IRQHandler+0x20e>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	0a5b      	lsrs	r3, r3, #9
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00c      	beq.n	8007636 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 ffcd 	bl	80085ce <I2C_Slave_ADDR>
 8007634:	e066      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <HAL_I2C_EV_IRQHandler+0x22e>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	0a5b      	lsrs	r3, r3, #9
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f808 	bl	8008664 <I2C_Slave_STOPF>
 8007654:	e056      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b21      	cmp	r3, #33	@ 0x21
 800765a:	d002      	beq.n	8007662 <HAL_I2C_EV_IRQHandler+0x23a>
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b29      	cmp	r3, #41	@ 0x29
 8007660:	d125      	bne.n	80076ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	09db      	lsrs	r3, r3, #7
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00f      	beq.n	800768e <HAL_I2C_EV_IRQHandler+0x266>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	0a9b      	lsrs	r3, r3, #10
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <HAL_I2C_EV_IRQHandler+0x266>
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	089b      	lsrs	r3, r3, #2
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fee5 	bl	8008456 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800768c:	e039      	b.n	8007702 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	089b      	lsrs	r3, r3, #2
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d033      	beq.n	8007702 <HAL_I2C_EV_IRQHandler+0x2da>
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	0a5b      	lsrs	r3, r3, #9
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02d      	beq.n	8007702 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 ff12 	bl	80084d0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076ac:	e029      	b.n	8007702 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00f      	beq.n	80076da <HAL_I2C_EV_IRQHandler+0x2b2>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	0a9b      	lsrs	r3, r3, #10
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_I2C_EV_IRQHandler+0x2b2>
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	089b      	lsrs	r3, r3, #2
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 ff1c 	bl	8008510 <I2C_SlaveReceive_RXNE>
 80076d8:	e014      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	089b      	lsrs	r3, r3, #2
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00e      	beq.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	0a5b      	lsrs	r3, r3, #9
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 ff4a 	bl	800858c <I2C_SlaveReceive_BTF>
 80076f8:	e004      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80076fa:	bf00      	nop
 80076fc:	e002      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007702:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b08a      	sub	sp, #40	@ 0x28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007722:	2300      	movs	r3, #0
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800772c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	0a1b      	lsrs	r3, r3, #8
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <HAL_I2C_ER_IRQHandler+0x4e>
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	0a1b      	lsrs	r3, r3, #8
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007756:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	0a5b      	lsrs	r3, r3, #9
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <HAL_I2C_ER_IRQHandler+0x78>
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	f043 0302 	orr.w	r3, r3, #2
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007780:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	0a9b      	lsrs	r3, r3, #10
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d03f      	beq.n	800780e <HAL_I2C_ER_IRQHandler+0x104>
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d039      	beq.n	800780e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800779a:	7efb      	ldrb	r3, [r7, #27]
 800779c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80077b4:	7ebb      	ldrb	r3, [r7, #26]
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d112      	bne.n	80077e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10f      	bne.n	80077e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80077c0:	7cfb      	ldrb	r3, [r7, #19]
 80077c2:	2b21      	cmp	r3, #33	@ 0x21
 80077c4:	d008      	beq.n	80077d8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80077c6:	7cfb      	ldrb	r3, [r7, #19]
 80077c8:	2b29      	cmp	r3, #41	@ 0x29
 80077ca:	d005      	beq.n	80077d8 <HAL_I2C_ER_IRQHandler+0xce>
 80077cc:	7cfb      	ldrb	r3, [r7, #19]
 80077ce:	2b28      	cmp	r3, #40	@ 0x28
 80077d0:	d106      	bne.n	80077e0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b21      	cmp	r3, #33	@ 0x21
 80077d6:	d103      	bne.n	80077e0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 f873 	bl	80088c4 <I2C_Slave_AF>
 80077de:	e016      	b.n	800780e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	f043 0304 	orr.w	r3, r3, #4
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077f2:	7efb      	ldrb	r3, [r7, #27]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d002      	beq.n	80077fe <HAL_I2C_ER_IRQHandler+0xf4>
 80077f8:	7efb      	ldrb	r3, [r7, #27]
 80077fa:	2b40      	cmp	r3, #64	@ 0x40
 80077fc:	d107      	bne.n	800780e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800780c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	0adb      	lsrs	r3, r3, #11
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00e      	beq.n	8007838 <HAL_I2C_ER_IRQHandler+0x12e>
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	f043 0308 	orr.w	r3, r3, #8
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007836:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 f8ae 	bl	80089ac <I2C_ITError>
  }
}
 8007850:	bf00      	nop
 8007852:	3728      	adds	r7, #40	@ 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr

0800786a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
 80078ac:	4613      	mov	r3, r2
 80078ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr

08007902 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007922:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800792a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d150      	bne.n	80079dc <I2C_MasterTransmit_TXE+0xc8>
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b21      	cmp	r3, #33	@ 0x21
 800793e:	d14d      	bne.n	80079dc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b08      	cmp	r3, #8
 8007944:	d01d      	beq.n	8007982 <I2C_MasterTransmit_TXE+0x6e>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b20      	cmp	r3, #32
 800794a:	d01a      	beq.n	8007982 <I2C_MasterTransmit_TXE+0x6e>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007952:	d016      	beq.n	8007982 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007962:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2211      	movs	r2, #17
 8007968:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff ff6c 	bl	8007858 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007980:	e060      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007990:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079a0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b40      	cmp	r3, #64	@ 0x40
 80079ba:	d107      	bne.n	80079cc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff ff81 	bl	80078cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079ca:	e03b      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff3f 	bl	8007858 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079da:	e033      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b21      	cmp	r3, #33	@ 0x21
 80079e0:	d005      	beq.n	80079ee <I2C_MasterTransmit_TXE+0xda>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d12d      	bne.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b22      	cmp	r3, #34	@ 0x22
 80079ec:	d12a      	bne.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007a08:	e01c      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b40      	cmp	r3, #64	@ 0x40
 8007a14:	d103      	bne.n	8007a1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f88e 	bl	8007b38 <I2C_MemoryTransmit_TXE_BTF>
}
 8007a1c:	e012      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007a42:	e7ff      	b.n	8007a44 <I2C_MasterTransmit_TXE+0x130>
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b21      	cmp	r3, #33	@ 0x21
 8007a64:	d164      	bne.n	8007b30 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d012      	beq.n	8007a96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007a94:	e04c      	b.n	8007b30 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d01d      	beq.n	8007ad8 <I2C_MasterTransmit_BTF+0x8c>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	d01a      	beq.n	8007ad8 <I2C_MasterTransmit_BTF+0x8c>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007aa8:	d016      	beq.n	8007ad8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ab8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2211      	movs	r2, #17
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fec1 	bl	8007858 <HAL_I2C_MasterTxCpltCallback>
}
 8007ad6:	e02b      	b.n	8007b30 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ae6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007af6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	d107      	bne.n	8007b22 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fed6 	bl	80078cc <HAL_I2C_MemTxCpltCallback>
}
 8007b20:	e006      	b.n	8007b30 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fe94 	bl	8007858 <HAL_I2C_MasterTxCpltCallback>
}
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11d      	bne.n	8007b8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10b      	bne.n	8007b70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007b6e:	e077      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	121b      	asrs	r3, r3, #8
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b8a:	e069      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d10b      	bne.n	8007bac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007baa:	e059      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d152      	bne.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b22      	cmp	r3, #34	@ 0x22
 8007bb8:	d10d      	bne.n	8007bd6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bc8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007bd4:	e044      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d015      	beq.n	8007c0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b21      	cmp	r3, #33	@ 0x21
 8007be4:	d112      	bne.n	8007c0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	781a      	ldrb	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007c0a:	e029      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d124      	bne.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b21      	cmp	r3, #33	@ 0x21
 8007c1a:	d121      	bne.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c2a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fe3a 	bl	80078cc <HAL_I2C_MemTxCpltCallback>
}
 8007c58:	e002      	b.n	8007c60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f8a4 	bl	8006da8 <I2C_Flush_DR>
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b22      	cmp	r3, #34	@ 0x22
 8007c7a:	f040 80b9 	bne.w	8007df0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d921      	bls.n	8007cd6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	b2d2      	uxtb	r2, r2
 8007c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	f040 8096 	bne.w	8007df0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007cd4:	e08c      	b.n	8007df0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d07f      	beq.n	8007dde <I2C_MasterReceive_RXNE+0x176>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d002      	beq.n	8007cea <I2C_MasterReceive_RXNE+0x82>
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d179      	bne.n	8007dde <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fb60 	bl	80093b0 <I2C_WaitOnSTOPRequestThroughIT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d14c      	bne.n	8007d90 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d04:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d14:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b40      	cmp	r3, #64	@ 0x40
 8007d4e:	d10a      	bne.n	8007d66 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff fdbd 	bl	80078de <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d64:	e044      	b.n	8007df0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d002      	beq.n	8007d7a <I2C_MasterReceive_RXNE+0x112>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d103      	bne.n	8007d82 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d80:	e002      	b.n	8007d88 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2212      	movs	r2, #18
 8007d86:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fd6e 	bl	800786a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d8e:	e02f      	b.n	8007df0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d9e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fd8a 	bl	80078f0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ddc:	e008      	b.n	8007df0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dec:	605a      	str	r2, [r3, #4]
}
 8007dee:	e7ff      	b.n	8007df0 <I2C_MasterReceive_RXNE+0x188>
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e04:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d11b      	bne.n	8007e48 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e1e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007e46:	e0c4      	b.n	8007fd2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d129      	bne.n	8007ea6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e60:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d00a      	beq.n	8007e7e <I2C_MasterReceive_BTF+0x86>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d007      	beq.n	8007e7e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007ea4:	e095      	b.n	8007fd2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d17d      	bne.n	8007fac <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d002      	beq.n	8007ebc <I2C_MasterReceive_BTF+0xc4>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d108      	bne.n	8007ece <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e016      	b.n	8007efc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d002      	beq.n	8007eda <I2C_MasterReceive_BTF+0xe2>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d108      	bne.n	8007eec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e007      	b.n	8007efc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007efa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007f56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b40      	cmp	r3, #64	@ 0x40
 8007f6a:	d10a      	bne.n	8007f82 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fcaf 	bl	80078de <HAL_I2C_MemRxCpltCallback>
}
 8007f80:	e027      	b.n	8007fd2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d002      	beq.n	8007f96 <I2C_MasterReceive_BTF+0x19e>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d103      	bne.n	8007f9e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f9c:	e002      	b.n	8007fa4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2212      	movs	r2, #18
 8007fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fc60 	bl	800786a <HAL_I2C_MasterRxCpltCallback>
}
 8007faa:	e012      	b.n	8007fd2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d117      	bne.n	800801e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008006:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008008:	e067      	b.n	80080da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	b2da      	uxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	611a      	str	r2, [r3, #16]
}
 800801c:	e05d      	b.n	80080da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008026:	d133      	bne.n	8008090 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b21      	cmp	r3, #33	@ 0x21
 8008032:	d109      	bne.n	8008048 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008044:	611a      	str	r2, [r3, #16]
 8008046:	e008      	b.n	800805a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <I2C_Master_SB+0x92>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d032      	beq.n	80080da <I2C_Master_SB+0x100>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d02d      	beq.n	80080da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800808c:	605a      	str	r2, [r3, #4]
}
 800808e:	e024      	b.n	80080da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10e      	bne.n	80080b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809c:	b29b      	uxth	r3, r3
 800809e:	11db      	asrs	r3, r3, #7
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0306 	and.w	r3, r3, #6
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f063 030f 	orn	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	611a      	str	r2, [r3, #16]
}
 80080b4:	e011      	b.n	80080da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10d      	bne.n	80080da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	11db      	asrs	r3, r3, #7
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f063 030e 	orn	r3, r3, #14
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	611a      	str	r2, [r3, #16]
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <I2C_Master_ADD10+0x26>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d108      	bne.n	800811c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <I2C_Master_ADD10+0x48>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800812a:	605a      	str	r2, [r3, #4]
  }
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr

08008136 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008136:	b480      	push	{r7}
 8008138:	b091      	sub	sp, #68	@ 0x44
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b22      	cmp	r3, #34	@ 0x22
 800815e:	f040 8169 	bne.w	8008434 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10f      	bne.n	800818a <I2C_Master_ADDR+0x54>
 800816a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d10b      	bne.n	800818a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008172:	2300      	movs	r3, #0
 8008174:	633b      	str	r3, [r7, #48]	@ 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	633b      	str	r3, [r7, #48]	@ 0x30
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	e160      	b.n	800844c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11d      	bne.n	80081ce <I2C_Master_ADDR+0x98>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800819a:	d118      	bne.n	80081ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800819c:	2300      	movs	r3, #0
 800819e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80081cc:	e13e      	b.n	800844c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d113      	bne.n	8008200 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d8:	2300      	movs	r3, #0
 80081da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e115      	b.n	800842c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b01      	cmp	r3, #1
 8008208:	f040 808a 	bne.w	8008320 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008212:	d137      	bne.n	8008284 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008222:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800822e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008232:	d113      	bne.n	800825c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008242:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008244:	2300      	movs	r3, #0
 8008246:	627b      	str	r3, [r7, #36]	@ 0x24
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	627b      	str	r3, [r7, #36]	@ 0x24
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	e0e7      	b.n	800842c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800825c:	2300      	movs	r3, #0
 800825e:	623b      	str	r3, [r7, #32]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	623b      	str	r3, [r7, #32]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e0d3      	b.n	800842c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	2b08      	cmp	r3, #8
 8008288:	d02e      	beq.n	80082e8 <I2C_Master_ADDR+0x1b2>
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	2b20      	cmp	r3, #32
 800828e:	d02b      	beq.n	80082e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	2b12      	cmp	r3, #18
 8008294:	d102      	bne.n	800829c <I2C_Master_ADDR+0x166>
 8008296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008298:	2b01      	cmp	r3, #1
 800829a:	d125      	bne.n	80082e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00e      	beq.n	80082c0 <I2C_Master_ADDR+0x18a>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d00b      	beq.n	80082c0 <I2C_Master_ADDR+0x18a>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	2b10      	cmp	r3, #16
 80082ac:	d008      	beq.n	80082c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e007      	b.n	80082d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	61fb      	str	r3, [r7, #28]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	e0a1      	b.n	800842c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f8:	2300      	movs	r3, #0
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	61bb      	str	r3, [r7, #24]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e085      	b.n	800842c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d14d      	bne.n	80083c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800832a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832c:	2b04      	cmp	r3, #4
 800832e:	d016      	beq.n	800835e <I2C_Master_ADDR+0x228>
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	2b02      	cmp	r3, #2
 8008334:	d013      	beq.n	800835e <I2C_Master_ADDR+0x228>
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	2b10      	cmp	r3, #16
 800833a:	d010      	beq.n	800835e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800834a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	e007      	b.n	800836e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800836c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800837c:	d117      	bne.n	80083ae <I2C_Master_ADDR+0x278>
 800837e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008384:	d00b      	beq.n	800839e <I2C_Master_ADDR+0x268>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	2b01      	cmp	r3, #1
 800838a:	d008      	beq.n	800839e <I2C_Master_ADDR+0x268>
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	2b08      	cmp	r3, #8
 8008390:	d005      	beq.n	800839e <I2C_Master_ADDR+0x268>
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	2b10      	cmp	r3, #16
 8008396:	d002      	beq.n	800839e <I2C_Master_ADDR+0x268>
 8008398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839a:	2b20      	cmp	r3, #32
 800839c:	d107      	bne.n	80083ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	e032      	b.n	800842c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80083d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e4:	d117      	bne.n	8008416 <I2C_Master_ADDR+0x2e0>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083ec:	d00b      	beq.n	8008406 <I2C_Master_ADDR+0x2d0>
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d008      	beq.n	8008406 <I2C_Master_ADDR+0x2d0>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d005      	beq.n	8008406 <I2C_Master_ADDR+0x2d0>
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d002      	beq.n	8008406 <I2C_Master_ADDR+0x2d0>
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	2b20      	cmp	r3, #32
 8008404:	d107      	bne.n	8008416 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008414:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008432:	e00b      	b.n	800844c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	e7ff      	b.n	800844c <I2C_Master_ADDR+0x316>
 800844c:	bf00      	nop
 800844e:	3744      	adds	r7, #68	@ 0x44
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008464:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02b      	beq.n	80084c8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	781a      	ldrb	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800848a:	b29b      	uxth	r3, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d114      	bne.n	80084c8 <I2C_SlaveTransmit_TXE+0x72>
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	2b29      	cmp	r3, #41	@ 0x29
 80084a2:	d111      	bne.n	80084c8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2221      	movs	r2, #33	@ 0x21
 80084b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2228      	movs	r2, #40	@ 0x28
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff f9da 	bl	800787c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d011      	beq.n	8008506 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d02c      	beq.n	8008584 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	b2d2      	uxtb	r2, r2
 8008536:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008554:	b29b      	uxth	r3, r3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d114      	bne.n	8008584 <I2C_SlaveReceive_RXNE+0x74>
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b2a      	cmp	r3, #42	@ 0x2a
 800855e:	d111      	bne.n	8008584 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2222      	movs	r2, #34	@ 0x22
 8008574:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2228      	movs	r2, #40	@ 0x28
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff f985 	bl	800788e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008598:	b29b      	uxth	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d012      	beq.n	80085c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085e8:	2b28      	cmp	r3, #40	@ 0x28
 80085ea:	d127      	bne.n	800863c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	089b      	lsrs	r3, r3, #2
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	09db      	lsrs	r3, r3, #7
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	81bb      	strh	r3, [r7, #12]
 800861e:	e002      	b.n	8008626 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800862e:	89ba      	ldrh	r2, [r7, #12]
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff f933 	bl	80078a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800863a:	e00e      	b.n	800865a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800863c:	2300      	movs	r3, #0
 800863e:	60bb      	str	r3, [r7, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008672:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008682:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c0:	d172      	bne.n	80087a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b22      	cmp	r3, #34	@ 0x22
 80086c6:	d002      	beq.n	80086ce <I2C_Slave_STOPF+0x6a>
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80086cc:	d135      	bne.n	800873a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	f043 0204 	orr.w	r2, r3, #4
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008700:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd fdcc 	bl	80062a4 <HAL_DMA_GetState>
 800870c:	4603      	mov	r3, r0
 800870e:	2b01      	cmp	r3, #1
 8008710:	d049      	beq.n	80087a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	4a69      	ldr	r2, [pc, #420]	@ (80088bc <I2C_Slave_STOPF+0x258>)
 8008718:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	4618      	mov	r0, r3
 8008720:	f7fd fd7f 	bl	8006222 <HAL_DMA_Abort_IT>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d03d      	beq.n	80087a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008738:	e035      	b.n	80087a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008756:	f043 0204 	orr.w	r2, r3, #4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800876c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd fd96 	bl	80062a4 <HAL_DMA_GetState>
 8008778:	4603      	mov	r3, r0
 800877a:	2b01      	cmp	r3, #1
 800877c:	d014      	beq.n	80087a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008782:	4a4e      	ldr	r2, [pc, #312]	@ (80088bc <I2C_Slave_STOPF+0x258>)
 8008784:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd fd49 	bl	8006222 <HAL_DMA_Abort_IT>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	e000      	b.n	80087a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d03e      	beq.n	8008830 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d112      	bne.n	80087e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f0:	2b40      	cmp	r3, #64	@ 0x40
 80087f2:	d112      	bne.n	800881a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008828:	f043 0204 	orr.w	r2, r3, #4
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f8b7 	bl	80089ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800883e:	e039      	b.n	80088b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b2a      	cmp	r3, #42	@ 0x2a
 8008844:	d109      	bne.n	800885a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2228      	movs	r2, #40	@ 0x28
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff f81a 	bl	800788e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b28      	cmp	r3, #40	@ 0x28
 8008864:	d111      	bne.n	800888a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a15      	ldr	r2, [pc, #84]	@ (80088c0 <I2C_Slave_STOPF+0x25c>)
 800886a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff f819 	bl	80078ba <HAL_I2C_ListenCpltCallback>
}
 8008888:	e014      	b.n	80088b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888e:	2b22      	cmp	r3, #34	@ 0x22
 8008890:	d002      	beq.n	8008898 <I2C_Slave_STOPF+0x234>
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b22      	cmp	r3, #34	@ 0x22
 8008896:	d10d      	bne.n	80088b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7fe ffed 	bl	800788e <HAL_I2C_SlaveRxCpltCallback>
}
 80088b4:	bf00      	nop
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	08008f0d 	.word	0x08008f0d
 80088c0:	ffff0000 	.word	0xffff0000

080088c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d002      	beq.n	80088e6 <I2C_Slave_AF+0x22>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	d129      	bne.n	800893a <I2C_Slave_AF+0x76>
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	2b28      	cmp	r3, #40	@ 0x28
 80088ea:	d126      	bne.n	800893a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a2e      	ldr	r2, [pc, #184]	@ (80089a8 <I2C_Slave_AF+0xe4>)
 80088f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008900:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800890a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800891a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe ffc1 	bl	80078ba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008938:	e031      	b.n	800899e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	2b21      	cmp	r3, #33	@ 0x21
 800893e:	d129      	bne.n	8008994 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a19      	ldr	r2, [pc, #100]	@ (80089a8 <I2C_Slave_AF+0xe4>)
 8008944:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2221      	movs	r2, #33	@ 0x21
 800894a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800896a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008974:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008984:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fe fa0e 	bl	8006da8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fe ff75 	bl	800787c <HAL_I2C_SlaveTxCpltCallback>
}
 8008992:	e004      	b.n	800899e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800899c:	615a      	str	r2, [r3, #20]
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	ffff0000 	.word	0xffff0000

080089ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d002      	beq.n	80089d0 <I2C_ITError+0x24>
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b40      	cmp	r3, #64	@ 0x40
 80089ce:	d10a      	bne.n	80089e6 <I2C_ITError+0x3a>
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b22      	cmp	r3, #34	@ 0x22
 80089d4:	d107      	bne.n	80089e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089ec:	2b28      	cmp	r3, #40	@ 0x28
 80089ee:	d107      	bne.n	8008a00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2228      	movs	r2, #40	@ 0x28
 80089fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80089fe:	e015      	b.n	8008a2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a0e:	d00a      	beq.n	8008a26 <I2C_ITError+0x7a>
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b60      	cmp	r3, #96	@ 0x60
 8008a14:	d007      	beq.n	8008a26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a3a:	d162      	bne.n	8008b02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d020      	beq.n	8008a9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5e:	4a6a      	ldr	r2, [pc, #424]	@ (8008c08 <I2C_ITError+0x25c>)
 8008a60:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fd fbdb 	bl	8006222 <HAL_DMA_Abort_IT>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 8089 	beq.w	8008b86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0201 	bic.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
 8008a9a:	e074      	b.n	8008b86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa0:	4a59      	ldr	r2, [pc, #356]	@ (8008c08 <I2C_ITError+0x25c>)
 8008aa2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fd fbba 	bl	8006222 <HAL_DMA_Abort_IT>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d068      	beq.n	8008b86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008abe:	2b40      	cmp	r3, #64	@ 0x40
 8008ac0:	d10b      	bne.n	8008ada <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	691a      	ldr	r2, [r3, #16]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0201 	bic.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008afc:	4610      	mov	r0, r2
 8008afe:	4798      	blx	r3
 8008b00:	e041      	b.n	8008b86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b60      	cmp	r3, #96	@ 0x60
 8008b0c:	d125      	bne.n	8008b5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d10b      	bne.n	8008b42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691a      	ldr	r2, [r3, #16]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0201 	bic.w	r2, r2, #1
 8008b50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fe fed5 	bl	8007902 <HAL_I2C_AbortCpltCallback>
 8008b58:	e015      	b.n	8008b86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b64:	2b40      	cmp	r3, #64	@ 0x40
 8008b66:	d10b      	bne.n	8008b80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691a      	ldr	r2, [r3, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fe feb5 	bl	80078f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10e      	bne.n	8008bb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008bc2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d113      	bne.n	8008c00 <I2C_ITError+0x254>
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b28      	cmp	r3, #40	@ 0x28
 8008bdc:	d110      	bne.n	8008c00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c0c <I2C_ITError+0x260>)
 8008be2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fe fe5d 	bl	80078ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	08008f0d 	.word	0x08008f0d
 8008c0c:	ffff0000 	.word	0xffff0000

08008c10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	817b      	strh	r3, [r7, #10]
 8008c22:	460b      	mov	r3, r1
 8008c24:	813b      	strh	r3, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fa08 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c60:	d103      	bne.n	8008c6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e05f      	b.n	8008d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	6a3a      	ldr	r2, [r7, #32]
 8008c82:	492d      	ldr	r1, [pc, #180]	@ (8008d38 <I2C_RequestMemoryWrite+0x128>)
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fa63 	bl	8009150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e04c      	b.n	8008d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cac:	6a39      	ldr	r1, [r7, #32]
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 faee 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00d      	beq.n	8008cd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d107      	bne.n	8008cd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e02b      	b.n	8008d2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d105      	bne.n	8008ce8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	611a      	str	r2, [r3, #16]
 8008ce6:	e021      	b.n	8008d2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ce8:	893b      	ldrh	r3, [r7, #8]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cf8:	6a39      	ldr	r1, [r7, #32]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fac8 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00d      	beq.n	8008d22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d107      	bne.n	8008d1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e005      	b.n	8008d2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d22:	893b      	ldrh	r3, [r7, #8]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	00010002 	.word	0x00010002

08008d3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	817b      	strh	r3, [r7, #10]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	813b      	strh	r3, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f96a 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00d      	beq.n	8008daa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d9c:	d103      	bne.n	8008da6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008da4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e0aa      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008daa:	897b      	ldrh	r3, [r7, #10]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	6a3a      	ldr	r2, [r7, #32]
 8008dbe:	4952      	ldr	r1, [pc, #328]	@ (8008f08 <I2C_RequestMemoryRead+0x1cc>)
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f9c5 	bl	8009150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e097      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de8:	6a39      	ldr	r1, [r7, #32]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fa50 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d107      	bne.n	8008e0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e076      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d105      	bne.n	8008e24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	611a      	str	r2, [r3, #16]
 8008e22:	e021      	b.n	8008e68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e24:	893b      	ldrh	r3, [r7, #8]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e34:	6a39      	ldr	r1, [r7, #32]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fa2a 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00d      	beq.n	8008e5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d107      	bne.n	8008e5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e050      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e5e:	893b      	ldrh	r3, [r7, #8]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6a:	6a39      	ldr	r1, [r7, #32]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fa0f 	bl	8009290 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00d      	beq.n	8008e94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d107      	bne.n	8008e90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e035      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 f8d3 	bl	800905c <I2C_WaitOnFlagUntilTimeout>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00d      	beq.n	8008ed8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eca:	d103      	bne.n	8008ed4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e013      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ed8:	897b      	ldrh	r3, [r7, #10]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	4906      	ldr	r1, [pc, #24]	@ (8008f08 <I2C_RequestMemoryRead+0x1cc>)
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f92e 	bl	8009150 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e000      	b.n	8008f00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	00010002 	.word	0x00010002

08008f0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f26:	4b4b      	ldr	r3, [pc, #300]	@ (8009054 <I2C_DMAAbort+0x148>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	08db      	lsrs	r3, r3, #3
 8008f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8009058 <I2C_DMAAbort+0x14c>)
 8008f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f32:	0a1a      	lsrs	r2, r3, #8
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	00da      	lsls	r2, r3, #3
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	f043 0220 	orr.w	r2, r3, #32
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008f52:	e00a      	b.n	8008f6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f68:	d0ea      	beq.n	8008f40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f76:	2200      	movs	r2, #0
 8008f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f86:	2200      	movs	r2, #0
 8008f88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fac:	2200      	movs	r2, #0
 8008fae:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b60      	cmp	r3, #96	@ 0x60
 8008fda:	d10e      	bne.n	8008ffa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f7fe fc85 	bl	8007902 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ff8:	e027      	b.n	800904a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ffa:	7cfb      	ldrb	r3, [r7, #19]
 8008ffc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009000:	2b28      	cmp	r3, #40	@ 0x28
 8009002:	d117      	bne.n	8009034 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0201 	orr.w	r2, r2, #1
 8009012:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009022:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2200      	movs	r2, #0
 8009028:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2228      	movs	r2, #40	@ 0x28
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009032:	e007      	b.n	8009044 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009044:	6978      	ldr	r0, [r7, #20]
 8009046:	f7fe fc53 	bl	80078f0 <HAL_I2C_ErrorCallback>
}
 800904a:	bf00      	nop
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000004 	.word	0x20000004
 8009058:	14f8b589 	.word	0x14f8b589

0800905c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800906c:	e048      	b.n	8009100 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d044      	beq.n	8009100 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009076:	f7fc f8ef 	bl	8005258 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d302      	bcc.n	800908c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d139      	bne.n	8009100 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d10d      	bne.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	43da      	mvns	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4013      	ands	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bf0c      	ite	eq
 80090a8:	2301      	moveq	r3, #1
 80090aa:	2300      	movne	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	e00c      	b.n	80090cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	43da      	mvns	r2, r3
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4013      	ands	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf0c      	ite	eq
 80090c4:	2301      	moveq	r3, #1
 80090c6:	2300      	movne	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d116      	bne.n	8009100 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ec:	f043 0220 	orr.w	r2, r3, #32
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e023      	b.n	8009148 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	0c1b      	lsrs	r3, r3, #16
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b01      	cmp	r3, #1
 8009108:	d10d      	bne.n	8009126 <I2C_WaitOnFlagUntilTimeout+0xca>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	43da      	mvns	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4013      	ands	r3, r2
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	461a      	mov	r2, r3
 8009124:	e00c      	b.n	8009140 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	43da      	mvns	r2, r3
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4013      	ands	r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	bf0c      	ite	eq
 8009138:	2301      	moveq	r3, #1
 800913a:	2300      	movne	r3, #0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	461a      	mov	r2, r3
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	429a      	cmp	r2, r3
 8009144:	d093      	beq.n	800906e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800915e:	e071      	b.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800916a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800916e:	d123      	bne.n	80091b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800917e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a4:	f043 0204 	orr.w	r2, r3, #4
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e067      	b.n	8009288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d041      	beq.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091c0:	f7fc f84a 	bl	8005258 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d302      	bcc.n	80091d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d136      	bne.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	0c1b      	lsrs	r3, r3, #16
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d10c      	bne.n	80091fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	43da      	mvns	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4013      	ands	r3, r2
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf14      	ite	ne
 80091f2:	2301      	movne	r3, #1
 80091f4:	2300      	moveq	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	e00b      	b.n	8009212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	43da      	mvns	r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	4013      	ands	r3, r2
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	bf14      	ite	ne
 800920c:	2301      	movne	r3, #1
 800920e:	2300      	moveq	r3, #0
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d016      	beq.n	8009244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2220      	movs	r2, #32
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009230:	f043 0220 	orr.w	r2, r3, #32
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e021      	b.n	8009288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b01      	cmp	r3, #1
 800924c:	d10c      	bne.n	8009268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	43da      	mvns	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	4013      	ands	r3, r2
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf14      	ite	ne
 8009260:	2301      	movne	r3, #1
 8009262:	2300      	moveq	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	e00b      	b.n	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	43da      	mvns	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4013      	ands	r3, r2
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	bf14      	ite	ne
 800927a:	2301      	movne	r3, #1
 800927c:	2300      	moveq	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	f47f af6d 	bne.w	8009160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800929c:	e034      	b.n	8009308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 f915 	bl	80094ce <I2C_IsAcknowledgeFailed>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e034      	b.n	8009318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b4:	d028      	beq.n	8009308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b6:	f7fb ffcf 	bl	8005258 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d302      	bcc.n	80092cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11d      	bne.n	8009308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d6:	2b80      	cmp	r3, #128	@ 0x80
 80092d8:	d016      	beq.n	8009308 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f4:	f043 0220 	orr.w	r2, r3, #32
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e007      	b.n	8009318 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009312:	2b80      	cmp	r3, #128	@ 0x80
 8009314:	d1c3      	bne.n	800929e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800932c:	e034      	b.n	8009398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f8cd 	bl	80094ce <I2C_IsAcknowledgeFailed>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e034      	b.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009344:	d028      	beq.n	8009398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009346:	f7fb ff87 	bl	8005258 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	429a      	cmp	r2, r3
 8009354:	d302      	bcc.n	800935c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d11d      	bne.n	8009398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	f003 0304 	and.w	r3, r3, #4
 8009366:	2b04      	cmp	r3, #4
 8009368:	d016      	beq.n	8009398 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009384:	f043 0220 	orr.w	r2, r3, #32
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e007      	b.n	80093a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	f003 0304 	and.w	r3, r3, #4
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d1c3      	bne.n	800932e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80093bc:	4b13      	ldr	r3, [pc, #76]	@ (800940c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	4a13      	ldr	r2, [pc, #76]	@ (8009410 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	0a1a      	lsrs	r2, r3, #8
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d107      	bne.n	80093ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e2:	f043 0220 	orr.w	r2, r3, #32
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e008      	b.n	8009400 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093fc:	d0e9      	beq.n	80093d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	bc80      	pop	{r7}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20000004 	.word	0x20000004
 8009410:	14f8b589 	.word	0x14f8b589

08009414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009420:	e049      	b.n	80094b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	f003 0310 	and.w	r3, r3, #16
 800942c:	2b10      	cmp	r3, #16
 800942e:	d119      	bne.n	8009464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0210 	mvn.w	r2, #16
 8009438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e030      	b.n	80094c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009464:	f7fb fef8 	bl	8005258 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d11d      	bne.n	80094b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009484:	2b40      	cmp	r3, #64	@ 0x40
 8009486:	d016      	beq.n	80094b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094a2:	f043 0220 	orr.w	r2, r3, #32
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e007      	b.n	80094c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c0:	2b40      	cmp	r3, #64	@ 0x40
 80094c2:	d1ae      	bne.n	8009422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e4:	d11b      	bne.n	800951e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950a:	f043 0204 	orr.w	r2, r3, #4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr

0800952a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800953a:	d103      	bne.n	8009544 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009542:	e007      	b.n	8009554 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009548:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800954c:	d102      	bne.n	8009554 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2208      	movs	r2, #8
 8009552:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr
	...

08009560 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800956c:	4b10      	ldr	r3, [pc, #64]	@ (80095b0 <HAL_PWR_EnterSTOPMode+0x50>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f023 0203 	bic.w	r2, r3, #3
 8009574:	490e      	ldr	r1, [pc, #56]	@ (80095b0 <HAL_PWR_EnterSTOPMode+0x50>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4313      	orrs	r3, r2
 800957a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800957c:	4b0d      	ldr	r3, [pc, #52]	@ (80095b4 <HAL_PWR_EnterSTOPMode+0x54>)
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a0c      	ldr	r2, [pc, #48]	@ (80095b4 <HAL_PWR_EnterSTOPMode+0x54>)
 8009582:	f043 0304 	orr.w	r3, r3, #4
 8009586:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800958e:	bf30      	wfi
 8009590:	e002      	b.n	8009598 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009592:	bf40      	sev
    __WFE();
 8009594:	bf20      	wfe
    __WFE();
 8009596:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <HAL_PWR_EnterSTOPMode+0x54>)
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	4a05      	ldr	r2, [pc, #20]	@ (80095b4 <HAL_PWR_EnterSTOPMode+0x54>)
 800959e:	f023 0304 	bic.w	r3, r3, #4
 80095a2:	6113      	str	r3, [r2, #16]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	40007000 	.word	0x40007000
 80095b4:	e000ed00 	.word	0xe000ed00

080095b8 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095c2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	fa93 f3a3 	rbit	r3, r3
 80095ca:	603b      	str	r3, [r7, #0]
  return result;
 80095cc:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 80095ce:	fab3 f383 	clz	r3, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80095da:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 80095de:	461a      	mov	r2, r3
 80095e0:	2301      	movs	r3, #1
 80095e2:	6013      	str	r3, [r2, #0]
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
	...

080095f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e31d      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009602:	4b94      	ldr	r3, [pc, #592]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 030c 	and.w	r3, r3, #12
 800960a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800960c:	4b91      	ldr	r3, [pc, #580]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009614:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d07b      	beq.n	800971a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b08      	cmp	r3, #8
 8009626:	d006      	beq.n	8009636 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b0c      	cmp	r3, #12
 800962c:	d10f      	bne.n	800964e <HAL_RCC_OscConfig+0x5e>
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009634:	d10b      	bne.n	800964e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009636:	4b87      	ldr	r3, [pc, #540]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d06a      	beq.n	8009718 <HAL_RCC_OscConfig+0x128>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d166      	bne.n	8009718 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e2f7      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d106      	bne.n	8009664 <HAL_RCC_OscConfig+0x74>
 8009656:	4b7f      	ldr	r3, [pc, #508]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a7e      	ldr	r2, [pc, #504]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800965c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009660:	6013      	str	r3, [r2, #0]
 8009662:	e02d      	b.n	80096c0 <HAL_RCC_OscConfig+0xd0>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <HAL_RCC_OscConfig+0x96>
 800966c:	4b79      	ldr	r3, [pc, #484]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a78      	ldr	r2, [pc, #480]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	4b76      	ldr	r3, [pc, #472]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a75      	ldr	r2, [pc, #468]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800967e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	e01c      	b.n	80096c0 <HAL_RCC_OscConfig+0xd0>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b05      	cmp	r3, #5
 800968c:	d10c      	bne.n	80096a8 <HAL_RCC_OscConfig+0xb8>
 800968e:	4b71      	ldr	r3, [pc, #452]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a70      	ldr	r2, [pc, #448]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	4b6e      	ldr	r3, [pc, #440]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a6d      	ldr	r2, [pc, #436]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	e00b      	b.n	80096c0 <HAL_RCC_OscConfig+0xd0>
 80096a8:	4b6a      	ldr	r3, [pc, #424]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a69      	ldr	r2, [pc, #420]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	4b67      	ldr	r3, [pc, #412]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a66      	ldr	r2, [pc, #408]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d013      	beq.n	80096f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c8:	f7fb fdc6 	bl	8005258 <HAL_GetTick>
 80096cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096d0:	f7fb fdc2 	bl	8005258 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b64      	cmp	r3, #100	@ 0x64
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e2ad      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096e2:	4b5c      	ldr	r3, [pc, #368]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0f0      	beq.n	80096d0 <HAL_RCC_OscConfig+0xe0>
 80096ee:	e014      	b.n	800971a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096f0:	f7fb fdb2 	bl	8005258 <HAL_GetTick>
 80096f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80096f6:	e008      	b.n	800970a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096f8:	f7fb fdae 	bl	8005258 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b64      	cmp	r3, #100	@ 0x64
 8009704:	d901      	bls.n	800970a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e299      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800970a:	4b52      	ldr	r3, [pc, #328]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1f0      	bne.n	80096f8 <HAL_RCC_OscConfig+0x108>
 8009716:	e000      	b.n	800971a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0302 	and.w	r3, r3, #2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d05a      	beq.n	80097dc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b04      	cmp	r3, #4
 800972a:	d005      	beq.n	8009738 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b0c      	cmp	r3, #12
 8009730:	d119      	bne.n	8009766 <HAL_RCC_OscConfig+0x176>
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d116      	bne.n	8009766 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009738:	4b46      	ldr	r3, [pc, #280]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <HAL_RCC_OscConfig+0x160>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d001      	beq.n	8009750 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e276      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009750:	4b40      	ldr	r3, [pc, #256]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	493d      	ldr	r1, [pc, #244]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009760:	4313      	orrs	r3, r2
 8009762:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009764:	e03a      	b.n	80097dc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d020      	beq.n	80097b0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800976e:	4b3a      	ldr	r3, [pc, #232]	@ (8009858 <HAL_RCC_OscConfig+0x268>)
 8009770:	2201      	movs	r2, #1
 8009772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009774:	f7fb fd70 	bl	8005258 <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800977c:	f7fb fd6c 	bl	8005258 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e257      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800978e:	4b31      	ldr	r3, [pc, #196]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0f0      	beq.n	800977c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979a:	4b2e      	ldr	r3, [pc, #184]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	492a      	ldr	r1, [pc, #168]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	604b      	str	r3, [r1, #4]
 80097ae:	e015      	b.n	80097dc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097b0:	4b29      	ldr	r3, [pc, #164]	@ (8009858 <HAL_RCC_OscConfig+0x268>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b6:	f7fb fd4f 	bl	8005258 <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097be:	f7fb fd4b 	bl	8005258 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e236      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80097d0:	4b20      	ldr	r3, [pc, #128]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f0      	bne.n	80097be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80b8 	beq.w	800995a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d170      	bne.n	80098d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80097f0:	4b18      	ldr	r3, [pc, #96]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <HAL_RCC_OscConfig+0x218>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e21a      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1a      	ldr	r2, [r3, #32]
 800980c:	4b11      	ldr	r3, [pc, #68]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009814:	429a      	cmp	r2, r3
 8009816:	d921      	bls.n	800985c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fc3b 	bl	800a098 <RCC_SetFlashLatencyFromMSIRange>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e208      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800982c:	4b09      	ldr	r3, [pc, #36]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	4906      	ldr	r1, [pc, #24]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800983a:	4313      	orrs	r3, r2
 800983c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800983e:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	061b      	lsls	r3, r3, #24
 800984c:	4901      	ldr	r1, [pc, #4]	@ (8009854 <HAL_RCC_OscConfig+0x264>)
 800984e:	4313      	orrs	r3, r2
 8009850:	604b      	str	r3, [r1, #4]
 8009852:	e020      	b.n	8009896 <HAL_RCC_OscConfig+0x2a6>
 8009854:	40023800 	.word	0x40023800
 8009858:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800985c:	4b99      	ldr	r3, [pc, #612]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	4996      	ldr	r1, [pc, #600]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 800986a:	4313      	orrs	r3, r2
 800986c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800986e:	4b95      	ldr	r3, [pc, #596]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	061b      	lsls	r3, r3, #24
 800987c:	4991      	ldr	r1, [pc, #580]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 800987e:	4313      	orrs	r3, r2
 8009880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fc06 	bl	800a098 <RCC_SetFlashLatencyFromMSIRange>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e1d3      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	0b5b      	lsrs	r3, r3, #13
 800989c:	3301      	adds	r3, #1
 800989e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80098a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80098a6:	4a87      	ldr	r2, [pc, #540]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80098a8:	6892      	ldr	r2, [r2, #8]
 80098aa:	0912      	lsrs	r2, r2, #4
 80098ac:	f002 020f 	and.w	r2, r2, #15
 80098b0:	4985      	ldr	r1, [pc, #532]	@ (8009ac8 <HAL_RCC_OscConfig+0x4d8>)
 80098b2:	5c8a      	ldrb	r2, [r1, r2]
 80098b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80098b6:	4a85      	ldr	r2, [pc, #532]	@ (8009acc <HAL_RCC_OscConfig+0x4dc>)
 80098b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80098ba:	4b85      	ldr	r3, [pc, #532]	@ (8009ad0 <HAL_RCC_OscConfig+0x4e0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fb fc7e 	bl	80051c0 <HAL_InitTick>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d045      	beq.n	800995a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	e1b5      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d029      	beq.n	800992e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80098da:	4b7e      	ldr	r3, [pc, #504]	@ (8009ad4 <HAL_RCC_OscConfig+0x4e4>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e0:	f7fb fcba 	bl	8005258 <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80098e8:	f7fb fcb6 	bl	8005258 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e1a1      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80098fa:	4b72      	ldr	r3, [pc, #456]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009906:	4b6f      	ldr	r3, [pc, #444]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	496c      	ldr	r1, [pc, #432]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009914:	4313      	orrs	r3, r2
 8009916:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009918:	4b6a      	ldr	r3, [pc, #424]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	061b      	lsls	r3, r3, #24
 8009926:	4967      	ldr	r1, [pc, #412]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009928:	4313      	orrs	r3, r2
 800992a:	604b      	str	r3, [r1, #4]
 800992c:	e015      	b.n	800995a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800992e:	4b69      	ldr	r3, [pc, #420]	@ (8009ad4 <HAL_RCC_OscConfig+0x4e4>)
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009934:	f7fb fc90 	bl	8005258 <HAL_GetTick>
 8009938:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800993a:	e008      	b.n	800994e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800993c:	f7fb fc8c 	bl	8005258 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b02      	cmp	r3, #2
 8009948:	d901      	bls.n	800994e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e177      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800994e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f0      	bne.n	800993c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d030      	beq.n	80099c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d016      	beq.n	800999c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800996e:	4b5a      	ldr	r3, [pc, #360]	@ (8009ad8 <HAL_RCC_OscConfig+0x4e8>)
 8009970:	2201      	movs	r2, #1
 8009972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009974:	f7fb fc70 	bl	8005258 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800997a:	e008      	b.n	800998e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800997c:	f7fb fc6c 	bl	8005258 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	2b02      	cmp	r3, #2
 8009988:	d901      	bls.n	800998e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e157      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800998e:	4b4d      	ldr	r3, [pc, #308]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0f0      	beq.n	800997c <HAL_RCC_OscConfig+0x38c>
 800999a:	e015      	b.n	80099c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800999c:	4b4e      	ldr	r3, [pc, #312]	@ (8009ad8 <HAL_RCC_OscConfig+0x4e8>)
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a2:	f7fb fc59 	bl	8005258 <HAL_GetTick>
 80099a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099a8:	e008      	b.n	80099bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099aa:	f7fb fc55 	bl	8005258 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e140      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099bc:	4b41      	ldr	r3, [pc, #260]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80099be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f0      	bne.n	80099aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80b5 	beq.w	8009b40 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099d6:	2300      	movs	r3, #0
 80099d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099da:	4b3a      	ldr	r3, [pc, #232]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10d      	bne.n	8009a02 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099e6:	4b37      	ldr	r3, [pc, #220]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ea:	4a36      	ldr	r2, [pc, #216]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80099ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80099f2:	4b34      	ldr	r3, [pc, #208]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 80099f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099fa:	60bb      	str	r3, [r7, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099fe:	2301      	movs	r3, #1
 8009a00:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a02:	4b36      	ldr	r3, [pc, #216]	@ (8009adc <HAL_RCC_OscConfig+0x4ec>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d118      	bne.n	8009a40 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a0e:	4b33      	ldr	r3, [pc, #204]	@ (8009adc <HAL_RCC_OscConfig+0x4ec>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a32      	ldr	r2, [pc, #200]	@ (8009adc <HAL_RCC_OscConfig+0x4ec>)
 8009a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a1a:	f7fb fc1d 	bl	8005258 <HAL_GetTick>
 8009a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a20:	e008      	b.n	8009a34 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a22:	f7fb fc19 	bl	8005258 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b64      	cmp	r3, #100	@ 0x64
 8009a2e:	d901      	bls.n	8009a34 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e104      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a34:	4b29      	ldr	r3, [pc, #164]	@ (8009adc <HAL_RCC_OscConfig+0x4ec>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0f0      	beq.n	8009a22 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d106      	bne.n	8009a56 <HAL_RCC_OscConfig+0x466>
 8009a48:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a52:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a54:	e02d      	b.n	8009ab2 <HAL_RCC_OscConfig+0x4c2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10c      	bne.n	8009a78 <HAL_RCC_OscConfig+0x488>
 8009a5e:	4b19      	ldr	r3, [pc, #100]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a62:	4a18      	ldr	r2, [pc, #96]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a68:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a6a:	4b16      	ldr	r3, [pc, #88]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a6e:	4a15      	ldr	r2, [pc, #84]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a74:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a76:	e01c      	b.n	8009ab2 <HAL_RCC_OscConfig+0x4c2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	2b05      	cmp	r3, #5
 8009a7e:	d10c      	bne.n	8009a9a <HAL_RCC_OscConfig+0x4aa>
 8009a80:	4b10      	ldr	r3, [pc, #64]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a84:	4a0f      	ldr	r2, [pc, #60]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009a8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a90:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a96:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a98:	e00b      	b.n	8009ab2 <HAL_RCC_OscConfig+0x4c2>
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9e:	4a09      	ldr	r2, [pc, #36]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa4:	6353      	str	r3, [r2, #52]	@ 0x34
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aaa:	4a06      	ldr	r2, [pc, #24]	@ (8009ac4 <HAL_RCC_OscConfig+0x4d4>)
 8009aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ab0:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d024      	beq.n	8009b04 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aba:	f7fb fbcd 	bl	8005258 <HAL_GetTick>
 8009abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ac0:	e019      	b.n	8009af6 <HAL_RCC_OscConfig+0x506>
 8009ac2:	bf00      	nop
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	0800e09c 	.word	0x0800e09c
 8009acc:	20000004 	.word	0x20000004
 8009ad0:	20000008 	.word	0x20000008
 8009ad4:	42470020 	.word	0x42470020
 8009ad8:	42470680 	.word	0x42470680
 8009adc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ae0:	f7fb fbba 	bl	8005258 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e0a3      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af6:	4b54      	ldr	r3, [pc, #336]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0ee      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x4f0>
 8009b02:	e014      	b.n	8009b2e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b04:	f7fb fba8 	bl	8005258 <HAL_GetTick>
 8009b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b0a:	e00a      	b.n	8009b22 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b0c:	f7fb fba4 	bl	8005258 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d901      	bls.n	8009b22 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e08d      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009b22:	4b49      	ldr	r3, [pc, #292]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1ee      	bne.n	8009b0c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009b2e:	7ffb      	ldrb	r3, [r7, #31]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d105      	bne.n	8009b40 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b34:	4b44      	ldr	r3, [pc, #272]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b38:	4a43      	ldr	r2, [pc, #268]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b3e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d079      	beq.n	8009c3c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b0c      	cmp	r3, #12
 8009b4c:	d056      	beq.n	8009bfc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d13b      	bne.n	8009bce <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b56:	4b3d      	ldr	r3, [pc, #244]	@ (8009c4c <HAL_RCC_OscConfig+0x65c>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b5c:	f7fb fb7c 	bl	8005258 <HAL_GetTick>
 8009b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b64:	f7fb fb78 	bl	8005258 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e063      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b76:	4b34      	ldr	r3, [pc, #208]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f0      	bne.n	8009b64 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b82:	4b31      	ldr	r3, [pc, #196]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	4319      	orrs	r1, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	492b      	ldr	r1, [pc, #172]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8009c4c <HAL_RCC_OscConfig+0x65c>)
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fb fb57 	bl	8005258 <HAL_GetTick>
 8009baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009bac:	e008      	b.n	8009bc0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bae:	f7fb fb53 	bl	8005258 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e03e      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009bc0:	4b21      	ldr	r3, [pc, #132]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0f0      	beq.n	8009bae <HAL_RCC_OscConfig+0x5be>
 8009bcc:	e036      	b.n	8009c3c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bce:	4b1f      	ldr	r3, [pc, #124]	@ (8009c4c <HAL_RCC_OscConfig+0x65c>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bd4:	f7fb fb40 	bl	8005258 <HAL_GetTick>
 8009bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bda:	e008      	b.n	8009bee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bdc:	f7fb fb3c 	bl	8005258 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d901      	bls.n	8009bee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e027      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009bee:	4b16      	ldr	r3, [pc, #88]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f0      	bne.n	8009bdc <HAL_RCC_OscConfig+0x5ec>
 8009bfa:	e01f      	b.n	8009c3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e01a      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009c08:	4b0f      	ldr	r3, [pc, #60]	@ (8009c48 <HAL_RCC_OscConfig+0x658>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d10d      	bne.n	8009c38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d106      	bne.n	8009c38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e000      	b.n	8009c3e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	40023800 	.word	0x40023800
 8009c4c:	42470060 	.word	0x42470060

08009c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e11a      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c64:	4b8f      	ldr	r3, [pc, #572]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d919      	bls.n	8009ca6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d105      	bne.n	8009c84 <HAL_RCC_ClockConfig+0x34>
 8009c78:	4b8a      	ldr	r3, [pc, #552]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a89      	ldr	r2, [pc, #548]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c7e:	f043 0304 	orr.w	r3, r3, #4
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	4b87      	ldr	r3, [pc, #540]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f023 0201 	bic.w	r2, r3, #1
 8009c8c:	4985      	ldr	r1, [pc, #532]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c94:	4b83      	ldr	r3, [pc, #524]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0301 	and.w	r3, r3, #1
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d001      	beq.n	8009ca6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e0f9      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d008      	beq.n	8009cc4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	497a      	ldr	r1, [pc, #488]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 808e 	beq.w	8009dee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d107      	bne.n	8009cea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cda:	4b73      	ldr	r3, [pc, #460]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d121      	bne.n	8009d2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e0d7      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d107      	bne.n	8009d02 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d115      	bne.n	8009d2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e0cb      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d107      	bne.n	8009d1a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d0a:	4b67      	ldr	r3, [pc, #412]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0302 	and.w	r3, r3, #2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d109      	bne.n	8009d2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e0bf      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009d1a:	4b63      	ldr	r3, [pc, #396]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e0b7      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f023 0203 	bic.w	r2, r3, #3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	495c      	ldr	r1, [pc, #368]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d3c:	f7fb fa8c 	bl	8005258 <HAL_GetTick>
 8009d40:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d112      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d4a:	e00a      	b.n	8009d62 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d4c:	f7fb fa84 	bl	8005258 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e09b      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d62:	4b51      	ldr	r3, [pc, #324]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 030c 	and.w	r3, r3, #12
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d1ee      	bne.n	8009d4c <HAL_RCC_ClockConfig+0xfc>
 8009d6e:	e03e      	b.n	8009dee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d112      	bne.n	8009d9e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d78:	e00a      	b.n	8009d90 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d7a:	f7fb fa6d 	bl	8005258 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d901      	bls.n	8009d90 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	e084      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d90:	4b45      	ldr	r3, [pc, #276]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f003 030c 	and.w	r3, r3, #12
 8009d98:	2b0c      	cmp	r3, #12
 8009d9a:	d1ee      	bne.n	8009d7a <HAL_RCC_ClockConfig+0x12a>
 8009d9c:	e027      	b.n	8009dee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d11d      	bne.n	8009de2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009da6:	e00a      	b.n	8009dbe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009da8:	f7fb fa56 	bl	8005258 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d901      	bls.n	8009dbe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e06d      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	f003 030c 	and.w	r3, r3, #12
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	d1ee      	bne.n	8009da8 <HAL_RCC_ClockConfig+0x158>
 8009dca:	e010      	b.n	8009dee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dcc:	f7fb fa44 	bl	8005258 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e05b      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009de2:	4b31      	ldr	r3, [pc, #196]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 030c 	and.w	r3, r3, #12
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1ee      	bne.n	8009dcc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009dee:	4b2d      	ldr	r3, [pc, #180]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d219      	bcs.n	8009e30 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d105      	bne.n	8009e0e <HAL_RCC_ClockConfig+0x1be>
 8009e02:	4b28      	ldr	r3, [pc, #160]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a27      	ldr	r2, [pc, #156]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009e08:	f043 0304 	orr.w	r3, r3, #4
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	4b25      	ldr	r3, [pc, #148]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f023 0201 	bic.w	r2, r3, #1
 8009e16:	4923      	ldr	r1, [pc, #140]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e1e:	4b21      	ldr	r3, [pc, #132]	@ (8009ea4 <HAL_RCC_ClockConfig+0x254>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d001      	beq.n	8009e30 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e034      	b.n	8009e9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d008      	beq.n	8009e4e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	4917      	ldr	r1, [pc, #92]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d009      	beq.n	8009e6e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e5a:	4b13      	ldr	r3, [pc, #76]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	490f      	ldr	r1, [pc, #60]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e6e:	f000 f823 	bl	8009eb8 <HAL_RCC_GetSysClockFreq>
 8009e72:	4602      	mov	r2, r0
 8009e74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea8 <HAL_RCC_ClockConfig+0x258>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	091b      	lsrs	r3, r3, #4
 8009e7a:	f003 030f 	and.w	r3, r3, #15
 8009e7e:	490b      	ldr	r1, [pc, #44]	@ (8009eac <HAL_RCC_ClockConfig+0x25c>)
 8009e80:	5ccb      	ldrb	r3, [r1, r3]
 8009e82:	fa22 f303 	lsr.w	r3, r2, r3
 8009e86:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb0 <HAL_RCC_ClockConfig+0x260>)
 8009e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb4 <HAL_RCC_ClockConfig+0x264>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fb f996 	bl	80051c0 <HAL_InitTick>
 8009e94:	4603      	mov	r3, r0
 8009e96:	72fb      	strb	r3, [r7, #11]

  return status;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40023c00 	.word	0x40023c00
 8009ea8:	40023800 	.word	0x40023800
 8009eac:	0800e09c 	.word	0x0800e09c
 8009eb0:	20000004 	.word	0x20000004
 8009eb4:	20000008 	.word	0x20000008

08009eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ebc:	b08e      	sub	sp, #56	@ 0x38
 8009ebe:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8009ec0:	4b58      	ldr	r3, [pc, #352]	@ (800a024 <HAL_RCC_GetSysClockFreq+0x16c>)
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec8:	f003 030c 	and.w	r3, r3, #12
 8009ecc:	2b0c      	cmp	r3, #12
 8009ece:	d00d      	beq.n	8009eec <HAL_RCC_GetSysClockFreq+0x34>
 8009ed0:	2b0c      	cmp	r3, #12
 8009ed2:	f200 8092 	bhi.w	8009ffa <HAL_RCC_GetSysClockFreq+0x142>
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d002      	beq.n	8009ee0 <HAL_RCC_GetSysClockFreq+0x28>
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCC_GetSysClockFreq+0x2e>
 8009ede:	e08c      	b.n	8009ffa <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009ee0:	4b51      	ldr	r3, [pc, #324]	@ (800a028 <HAL_RCC_GetSysClockFreq+0x170>)
 8009ee2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009ee4:	e097      	b.n	800a016 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009ee6:	4b51      	ldr	r3, [pc, #324]	@ (800a02c <HAL_RCC_GetSysClockFreq+0x174>)
 8009ee8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009eea:	e094      	b.n	800a016 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	0c9b      	lsrs	r3, r3, #18
 8009ef0:	f003 020f 	and.w	r2, r3, #15
 8009ef4:	4b4e      	ldr	r3, [pc, #312]	@ (800a030 <HAL_RCC_GetSysClockFreq+0x178>)
 8009ef6:	5c9b      	ldrb	r3, [r3, r2]
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efc:	0d9b      	lsrs	r3, r3, #22
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	3301      	adds	r3, #1
 8009f04:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f06:	4b47      	ldr	r3, [pc, #284]	@ (800a024 <HAL_RCC_GetSysClockFreq+0x16c>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d021      	beq.n	8009f56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f14:	2200      	movs	r2, #0
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	61fa      	str	r2, [r7, #28]
 8009f1a:	4b44      	ldr	r3, [pc, #272]	@ (800a02c <HAL_RCC_GetSysClockFreq+0x174>)
 8009f1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009f20:	464a      	mov	r2, r9
 8009f22:	fb03 f202 	mul.w	r2, r3, r2
 8009f26:	2300      	movs	r3, #0
 8009f28:	4644      	mov	r4, r8
 8009f2a:	fb04 f303 	mul.w	r3, r4, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	4a3e      	ldr	r2, [pc, #248]	@ (800a02c <HAL_RCC_GetSysClockFreq+0x174>)
 8009f32:	4644      	mov	r4, r8
 8009f34:	fba4 0102 	umull	r0, r1, r4, r2
 8009f38:	440b      	add	r3, r1
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	2200      	movs	r2, #0
 8009f40:	613b      	str	r3, [r7, #16]
 8009f42:	617a      	str	r2, [r7, #20]
 8009f44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f48:	f7f7 f83c 	bl	8000fc4 <__aeabi_uldivmod>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4613      	mov	r3, r2
 8009f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f54:	e04e      	b.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	2200      	movs	r2, #0
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	4693      	mov	fp, r2
 8009f5e:	4652      	mov	r2, sl
 8009f60:	465b      	mov	r3, fp
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f04f 0100 	mov.w	r1, #0
 8009f6a:	0159      	lsls	r1, r3, #5
 8009f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f70:	0150      	lsls	r0, r2, #5
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	ebb2 080a 	subs.w	r8, r2, sl
 8009f7a:	eb63 090b 	sbc.w	r9, r3, fp
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	f04f 0300 	mov.w	r3, #0
 8009f86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009f8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009f8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009f92:	ebb2 0408 	subs.w	r4, r2, r8
 8009f96:	eb63 0509 	sbc.w	r5, r3, r9
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	00eb      	lsls	r3, r5, #3
 8009fa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009fa8:	00e2      	lsls	r2, r4, #3
 8009faa:	4614      	mov	r4, r2
 8009fac:	461d      	mov	r5, r3
 8009fae:	eb14 030a 	adds.w	r3, r4, sl
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	eb45 030b 	adc.w	r3, r5, fp
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	f04f 0200 	mov.w	r2, #0
 8009fbe:	f04f 0300 	mov.w	r3, #0
 8009fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	028b      	lsls	r3, r1, #10
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4604      	mov	r4, r0
 8009fd0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8009fd4:	4601      	mov	r1, r0
 8009fd6:	028a      	lsls	r2, r1, #10
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	2200      	movs	r2, #0
 8009fe0:	60bb      	str	r3, [r7, #8]
 8009fe2:	60fa      	str	r2, [r7, #12]
 8009fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fe8:	f7f6 ffec 	bl	8000fc4 <__aeabi_uldivmod>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8009ff8:	e00d      	b.n	800a016 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	@ (800a024 <HAL_RCC_GetSysClockFreq+0x16c>)
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	0b5b      	lsrs	r3, r3, #13
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	3301      	adds	r3, #1
 800a00a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a014:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3738      	adds	r7, #56	@ 0x38
 800a01c:	46bd      	mov	sp, r7
 800a01e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a022:	bf00      	nop
 800a024:	40023800 	.word	0x40023800
 800a028:	00f42400 	.word	0x00f42400
 800a02c:	00b71b00 	.word	0x00b71b00
 800a030:	0800e090 	.word	0x0800e090

0800a034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a038:	4b02      	ldr	r3, [pc, #8]	@ (800a044 <HAL_RCC_GetHCLKFreq+0x10>)
 800a03a:	681b      	ldr	r3, [r3, #0]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	46bd      	mov	sp, r7
 800a040:	bc80      	pop	{r7}
 800a042:	4770      	bx	lr
 800a044:	20000004 	.word	0x20000004

0800a048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a04c:	f7ff fff2 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a050:	4602      	mov	r2, r0
 800a052:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	0a1b      	lsrs	r3, r3, #8
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	4903      	ldr	r1, [pc, #12]	@ (800a06c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a05e:	5ccb      	ldrb	r3, [r1, r3]
 800a060:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a064:	4618      	mov	r0, r3
 800a066:	bd80      	pop	{r7, pc}
 800a068:	40023800 	.word	0x40023800
 800a06c:	0800e0ac 	.word	0x0800e0ac

0800a070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a074:	f7ff ffde 	bl	800a034 <HAL_RCC_GetHCLKFreq>
 800a078:	4602      	mov	r2, r0
 800a07a:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	0adb      	lsrs	r3, r3, #11
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	4903      	ldr	r1, [pc, #12]	@ (800a094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a086:	5ccb      	ldrb	r3, [r1, r3]
 800a088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	40023800 	.word	0x40023800
 800a094:	0800e0ac 	.word	0x0800e0ac

0800a098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a0a4:	4b29      	ldr	r3, [pc, #164]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d12c      	bne.n	800a10a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a0b0:	4b26      	ldr	r3, [pc, #152]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a0bc:	4b24      	ldr	r3, [pc, #144]	@ (800a150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e016      	b.n	800a0f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0c8:	4b20      	ldr	r3, [pc, #128]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0d2:	6253      	str	r3, [r2, #36]	@ 0x24
 800a0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a0e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a0e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ea:	4b18      	ldr	r3, [pc, #96]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ee:	4a17      	ldr	r2, [pc, #92]	@ (800a14c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a0f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0f4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800a0fc:	d105      	bne.n	800a10a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a104:	d101      	bne.n	800a10a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a106:	2301      	movs	r3, #1
 800a108:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d105      	bne.n	800a11c <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a110:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a0f      	ldr	r2, [pc, #60]	@ (800a154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a116:	f043 0304 	orr.w	r3, r3, #4
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f023 0201 	bic.w	r2, r3, #1
 800a124:	490b      	ldr	r1, [pc, #44]	@ (800a154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a12c:	4b09      	ldr	r3, [pc, #36]	@ (800a154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	429a      	cmp	r2, r3
 800a138:	d001      	beq.n	800a13e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	371c      	adds	r7, #28
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	40023800 	.word	0x40023800
 800a150:	40007000 	.word	0x40007000
 800a154:	40023c00 	.word	0x40023c00

0800a158 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80b8 	beq.w	800a2de <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a172:	4b5d      	ldr	r3, [pc, #372]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10d      	bne.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a17e:	4b5a      	ldr	r3, [pc, #360]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a182:	4a59      	ldr	r2, [pc, #356]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a188:	6253      	str	r3, [r2, #36]	@ 0x24
 800a18a:	4b57      	ldr	r3, [pc, #348]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a192:	60bb      	str	r3, [r7, #8]
 800a194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a196:	2301      	movs	r3, #1
 800a198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a19a:	4b54      	ldr	r3, [pc, #336]	@ (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d118      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1a6:	4b51      	ldr	r3, [pc, #324]	@ (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a50      	ldr	r2, [pc, #320]	@ (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a1ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1b2:	f7fb f851 	bl	8005258 <HAL_GetTick>
 800a1b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1b8:	e008      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1ba:	f7fb f84d 	bl	8005258 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b64      	cmp	r3, #100	@ 0x64
 800a1c6:	d901      	bls.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e089      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1cc:	4b47      	ldr	r3, [pc, #284]	@ (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0f0      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a1d8:	4b43      	ldr	r3, [pc, #268]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a1e0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d00f      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a1f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1fc:	d108      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1fe:	4b3a      	ldr	r3, [pc, #232]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a20a:	d101      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e067      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a210:	4b35      	ldr	r3, [pc, #212]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a218:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d034      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d02d      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d027      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a23a:	4b2b      	ldr	r3, [pc, #172]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a242:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a244:	4b2a      	ldr	r3, [pc, #168]	@ (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a24a:	4b29      	ldr	r3, [pc, #164]	@ (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a250:	4a25      	ldr	r2, [pc, #148]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6353      	str	r3, [r2, #52]	@ 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d014      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a260:	f7fa fffa 	bl	8005258 <HAL_GetTick>
 800a264:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a266:	e00a      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a268:	f7fa fff6 	bl	8005258 <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a276:	4293      	cmp	r3, r2
 800a278:	d901      	bls.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e030      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a27e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0ee      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d01a      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a29e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2a2:	d10a      	bne.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x162>
 800a2a4:	4b10      	ldr	r3, [pc, #64]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a2b4:	490c      	ldr	r1, [pc, #48]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	600b      	str	r3, [r1, #0]
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a2c6:	4908      	ldr	r1, [pc, #32]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d105      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2d2:	4b05      	ldr	r3, [pc, #20]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2d6:	4a04      	ldr	r2, [pc, #16]	@ (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a2d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a2dc:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40023800 	.word	0x40023800
 800a2ec:	40007000 	.word	0x40007000
 800a2f0:	424706dc 	.word	0x424706dc

0800a2f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e073      	b.n	800a3ee <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	7f5b      	ldrb	r3, [r3, #29]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d105      	bne.n	800a31c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7fa fcb6 	bl	8004c88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f003 0310 	and.w	r3, r3, #16
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d055      	beq.n	800a3dc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	22ca      	movs	r2, #202	@ 0xca
 800a336:	625a      	str	r2, [r3, #36]	@ 0x24
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2253      	movs	r2, #83	@ 0x53
 800a33e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc42 	bl	800abca <RTC_EnterInitMode>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d12c      	bne.n	800a3aa <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a35e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a362:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6899      	ldr	r1, [r3, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	431a      	orrs	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	431a      	orrs	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	68d2      	ldr	r2, [r2, #12]
 800a38a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6919      	ldr	r1, [r3, #16]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	041a      	lsls	r2, r3, #16
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	430a      	orrs	r2, r1
 800a39e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fc49 	bl	800ac38 <RTC_ExitInitMode>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d110      	bne.n	800a3d2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a3be:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	699a      	ldr	r2, [r3, #24]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	22ff      	movs	r2, #255	@ 0xff
 800a3d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3da:	e001      	b.n	800a3e0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a3f6:	b590      	push	{r4, r7, lr}
 800a3f8:	b087      	sub	sp, #28
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	7f1b      	ldrb	r3, [r3, #28]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <HAL_RTC_SetTime+0x1c>
 800a40e:	2302      	movs	r3, #2
 800a410:	e087      	b.n	800a522 <HAL_RTC_SetTime+0x12c>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2201      	movs	r2, #1
 800a416:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2202      	movs	r2, #2
 800a41c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d126      	bne.n	800a472 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d102      	bne.n	800a438 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2200      	movs	r2, #0
 800a436:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fc19 	bl	800ac74 <RTC_ByteToBcd2>
 800a442:	4603      	mov	r3, r0
 800a444:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 fc12 	bl	800ac74 <RTC_ByteToBcd2>
 800a450:	4603      	mov	r3, r0
 800a452:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a454:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	789b      	ldrb	r3, [r3, #2]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fc0a 	bl	800ac74 <RTC_ByteToBcd2>
 800a460:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a462:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	78db      	ldrb	r3, [r3, #3]
 800a46a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a46c:	4313      	orrs	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e018      	b.n	800a4a4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2200      	movs	r2, #0
 800a484:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a492:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a498:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	78db      	ldrb	r3, [r3, #3]
 800a49e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	22ca      	movs	r2, #202	@ 0xca
 800a4aa:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2253      	movs	r2, #83	@ 0x53
 800a4b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fb88 	bl	800abca <RTC_EnterInitMode>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a4be:	7cfb      	ldrb	r3, [r7, #19]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d120      	bne.n	800a506 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a4ce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a4d2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a4e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6899      	ldr	r1, [r3, #8]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 fb9b 	bl	800ac38 <RTC_ExitInitMode>
 800a502:	4603      	mov	r3, r0
 800a504:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a506:	7cfb      	ldrb	r3, [r7, #19]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d102      	bne.n	800a512 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	22ff      	movs	r2, #255	@ 0xff
 800a518:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	771a      	strb	r2, [r3, #28]

  return status;
 800a520:	7cfb      	ldrb	r3, [r7, #19]
}
 800a522:	4618      	mov	r0, r3
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	bd90      	pop	{r4, r7, pc}

0800a52a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b086      	sub	sp, #24
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a544:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a548:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	0c1b      	lsrs	r3, r3, #16
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a554:	b2da      	uxtb	r2, r3
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	0d9b      	lsrs	r3, r3, #22
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d11a      	bne.n	800a5c4 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fb8b 	bl	800acae <RTC_Bcd2ToByte>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fb82 	bl	800acae <RTC_Bcd2ToByte>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	789b      	ldrb	r3, [r3, #2]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fb79 	bl	800acae <RTC_Bcd2ToByte>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a5ce:	b590      	push	{r4, r7, lr}
 800a5d0:	b087      	sub	sp, #28
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	7f1b      	ldrb	r3, [r3, #28]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <HAL_RTC_SetDate+0x1c>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e071      	b.n	800a6ce <HAL_RTC_SetDate+0x100>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10e      	bne.n	800a61a <HAL_RTC_SetDate+0x4c>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	d008      	beq.n	800a61a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	f023 0310 	bic.w	r3, r3, #16
 800a610:	b2db      	uxtb	r3, r3
 800a612:	330a      	adds	r3, #10
 800a614:	b2da      	uxtb	r2, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11c      	bne.n	800a65a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	78db      	ldrb	r3, [r3, #3]
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fb25 	bl	800ac74 <RTC_ByteToBcd2>
 800a62a:	4603      	mov	r3, r0
 800a62c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fb1e 	bl	800ac74 <RTC_ByteToBcd2>
 800a638:	4603      	mov	r3, r0
 800a63a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a63c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	789b      	ldrb	r3, [r3, #2]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fb16 	bl	800ac74 <RTC_ByteToBcd2>
 800a648:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a64a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a654:	4313      	orrs	r3, r2
 800a656:	617b      	str	r3, [r7, #20]
 800a658:	e00e      	b.n	800a678 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	78db      	ldrb	r3, [r3, #3]
 800a65e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a666:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a66c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	22ca      	movs	r2, #202	@ 0xca
 800a67e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2253      	movs	r2, #83	@ 0x53
 800a686:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 fa9e 	bl	800abca <RTC_EnterInitMode>
 800a68e:	4603      	mov	r3, r0
 800a690:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a692:	7cfb      	ldrb	r3, [r7, #19]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10c      	bne.n	800a6b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a6a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a6a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 fac5 	bl	800ac38 <RTC_ExitInitMode>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a6b2:	7cfb      	ldrb	r3, [r7, #19]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	22ff      	movs	r2, #255	@ 0xff
 800a6c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	771a      	strb	r2, [r3, #28]

  return status;
 800a6cc:	7cfb      	ldrb	r3, [r7, #19]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd90      	pop	{r4, r7, pc}

0800a6d6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b086      	sub	sp, #24
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a6f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a6f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 031f 	and.w	r3, r3, #31
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	0b5b      	lsrs	r3, r3, #13
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0307 	and.w	r3, r3, #7
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11a      	bne.n	800a76a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	78db      	ldrb	r3, [r3, #3]
 800a738:	4618      	mov	r0, r3
 800a73a:	f000 fab8 	bl	800acae <RTC_Bcd2ToByte>
 800a73e:	4603      	mov	r3, r0
 800a740:	461a      	mov	r2, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 faaf 	bl	800acae <RTC_Bcd2ToByte>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	789b      	ldrb	r3, [r3, #2]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 faa6 	bl	800acae <RTC_Bcd2ToByte>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a774:	b590      	push	{r4, r7, lr}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a780:	4b92      	ldr	r3, [pc, #584]	@ (800a9cc <HAL_RTC_SetAlarm_IT+0x258>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a92      	ldr	r2, [pc, #584]	@ (800a9d0 <HAL_RTC_SetAlarm_IT+0x25c>)
 800a786:	fba2 2303 	umull	r2, r3, r2, r3
 800a78a:	0adb      	lsrs	r3, r3, #11
 800a78c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a790:	fb02 f303 	mul.w	r3, r2, r3
 800a794:	613b      	str	r3, [r7, #16]
       uint32_t tmpreg = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	7f1b      	ldrb	r3, [r3, #28]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d101      	bne.n	800a7a6 <HAL_RTC_SetAlarm_IT+0x32>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e10e      	b.n	800a9c4 <HAL_RTC_SetAlarm_IT+0x250>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d136      	bne.n	800a826 <HAL_RTC_SetAlarm_IT+0xb2>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <HAL_RTC_SetAlarm_IT+0x58>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fa4f 	bl	800ac74 <RTC_ByteToBcd2>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	785b      	ldrb	r3, [r3, #1]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fa48 	bl	800ac74 <RTC_ByteToBcd2>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a7e8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	789b      	ldrb	r3, [r3, #2]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fa40 	bl	800ac74 <RTC_ByteToBcd2>
 800a7f4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a7f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	78db      	ldrb	r3, [r3, #3]
 800a7fe:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a800:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fa33 	bl	800ac74 <RTC_ByteToBcd2>
 800a80e:	4603      	mov	r3, r0
 800a810:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800a812:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a81a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a820:	4313      	orrs	r3, r2
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	e022      	b.n	800a86c <HAL_RTC_SetAlarm_IT+0xf8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <HAL_RTC_SetAlarm_IT+0xc6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a846:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a84c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	78db      	ldrb	r3, [r3, #3]
 800a852:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a854:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800a85c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a862:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	22ca      	movs	r2, #202	@ 0xca
 800a872:	625a      	str	r2, [r3, #36]	@ 0x24
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2253      	movs	r2, #83	@ 0x53
 800a87a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a884:	d13e      	bne.n	800a904 <HAL_RTC_SetAlarm_IT+0x190>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	689a      	ldr	r2, [r3, #8]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a894:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a8a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <HAL_RTC_SetAlarm_IT+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	22ff      	movs	r2, #255	@ 0xff
 800a8ba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2203      	movs	r2, #3
 800a8c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e07b      	b.n	800a9c4 <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0e6      	beq.n	800a8a8 <HAL_RTC_SetAlarm_IT+0x134>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	61da      	str	r2, [r3, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8f0:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a900:	609a      	str	r2, [r3, #8]
 800a902:	e048      	b.n	800a996 <HAL_RTC_SetAlarm_IT+0x222>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a912:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a924:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a926:	4b29      	ldr	r3, [pc, #164]	@ (800a9cc <HAL_RTC_SetAlarm_IT+0x258>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a29      	ldr	r2, [pc, #164]	@ (800a9d0 <HAL_RTC_SetAlarm_IT+0x25c>)
 800a92c:	fba2 2303 	umull	r2, r3, r2, r3
 800a930:	0adb      	lsrs	r3, r3, #11
 800a932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	613b      	str	r3, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3b01      	subs	r3, #1
 800a940:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10b      	bne.n	800a960 <HAL_RTC_SetAlarm_IT+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	22ff      	movs	r2, #255	@ 0xff
 800a94e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2203      	movs	r2, #3
 800a954:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e031      	b.n	800a9c4 <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0e6      	beq.n	800a93c <HAL_RTC_SetAlarm_IT+0x1c8>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a984:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a994:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a996:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d4 <HAL_RTC_SetAlarm_IT+0x260>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a0e      	ldr	r2, [pc, #56]	@ (800a9d4 <HAL_RTC_SetAlarm_IT+0x260>)
 800a99c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9a0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d4 <HAL_RTC_SetAlarm_IT+0x260>)
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d4 <HAL_RTC_SetAlarm_IT+0x260>)
 800a9a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9ac:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	22ff      	movs	r2, #255	@ 0xff
 800a9b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	371c      	adds	r7, #28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd90      	pop	{r4, r7, pc}
 800a9cc:	20000004 	.word	0x20000004
 800a9d0:	10624dd3 	.word	0x10624dd3
 800a9d4:	40010400 	.word	0x40010400

0800a9d8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7f1b      	ldrb	r3, [r3, #28]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_RTC_DeactivateAlarm+0x1a>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e07b      	b.n	800aaea <HAL_RTC_DeactivateAlarm+0x112>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	22ca      	movs	r2, #202	@ 0xca
 800aa04:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2253      	movs	r2, #83	@ 0x53
 800aa0c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa14:	d12f      	bne.n	800aa76 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa24:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa34:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa36:	f7fa fc0f 	bl	8005258 <HAL_GetTick>
 800aa3a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800aa3c:	e013      	b.n	800aa66 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa3e:	f7fa fc0b 	bl	8005258 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa4c:	d90b      	bls.n	800aa66 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	22ff      	movs	r2, #255	@ 0xff
 800aa54:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2203      	movs	r2, #3
 800aa5a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e041      	b.n	800aaea <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0e4      	beq.n	800aa3e <HAL_RTC_DeactivateAlarm+0x66>
 800aa74:	e02e      	b.n	800aad4 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800aa84:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa94:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa96:	f7fa fbdf 	bl	8005258 <HAL_GetTick>
 800aa9a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800aa9c:	e013      	b.n	800aac6 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa9e:	f7fa fbdb 	bl	8005258 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aaac:	d90b      	bls.n	800aac6 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	22ff      	movs	r2, #255	@ 0xff
 800aab4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2203      	movs	r2, #3
 800aaba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e011      	b.n	800aaea <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0e4      	beq.n	800aa9e <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	22ff      	movs	r2, #255	@ 0xff
 800aada:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800aafc:	4b1f      	ldr	r3, [pc, #124]	@ (800ab7c <HAL_RTC_AlarmIRQHandler+0x88>)
 800aafe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ab02:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ab30:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7f8 faaa 	bl	800308c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d012      	beq.n	800ab6c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ab64:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f916 	bl	800ad98 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	775a      	strb	r2, [r3, #29]
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800ab94:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ab96:	f7fa fb5f 	bl	8005258 <HAL_GetTick>
 800ab9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ab9c:	e009      	b.n	800abb2 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ab9e:	f7fa fb5b 	bl	8005258 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800abac:	d901      	bls.n	800abb2 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e007      	b.n	800abc2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0320 	and.w	r3, r3, #32
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0ee      	beq.n	800ab9e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d122      	bne.n	800ac2e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800abf6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800abf8:	f7fa fb2e 	bl	8005258 <HAL_GetTick>
 800abfc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800abfe:	e00c      	b.n	800ac1a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ac00:	f7fa fb2a 	bl	8005258 <HAL_GetTick>
 800ac04:	4602      	mov	r2, r0
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac0e:	d904      	bls.n	800ac1a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2204      	movs	r2, #4
 800ac14:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <RTC_EnterInitMode+0x64>
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d1e8      	bne.n	800ac00 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac52:	60da      	str	r2, [r3, #12]
      hrtc->State = HAL_RTC_STATE_ERROR;
      status = HAL_ERROR;
    }
  }
#else /* RTC_CR_BYPSHAD */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff ff93 	bl	800ab80 <HAL_RTC_WaitForSynchro>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2204      	movs	r2, #4
 800ac64:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	73fb      	strb	r3, [r7, #15]
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800ac82:	e005      	b.n	800ac90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3301      	adds	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	3b0a      	subs	r3, #10
 800ac8e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	2b09      	cmp	r3, #9
 800ac94:	d8f6      	bhi.n	800ac84 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	b2db      	uxtb	r3, r3
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bc80      	pop	{r7}
 800acac:	4770      	bx	lr

0800acae <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	4603      	mov	r3, r0
 800acb6:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	091b      	lsrs	r3, r3, #4
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	79fb      	ldrb	r3, [r7, #7]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4413      	add	r3, r2
 800acdc:	b2db      	uxtb	r3, r3
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	7f1b      	ldrb	r3, [r3, #28]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e047      	b.n	800ad90 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	22ca      	movs	r2, #202	@ 0xca
 800ad12:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2253      	movs	r2, #83	@ 0x53
 800ad1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad2a:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689a      	ldr	r2, [r3, #8]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ad3a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad3c:	f7fa fa8c 	bl	8005258 <HAL_GetTick>
 800ad40:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ad42:	e013      	b.n	800ad6c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad44:	f7fa fa88 	bl	8005258 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad52:	d90b      	bls.n	800ad6c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	22ff      	movs	r2, #255	@ 0xff
 800ad5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2203      	movs	r2, #3
 800ad60:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e011      	b.n	800ad90 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	f003 0304 	and.w	r3, r3, #4
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0e4      	beq.n	800ad44 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	22ff      	movs	r2, #255	@ 0xff
 800ad80:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bc80      	pop	{r7}
 800ada8:	4770      	bx	lr

0800adaa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e06e      	b.n	800ae9a <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d108      	bne.n	800add6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adcc:	d009      	beq.n	800ade2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	61da      	str	r2, [r3, #28]
 800add4:	e005      	b.n	800ade2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d106      	bne.n	800ae02 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7f9 ff5f 	bl	8004cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2202      	movs	r2, #2
 800ae06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ae18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae66:	ea42 0103 	orr.w	r1, r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	0c1a      	lsrs	r2, r3, #16
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f002 0204 	and.w	r2, r2, #4
 800ae88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b088      	sub	sp, #32
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	603b      	str	r3, [r7, #0]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aeb2:	f7fa f9d1 	bl	8005258 <HAL_GetTick>
 800aeb6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d001      	beq.n	800aecc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800aec8:	2302      	movs	r3, #2
 800aeca:	e12a      	b.n	800b122 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <HAL_SPI_Transmit+0x36>
 800aed2:	88fb      	ldrh	r3, [r7, #6]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e122      	b.n	800b122 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <HAL_SPI_Transmit+0x48>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e11b      	b.n	800b122 <HAL_SPI_Transmit+0x280>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2203      	movs	r2, #3
 800aef6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	88fa      	ldrh	r2, [r7, #6]
 800af0a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	88fa      	ldrh	r2, [r7, #6]
 800af10:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af38:	d10f      	bne.n	800af5a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af64:	2b40      	cmp	r3, #64	@ 0x40
 800af66:	d007      	beq.n	800af78 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af80:	d152      	bne.n	800b028 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <HAL_SPI_Transmit+0xee>
 800af8a:	8b7b      	ldrh	r3, [r7, #26]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d145      	bne.n	800b01c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af94:	881a      	ldrh	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa0:	1c9a      	adds	r2, r3, #2
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afaa:	b29b      	uxth	r3, r3
 800afac:	3b01      	subs	r3, #1
 800afae:	b29a      	uxth	r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800afb4:	e032      	b.n	800b01c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d112      	bne.n	800afea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afc8:	881a      	ldrh	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd4:	1c9a      	adds	r2, r3, #2
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afde:	b29b      	uxth	r3, r3
 800afe0:	3b01      	subs	r3, #1
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800afe8:	e018      	b.n	800b01c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afea:	f7fa f935 	bl	8005258 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d803      	bhi.n	800b002 <HAL_SPI_Transmit+0x160>
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b000:	d102      	bne.n	800b008 <HAL_SPI_Transmit+0x166>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d109      	bne.n	800b01c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e082      	b.n	800b122 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b020:	b29b      	uxth	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1c7      	bne.n	800afb6 <HAL_SPI_Transmit+0x114>
 800b026:	e053      	b.n	800b0d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d002      	beq.n	800b036 <HAL_SPI_Transmit+0x194>
 800b030:	8b7b      	ldrh	r3, [r7, #26]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d147      	bne.n	800b0c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	330c      	adds	r3, #12
 800b040:	7812      	ldrb	r2, [r2, #0]
 800b042:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b052:	b29b      	uxth	r3, r3
 800b054:	3b01      	subs	r3, #1
 800b056:	b29a      	uxth	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b05c:	e033      	b.n	800b0c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d113      	bne.n	800b094 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	7812      	ldrb	r2, [r2, #0]
 800b078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b092:	e018      	b.n	800b0c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b094:	f7fa f8e0 	bl	8005258 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d803      	bhi.n	800b0ac <HAL_SPI_Transmit+0x20a>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	d102      	bne.n	800b0b2 <HAL_SPI_Transmit+0x210>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d109      	bne.n	800b0c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e02d      	b.n	800b122 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1c6      	bne.n	800b05e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fbd9 	bl	800b88c <SPI_EndRxTxTransaction>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e000      	b.n	800b122 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b120:	2300      	movs	r3, #0
  }
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES 
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b088      	sub	sp, #32
 800b12e:	af02      	add	r7, sp, #8
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	603b      	str	r3, [r7, #0]
 800b136:	4613      	mov	r3, r2
 800b138:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b01      	cmp	r3, #1
 800b144:	d001      	beq.n	800b14a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b146:	2302      	movs	r3, #2
 800b148:	e104      	b.n	800b354 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <HAL_SPI_Receive+0x2c>
 800b150:	88fb      	ldrh	r3, [r7, #6]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e0fc      	b.n	800b354 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b162:	d112      	bne.n	800b18a <HAL_SPI_Receive+0x60>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10e      	bne.n	800b18a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2204      	movs	r2, #4
 800b170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b174:	88fa      	ldrh	r2, [r7, #6]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	4613      	mov	r3, r2
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 f8eb 	bl	800b35c <HAL_SPI_TransmitReceive>
 800b186:	4603      	mov	r3, r0
 800b188:	e0e4      	b.n	800b354 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b18a:	f7fa f865 	bl	8005258 <HAL_GetTick>
 800b18e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <HAL_SPI_Receive+0x74>
 800b19a:	2302      	movs	r3, #2
 800b19c:	e0da      	b.n	800b354 <HAL_SPI_Receive+0x22a>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2204      	movs	r2, #4
 800b1aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	88fa      	ldrh	r2, [r7, #6]
 800b1be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	88fa      	ldrh	r2, [r7, #6]
 800b1c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1ec:	d10f      	bne.n	800b20e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b20c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b218:	2b40      	cmp	r3, #64	@ 0x40
 800b21a:	d007      	beq.n	800b22c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b22a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d170      	bne.n	800b316 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b234:	e035      	b.n	800b2a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	2b01      	cmp	r3, #1
 800b242:	d115      	bne.n	800b270 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f103 020c 	add.w	r2, r3, #12
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b250:	7812      	ldrb	r2, [r2, #0]
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b264:	b29b      	uxth	r3, r3
 800b266:	3b01      	subs	r3, #1
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b26e:	e018      	b.n	800b2a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b270:	f7f9 fff2 	bl	8005258 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d803      	bhi.n	800b288 <HAL_SPI_Receive+0x15e>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b286:	d102      	bne.n	800b28e <HAL_SPI_Receive+0x164>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d109      	bne.n	800b2a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e058      	b.n	800b354 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1c4      	bne.n	800b236 <HAL_SPI_Receive+0x10c>
 800b2ac:	e038      	b.n	800b320 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d113      	bne.n	800b2e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c6:	b292      	uxth	r2, r2
 800b2c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ce:	1c9a      	adds	r2, r3, #2
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b2e2:	e018      	b.n	800b316 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2e4:	f7f9 ffb8 	bl	8005258 <HAL_GetTick>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d803      	bhi.n	800b2fc <HAL_SPI_Receive+0x1d2>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fa:	d102      	bne.n	800b302 <HAL_SPI_Receive+0x1d8>
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d109      	bne.n	800b316 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	e01e      	b.n	800b354 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1c6      	bne.n	800b2ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f000 fa4b 	bl	800b7c0 <SPI_EndRxTransaction>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b352:	2300      	movs	r3, #0
  }
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	@ 0x28
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b36a:	2301      	movs	r3, #1
 800b36c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b36e:	f7f9 ff73 	bl	8005258 <HAL_GetTick>
 800b372:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b37a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b386:	7ffb      	ldrb	r3, [r7, #31]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d00c      	beq.n	800b3a6 <HAL_SPI_TransmitReceive+0x4a>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b392:	d106      	bne.n	800b3a2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d102      	bne.n	800b3a2 <HAL_SPI_TransmitReceive+0x46>
 800b39c:	7ffb      	ldrb	r3, [r7, #31]
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d001      	beq.n	800b3a6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	e17f      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d005      	beq.n	800b3b8 <HAL_SPI_TransmitReceive+0x5c>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <HAL_SPI_TransmitReceive+0x5c>
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e174      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d101      	bne.n	800b3ca <HAL_SPI_TransmitReceive+0x6e>
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e16d      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b04      	cmp	r3, #4
 800b3dc:	d003      	beq.n	800b3e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2205      	movs	r2, #5
 800b3e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	887a      	ldrh	r2, [r7, #2]
 800b3f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	887a      	ldrh	r2, [r7, #2]
 800b3fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	887a      	ldrh	r2, [r7, #2]
 800b408:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	887a      	ldrh	r2, [r7, #2]
 800b40e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b426:	2b40      	cmp	r3, #64	@ 0x40
 800b428:	d007      	beq.n	800b43a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b438:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b442:	d17e      	bne.n	800b542 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <HAL_SPI_TransmitReceive+0xf6>
 800b44c:	8afb      	ldrh	r3, [r7, #22]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d16c      	bne.n	800b52c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b456:	881a      	ldrh	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b462:	1c9a      	adds	r2, r3, #2
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	3b01      	subs	r3, #1
 800b470:	b29a      	uxth	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b476:	e059      	b.n	800b52c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b02      	cmp	r3, #2
 800b484:	d11b      	bne.n	800b4be <HAL_SPI_TransmitReceive+0x162>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d016      	beq.n	800b4be <HAL_SPI_TransmitReceive+0x162>
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	2b01      	cmp	r3, #1
 800b494:	d113      	bne.n	800b4be <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b49a:	881a      	ldrh	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a6:	1c9a      	adds	r2, r3, #2
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d119      	bne.n	800b500 <HAL_SPI_TransmitReceive+0x1a4>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d014      	beq.n	800b500 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e0:	b292      	uxth	r2, r2
 800b4e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e8:	1c9a      	adds	r2, r3, #2
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b500:	f7f9 feaa 	bl	8005258 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d80d      	bhi.n	800b52c <HAL_SPI_TransmitReceive+0x1d0>
 800b510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b516:	d009      	beq.n	800b52c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e0bc      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b530:	b29b      	uxth	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1a0      	bne.n	800b478 <HAL_SPI_TransmitReceive+0x11c>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d19b      	bne.n	800b478 <HAL_SPI_TransmitReceive+0x11c>
 800b540:	e082      	b.n	800b648 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <HAL_SPI_TransmitReceive+0x1f4>
 800b54a:	8afb      	ldrh	r3, [r7, #22]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d171      	bne.n	800b634 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	330c      	adds	r3, #12
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	b29a      	uxth	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b576:	e05d      	b.n	800b634 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b02      	cmp	r3, #2
 800b584:	d11c      	bne.n	800b5c0 <HAL_SPI_TransmitReceive+0x264>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d017      	beq.n	800b5c0 <HAL_SPI_TransmitReceive+0x264>
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	2b01      	cmp	r3, #1
 800b594:	d114      	bne.n	800b5c0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	330c      	adds	r3, #12
 800b5a0:	7812      	ldrb	r2, [r2, #0]
 800b5a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d119      	bne.n	800b602 <HAL_SPI_TransmitReceive+0x2a6>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d014      	beq.n	800b602 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68da      	ldr	r2, [r3, #12]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b5fe:	2301      	movs	r3, #1
 800b600:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b602:	f7f9 fe29 	bl	8005258 <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60e:	429a      	cmp	r2, r3
 800b610:	d803      	bhi.n	800b61a <HAL_SPI_TransmitReceive+0x2be>
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b618:	d102      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x2c4>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d109      	bne.n	800b634 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e038      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d19c      	bne.n	800b578 <HAL_SPI_TransmitReceive+0x21c>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b642:	b29b      	uxth	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d197      	bne.n	800b578 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b648:	6a3a      	ldr	r2, [r7, #32]
 800b64a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 f91d 	bl	800b88c <SPI_EndRxTxTransaction>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d008      	beq.n	800b66a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2220      	movs	r2, #32
 800b65c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e01d      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b672:	2300      	movs	r3, #0
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	613b      	str	r3, [r7, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	613b      	str	r3, [r7, #16]
 800b686:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e000      	b.n	800b6a6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
  }
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3728      	adds	r7, #40	@ 0x28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b6c0:	f7f9 fdca 	bl	8005258 <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b6d0:	f7f9 fdc2 	bl	8005258 <HAL_GetTick>
 800b6d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b6d6:	4b39      	ldr	r3, [pc, #228]	@ (800b7bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	015b      	lsls	r3, r3, #5
 800b6dc:	0d1b      	lsrs	r3, r3, #20
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	fb02 f303 	mul.w	r3, r2, r3
 800b6e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6e6:	e054      	b.n	800b792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ee:	d050      	beq.n	800b792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b6f0:	f7f9 fdb2 	bl	8005258 <HAL_GetTick>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d902      	bls.n	800b706 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d13d      	bne.n	800b782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b71e:	d111      	bne.n	800b744 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b728:	d004      	beq.n	800b734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b732:	d107      	bne.n	800b744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b74c:	d10f      	bne.n	800b76e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b76c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e017      	b.n	800b7b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b788:	2300      	movs	r3, #0
 800b78a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	3b01      	subs	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4013      	ands	r3, r2
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	bf0c      	ite	eq
 800b7a2:	2301      	moveq	r3, #1
 800b7a4:	2300      	movne	r3, #0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d19b      	bne.n	800b6e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3720      	adds	r7, #32
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20000004 	.word	0x20000004

0800b7c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b7d4:	d111      	bne.n	800b7fa <SPI_EndRxTransaction+0x3a>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7de:	d004      	beq.n	800b7ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7e8:	d107      	bne.n	800b7fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b802:	d12a      	bne.n	800b85a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b80c:	d012      	beq.n	800b834 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2200      	movs	r2, #0
 800b816:	2180      	movs	r1, #128	@ 0x80
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff ff49 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d02d      	beq.n	800b880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b828:	f043 0220 	orr.w	r2, r3, #32
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e026      	b.n	800b882 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2200      	movs	r2, #0
 800b83c:	2101      	movs	r1, #1
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff ff36 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01a      	beq.n	800b880 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b84e:	f043 0220 	orr.w	r2, r3, #32
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b856:	2303      	movs	r3, #3
 800b858:	e013      	b.n	800b882 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2200      	movs	r2, #0
 800b862:	2101      	movs	r1, #1
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f7ff ff23 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b874:	f043 0220 	orr.w	r2, r3, #32
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e000      	b.n	800b882 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f7ff ff04 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d007      	beq.n	800b8be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8b2:	f043 0220 	orr.w	r2, r3, #32
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e032      	b.n	800b924 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b8be:	4b1b      	ldr	r3, [pc, #108]	@ (800b92c <SPI_EndRxTxTransaction+0xa0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b930 <SPI_EndRxTxTransaction+0xa4>)
 800b8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c8:	0d5b      	lsrs	r3, r3, #21
 800b8ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8ce:	fb02 f303 	mul.w	r3, r2, r3
 800b8d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8dc:	d112      	bne.n	800b904 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2180      	movs	r1, #128	@ 0x80
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff fee1 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d016      	beq.n	800b922 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f8:	f043 0220 	orr.w	r2, r3, #32
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b900:	2303      	movs	r3, #3
 800b902:	e00f      	b.n	800b924 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b91a:	2b80      	cmp	r3, #128	@ 0x80
 800b91c:	d0f2      	beq.n	800b904 <SPI_EndRxTxTransaction+0x78>
 800b91e:	e000      	b.n	800b922 <SPI_EndRxTxTransaction+0x96>
        break;
 800b920:	bf00      	nop
  }

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000004 	.word	0x20000004
 800b930:	165e9f81 	.word	0x165e9f81

0800b934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e031      	b.n	800b9aa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f9 fa26 	bl	8004dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3304      	adds	r3, #4
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f000 fa4e 	bl	800be14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d001      	beq.n	800b9cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e03a      	b.n	800ba42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68da      	ldr	r2, [r3, #12]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f042 0201 	orr.w	r2, r2, #1
 800b9e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ec:	d00e      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x58>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a16      	ldr	r2, [pc, #88]	@ (800ba4c <HAL_TIM_Base_Start_IT+0x98>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d009      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x58>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a14      	ldr	r2, [pc, #80]	@ (800ba50 <HAL_TIM_Base_Start_IT+0x9c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d004      	beq.n	800ba0c <HAL_TIM_Base_Start_IT+0x58>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a13      	ldr	r2, [pc, #76]	@ (800ba54 <HAL_TIM_Base_Start_IT+0xa0>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d111      	bne.n	800ba30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b06      	cmp	r3, #6
 800ba1c:	d010      	beq.n	800ba40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f042 0201 	orr.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2e:	e007      	b.n	800ba40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f042 0201 	orr.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bc80      	pop	{r7}
 800ba4a:	4770      	bx	lr
 800ba4c:	40000400 	.word	0x40000400
 800ba50:	40000800 	.word	0x40000800
 800ba54:	40010800 	.word	0x40010800

0800ba58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68da      	ldr	r2, [r3, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f022 0201 	bic.w	r2, r2, #1
 800ba6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6a1a      	ldr	r2, [r3, #32]
 800ba76:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <HAL_TIM_Base_Stop_IT+0x38>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0201 	bic.w	r2, r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr

0800baa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d020      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01b      	beq.n	800bb08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0202 	mvn.w	r2, #2
 800bad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f974 	bl	800bddc <HAL_TIM_IC_CaptureCallback>
 800baf4:	e005      	b.n	800bb02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f967 	bl	800bdca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f976 	bl	800bdee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f003 0304 	and.w	r3, r3, #4
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d020      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01b      	beq.n	800bb54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0204 	mvn.w	r2, #4
 800bb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f94e 	bl	800bddc <HAL_TIM_IC_CaptureCallback>
 800bb40:	e005      	b.n	800bb4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f941 	bl	800bdca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f950 	bl	800bdee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d020      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0208 	mvn.w	r2, #8
 800bb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2204      	movs	r2, #4
 800bb76:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f928 	bl	800bddc <HAL_TIM_IC_CaptureCallback>
 800bb8c:	e005      	b.n	800bb9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f91b 	bl	800bdca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f92a 	bl	800bdee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d020      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f003 0310 	and.w	r3, r3, #16
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01b      	beq.n	800bbec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f06f 0210 	mvn.w	r2, #16
 800bbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f902 	bl	800bddc <HAL_TIM_IC_CaptureCallback>
 800bbd8:	e005      	b.n	800bbe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f8f5 	bl	800bdca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f904 	bl	800bdee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00c      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f06f 0201 	mvn.w	r2, #1
 800bc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7f7 fa56 	bl	80030bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00c      	beq.n	800bc34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d007      	beq.n	800bc34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f8e6 	bl	800be00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d101      	bne.n	800bc58 <HAL_TIM_ConfigClockSource+0x1c>
 800bc54:	2302      	movs	r3, #2
 800bc56:	e0b4      	b.n	800bdc2 <HAL_TIM_ConfigClockSource+0x186>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc90:	d03e      	beq.n	800bd10 <HAL_TIM_ConfigClockSource+0xd4>
 800bc92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc96:	f200 8087 	bhi.w	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bc9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc9e:	f000 8086 	beq.w	800bdae <HAL_TIM_ConfigClockSource+0x172>
 800bca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bca6:	d87f      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bca8:	2b70      	cmp	r3, #112	@ 0x70
 800bcaa:	d01a      	beq.n	800bce2 <HAL_TIM_ConfigClockSource+0xa6>
 800bcac:	2b70      	cmp	r3, #112	@ 0x70
 800bcae:	d87b      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcb0:	2b60      	cmp	r3, #96	@ 0x60
 800bcb2:	d050      	beq.n	800bd56 <HAL_TIM_ConfigClockSource+0x11a>
 800bcb4:	2b60      	cmp	r3, #96	@ 0x60
 800bcb6:	d877      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcb8:	2b50      	cmp	r3, #80	@ 0x50
 800bcba:	d03c      	beq.n	800bd36 <HAL_TIM_ConfigClockSource+0xfa>
 800bcbc:	2b50      	cmp	r3, #80	@ 0x50
 800bcbe:	d873      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcc0:	2b40      	cmp	r3, #64	@ 0x40
 800bcc2:	d058      	beq.n	800bd76 <HAL_TIM_ConfigClockSource+0x13a>
 800bcc4:	2b40      	cmp	r3, #64	@ 0x40
 800bcc6:	d86f      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcc8:	2b30      	cmp	r3, #48	@ 0x30
 800bcca:	d064      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x15a>
 800bccc:	2b30      	cmp	r3, #48	@ 0x30
 800bcce:	d86b      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	d060      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x15a>
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d867      	bhi.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d05c      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x15a>
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d05a      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x15a>
 800bce0:	e062      	b.n	800bda8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcf2:	f000 f96e 	bl	800bfd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bd04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	609a      	str	r2, [r3, #8]
      break;
 800bd0e:	e04f      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd20:	f000 f957 	bl	800bfd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	689a      	ldr	r2, [r3, #8]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd32:	609a      	str	r2, [r3, #8]
      break;
 800bd34:	e03c      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd42:	461a      	mov	r2, r3
 800bd44:	f000 f8ce 	bl	800bee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2150      	movs	r1, #80	@ 0x50
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f925 	bl	800bf9e <TIM_ITRx_SetConfig>
      break;
 800bd54:	e02c      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd62:	461a      	mov	r2, r3
 800bd64:	f000 f8ec 	bl	800bf40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2160      	movs	r1, #96	@ 0x60
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f915 	bl	800bf9e <TIM_ITRx_SetConfig>
      break;
 800bd74:	e01c      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd82:	461a      	mov	r2, r3
 800bd84:	f000 f8ae 	bl	800bee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2140      	movs	r1, #64	@ 0x40
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f905 	bl	800bf9e <TIM_ITRx_SetConfig>
      break;
 800bd94:	e00c      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	4610      	mov	r0, r2
 800bda2:	f000 f8fc 	bl	800bf9e <TIM_ITRx_SetConfig>
      break;
 800bda6:	e003      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bdac:	e000      	b.n	800bdb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdca:	b480      	push	{r7}
 800bdcc:	b083      	sub	sp, #12
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdd2:	bf00      	nop
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bc80      	pop	{r7}
 800bdda:	4770      	bx	lr

0800bddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bc80      	pop	{r7}
 800bdec:	4770      	bx	lr

0800bdee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdf6:	bf00      	nop
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bc80      	pop	{r7}
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bc80      	pop	{r7}
 800be10:	4770      	bx	lr
	...

0800be14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be2a:	d007      	beq.n	800be3c <TIM_Base_SetConfig+0x28>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a28      	ldr	r2, [pc, #160]	@ (800bed0 <TIM_Base_SetConfig+0xbc>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d003      	beq.n	800be3c <TIM_Base_SetConfig+0x28>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a27      	ldr	r2, [pc, #156]	@ (800bed4 <TIM_Base_SetConfig+0xc0>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d108      	bne.n	800be4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be54:	d013      	beq.n	800be7e <TIM_Base_SetConfig+0x6a>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a1d      	ldr	r2, [pc, #116]	@ (800bed0 <TIM_Base_SetConfig+0xbc>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d00f      	beq.n	800be7e <TIM_Base_SetConfig+0x6a>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a1c      	ldr	r2, [pc, #112]	@ (800bed4 <TIM_Base_SetConfig+0xc0>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00b      	beq.n	800be7e <TIM_Base_SetConfig+0x6a>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a1b      	ldr	r2, [pc, #108]	@ (800bed8 <TIM_Base_SetConfig+0xc4>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d007      	beq.n	800be7e <TIM_Base_SetConfig+0x6a>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a1a      	ldr	r2, [pc, #104]	@ (800bedc <TIM_Base_SetConfig+0xc8>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d003      	beq.n	800be7e <TIM_Base_SetConfig+0x6a>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a19      	ldr	r2, [pc, #100]	@ (800bee0 <TIM_Base_SetConfig+0xcc>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d108      	bne.n	800be90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f043 0204 	orr.w	r2, r3, #4
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	601a      	str	r2, [r3, #0]
}
 800bec6:	bf00      	nop
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	bc80      	pop	{r7}
 800bece:	4770      	bx	lr
 800bed0:	40000400 	.word	0x40000400
 800bed4:	40000800 	.word	0x40000800
 800bed8:	40010800 	.word	0x40010800
 800bedc:	40010c00 	.word	0x40010c00
 800bee0:	40011000 	.word	0x40011000

0800bee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6a1b      	ldr	r3, [r3, #32]
 800bef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	f023 0201 	bic.w	r2, r3, #1
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	011b      	lsls	r3, r3, #4
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f023 030a 	bic.w	r3, r3, #10
 800bf20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	4313      	orrs	r3, r2
 800bf28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	621a      	str	r2, [r3, #32]
}
 800bf36:	bf00      	nop
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr

0800bf40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	f023 0210 	bic.w	r2, r3, #16
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	031b      	lsls	r3, r3, #12
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	621a      	str	r2, [r3, #32]
}
 800bf94:	bf00      	nop
 800bf96:	371c      	adds	r7, #28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bc80      	pop	{r7}
 800bf9c:	4770      	bx	lr

0800bf9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	f043 0307 	orr.w	r3, r3, #7
 800bfc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	609a      	str	r2, [r3, #8]
}
 800bfc8:	bf00      	nop
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bc80      	pop	{r7}
 800bfd0:	4770      	bx	lr

0800bfd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b087      	sub	sp, #28
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
 800bfde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	021a      	lsls	r2, r3, #8
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	431a      	orrs	r2, r3
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	609a      	str	r2, [r3, #8]
}
 800c006:	bf00      	nop
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr

0800c010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c020:	2b01      	cmp	r3, #1
 800c022:	d101      	bne.n	800c028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c024:	2302      	movs	r3, #2
 800c026:	e046      	b.n	800c0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c04e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4313      	orrs	r3, r2
 800c058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c06a:	d00e      	beq.n	800c08a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a13      	ldr	r2, [pc, #76]	@ (800c0c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d009      	beq.n	800c08a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a12      	ldr	r2, [pc, #72]	@ (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d004      	beq.n	800c08a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a10      	ldr	r2, [pc, #64]	@ (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d10c      	bne.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bc80      	pop	{r7}
 800c0be:	4770      	bx	lr
 800c0c0:	40000400 	.word	0x40000400
 800c0c4:	40000800 	.word	0x40000800
 800c0c8:	40010800 	.word	0x40010800

0800c0cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e042      	b.n	800c164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d106      	bne.n	800c0f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7f8 fe9a 	bl	8004e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2224      	movs	r2, #36	@ 0x24
 800c0fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68da      	ldr	r2, [r3, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c10e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f82b 	bl	800c16c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	691a      	ldr	r2, [r3, #16]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	695a      	ldr	r2, [r3, #20]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68da      	ldr	r2, [r3, #12]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2220      	movs	r2, #32
 800c150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2220      	movs	r2, #32
 800c158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	430a      	orrs	r2, r1
 800c188:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689a      	ldr	r2, [r3, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	695b      	ldr	r3, [r3, #20]
 800c198:	431a      	orrs	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800c1ac:	f023 030c 	bic.w	r3, r3, #12
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	695b      	ldr	r3, [r3, #20]
 800c1c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	699a      	ldr	r2, [r3, #24]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a55      	ldr	r2, [pc, #340]	@ (800c32c <UART_SetConfig+0x1c0>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d103      	bne.n	800c1e2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c1da:	f7fd ff49 	bl	800a070 <HAL_RCC_GetPCLK2Freq>
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	e002      	b.n	800c1e8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c1e2:	f7fd ff31 	bl	800a048 <HAL_RCC_GetPCLK1Freq>
 800c1e6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1f0:	d14c      	bne.n	800c28c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009a      	lsls	r2, r3, #2
 800c1fc:	441a      	add	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	fbb2 f3f3 	udiv	r3, r2, r3
 800c208:	4a49      	ldr	r2, [pc, #292]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c20a:	fba2 2303 	umull	r2, r3, r2, r3
 800c20e:	095b      	lsrs	r3, r3, #5
 800c210:	0119      	lsls	r1, r3, #4
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009a      	lsls	r2, r3, #2
 800c21c:	441a      	add	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	fbb2 f2f3 	udiv	r2, r2, r3
 800c228:	4b41      	ldr	r3, [pc, #260]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c22a:	fba3 0302 	umull	r0, r3, r3, r2
 800c22e:	095b      	lsrs	r3, r3, #5
 800c230:	2064      	movs	r0, #100	@ 0x64
 800c232:	fb00 f303 	mul.w	r3, r0, r3
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	3332      	adds	r3, #50	@ 0x32
 800c23c:	4a3c      	ldr	r2, [pc, #240]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c23e:	fba2 2303 	umull	r2, r3, r2, r3
 800c242:	095b      	lsrs	r3, r3, #5
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c24a:	4419      	add	r1, r3
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009a      	lsls	r2, r3, #2
 800c256:	441a      	add	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c262:	4b33      	ldr	r3, [pc, #204]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c264:	fba3 0302 	umull	r0, r3, r3, r2
 800c268:	095b      	lsrs	r3, r3, #5
 800c26a:	2064      	movs	r0, #100	@ 0x64
 800c26c:	fb00 f303 	mul.w	r3, r0, r3
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	3332      	adds	r3, #50	@ 0x32
 800c276:	4a2e      	ldr	r2, [pc, #184]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c278:	fba2 2303 	umull	r2, r3, r2, r3
 800c27c:	095b      	lsrs	r3, r3, #5
 800c27e:	f003 0207 	and.w	r2, r3, #7
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	440a      	add	r2, r1
 800c288:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c28a:	e04a      	b.n	800c322 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009a      	lsls	r2, r3, #2
 800c296:	441a      	add	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a2:	4a23      	ldr	r2, [pc, #140]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a8:	095b      	lsrs	r3, r3, #5
 800c2aa:	0119      	lsls	r1, r3, #4
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009a      	lsls	r2, r3, #2
 800c2b6:	441a      	add	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c2c4:	fba3 0302 	umull	r0, r3, r3, r2
 800c2c8:	095b      	lsrs	r3, r3, #5
 800c2ca:	2064      	movs	r0, #100	@ 0x64
 800c2cc:	fb00 f303 	mul.w	r3, r0, r3
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	011b      	lsls	r3, r3, #4
 800c2d4:	3332      	adds	r3, #50	@ 0x32
 800c2d6:	4a16      	ldr	r2, [pc, #88]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2dc:	095b      	lsrs	r3, r3, #5
 800c2de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2e2:	4419      	add	r1, r3
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009a      	lsls	r2, r3, #2
 800c2ee:	441a      	add	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	fbb2 f2f3 	udiv	r2, r2, r3
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c2fc:	fba3 0302 	umull	r0, r3, r3, r2
 800c300:	095b      	lsrs	r3, r3, #5
 800c302:	2064      	movs	r0, #100	@ 0x64
 800c304:	fb00 f303 	mul.w	r3, r0, r3
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	3332      	adds	r3, #50	@ 0x32
 800c30e:	4a08      	ldr	r2, [pc, #32]	@ (800c330 <UART_SetConfig+0x1c4>)
 800c310:	fba2 2303 	umull	r2, r3, r2, r3
 800c314:	095b      	lsrs	r3, r3, #5
 800c316:	f003 020f 	and.w	r2, r3, #15
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	440a      	add	r2, r1
 800c320:	609a      	str	r2, [r3, #8]
}
 800c322:	bf00      	nop
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	40013800 	.word	0x40013800
 800c330:	51eb851f 	.word	0x51eb851f

0800c334 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800c334:	b5b0      	push	{r4, r5, r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800c33e:	2300      	movs	r3, #0
 800c340:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800c342:	2300      	movs	r3, #0
 800c344:	777b      	strb	r3, [r7, #29]
 800c346:	e01b      	b.n	800c380 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800c348:	2300      	movs	r3, #0
 800c34a:	77bb      	strb	r3, [r7, #30]
 800c34c:	e012      	b.n	800c374 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800c34e:	7fba      	ldrb	r2, [r7, #30]
 800c350:	7f7b      	ldrb	r3, [r7, #29]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	461a      	mov	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	1899      	adds	r1, r3, r2
 800c35c:	7fba      	ldrb	r2, [r7, #30]
 800c35e:	7f7b      	ldrb	r3, [r7, #29]
 800c360:	7808      	ldrb	r0, [r1, #0]
 800c362:	4961      	ldr	r1, [pc, #388]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c364:	0092      	lsls	r2, r2, #2
 800c366:	440a      	add	r2, r1
 800c368:	4413      	add	r3, r2
 800c36a:	4602      	mov	r2, r0
 800c36c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c36e:	7fbb      	ldrb	r3, [r7, #30]
 800c370:	3301      	adds	r3, #1
 800c372:	77bb      	strb	r3, [r7, #30]
 800c374:	7fbb      	ldrb	r3, [r7, #30]
 800c376:	2b03      	cmp	r3, #3
 800c378:	d9e9      	bls.n	800c34e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800c37a:	7f7b      	ldrb	r3, [r7, #29]
 800c37c:	3301      	adds	r3, #1
 800c37e:	777b      	strb	r3, [r7, #29]
 800c380:	7f7b      	ldrb	r3, [r7, #29]
 800c382:	2b03      	cmp	r3, #3
 800c384:	d9e0      	bls.n	800c348 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800c386:	2300      	movs	r3, #0
 800c388:	77fb      	strb	r3, [r7, #31]
 800c38a:	e00b      	b.n	800c3a4 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800c38c:	7ffb      	ldrb	r3, [r7, #31]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	441a      	add	r2, r3
 800c392:	7ffb      	ldrb	r3, [r7, #31]
 800c394:	7812      	ldrb	r2, [r2, #0]
 800c396:	3320      	adds	r3, #32
 800c398:	443b      	add	r3, r7
 800c39a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800c39e:	7ffb      	ldrb	r3, [r7, #31]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	77fb      	strb	r3, [r7, #31]
 800c3a4:	7ffb      	ldrb	r3, [r7, #31]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	d9f0      	bls.n	800c38c <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800c3aa:	f107 030c 	add.w	r3, r7, #12
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f89c 	bl	800c4ec <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	773b      	strb	r3, [r7, #28]
 800c3b8:	e038      	b.n	800c42c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	777b      	strb	r3, [r7, #29]
 800c3be:	e01f      	b.n	800c400 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	77bb      	strb	r3, [r7, #30]
 800c3c4:	e016      	b.n	800c3f4 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c3c6:	7fba      	ldrb	r2, [r7, #30]
 800c3c8:	7f7b      	ldrb	r3, [r7, #29]
 800c3ca:	4947      	ldr	r1, [pc, #284]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c3cc:	0092      	lsls	r2, r2, #2
 800c3ce:	440a      	add	r2, r1
 800c3d0:	4413      	add	r3, r2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	7fbd      	ldrb	r5, [r7, #30]
 800c3d6:	7f7c      	ldrb	r4, [r7, #29]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f000 f8bf 	bl	800c55c <AES_Sub_Byte>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4a41      	ldr	r2, [pc, #260]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c3e4:	00ab      	lsls	r3, r5, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	4423      	add	r3, r4
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800c3ee:	7fbb      	ldrb	r3, [r7, #30]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	77bb      	strb	r3, [r7, #30]
 800c3f4:	7fbb      	ldrb	r3, [r7, #30]
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d9e5      	bls.n	800c3c6 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800c3fa:	7f7b      	ldrb	r3, [r7, #29]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	777b      	strb	r3, [r7, #29]
 800c400:	7f7b      	ldrb	r3, [r7, #29]
 800c402:	2b03      	cmp	r3, #3
 800c404:	d9dc      	bls.n	800c3c0 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800c406:	f000 f8c5 	bl	800c594 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800c40a:	f000 f905 	bl	800c618 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800c40e:	f107 020c 	add.w	r2, r7, #12
 800c412:	7f3b      	ldrb	r3, [r7, #28]
 800c414:	4611      	mov	r1, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f994 	bl	800c744 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800c41c:	f107 030c 	add.w	r3, r7, #12
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f863 	bl	800c4ec <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800c426:	7f3b      	ldrb	r3, [r7, #28]
 800c428:	3301      	adds	r3, #1
 800c42a:	773b      	strb	r3, [r7, #28]
 800c42c:	7f3b      	ldrb	r3, [r7, #28]
 800c42e:	2b09      	cmp	r3, #9
 800c430:	d9c3      	bls.n	800c3ba <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800c432:	2300      	movs	r3, #0
 800c434:	777b      	strb	r3, [r7, #29]
 800c436:	e01f      	b.n	800c478 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800c438:	2300      	movs	r3, #0
 800c43a:	77bb      	strb	r3, [r7, #30]
 800c43c:	e016      	b.n	800c46c <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c43e:	7fba      	ldrb	r2, [r7, #30]
 800c440:	7f7b      	ldrb	r3, [r7, #29]
 800c442:	4929      	ldr	r1, [pc, #164]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c444:	0092      	lsls	r2, r2, #2
 800c446:	440a      	add	r2, r1
 800c448:	4413      	add	r3, r2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	7fbd      	ldrb	r5, [r7, #30]
 800c44e:	7f7c      	ldrb	r4, [r7, #29]
 800c450:	4618      	mov	r0, r3
 800c452:	f000 f883 	bl	800c55c <AES_Sub_Byte>
 800c456:	4603      	mov	r3, r0
 800c458:	4619      	mov	r1, r3
 800c45a:	4a23      	ldr	r2, [pc, #140]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c45c:	00ab      	lsls	r3, r5, #2
 800c45e:	4413      	add	r3, r2
 800c460:	4423      	add	r3, r4
 800c462:	460a      	mov	r2, r1
 800c464:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c466:	7fbb      	ldrb	r3, [r7, #30]
 800c468:	3301      	adds	r3, #1
 800c46a:	77bb      	strb	r3, [r7, #30]
 800c46c:	7fbb      	ldrb	r3, [r7, #30]
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d9e5      	bls.n	800c43e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800c472:	7f7b      	ldrb	r3, [r7, #29]
 800c474:	3301      	adds	r3, #1
 800c476:	777b      	strb	r3, [r7, #29]
 800c478:	7f7b      	ldrb	r3, [r7, #29]
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d9dc      	bls.n	800c438 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800c47e:	f000 f889 	bl	800c594 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800c482:	f107 020c 	add.w	r2, r7, #12
 800c486:	7f3b      	ldrb	r3, [r7, #28]
 800c488:	4611      	mov	r1, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 f95a 	bl	800c744 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800c490:	f107 030c 	add.w	r3, r7, #12
 800c494:	4618      	mov	r0, r3
 800c496:	f000 f829 	bl	800c4ec <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800c49a:	2300      	movs	r3, #0
 800c49c:	777b      	strb	r3, [r7, #29]
 800c49e:	e01a      	b.n	800c4d6 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	77bb      	strb	r3, [r7, #30]
 800c4a4:	e011      	b.n	800c4ca <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800c4a6:	7fb9      	ldrb	r1, [r7, #30]
 800c4a8:	7f7a      	ldrb	r2, [r7, #29]
 800c4aa:	7fb8      	ldrb	r0, [r7, #30]
 800c4ac:	7f7b      	ldrb	r3, [r7, #29]
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4403      	add	r3, r0
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4403      	add	r3, r0
 800c4b8:	480b      	ldr	r0, [pc, #44]	@ (800c4e8 <AES_Encrypt+0x1b4>)
 800c4ba:	0089      	lsls	r1, r1, #2
 800c4bc:	4401      	add	r1, r0
 800c4be:	440a      	add	r2, r1
 800c4c0:	7812      	ldrb	r2, [r2, #0]
 800c4c2:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c4c4:	7fbb      	ldrb	r3, [r7, #30]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	77bb      	strb	r3, [r7, #30]
 800c4ca:	7fbb      	ldrb	r3, [r7, #30]
 800c4cc:	2b03      	cmp	r3, #3
 800c4ce:	d9ea      	bls.n	800c4a6 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800c4d0:	7f7b      	ldrb	r3, [r7, #29]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	777b      	strb	r3, [r7, #29]
 800c4d6:	7f7b      	ldrb	r3, [r7, #29]
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d9e1      	bls.n	800c4a0 <AES_Encrypt+0x16c>
		}
	}

}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	3720      	adds	r7, #32
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	200005bc 	.word	0x200005bc

0800c4ec <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73bb      	strb	r3, [r7, #14]
 800c4f8:	e024      	b.n	800c544 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73fb      	strb	r3, [r7, #15]
 800c4fe:	e01b      	b.n	800c538 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800c500:	7bfa      	ldrb	r2, [r7, #15]
 800c502:	7bbb      	ldrb	r3, [r7, #14]
 800c504:	4914      	ldr	r1, [pc, #80]	@ (800c558 <AES_Add_Round_Key+0x6c>)
 800c506:	0092      	lsls	r2, r2, #2
 800c508:	440a      	add	r2, r1
 800c50a:	4413      	add	r3, r2
 800c50c:	7818      	ldrb	r0, [r3, #0]
 800c50e:	7bfa      	ldrb	r2, [r7, #15]
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4413      	add	r3, r2
 800c51c:	7819      	ldrb	r1, [r3, #0]
 800c51e:	7bfa      	ldrb	r2, [r7, #15]
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	4041      	eors	r1, r0
 800c524:	b2c8      	uxtb	r0, r1
 800c526:	490c      	ldr	r1, [pc, #48]	@ (800c558 <AES_Add_Round_Key+0x6c>)
 800c528:	0092      	lsls	r2, r2, #2
 800c52a:	440a      	add	r2, r1
 800c52c:	4413      	add	r3, r2
 800c52e:	4602      	mov	r2, r0
 800c530:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	3301      	adds	r3, #1
 800c536:	73fb      	strb	r3, [r7, #15]
 800c538:	7bfb      	ldrb	r3, [r7, #15]
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d9e0      	bls.n	800c500 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	3301      	adds	r3, #1
 800c542:	73bb      	strb	r3, [r7, #14]
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	2b03      	cmp	r3, #3
 800c548:	d9d7      	bls.n	800c4fa <AES_Add_Round_Key+0xe>
		}
	}
}
 800c54a:	bf00      	nop
 800c54c:	bf00      	nop
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	bc80      	pop	{r7}
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	200005bc 	.word	0x200005bc

0800c55c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	f003 030f 	and.w	r3, r3, #15
 800c572:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800c574:	7bfa      	ldrb	r2, [r7, #15]
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	4905      	ldr	r1, [pc, #20]	@ (800c590 <AES_Sub_Byte+0x34>)
 800c57a:	0112      	lsls	r2, r2, #4
 800c57c:	440a      	add	r2, r1
 800c57e:	4413      	add	r3, r2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800c584:	7b7b      	ldrb	r3, [r7, #13]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bc80      	pop	{r7}
 800c58e:	4770      	bx	lr
 800c590:	20000010 	.word	0x20000010

0800c594 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800c59a:	4b1e      	ldr	r3, [pc, #120]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c59c:	791b      	ldrb	r3, [r3, #4]
 800c59e:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800c5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5a2:	795a      	ldrb	r2, [r3, #5]
 800c5a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5a6:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5aa:	799a      	ldrb	r2, [r3, #6]
 800c5ac:	4b19      	ldr	r3, [pc, #100]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5ae:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800c5b0:	4b18      	ldr	r3, [pc, #96]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5b2:	79da      	ldrb	r2, [r3, #7]
 800c5b4:	4b17      	ldr	r3, [pc, #92]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5b6:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800c5b8:	4a16      	ldr	r2, [pc, #88]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800c5be:	4b15      	ldr	r3, [pc, #84]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5c0:	7a1b      	ldrb	r3, [r3, #8]
 800c5c2:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800c5c4:	4b13      	ldr	r3, [pc, #76]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5c6:	7a9a      	ldrb	r2, [r3, #10]
 800c5c8:	4b12      	ldr	r3, [pc, #72]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5ca:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800c5cc:	4a11      	ldr	r2, [pc, #68]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800c5d2:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5d4:	7a5b      	ldrb	r3, [r3, #9]
 800c5d6:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800c5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5da:	7ada      	ldrb	r2, [r3, #11]
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5de:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800c5e0:	4a0c      	ldr	r2, [pc, #48]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5e2:	79fb      	ldrb	r3, [r7, #7]
 800c5e4:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5e8:	7bdb      	ldrb	r3, [r3, #15]
 800c5ea:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800c5ec:	4b09      	ldr	r3, [pc, #36]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5ee:	7b9a      	ldrb	r2, [r3, #14]
 800c5f0:	4b08      	ldr	r3, [pc, #32]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5f2:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800c5f4:	4b07      	ldr	r3, [pc, #28]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5f6:	7b5a      	ldrb	r2, [r3, #13]
 800c5f8:	4b06      	ldr	r3, [pc, #24]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5fa:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800c5fc:	4b05      	ldr	r3, [pc, #20]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c5fe:	7b1a      	ldrb	r2, [r3, #12]
 800c600:	4b04      	ldr	r3, [pc, #16]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c602:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800c604:	4a03      	ldr	r2, [pc, #12]	@ (800c614 <AES_Shift_Rows+0x80>)
 800c606:	79fb      	ldrb	r3, [r7, #7]
 800c608:	7313      	strb	r3, [r2, #12]
}
 800c60a:	bf00      	nop
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	bc80      	pop	{r7}
 800c612:	4770      	bx	lr
 800c614:	200005bc 	.word	0x200005bc

0800c618 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800c61e:	2300      	movs	r3, #0
 800c620:	73bb      	strb	r3, [r7, #14]
 800c622:	e082      	b.n	800c72a <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]
 800c628:	e033      	b.n	800c692 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800c62a:	7bf9      	ldrb	r1, [r7, #15]
 800c62c:	7bba      	ldrb	r2, [r7, #14]
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	4843      	ldr	r0, [pc, #268]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c632:	0089      	lsls	r1, r1, #2
 800c634:	4401      	add	r1, r0
 800c636:	440a      	add	r2, r1
 800c638:	7812      	ldrb	r2, [r2, #0]
 800c63a:	3310      	adds	r3, #16
 800c63c:	443b      	add	r3, r7
 800c63e:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800c642:	7bfa      	ldrb	r2, [r7, #15]
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	493e      	ldr	r1, [pc, #248]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c648:	0092      	lsls	r2, r2, #2
 800c64a:	440a      	add	r2, r1
 800c64c:	4413      	add	r3, r2
 800c64e:	781a      	ldrb	r2, [r3, #0]
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	0052      	lsls	r2, r2, #1
 800c654:	b2d2      	uxtb	r2, r2
 800c656:	3310      	adds	r3, #16
 800c658:	443b      	add	r3, r7
 800c65a:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800c65e:	7bfa      	ldrb	r2, [r7, #15]
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	4937      	ldr	r1, [pc, #220]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c664:	0092      	lsls	r2, r2, #2
 800c666:	440a      	add	r2, r1
 800c668:	4413      	add	r3, r2
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	b25b      	sxtb	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	da0c      	bge.n	800c68c <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	3310      	adds	r3, #16
 800c676:	443b      	add	r3, r7
 800c678:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	f082 021b 	eor.w	r2, r2, #27
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	3310      	adds	r3, #16
 800c686:	443b      	add	r3, r7
 800c688:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
 800c68e:	3301      	adds	r3, #1
 800c690:	73fb      	strb	r3, [r7, #15]
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	2b03      	cmp	r3, #3
 800c696:	d9c8      	bls.n	800c62a <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800c698:	793a      	ldrb	r2, [r7, #4]
 800c69a:	7a7b      	ldrb	r3, [r7, #9]
 800c69c:	4053      	eors	r3, r2
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	797b      	ldrb	r3, [r7, #5]
 800c6a2:	4053      	eors	r3, r2
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	7abb      	ldrb	r3, [r7, #10]
 800c6a8:	4053      	eors	r3, r2
 800c6aa:	b2d9      	uxtb	r1, r3
 800c6ac:	7afa      	ldrb	r2, [r7, #11]
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	404a      	eors	r2, r1
 800c6b2:	b2d1      	uxtb	r1, r2
 800c6b4:	4a22      	ldr	r2, [pc, #136]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c6b6:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800c6b8:	7a3a      	ldrb	r2, [r7, #8]
 800c6ba:	797b      	ldrb	r3, [r7, #5]
 800c6bc:	4053      	eors	r3, r2
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	7abb      	ldrb	r3, [r7, #10]
 800c6c2:	4053      	eors	r3, r2
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	79bb      	ldrb	r3, [r7, #6]
 800c6c8:	4053      	eors	r3, r2
 800c6ca:	b2d9      	uxtb	r1, r3
 800c6cc:	7afa      	ldrb	r2, [r7, #11]
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	404a      	eors	r2, r1
 800c6d2:	b2d1      	uxtb	r1, r2
 800c6d4:	4a1a      	ldr	r2, [pc, #104]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c6d6:	4413      	add	r3, r2
 800c6d8:	460a      	mov	r2, r1
 800c6da:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800c6dc:	7a3a      	ldrb	r2, [r7, #8]
 800c6de:	7a7b      	ldrb	r3, [r7, #9]
 800c6e0:	4053      	eors	r3, r2
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	79bb      	ldrb	r3, [r7, #6]
 800c6e6:	4053      	eors	r3, r2
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	7afb      	ldrb	r3, [r7, #11]
 800c6ec:	4053      	eors	r3, r2
 800c6ee:	b2d9      	uxtb	r1, r3
 800c6f0:	79fa      	ldrb	r2, [r7, #7]
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	404a      	eors	r2, r1
 800c6f6:	b2d1      	uxtb	r1, r2
 800c6f8:	4a11      	ldr	r2, [pc, #68]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c6fa:	4413      	add	r3, r2
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800c700:	7a3a      	ldrb	r2, [r7, #8]
 800c702:	793b      	ldrb	r3, [r7, #4]
 800c704:	4053      	eors	r3, r2
 800c706:	b2da      	uxtb	r2, r3
 800c708:	7a7b      	ldrb	r3, [r7, #9]
 800c70a:	4053      	eors	r3, r2
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	7abb      	ldrb	r3, [r7, #10]
 800c710:	4053      	eors	r3, r2
 800c712:	b2d9      	uxtb	r1, r3
 800c714:	79fa      	ldrb	r2, [r7, #7]
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	404a      	eors	r2, r1
 800c71a:	b2d1      	uxtb	r1, r2
 800c71c:	4a08      	ldr	r2, [pc, #32]	@ (800c740 <AES_Mix_Collums+0x128>)
 800c71e:	4413      	add	r3, r2
 800c720:	460a      	mov	r2, r1
 800c722:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800c724:	7bbb      	ldrb	r3, [r7, #14]
 800c726:	3301      	adds	r3, #1
 800c728:	73bb      	strb	r3, [r7, #14]
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	f67f af79 	bls.w	800c624 <AES_Mix_Collums+0xc>
	}
}
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	bc80      	pop	{r7}
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	200005bc 	.word	0x200005bc

0800c744 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800c750:	2300      	movs	r3, #0
 800c752:	75fb      	strb	r3, [r7, #23]
 800c754:	e00c      	b.n	800c770 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	330c      	adds	r3, #12
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	441a      	add	r2, r3
 800c75e:	7dfb      	ldrb	r3, [r7, #23]
 800c760:	7812      	ldrb	r2, [r2, #0]
 800c762:	3318      	adds	r3, #24
 800c764:	443b      	add	r3, r7
 800c766:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	3301      	adds	r3, #1
 800c76e:	75fb      	strb	r3, [r7, #23]
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	2b03      	cmp	r3, #3
 800c774:	d9ef      	bls.n	800c756 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800c776:	7b3b      	ldrb	r3, [r7, #12]
 800c778:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800c77a:	7b7b      	ldrb	r3, [r7, #13]
 800c77c:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800c786:	7d3b      	ldrb	r3, [r7, #20]
 800c788:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800c78a:	2300      	movs	r3, #0
 800c78c:	75fb      	strb	r3, [r7, #23]
 800c78e:	e012      	b.n	800c7b6 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	3318      	adds	r3, #24
 800c794:	443b      	add	r3, r7
 800c796:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c79a:	7dfc      	ldrb	r4, [r7, #23]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff fedd 	bl	800c55c <AES_Sub_Byte>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f104 0318 	add.w	r3, r4, #24
 800c7aa:	443b      	add	r3, r7
 800c7ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	75fb      	strb	r3, [r7, #23]
 800c7b6:	7dfb      	ldrb	r3, [r7, #23]
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d9e9      	bls.n	800c790 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800c7c0:	e010      	b.n	800c7e4 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800c7c2:	7d7b      	ldrb	r3, [r7, #21]
 800c7c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c7c8:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800c7ca:	7d7b      	ldrb	r3, [r7, #21]
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800c7d0:	7cfb      	ldrb	r3, [r7, #19]
 800c7d2:	2b80      	cmp	r3, #128	@ 0x80
 800c7d4:	d103      	bne.n	800c7de <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800c7d6:	7d7b      	ldrb	r3, [r7, #21]
 800c7d8:	f083 031b 	eor.w	r3, r3, #27
 800c7dc:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800c7e4:	79fb      	ldrb	r3, [r7, #7]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d1eb      	bne.n	800c7c2 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800c7ea:	7b3a      	ldrb	r2, [r7, #12]
 800c7ec:	7d7b      	ldrb	r3, [r7, #21]
 800c7ee:	4053      	eors	r3, r2
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	75fb      	strb	r3, [r7, #23]
 800c7f8:	e02f      	b.n	800c85a <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75bb      	strb	r3, [r7, #22]
 800c7fe:	e026      	b.n	800c84e <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800c800:	7dba      	ldrb	r2, [r7, #22]
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	461a      	mov	r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	4413      	add	r3, r2
 800c80e:	7819      	ldrb	r1, [r3, #0]
 800c810:	7dbb      	ldrb	r3, [r7, #22]
 800c812:	3318      	adds	r3, #24
 800c814:	443b      	add	r3, r7
 800c816:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c81a:	7db8      	ldrb	r0, [r7, #22]
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4403      	add	r3, r0
 800c822:	4618      	mov	r0, r3
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	4403      	add	r3, r0
 800c828:	404a      	eors	r2, r1
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800c82e:	7dba      	ldrb	r2, [r7, #22]
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	461a      	mov	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	441a      	add	r2, r3
 800c83c:	7dbb      	ldrb	r3, [r7, #22]
 800c83e:	7812      	ldrb	r2, [r2, #0]
 800c840:	3318      	adds	r3, #24
 800c842:	443b      	add	r3, r7
 800c844:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800c848:	7dbb      	ldrb	r3, [r7, #22]
 800c84a:	3301      	adds	r3, #1
 800c84c:	75bb      	strb	r3, [r7, #22]
 800c84e:	7dbb      	ldrb	r3, [r7, #22]
 800c850:	2b03      	cmp	r3, #3
 800c852:	d9d5      	bls.n	800c800 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	3301      	adds	r3, #1
 800c858:	75fb      	strb	r3, [r7, #23]
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d9cc      	bls.n	800c7fa <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	bd90      	pop	{r4, r7, pc}

0800c86a <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b08a      	sub	sp, #40	@ 0x28
 800c86e:	af00      	add	r7, sp, #0
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	461a      	mov	r2, r3
 800c876:	460b      	mov	r3, r1
 800c878:	72fb      	strb	r3, [r7, #11]
 800c87a:	4613      	mov	r3, r2
 800c87c:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800c884:	2300      	movs	r3, #0
 800c886:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800c88a:	2300      	movs	r3, #0
 800c88c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	091b      	lsrs	r3, r3, #4
 800c894:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800c898:	7afb      	ldrb	r3, [r7, #11]
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if(Incomplete_Block_Size != 0)
 800c8a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d004      	beq.n	800c8b4 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800c8aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8ba:	e07e      	b.n	800c9ba <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800c8d0:	7abb      	ldrb	r3, [r7, #10]
 800c8d2:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800c8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d6:	78db      	ldrb	r3, [r3, #3]
 800c8d8:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800c8da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8dc:	789b      	ldrb	r3, [r3, #2]
 800c8de:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e2:	785b      	ldrb	r3, [r3, #1]
 800c8e4:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	0a1b      	lsrs	r3, r3, #8
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800c900:	2300      	movs	r3, #0
 800c902:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

		Block_A[14] = 0x00;
 800c906:	2300      	movs	r3, #0
 800c908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		Block_A[15] = i;
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800c914:	f107 0314 	add.w	r3, r7, #20
 800c918:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fd0a 	bl	800c334 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800c920:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c924:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c928:	429a      	cmp	r2, r3
 800c92a:	d01c      	beq.n	800c966 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c932:	e013      	b.n	800c95c <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	781a      	ldrb	r2, [r3, #0]
 800c938:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c93c:	3328      	adds	r3, #40	@ 0x28
 800c93e:	443b      	add	r3, r7
 800c940:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c944:	4053      	eors	r3, r2
 800c946:	b2da      	uxtb	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	701a      	strb	r2, [r3, #0]
				Data++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800c952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c956:	3301      	adds	r3, #1
 800c958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c95c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c960:	2b0f      	cmp	r3, #15
 800c962:	d9e7      	bls.n	800c934 <Encrypt_Payload+0xca>
 800c964:	e024      	b.n	800c9b0 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800c966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d102      	bne.n	800c974 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800c96e:	2310      	movs	r3, #16
 800c970:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800c974:	2300      	movs	r3, #0
 800c976:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c97a:	e013      	b.n	800c9a4 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	781a      	ldrb	r2, [r3, #0]
 800c980:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c984:	3328      	adds	r3, #40	@ 0x28
 800c986:	443b      	add	r3, r7
 800c988:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c98c:	4053      	eors	r3, r2
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	701a      	strb	r2, [r3, #0]
				Data++;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3301      	adds	r3, #1
 800c998:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800c99a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c99e:	3301      	adds	r3, #1
 800c9a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c9a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c9a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d3e5      	bcc.n	800c97c <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800c9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c9be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	f67f af7a 	bls.w	800c8bc <Encrypt_Payload+0x52>
			}
		}
	}
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	3728      	adds	r7, #40	@ 0x28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b09a      	sub	sp, #104	@ 0x68
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	60f8      	str	r0, [r7, #12]
 800c9da:	60b9      	str	r1, [r7, #8]
 800c9dc:	603b      	str	r3, [r7, #0]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800c9e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	605a      	str	r2, [r3, #4]
 800c9ec:	609a      	str	r2, [r3, #8]
 800c9ee:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800c9f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	605a      	str	r2, [r3, #4]
 800c9fa:	609a      	str	r2, [r3, #8]
 800c9fc:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800c9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	605a      	str	r2, [r3, #4]
 800ca08:	609a      	str	r2, [r3, #8]
 800ca0a:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800ca0c:	f107 0314 	add.w	r3, r7, #20
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	605a      	str	r2, [r3, #4]
 800ca16:	609a      	str	r2, [r3, #8]
 800ca18:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800ca20:	2300      	movs	r3, #0
 800ca22:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	unsigned char Block_Counter = 0x01;
 800ca26:	2301      	movs	r3, #1
 800ca28:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800ca2c:	2349      	movs	r3, #73	@ 0x49
 800ca2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	Block_B[1] = 0x00;
 800ca32:	2300      	movs	r3, #0
 800ca34:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	Block_B[2] = 0x00;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	Block_B[3] = 0x00;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Block_B[4] = 0x00;
 800ca44:	2300      	movs	r3, #0
 800ca46:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

	Block_B[5] = Direction;
 800ca4a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800ca4e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	Block_B[6] = DevAddr[3];
 800ca52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca54:	78db      	ldrb	r3, [r3, #3]
 800ca56:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	Block_B[7] = DevAddr[2];
 800ca5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca5c:	789b      	ldrb	r3, [r3, #2]
 800ca5e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	Block_B[8] = DevAddr[1];
 800ca62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca64:	785b      	ldrb	r3, [r3, #1]
 800ca66:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Block_B[9] = DevAddr[0];
 800ca6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	0a1b      	lsrs	r3, r3, #8
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Block_B[13] = 0x00;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

	Block_B[14] = 0x00;
 800ca90:	2300      	movs	r3, #0
 800ca92:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	Block_B[15] = Data_Length;
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	091b      	lsrs	r3, r3, #4
 800caa0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

	if(Incomplete_Block_Size != 0)
 800caae:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d004      	beq.n	800cac0 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800cab6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800caba:	3301      	adds	r3, #1
 800cabc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800cac0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800cac4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cac8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 f8fe 	bl	800cccc <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800cad0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cad4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7ff fc2c 	bl	800c334 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cae2:	e010      	b.n	800cb06 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800cae4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cae8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800caec:	3268      	adds	r2, #104	@ 0x68
 800caee:	443a      	add	r2, r7
 800caf0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800caf4:	3368      	adds	r3, #104	@ 0x68
 800caf6:	443b      	add	r3, r7
 800caf8:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800cafc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb00:	3301      	adds	r3, #1
 800cb02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb0a:	2b0f      	cmp	r3, #15
 800cb0c:	d9ea      	bls.n	800cae4 <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800cb0e:	e043      	b.n	800cb98 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb16:	e00f      	b.n	800cb38 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800cb18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	7812      	ldrb	r2, [r2, #0]
 800cb20:	3368      	adds	r3, #104	@ 0x68
 800cb22:	443b      	add	r3, r7
 800cb24:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800cb2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb32:	3301      	adds	r3, #1
 800cb34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb3c:	2b0f      	cmp	r3, #15
 800cb3e:	d9eb      	bls.n	800cb18 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800cb40:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cb44:	f107 0314 	add.w	r3, r7, #20
 800cb48:	4611      	mov	r1, r2
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f000 f946 	bl	800cddc <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800cb50:	f107 0314 	add.w	r3, r7, #20
 800cb54:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fbec 	bl	800c334 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb62:	e010      	b.n	800cb86 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800cb64:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cb68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb6c:	3268      	adds	r2, #104	@ 0x68
 800cb6e:	443a      	add	r2, r7
 800cb70:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800cb74:	3368      	adds	r3, #104	@ 0x68
 800cb76:	443b      	add	r3, r7
 800cb78:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800cb7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb80:	3301      	adds	r3, #1
 800cb82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb8a:	2b0f      	cmp	r3, #15
 800cb8c:	d9ea      	bls.n	800cb64 <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800cb8e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800cb92:	3301      	adds	r3, #1
 800cb94:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	while(Block_Counter < Number_of_Blocks)
 800cb98:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800cb9c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d3b5      	bcc.n	800cb10 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800cba4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d12e      	bne.n	800cc0a <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cbb2:	e00f      	b.n	800cbd4 <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800cbb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	7812      	ldrb	r2, [r2, #0]
 800cbbc:	3368      	adds	r3, #104	@ 0x68
 800cbbe:	443b      	add	r3, r7
 800cbc0:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800cbca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cbce:	3301      	adds	r3, #1
 800cbd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cbd4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cbd8:	2b0f      	cmp	r3, #15
 800cbda:	d9eb      	bls.n	800cbb4 <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800cbdc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800cbe0:	f107 0314 	add.w	r3, r7, #20
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f8f8 	bl	800cddc <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800cbec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cbf0:	f107 0314 	add.w	r3, r7, #20
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f8f0 	bl	800cddc <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800cbfc:	f107 0314 	add.w	r3, r7, #20
 800cc00:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fb96 	bl	800c334 <AES_Encrypt>
 800cc08:	e04d      	b.n	800cca6 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc10:	e02f      	b.n	800cc72 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800cc12:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cc16:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d20a      	bcs.n	800cc34 <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800cc1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	3368      	adds	r3, #104	@ 0x68
 800cc28:	443b      	add	r3, r7
 800cc2a:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800cc34:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cc38:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d106      	bne.n	800cc4e <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800cc40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc44:	3368      	adds	r3, #104	@ 0x68
 800cc46:	443b      	add	r3, r7
 800cc48:	2280      	movs	r2, #128	@ 0x80
 800cc4a:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800cc4e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cc52:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d906      	bls.n	800cc68 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800cc5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc5e:	3368      	adds	r3, #104	@ 0x68
 800cc60:	443b      	add	r3, r7
 800cc62:	2200      	movs	r2, #0
 800cc64:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800cc68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc76:	2b0f      	cmp	r3, #15
 800cc78:	d9cb      	bls.n	800cc12 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800cc7a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800cc7e:	f107 0314 	add.w	r3, r7, #20
 800cc82:	4611      	mov	r1, r2
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f8a9 	bl	800cddc <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800cc8a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cc8e:	f107 0314 	add.w	r3, r7, #20
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f8a1 	bl	800cddc <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800cc9a:	f107 0314 	add.w	r3, r7, #20
 800cc9e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff fb47 	bl	800c334 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800cca6:	7d3a      	ldrb	r2, [r7, #20]
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	7d7a      	ldrb	r2, [r7, #21]
 800ccb2:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	3302      	adds	r3, #2
 800ccb8:	7dba      	ldrb	r2, [r7, #22]
 800ccba:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	7dfa      	ldrb	r2, [r7, #23]
 800ccc2:	701a      	strb	r2, [r3, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	3768      	adds	r7, #104	@ 0x68
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7ff fb2a 	bl	800c334 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	b25b      	sxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	da02      	bge.n	800ccf0 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800ccea:	2301      	movs	r3, #1
 800ccec:	75bb      	strb	r3, [r7, #22]
 800ccee:	e001      	b.n	800ccf4 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 f83c 	bl	800cd72 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800ccfa:	7dbb      	ldrb	r3, [r7, #22]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d109      	bne.n	800cd14 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	330f      	adds	r3, #15
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	320f      	adds	r2, #15
 800cd0a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800cd0e:	43db      	mvns	r3, r3
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800cd14:	2300      	movs	r3, #0
 800cd16:	75fb      	strb	r3, [r7, #23]
 800cd18:	e00a      	b.n	800cd30 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	441a      	add	r2, r3
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	440b      	add	r3, r1
 800cd26:	7812      	ldrb	r2, [r2, #0]
 800cd28:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	75fb      	strb	r3, [r7, #23]
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	2b0f      	cmp	r3, #15
 800cd34:	d9f1      	bls.n	800cd1a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	b25b      	sxtb	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da02      	bge.n	800cd46 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75bb      	strb	r3, [r7, #22]
 800cd44:	e001      	b.n	800cd4a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800cd4a:	68b8      	ldr	r0, [r7, #8]
 800cd4c:	f000 f811 	bl	800cd72 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800cd50:	7dbb      	ldrb	r3, [r7, #22]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d109      	bne.n	800cd6a <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	330f      	adds	r3, #15
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	320f      	adds	r2, #15
 800cd60:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800cd64:	43db      	mvns	r3, r3
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	7013      	strb	r3, [r2, #0]
	}
}
 800cd6a:	bf00      	nop
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800cd7e:	2300      	movs	r3, #0
 800cd80:	73fb      	strb	r3, [r7, #15]
 800cd82:	e022      	b.n	800cdca <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	2b0e      	cmp	r3, #14
 800cd88:	d80d      	bhi.n	800cda6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	b25b      	sxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	da02      	bge.n	800cda0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	73bb      	strb	r3, [r7, #14]
 800cd9e:	e004      	b.n	800cdaa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73bb      	strb	r3, [r7, #14]
 800cda4:	e001      	b.n	800cdaa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	4413      	add	r3, r2
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	b2d9      	uxtb	r1, r3
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	4413      	add	r3, r2
 800cdbc:	7bba      	ldrb	r2, [r7, #14]
 800cdbe:	440a      	add	r2, r1
 800cdc0:	b2d2      	uxtb	r2, r2
 800cdc2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	2b0f      	cmp	r3, #15
 800cdce:	d9d9      	bls.n	800cd84 <Shift_Left+0x12>
	}
}
 800cdd0:	bf00      	nop
 800cdd2:	bf00      	nop
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bc80      	pop	{r7}
 800cdda:	4770      	bx	lr

0800cddc <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
 800cdea:	e010      	b.n	800ce0e <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	7819      	ldrb	r1, [r3, #0]
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	781a      	ldrb	r2, [r3, #0]
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	4403      	add	r3, r0
 800ce02:	404a      	eors	r2, r1
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	73fb      	strb	r3, [r7, #15]
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	2b0f      	cmp	r3, #15
 800ce12:	d9eb      	bls.n	800cdec <XOR+0x10>
	}
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bc80      	pop	{r7}
 800ce1e:	4770      	bx	lr

0800ce20 <__assert_func>:
 800ce20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce22:	4614      	mov	r4, r2
 800ce24:	461a      	mov	r2, r3
 800ce26:	4b09      	ldr	r3, [pc, #36]	@ (800ce4c <__assert_func+0x2c>)
 800ce28:	4605      	mov	r5, r0
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68d8      	ldr	r0, [r3, #12]
 800ce2e:	b14c      	cbz	r4, 800ce44 <__assert_func+0x24>
 800ce30:	4b07      	ldr	r3, [pc, #28]	@ (800ce50 <__assert_func+0x30>)
 800ce32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce36:	9100      	str	r1, [sp, #0]
 800ce38:	462b      	mov	r3, r5
 800ce3a:	4906      	ldr	r1, [pc, #24]	@ (800ce54 <__assert_func+0x34>)
 800ce3c:	f000 f8b2 	bl	800cfa4 <fiprintf>
 800ce40:	f000 f9bd 	bl	800d1be <abort>
 800ce44:	4b04      	ldr	r3, [pc, #16]	@ (800ce58 <__assert_func+0x38>)
 800ce46:	461c      	mov	r4, r3
 800ce48:	e7f3      	b.n	800ce32 <__assert_func+0x12>
 800ce4a:	bf00      	nop
 800ce4c:	2000011c 	.word	0x2000011c
 800ce50:	0800e0b4 	.word	0x0800e0b4
 800ce54:	0800e0c1 	.word	0x0800e0c1
 800ce58:	0800e0ef 	.word	0x0800e0ef

0800ce5c <std>:
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	b510      	push	{r4, lr}
 800ce60:	4604      	mov	r4, r0
 800ce62:	e9c0 3300 	strd	r3, r3, [r0]
 800ce66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce6a:	6083      	str	r3, [r0, #8]
 800ce6c:	8181      	strh	r1, [r0, #12]
 800ce6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce70:	81c2      	strh	r2, [r0, #14]
 800ce72:	6183      	str	r3, [r0, #24]
 800ce74:	4619      	mov	r1, r3
 800ce76:	2208      	movs	r2, #8
 800ce78:	305c      	adds	r0, #92	@ 0x5c
 800ce7a:	f000 f916 	bl	800d0aa <memset>
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb4 <std+0x58>)
 800ce80:	6224      	str	r4, [r4, #32]
 800ce82:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce84:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb8 <std+0x5c>)
 800ce86:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce88:	4b0c      	ldr	r3, [pc, #48]	@ (800cebc <std+0x60>)
 800ce8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cec0 <std+0x64>)
 800ce8e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce90:	4b0c      	ldr	r3, [pc, #48]	@ (800cec4 <std+0x68>)
 800ce92:	429c      	cmp	r4, r3
 800ce94:	d006      	beq.n	800cea4 <std+0x48>
 800ce96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce9a:	4294      	cmp	r4, r2
 800ce9c:	d002      	beq.n	800cea4 <std+0x48>
 800ce9e:	33d0      	adds	r3, #208	@ 0xd0
 800cea0:	429c      	cmp	r4, r3
 800cea2:	d105      	bne.n	800ceb0 <std+0x54>
 800cea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceac:	f000 b976 	b.w	800d19c <__retarget_lock_init_recursive>
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800d005 	.word	0x0800d005
 800ceb8:	0800d027 	.word	0x0800d027
 800cebc:	0800d05f 	.word	0x0800d05f
 800cec0:	0800d083 	.word	0x0800d083
 800cec4:	200005cc 	.word	0x200005cc

0800cec8 <stdio_exit_handler>:
 800cec8:	4a02      	ldr	r2, [pc, #8]	@ (800ced4 <stdio_exit_handler+0xc>)
 800ceca:	4903      	ldr	r1, [pc, #12]	@ (800ced8 <stdio_exit_handler+0x10>)
 800cecc:	4803      	ldr	r0, [pc, #12]	@ (800cedc <stdio_exit_handler+0x14>)
 800cece:	f000 b87b 	b.w	800cfc8 <_fwalk_sglue>
 800ced2:	bf00      	nop
 800ced4:	20000110 	.word	0x20000110
 800ced8:	0800da59 	.word	0x0800da59
 800cedc:	20000120 	.word	0x20000120

0800cee0 <cleanup_stdio>:
 800cee0:	6841      	ldr	r1, [r0, #4]
 800cee2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf14 <cleanup_stdio+0x34>)
 800cee4:	b510      	push	{r4, lr}
 800cee6:	4299      	cmp	r1, r3
 800cee8:	4604      	mov	r4, r0
 800ceea:	d001      	beq.n	800cef0 <cleanup_stdio+0x10>
 800ceec:	f000 fdb4 	bl	800da58 <_fflush_r>
 800cef0:	68a1      	ldr	r1, [r4, #8]
 800cef2:	4b09      	ldr	r3, [pc, #36]	@ (800cf18 <cleanup_stdio+0x38>)
 800cef4:	4299      	cmp	r1, r3
 800cef6:	d002      	beq.n	800cefe <cleanup_stdio+0x1e>
 800cef8:	4620      	mov	r0, r4
 800cefa:	f000 fdad 	bl	800da58 <_fflush_r>
 800cefe:	68e1      	ldr	r1, [r4, #12]
 800cf00:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <cleanup_stdio+0x3c>)
 800cf02:	4299      	cmp	r1, r3
 800cf04:	d004      	beq.n	800cf10 <cleanup_stdio+0x30>
 800cf06:	4620      	mov	r0, r4
 800cf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf0c:	f000 bda4 	b.w	800da58 <_fflush_r>
 800cf10:	bd10      	pop	{r4, pc}
 800cf12:	bf00      	nop
 800cf14:	200005cc 	.word	0x200005cc
 800cf18:	20000634 	.word	0x20000634
 800cf1c:	2000069c 	.word	0x2000069c

0800cf20 <global_stdio_init.part.0>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	4b0b      	ldr	r3, [pc, #44]	@ (800cf50 <global_stdio_init.part.0+0x30>)
 800cf24:	4c0b      	ldr	r4, [pc, #44]	@ (800cf54 <global_stdio_init.part.0+0x34>)
 800cf26:	4a0c      	ldr	r2, [pc, #48]	@ (800cf58 <global_stdio_init.part.0+0x38>)
 800cf28:	4620      	mov	r0, r4
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	2104      	movs	r1, #4
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f7ff ff94 	bl	800ce5c <std>
 800cf34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf38:	2201      	movs	r2, #1
 800cf3a:	2109      	movs	r1, #9
 800cf3c:	f7ff ff8e 	bl	800ce5c <std>
 800cf40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf44:	2202      	movs	r2, #2
 800cf46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf4a:	2112      	movs	r1, #18
 800cf4c:	f7ff bf86 	b.w	800ce5c <std>
 800cf50:	20000704 	.word	0x20000704
 800cf54:	200005cc 	.word	0x200005cc
 800cf58:	0800cec9 	.word	0x0800cec9

0800cf5c <__sfp_lock_acquire>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	@ (800cf64 <__sfp_lock_acquire+0x8>)
 800cf5e:	f000 b91e 	b.w	800d19e <__retarget_lock_acquire_recursive>
 800cf62:	bf00      	nop
 800cf64:	2000070d 	.word	0x2000070d

0800cf68 <__sfp_lock_release>:
 800cf68:	4801      	ldr	r0, [pc, #4]	@ (800cf70 <__sfp_lock_release+0x8>)
 800cf6a:	f000 b919 	b.w	800d1a0 <__retarget_lock_release_recursive>
 800cf6e:	bf00      	nop
 800cf70:	2000070d 	.word	0x2000070d

0800cf74 <__sinit>:
 800cf74:	b510      	push	{r4, lr}
 800cf76:	4604      	mov	r4, r0
 800cf78:	f7ff fff0 	bl	800cf5c <__sfp_lock_acquire>
 800cf7c:	6a23      	ldr	r3, [r4, #32]
 800cf7e:	b11b      	cbz	r3, 800cf88 <__sinit+0x14>
 800cf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf84:	f7ff bff0 	b.w	800cf68 <__sfp_lock_release>
 800cf88:	4b04      	ldr	r3, [pc, #16]	@ (800cf9c <__sinit+0x28>)
 800cf8a:	6223      	str	r3, [r4, #32]
 800cf8c:	4b04      	ldr	r3, [pc, #16]	@ (800cfa0 <__sinit+0x2c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d1f5      	bne.n	800cf80 <__sinit+0xc>
 800cf94:	f7ff ffc4 	bl	800cf20 <global_stdio_init.part.0>
 800cf98:	e7f2      	b.n	800cf80 <__sinit+0xc>
 800cf9a:	bf00      	nop
 800cf9c:	0800cee1 	.word	0x0800cee1
 800cfa0:	20000704 	.word	0x20000704

0800cfa4 <fiprintf>:
 800cfa4:	b40e      	push	{r1, r2, r3}
 800cfa6:	b503      	push	{r0, r1, lr}
 800cfa8:	4601      	mov	r1, r0
 800cfaa:	ab03      	add	r3, sp, #12
 800cfac:	4805      	ldr	r0, [pc, #20]	@ (800cfc4 <fiprintf+0x20>)
 800cfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb2:	6800      	ldr	r0, [r0, #0]
 800cfb4:	9301      	str	r3, [sp, #4]
 800cfb6:	f000 fa27 	bl	800d408 <_vfiprintf_r>
 800cfba:	b002      	add	sp, #8
 800cfbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfc0:	b003      	add	sp, #12
 800cfc2:	4770      	bx	lr
 800cfc4:	2000011c 	.word	0x2000011c

0800cfc8 <_fwalk_sglue>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	4607      	mov	r7, r0
 800cfce:	4688      	mov	r8, r1
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfd8:	f1b9 0901 	subs.w	r9, r9, #1
 800cfdc:	d505      	bpl.n	800cfea <_fwalk_sglue+0x22>
 800cfde:	6824      	ldr	r4, [r4, #0]
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d1f7      	bne.n	800cfd4 <_fwalk_sglue+0xc>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d907      	bls.n	800d000 <_fwalk_sglue+0x38>
 800cff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cff4:	3301      	adds	r3, #1
 800cff6:	d003      	beq.n	800d000 <_fwalk_sglue+0x38>
 800cff8:	4629      	mov	r1, r5
 800cffa:	4638      	mov	r0, r7
 800cffc:	47c0      	blx	r8
 800cffe:	4306      	orrs	r6, r0
 800d000:	3568      	adds	r5, #104	@ 0x68
 800d002:	e7e9      	b.n	800cfd8 <_fwalk_sglue+0x10>

0800d004 <__sread>:
 800d004:	b510      	push	{r4, lr}
 800d006:	460c      	mov	r4, r1
 800d008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d00c:	f000 f878 	bl	800d100 <_read_r>
 800d010:	2800      	cmp	r0, #0
 800d012:	bfab      	itete	ge
 800d014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d016:	89a3      	ldrhlt	r3, [r4, #12]
 800d018:	181b      	addge	r3, r3, r0
 800d01a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d01e:	bfac      	ite	ge
 800d020:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d022:	81a3      	strhlt	r3, [r4, #12]
 800d024:	bd10      	pop	{r4, pc}

0800d026 <__swrite>:
 800d026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	461f      	mov	r7, r3
 800d02c:	898b      	ldrh	r3, [r1, #12]
 800d02e:	4605      	mov	r5, r0
 800d030:	05db      	lsls	r3, r3, #23
 800d032:	460c      	mov	r4, r1
 800d034:	4616      	mov	r6, r2
 800d036:	d505      	bpl.n	800d044 <__swrite+0x1e>
 800d038:	2302      	movs	r3, #2
 800d03a:	2200      	movs	r2, #0
 800d03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d040:	f000 f84c 	bl	800d0dc <_lseek_r>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	4632      	mov	r2, r6
 800d048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	4628      	mov	r0, r5
 800d050:	463b      	mov	r3, r7
 800d052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	f000 b863 	b.w	800d124 <_write_r>

0800d05e <__sseek>:
 800d05e:	b510      	push	{r4, lr}
 800d060:	460c      	mov	r4, r1
 800d062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d066:	f000 f839 	bl	800d0dc <_lseek_r>
 800d06a:	1c43      	adds	r3, r0, #1
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	bf15      	itete	ne
 800d070:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d07a:	81a3      	strheq	r3, [r4, #12]
 800d07c:	bf18      	it	ne
 800d07e:	81a3      	strhne	r3, [r4, #12]
 800d080:	bd10      	pop	{r4, pc}

0800d082 <__sclose>:
 800d082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d086:	f000 b819 	b.w	800d0bc <_close_r>

0800d08a <memcmp>:
 800d08a:	b510      	push	{r4, lr}
 800d08c:	3901      	subs	r1, #1
 800d08e:	4402      	add	r2, r0
 800d090:	4290      	cmp	r0, r2
 800d092:	d101      	bne.n	800d098 <memcmp+0xe>
 800d094:	2000      	movs	r0, #0
 800d096:	e005      	b.n	800d0a4 <memcmp+0x1a>
 800d098:	7803      	ldrb	r3, [r0, #0]
 800d09a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	d001      	beq.n	800d0a6 <memcmp+0x1c>
 800d0a2:	1b18      	subs	r0, r3, r4
 800d0a4:	bd10      	pop	{r4, pc}
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	e7f2      	b.n	800d090 <memcmp+0x6>

0800d0aa <memset>:
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4402      	add	r2, r0
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d100      	bne.n	800d0b4 <memset+0xa>
 800d0b2:	4770      	bx	lr
 800d0b4:	f803 1b01 	strb.w	r1, [r3], #1
 800d0b8:	e7f9      	b.n	800d0ae <memset+0x4>
	...

0800d0bc <_close_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4d05      	ldr	r5, [pc, #20]	@ (800d0d8 <_close_r+0x1c>)
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	f7f7 ffcf 	bl	800506a <_close>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_close_r+0x1a>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_close_r+0x1a>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	20000708 	.word	0x20000708

0800d0dc <_lseek_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	4d05      	ldr	r5, [pc, #20]	@ (800d0fc <_lseek_r+0x20>)
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f7 ffe1 	bl	80050b2 <_lseek>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_lseek_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_lseek_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	20000708 	.word	0x20000708

0800d100 <_read_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	2200      	movs	r2, #0
 800d10a:	4d05      	ldr	r5, [pc, #20]	@ (800d120 <_read_r+0x20>)
 800d10c:	602a      	str	r2, [r5, #0]
 800d10e:	461a      	mov	r2, r3
 800d110:	f7f7 ff72 	bl	8004ff8 <_read>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_read_r+0x1e>
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_read_r+0x1e>
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20000708 	.word	0x20000708

0800d124 <_write_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4604      	mov	r4, r0
 800d128:	4608      	mov	r0, r1
 800d12a:	4611      	mov	r1, r2
 800d12c:	2200      	movs	r2, #0
 800d12e:	4d05      	ldr	r5, [pc, #20]	@ (800d144 <_write_r+0x20>)
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	f7f7 ff7d 	bl	8005032 <_write>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d102      	bne.n	800d142 <_write_r+0x1e>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	b103      	cbz	r3, 800d142 <_write_r+0x1e>
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	20000708 	.word	0x20000708

0800d148 <__errno>:
 800d148:	4b01      	ldr	r3, [pc, #4]	@ (800d150 <__errno+0x8>)
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	2000011c 	.word	0x2000011c

0800d154 <__libc_init_array>:
 800d154:	b570      	push	{r4, r5, r6, lr}
 800d156:	2600      	movs	r6, #0
 800d158:	4d0c      	ldr	r5, [pc, #48]	@ (800d18c <__libc_init_array+0x38>)
 800d15a:	4c0d      	ldr	r4, [pc, #52]	@ (800d190 <__libc_init_array+0x3c>)
 800d15c:	1b64      	subs	r4, r4, r5
 800d15e:	10a4      	asrs	r4, r4, #2
 800d160:	42a6      	cmp	r6, r4
 800d162:	d109      	bne.n	800d178 <__libc_init_array+0x24>
 800d164:	f000 fe1a 	bl	800dd9c <_init>
 800d168:	2600      	movs	r6, #0
 800d16a:	4d0a      	ldr	r5, [pc, #40]	@ (800d194 <__libc_init_array+0x40>)
 800d16c:	4c0a      	ldr	r4, [pc, #40]	@ (800d198 <__libc_init_array+0x44>)
 800d16e:	1b64      	subs	r4, r4, r5
 800d170:	10a4      	asrs	r4, r4, #2
 800d172:	42a6      	cmp	r6, r4
 800d174:	d105      	bne.n	800d182 <__libc_init_array+0x2e>
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	f855 3b04 	ldr.w	r3, [r5], #4
 800d17c:	4798      	blx	r3
 800d17e:	3601      	adds	r6, #1
 800d180:	e7ee      	b.n	800d160 <__libc_init_array+0xc>
 800d182:	f855 3b04 	ldr.w	r3, [r5], #4
 800d186:	4798      	blx	r3
 800d188:	3601      	adds	r6, #1
 800d18a:	e7f2      	b.n	800d172 <__libc_init_array+0x1e>
 800d18c:	0800e12c 	.word	0x0800e12c
 800d190:	0800e12c 	.word	0x0800e12c
 800d194:	0800e12c 	.word	0x0800e12c
 800d198:	0800e130 	.word	0x0800e130

0800d19c <__retarget_lock_init_recursive>:
 800d19c:	4770      	bx	lr

0800d19e <__retarget_lock_acquire_recursive>:
 800d19e:	4770      	bx	lr

0800d1a0 <__retarget_lock_release_recursive>:
 800d1a0:	4770      	bx	lr

0800d1a2 <memcpy>:
 800d1a2:	440a      	add	r2, r1
 800d1a4:	4291      	cmp	r1, r2
 800d1a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1aa:	d100      	bne.n	800d1ae <memcpy+0xc>
 800d1ac:	4770      	bx	lr
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1b4:	4291      	cmp	r1, r2
 800d1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1ba:	d1f9      	bne.n	800d1b0 <memcpy+0xe>
 800d1bc:	bd10      	pop	{r4, pc}

0800d1be <abort>:
 800d1be:	2006      	movs	r0, #6
 800d1c0:	b508      	push	{r3, lr}
 800d1c2:	f000 fd2d 	bl	800dc20 <raise>
 800d1c6:	2001      	movs	r0, #1
 800d1c8:	f7f7 ff0b 	bl	8004fe2 <_exit>

0800d1cc <_free_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	2900      	cmp	r1, #0
 800d1d2:	d040      	beq.n	800d256 <_free_r+0x8a>
 800d1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d8:	1f0c      	subs	r4, r1, #4
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	bfb8      	it	lt
 800d1de:	18e4      	addlt	r4, r4, r3
 800d1e0:	f000 f8de 	bl	800d3a0 <__malloc_lock>
 800d1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d258 <_free_r+0x8c>)
 800d1e6:	6813      	ldr	r3, [r2, #0]
 800d1e8:	b933      	cbnz	r3, 800d1f8 <_free_r+0x2c>
 800d1ea:	6063      	str	r3, [r4, #4]
 800d1ec:	6014      	str	r4, [r2, #0]
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f4:	f000 b8da 	b.w	800d3ac <__malloc_unlock>
 800d1f8:	42a3      	cmp	r3, r4
 800d1fa:	d908      	bls.n	800d20e <_free_r+0x42>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	1821      	adds	r1, r4, r0
 800d200:	428b      	cmp	r3, r1
 800d202:	bf01      	itttt	eq
 800d204:	6819      	ldreq	r1, [r3, #0]
 800d206:	685b      	ldreq	r3, [r3, #4]
 800d208:	1809      	addeq	r1, r1, r0
 800d20a:	6021      	streq	r1, [r4, #0]
 800d20c:	e7ed      	b.n	800d1ea <_free_r+0x1e>
 800d20e:	461a      	mov	r2, r3
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	b10b      	cbz	r3, 800d218 <_free_r+0x4c>
 800d214:	42a3      	cmp	r3, r4
 800d216:	d9fa      	bls.n	800d20e <_free_r+0x42>
 800d218:	6811      	ldr	r1, [r2, #0]
 800d21a:	1850      	adds	r0, r2, r1
 800d21c:	42a0      	cmp	r0, r4
 800d21e:	d10b      	bne.n	800d238 <_free_r+0x6c>
 800d220:	6820      	ldr	r0, [r4, #0]
 800d222:	4401      	add	r1, r0
 800d224:	1850      	adds	r0, r2, r1
 800d226:	4283      	cmp	r3, r0
 800d228:	6011      	str	r1, [r2, #0]
 800d22a:	d1e0      	bne.n	800d1ee <_free_r+0x22>
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4408      	add	r0, r1
 800d232:	6010      	str	r0, [r2, #0]
 800d234:	6053      	str	r3, [r2, #4]
 800d236:	e7da      	b.n	800d1ee <_free_r+0x22>
 800d238:	d902      	bls.n	800d240 <_free_r+0x74>
 800d23a:	230c      	movs	r3, #12
 800d23c:	602b      	str	r3, [r5, #0]
 800d23e:	e7d6      	b.n	800d1ee <_free_r+0x22>
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	1821      	adds	r1, r4, r0
 800d244:	428b      	cmp	r3, r1
 800d246:	bf01      	itttt	eq
 800d248:	6819      	ldreq	r1, [r3, #0]
 800d24a:	685b      	ldreq	r3, [r3, #4]
 800d24c:	1809      	addeq	r1, r1, r0
 800d24e:	6021      	streq	r1, [r4, #0]
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	6054      	str	r4, [r2, #4]
 800d254:	e7cb      	b.n	800d1ee <_free_r+0x22>
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	20000714 	.word	0x20000714

0800d25c <sbrk_aligned>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4e0f      	ldr	r6, [pc, #60]	@ (800d29c <sbrk_aligned+0x40>)
 800d260:	460c      	mov	r4, r1
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	4605      	mov	r5, r0
 800d266:	b911      	cbnz	r1, 800d26e <sbrk_aligned+0x12>
 800d268:	f000 fcf6 	bl	800dc58 <_sbrk_r>
 800d26c:	6030      	str	r0, [r6, #0]
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f000 fcf1 	bl	800dc58 <_sbrk_r>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d103      	bne.n	800d282 <sbrk_aligned+0x26>
 800d27a:	f04f 34ff 	mov.w	r4, #4294967295
 800d27e:	4620      	mov	r0, r4
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	1cc4      	adds	r4, r0, #3
 800d284:	f024 0403 	bic.w	r4, r4, #3
 800d288:	42a0      	cmp	r0, r4
 800d28a:	d0f8      	beq.n	800d27e <sbrk_aligned+0x22>
 800d28c:	1a21      	subs	r1, r4, r0
 800d28e:	4628      	mov	r0, r5
 800d290:	f000 fce2 	bl	800dc58 <_sbrk_r>
 800d294:	3001      	adds	r0, #1
 800d296:	d1f2      	bne.n	800d27e <sbrk_aligned+0x22>
 800d298:	e7ef      	b.n	800d27a <sbrk_aligned+0x1e>
 800d29a:	bf00      	nop
 800d29c:	20000710 	.word	0x20000710

0800d2a0 <_malloc_r>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	1ccd      	adds	r5, r1, #3
 800d2a6:	f025 0503 	bic.w	r5, r5, #3
 800d2aa:	3508      	adds	r5, #8
 800d2ac:	2d0c      	cmp	r5, #12
 800d2ae:	bf38      	it	cc
 800d2b0:	250c      	movcc	r5, #12
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	db01      	blt.n	800d2bc <_malloc_r+0x1c>
 800d2b8:	42a9      	cmp	r1, r5
 800d2ba:	d904      	bls.n	800d2c6 <_malloc_r+0x26>
 800d2bc:	230c      	movs	r3, #12
 800d2be:	6033      	str	r3, [r6, #0]
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d39c <_malloc_r+0xfc>
 800d2ca:	f000 f869 	bl	800d3a0 <__malloc_lock>
 800d2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d2d2:	461c      	mov	r4, r3
 800d2d4:	bb44      	cbnz	r4, 800d328 <_malloc_r+0x88>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7ff ffbf 	bl	800d25c <sbrk_aligned>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	4604      	mov	r4, r0
 800d2e2:	d158      	bne.n	800d396 <_malloc_r+0xf6>
 800d2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2e8:	4627      	mov	r7, r4
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	d143      	bne.n	800d376 <_malloc_r+0xd6>
 800d2ee:	2c00      	cmp	r4, #0
 800d2f0:	d04b      	beq.n	800d38a <_malloc_r+0xea>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	eb04 0903 	add.w	r9, r4, r3
 800d2fc:	f000 fcac 	bl	800dc58 <_sbrk_r>
 800d300:	4581      	cmp	r9, r0
 800d302:	d142      	bne.n	800d38a <_malloc_r+0xea>
 800d304:	6821      	ldr	r1, [r4, #0]
 800d306:	4630      	mov	r0, r6
 800d308:	1a6d      	subs	r5, r5, r1
 800d30a:	4629      	mov	r1, r5
 800d30c:	f7ff ffa6 	bl	800d25c <sbrk_aligned>
 800d310:	3001      	adds	r0, #1
 800d312:	d03a      	beq.n	800d38a <_malloc_r+0xea>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	442b      	add	r3, r5
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	f8d8 3000 	ldr.w	r3, [r8]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	bb62      	cbnz	r2, 800d37c <_malloc_r+0xdc>
 800d322:	f8c8 7000 	str.w	r7, [r8]
 800d326:	e00f      	b.n	800d348 <_malloc_r+0xa8>
 800d328:	6822      	ldr	r2, [r4, #0]
 800d32a:	1b52      	subs	r2, r2, r5
 800d32c:	d420      	bmi.n	800d370 <_malloc_r+0xd0>
 800d32e:	2a0b      	cmp	r2, #11
 800d330:	d917      	bls.n	800d362 <_malloc_r+0xc2>
 800d332:	1961      	adds	r1, r4, r5
 800d334:	42a3      	cmp	r3, r4
 800d336:	6025      	str	r5, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	6059      	strne	r1, [r3, #4]
 800d33c:	6863      	ldr	r3, [r4, #4]
 800d33e:	bf08      	it	eq
 800d340:	f8c8 1000 	streq.w	r1, [r8]
 800d344:	5162      	str	r2, [r4, r5]
 800d346:	604b      	str	r3, [r1, #4]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f82f 	bl	800d3ac <__malloc_unlock>
 800d34e:	f104 000b 	add.w	r0, r4, #11
 800d352:	1d23      	adds	r3, r4, #4
 800d354:	f020 0007 	bic.w	r0, r0, #7
 800d358:	1ac2      	subs	r2, r0, r3
 800d35a:	bf1c      	itt	ne
 800d35c:	1a1b      	subne	r3, r3, r0
 800d35e:	50a3      	strne	r3, [r4, r2]
 800d360:	e7af      	b.n	800d2c2 <_malloc_r+0x22>
 800d362:	6862      	ldr	r2, [r4, #4]
 800d364:	42a3      	cmp	r3, r4
 800d366:	bf0c      	ite	eq
 800d368:	f8c8 2000 	streq.w	r2, [r8]
 800d36c:	605a      	strne	r2, [r3, #4]
 800d36e:	e7eb      	b.n	800d348 <_malloc_r+0xa8>
 800d370:	4623      	mov	r3, r4
 800d372:	6864      	ldr	r4, [r4, #4]
 800d374:	e7ae      	b.n	800d2d4 <_malloc_r+0x34>
 800d376:	463c      	mov	r4, r7
 800d378:	687f      	ldr	r7, [r7, #4]
 800d37a:	e7b6      	b.n	800d2ea <_malloc_r+0x4a>
 800d37c:	461a      	mov	r2, r3
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	42a3      	cmp	r3, r4
 800d382:	d1fb      	bne.n	800d37c <_malloc_r+0xdc>
 800d384:	2300      	movs	r3, #0
 800d386:	6053      	str	r3, [r2, #4]
 800d388:	e7de      	b.n	800d348 <_malloc_r+0xa8>
 800d38a:	230c      	movs	r3, #12
 800d38c:	4630      	mov	r0, r6
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	f000 f80c 	bl	800d3ac <__malloc_unlock>
 800d394:	e794      	b.n	800d2c0 <_malloc_r+0x20>
 800d396:	6005      	str	r5, [r0, #0]
 800d398:	e7d6      	b.n	800d348 <_malloc_r+0xa8>
 800d39a:	bf00      	nop
 800d39c:	20000714 	.word	0x20000714

0800d3a0 <__malloc_lock>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	@ (800d3a8 <__malloc_lock+0x8>)
 800d3a2:	f7ff befc 	b.w	800d19e <__retarget_lock_acquire_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	2000070c 	.word	0x2000070c

0800d3ac <__malloc_unlock>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	@ (800d3b4 <__malloc_unlock+0x8>)
 800d3ae:	f7ff bef7 	b.w	800d1a0 <__retarget_lock_release_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	2000070c 	.word	0x2000070c

0800d3b8 <__sfputc_r>:
 800d3b8:	6893      	ldr	r3, [r2, #8]
 800d3ba:	b410      	push	{r4}
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	6093      	str	r3, [r2, #8]
 800d3c2:	da07      	bge.n	800d3d4 <__sfputc_r+0x1c>
 800d3c4:	6994      	ldr	r4, [r2, #24]
 800d3c6:	42a3      	cmp	r3, r4
 800d3c8:	db01      	blt.n	800d3ce <__sfputc_r+0x16>
 800d3ca:	290a      	cmp	r1, #10
 800d3cc:	d102      	bne.n	800d3d4 <__sfputc_r+0x1c>
 800d3ce:	bc10      	pop	{r4}
 800d3d0:	f000 bb6a 	b.w	800daa8 <__swbuf_r>
 800d3d4:	6813      	ldr	r3, [r2, #0]
 800d3d6:	1c58      	adds	r0, r3, #1
 800d3d8:	6010      	str	r0, [r2, #0]
 800d3da:	7019      	strb	r1, [r3, #0]
 800d3dc:	4608      	mov	r0, r1
 800d3de:	bc10      	pop	{r4}
 800d3e0:	4770      	bx	lr

0800d3e2 <__sfputs_r>:
 800d3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	18d5      	adds	r5, r2, r3
 800d3ec:	42ac      	cmp	r4, r5
 800d3ee:	d101      	bne.n	800d3f4 <__sfputs_r+0x12>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e007      	b.n	800d404 <__sfputs_r+0x22>
 800d3f4:	463a      	mov	r2, r7
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fc:	f7ff ffdc 	bl	800d3b8 <__sfputc_r>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d1f3      	bne.n	800d3ec <__sfputs_r+0xa>
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d408 <_vfiprintf_r>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	460d      	mov	r5, r1
 800d40e:	4614      	mov	r4, r2
 800d410:	4698      	mov	r8, r3
 800d412:	4606      	mov	r6, r0
 800d414:	b09d      	sub	sp, #116	@ 0x74
 800d416:	b118      	cbz	r0, 800d420 <_vfiprintf_r+0x18>
 800d418:	6a03      	ldr	r3, [r0, #32]
 800d41a:	b90b      	cbnz	r3, 800d420 <_vfiprintf_r+0x18>
 800d41c:	f7ff fdaa 	bl	800cf74 <__sinit>
 800d420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d422:	07d9      	lsls	r1, r3, #31
 800d424:	d405      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d426:	89ab      	ldrh	r3, [r5, #12]
 800d428:	059a      	lsls	r2, r3, #22
 800d42a:	d402      	bmi.n	800d432 <_vfiprintf_r+0x2a>
 800d42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d42e:	f7ff feb6 	bl	800d19e <__retarget_lock_acquire_recursive>
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	071b      	lsls	r3, r3, #28
 800d436:	d501      	bpl.n	800d43c <_vfiprintf_r+0x34>
 800d438:	692b      	ldr	r3, [r5, #16]
 800d43a:	b99b      	cbnz	r3, 800d464 <_vfiprintf_r+0x5c>
 800d43c:	4629      	mov	r1, r5
 800d43e:	4630      	mov	r0, r6
 800d440:	f000 fb70 	bl	800db24 <__swsetup_r>
 800d444:	b170      	cbz	r0, 800d464 <_vfiprintf_r+0x5c>
 800d446:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d448:	07dc      	lsls	r4, r3, #31
 800d44a:	d504      	bpl.n	800d456 <_vfiprintf_r+0x4e>
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	b01d      	add	sp, #116	@ 0x74
 800d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	0598      	lsls	r0, r3, #22
 800d45a:	d4f7      	bmi.n	800d44c <_vfiprintf_r+0x44>
 800d45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d45e:	f7ff fe9f 	bl	800d1a0 <__retarget_lock_release_recursive>
 800d462:	e7f3      	b.n	800d44c <_vfiprintf_r+0x44>
 800d464:	2300      	movs	r3, #0
 800d466:	9309      	str	r3, [sp, #36]	@ 0x24
 800d468:	2320      	movs	r3, #32
 800d46a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d46e:	2330      	movs	r3, #48	@ 0x30
 800d470:	f04f 0901 	mov.w	r9, #1
 800d474:	f8cd 800c 	str.w	r8, [sp, #12]
 800d478:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d624 <_vfiprintf_r+0x21c>
 800d47c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d480:	4623      	mov	r3, r4
 800d482:	469a      	mov	sl, r3
 800d484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d488:	b10a      	cbz	r2, 800d48e <_vfiprintf_r+0x86>
 800d48a:	2a25      	cmp	r2, #37	@ 0x25
 800d48c:	d1f9      	bne.n	800d482 <_vfiprintf_r+0x7a>
 800d48e:	ebba 0b04 	subs.w	fp, sl, r4
 800d492:	d00b      	beq.n	800d4ac <_vfiprintf_r+0xa4>
 800d494:	465b      	mov	r3, fp
 800d496:	4622      	mov	r2, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ffa1 	bl	800d3e2 <__sfputs_r>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f000 80a7 	beq.w	800d5f4 <_vfiprintf_r+0x1ec>
 800d4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4a8:	445a      	add	r2, fp
 800d4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 809f 	beq.w	800d5f4 <_vfiprintf_r+0x1ec>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c0:	f10a 0a01 	add.w	sl, sl, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	9307      	str	r3, [sp, #28]
 800d4c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4ce:	4654      	mov	r4, sl
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	4853      	ldr	r0, [pc, #332]	@ (800d624 <_vfiprintf_r+0x21c>)
 800d4d8:	f000 fbce 	bl	800dc78 <memchr>
 800d4dc:	9a04      	ldr	r2, [sp, #16]
 800d4de:	b9d8      	cbnz	r0, 800d518 <_vfiprintf_r+0x110>
 800d4e0:	06d1      	lsls	r1, r2, #27
 800d4e2:	bf44      	itt	mi
 800d4e4:	2320      	movmi	r3, #32
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ea:	0713      	lsls	r3, r2, #28
 800d4ec:	bf44      	itt	mi
 800d4ee:	232b      	movmi	r3, #43	@ 0x2b
 800d4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4fa:	d015      	beq.n	800d528 <_vfiprintf_r+0x120>
 800d4fc:	4654      	mov	r4, sl
 800d4fe:	2000      	movs	r0, #0
 800d500:	f04f 0c0a 	mov.w	ip, #10
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	4621      	mov	r1, r4
 800d508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d50c:	3b30      	subs	r3, #48	@ 0x30
 800d50e:	2b09      	cmp	r3, #9
 800d510:	d94b      	bls.n	800d5aa <_vfiprintf_r+0x1a2>
 800d512:	b1b0      	cbz	r0, 800d542 <_vfiprintf_r+0x13a>
 800d514:	9207      	str	r2, [sp, #28]
 800d516:	e014      	b.n	800d542 <_vfiprintf_r+0x13a>
 800d518:	eba0 0308 	sub.w	r3, r0, r8
 800d51c:	fa09 f303 	lsl.w	r3, r9, r3
 800d520:	4313      	orrs	r3, r2
 800d522:	46a2      	mov	sl, r4
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	e7d2      	b.n	800d4ce <_vfiprintf_r+0xc6>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d19      	adds	r1, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfbb      	ittet	lt
 800d534:	425b      	neglt	r3, r3
 800d536:	f042 0202 	orrlt.w	r2, r2, #2
 800d53a:	9307      	strge	r3, [sp, #28]
 800d53c:	9307      	strlt	r3, [sp, #28]
 800d53e:	bfb8      	it	lt
 800d540:	9204      	strlt	r2, [sp, #16]
 800d542:	7823      	ldrb	r3, [r4, #0]
 800d544:	2b2e      	cmp	r3, #46	@ 0x2e
 800d546:	d10a      	bne.n	800d55e <_vfiprintf_r+0x156>
 800d548:	7863      	ldrb	r3, [r4, #1]
 800d54a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d54c:	d132      	bne.n	800d5b4 <_vfiprintf_r+0x1ac>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	3402      	adds	r4, #2
 800d552:	1d1a      	adds	r2, r3, #4
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	9203      	str	r2, [sp, #12]
 800d558:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d55c:	9305      	str	r3, [sp, #20]
 800d55e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d628 <_vfiprintf_r+0x220>
 800d562:	2203      	movs	r2, #3
 800d564:	4650      	mov	r0, sl
 800d566:	7821      	ldrb	r1, [r4, #0]
 800d568:	f000 fb86 	bl	800dc78 <memchr>
 800d56c:	b138      	cbz	r0, 800d57e <_vfiprintf_r+0x176>
 800d56e:	2240      	movs	r2, #64	@ 0x40
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	eba0 000a 	sub.w	r0, r0, sl
 800d576:	4082      	lsls	r2, r0
 800d578:	4313      	orrs	r3, r2
 800d57a:	3401      	adds	r4, #1
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d582:	2206      	movs	r2, #6
 800d584:	4829      	ldr	r0, [pc, #164]	@ (800d62c <_vfiprintf_r+0x224>)
 800d586:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d58a:	f000 fb75 	bl	800dc78 <memchr>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d03f      	beq.n	800d612 <_vfiprintf_r+0x20a>
 800d592:	4b27      	ldr	r3, [pc, #156]	@ (800d630 <_vfiprintf_r+0x228>)
 800d594:	bb1b      	cbnz	r3, 800d5de <_vfiprintf_r+0x1d6>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	3307      	adds	r3, #7
 800d59a:	f023 0307 	bic.w	r3, r3, #7
 800d59e:	3308      	adds	r3, #8
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a4:	443b      	add	r3, r7
 800d5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a8:	e76a      	b.n	800d480 <_vfiprintf_r+0x78>
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	2001      	movs	r0, #1
 800d5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b2:	e7a8      	b.n	800d506 <_vfiprintf_r+0xfe>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f04f 0c0a 	mov.w	ip, #10
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	3401      	adds	r4, #1
 800d5be:	9305      	str	r3, [sp, #20]
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c6:	3a30      	subs	r2, #48	@ 0x30
 800d5c8:	2a09      	cmp	r2, #9
 800d5ca:	d903      	bls.n	800d5d4 <_vfiprintf_r+0x1cc>
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d0c6      	beq.n	800d55e <_vfiprintf_r+0x156>
 800d5d0:	9105      	str	r1, [sp, #20]
 800d5d2:	e7c4      	b.n	800d55e <_vfiprintf_r+0x156>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5dc:	e7f0      	b.n	800d5c0 <_vfiprintf_r+0x1b8>
 800d5de:	ab03      	add	r3, sp, #12
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	4b13      	ldr	r3, [pc, #76]	@ (800d634 <_vfiprintf_r+0x22c>)
 800d5e8:	a904      	add	r1, sp, #16
 800d5ea:	f3af 8000 	nop.w
 800d5ee:	4607      	mov	r7, r0
 800d5f0:	1c78      	adds	r0, r7, #1
 800d5f2:	d1d6      	bne.n	800d5a2 <_vfiprintf_r+0x19a>
 800d5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5f6:	07d9      	lsls	r1, r3, #31
 800d5f8:	d405      	bmi.n	800d606 <_vfiprintf_r+0x1fe>
 800d5fa:	89ab      	ldrh	r3, [r5, #12]
 800d5fc:	059a      	lsls	r2, r3, #22
 800d5fe:	d402      	bmi.n	800d606 <_vfiprintf_r+0x1fe>
 800d600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d602:	f7ff fdcd 	bl	800d1a0 <__retarget_lock_release_recursive>
 800d606:	89ab      	ldrh	r3, [r5, #12]
 800d608:	065b      	lsls	r3, r3, #25
 800d60a:	f53f af1f 	bmi.w	800d44c <_vfiprintf_r+0x44>
 800d60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d610:	e71e      	b.n	800d450 <_vfiprintf_r+0x48>
 800d612:	ab03      	add	r3, sp, #12
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	462a      	mov	r2, r5
 800d618:	4630      	mov	r0, r6
 800d61a:	4b06      	ldr	r3, [pc, #24]	@ (800d634 <_vfiprintf_r+0x22c>)
 800d61c:	a904      	add	r1, sp, #16
 800d61e:	f000 f87d 	bl	800d71c <_printf_i>
 800d622:	e7e4      	b.n	800d5ee <_vfiprintf_r+0x1e6>
 800d624:	0800e0f0 	.word	0x0800e0f0
 800d628:	0800e0f6 	.word	0x0800e0f6
 800d62c:	0800e0fa 	.word	0x0800e0fa
 800d630:	00000000 	.word	0x00000000
 800d634:	0800d3e3 	.word	0x0800d3e3

0800d638 <_printf_common>:
 800d638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d63c:	4616      	mov	r6, r2
 800d63e:	4698      	mov	r8, r3
 800d640:	688a      	ldr	r2, [r1, #8]
 800d642:	690b      	ldr	r3, [r1, #16]
 800d644:	4607      	mov	r7, r0
 800d646:	4293      	cmp	r3, r2
 800d648:	bfb8      	it	lt
 800d64a:	4613      	movlt	r3, r2
 800d64c:	6033      	str	r3, [r6, #0]
 800d64e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d652:	460c      	mov	r4, r1
 800d654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d658:	b10a      	cbz	r2, 800d65e <_printf_common+0x26>
 800d65a:	3301      	adds	r3, #1
 800d65c:	6033      	str	r3, [r6, #0]
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	0699      	lsls	r1, r3, #26
 800d662:	bf42      	ittt	mi
 800d664:	6833      	ldrmi	r3, [r6, #0]
 800d666:	3302      	addmi	r3, #2
 800d668:	6033      	strmi	r3, [r6, #0]
 800d66a:	6825      	ldr	r5, [r4, #0]
 800d66c:	f015 0506 	ands.w	r5, r5, #6
 800d670:	d106      	bne.n	800d680 <_printf_common+0x48>
 800d672:	f104 0a19 	add.w	sl, r4, #25
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	6832      	ldr	r2, [r6, #0]
 800d67a:	1a9b      	subs	r3, r3, r2
 800d67c:	42ab      	cmp	r3, r5
 800d67e:	dc2b      	bgt.n	800d6d8 <_printf_common+0xa0>
 800d680:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d684:	6822      	ldr	r2, [r4, #0]
 800d686:	3b00      	subs	r3, #0
 800d688:	bf18      	it	ne
 800d68a:	2301      	movne	r3, #1
 800d68c:	0692      	lsls	r2, r2, #26
 800d68e:	d430      	bmi.n	800d6f2 <_printf_common+0xba>
 800d690:	4641      	mov	r1, r8
 800d692:	4638      	mov	r0, r7
 800d694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d698:	47c8      	blx	r9
 800d69a:	3001      	adds	r0, #1
 800d69c:	d023      	beq.n	800d6e6 <_printf_common+0xae>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	6922      	ldr	r2, [r4, #16]
 800d6a2:	f003 0306 	and.w	r3, r3, #6
 800d6a6:	2b04      	cmp	r3, #4
 800d6a8:	bf14      	ite	ne
 800d6aa:	2500      	movne	r5, #0
 800d6ac:	6833      	ldreq	r3, [r6, #0]
 800d6ae:	f04f 0600 	mov.w	r6, #0
 800d6b2:	bf08      	it	eq
 800d6b4:	68e5      	ldreq	r5, [r4, #12]
 800d6b6:	f104 041a 	add.w	r4, r4, #26
 800d6ba:	bf08      	it	eq
 800d6bc:	1aed      	subeq	r5, r5, r3
 800d6be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d6c2:	bf08      	it	eq
 800d6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	bfc4      	itt	gt
 800d6cc:	1a9b      	subgt	r3, r3, r2
 800d6ce:	18ed      	addgt	r5, r5, r3
 800d6d0:	42b5      	cmp	r5, r6
 800d6d2:	d11a      	bne.n	800d70a <_printf_common+0xd2>
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	e008      	b.n	800d6ea <_printf_common+0xb2>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	4652      	mov	r2, sl
 800d6dc:	4641      	mov	r1, r8
 800d6de:	4638      	mov	r0, r7
 800d6e0:	47c8      	blx	r9
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	d103      	bne.n	800d6ee <_printf_common+0xb6>
 800d6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ee:	3501      	adds	r5, #1
 800d6f0:	e7c1      	b.n	800d676 <_printf_common+0x3e>
 800d6f2:	2030      	movs	r0, #48	@ 0x30
 800d6f4:	18e1      	adds	r1, r4, r3
 800d6f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d700:	4422      	add	r2, r4
 800d702:	3302      	adds	r3, #2
 800d704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d708:	e7c2      	b.n	800d690 <_printf_common+0x58>
 800d70a:	2301      	movs	r3, #1
 800d70c:	4622      	mov	r2, r4
 800d70e:	4641      	mov	r1, r8
 800d710:	4638      	mov	r0, r7
 800d712:	47c8      	blx	r9
 800d714:	3001      	adds	r0, #1
 800d716:	d0e6      	beq.n	800d6e6 <_printf_common+0xae>
 800d718:	3601      	adds	r6, #1
 800d71a:	e7d9      	b.n	800d6d0 <_printf_common+0x98>

0800d71c <_printf_i>:
 800d71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	7e0f      	ldrb	r7, [r1, #24]
 800d722:	4691      	mov	r9, r2
 800d724:	2f78      	cmp	r7, #120	@ 0x78
 800d726:	4680      	mov	r8, r0
 800d728:	460c      	mov	r4, r1
 800d72a:	469a      	mov	sl, r3
 800d72c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d72e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d732:	d807      	bhi.n	800d744 <_printf_i+0x28>
 800d734:	2f62      	cmp	r7, #98	@ 0x62
 800d736:	d80a      	bhi.n	800d74e <_printf_i+0x32>
 800d738:	2f00      	cmp	r7, #0
 800d73a:	f000 80d1 	beq.w	800d8e0 <_printf_i+0x1c4>
 800d73e:	2f58      	cmp	r7, #88	@ 0x58
 800d740:	f000 80b8 	beq.w	800d8b4 <_printf_i+0x198>
 800d744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d74c:	e03a      	b.n	800d7c4 <_printf_i+0xa8>
 800d74e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d752:	2b15      	cmp	r3, #21
 800d754:	d8f6      	bhi.n	800d744 <_printf_i+0x28>
 800d756:	a101      	add	r1, pc, #4	@ (adr r1, 800d75c <_printf_i+0x40>)
 800d758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d75c:	0800d7b5 	.word	0x0800d7b5
 800d760:	0800d7c9 	.word	0x0800d7c9
 800d764:	0800d745 	.word	0x0800d745
 800d768:	0800d745 	.word	0x0800d745
 800d76c:	0800d745 	.word	0x0800d745
 800d770:	0800d745 	.word	0x0800d745
 800d774:	0800d7c9 	.word	0x0800d7c9
 800d778:	0800d745 	.word	0x0800d745
 800d77c:	0800d745 	.word	0x0800d745
 800d780:	0800d745 	.word	0x0800d745
 800d784:	0800d745 	.word	0x0800d745
 800d788:	0800d8c7 	.word	0x0800d8c7
 800d78c:	0800d7f3 	.word	0x0800d7f3
 800d790:	0800d881 	.word	0x0800d881
 800d794:	0800d745 	.word	0x0800d745
 800d798:	0800d745 	.word	0x0800d745
 800d79c:	0800d8e9 	.word	0x0800d8e9
 800d7a0:	0800d745 	.word	0x0800d745
 800d7a4:	0800d7f3 	.word	0x0800d7f3
 800d7a8:	0800d745 	.word	0x0800d745
 800d7ac:	0800d745 	.word	0x0800d745
 800d7b0:	0800d889 	.word	0x0800d889
 800d7b4:	6833      	ldr	r3, [r6, #0]
 800d7b6:	1d1a      	adds	r2, r3, #4
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6032      	str	r2, [r6, #0]
 800d7bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e09c      	b.n	800d902 <_printf_i+0x1e6>
 800d7c8:	6833      	ldr	r3, [r6, #0]
 800d7ca:	6820      	ldr	r0, [r4, #0]
 800d7cc:	1d19      	adds	r1, r3, #4
 800d7ce:	6031      	str	r1, [r6, #0]
 800d7d0:	0606      	lsls	r6, r0, #24
 800d7d2:	d501      	bpl.n	800d7d8 <_printf_i+0xbc>
 800d7d4:	681d      	ldr	r5, [r3, #0]
 800d7d6:	e003      	b.n	800d7e0 <_printf_i+0xc4>
 800d7d8:	0645      	lsls	r5, r0, #25
 800d7da:	d5fb      	bpl.n	800d7d4 <_printf_i+0xb8>
 800d7dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7e0:	2d00      	cmp	r5, #0
 800d7e2:	da03      	bge.n	800d7ec <_printf_i+0xd0>
 800d7e4:	232d      	movs	r3, #45	@ 0x2d
 800d7e6:	426d      	negs	r5, r5
 800d7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7ec:	230a      	movs	r3, #10
 800d7ee:	4858      	ldr	r0, [pc, #352]	@ (800d950 <_printf_i+0x234>)
 800d7f0:	e011      	b.n	800d816 <_printf_i+0xfa>
 800d7f2:	6821      	ldr	r1, [r4, #0]
 800d7f4:	6833      	ldr	r3, [r6, #0]
 800d7f6:	0608      	lsls	r0, r1, #24
 800d7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7fc:	d402      	bmi.n	800d804 <_printf_i+0xe8>
 800d7fe:	0649      	lsls	r1, r1, #25
 800d800:	bf48      	it	mi
 800d802:	b2ad      	uxthmi	r5, r5
 800d804:	2f6f      	cmp	r7, #111	@ 0x6f
 800d806:	6033      	str	r3, [r6, #0]
 800d808:	bf14      	ite	ne
 800d80a:	230a      	movne	r3, #10
 800d80c:	2308      	moveq	r3, #8
 800d80e:	4850      	ldr	r0, [pc, #320]	@ (800d950 <_printf_i+0x234>)
 800d810:	2100      	movs	r1, #0
 800d812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d816:	6866      	ldr	r6, [r4, #4]
 800d818:	2e00      	cmp	r6, #0
 800d81a:	60a6      	str	r6, [r4, #8]
 800d81c:	db05      	blt.n	800d82a <_printf_i+0x10e>
 800d81e:	6821      	ldr	r1, [r4, #0]
 800d820:	432e      	orrs	r6, r5
 800d822:	f021 0104 	bic.w	r1, r1, #4
 800d826:	6021      	str	r1, [r4, #0]
 800d828:	d04b      	beq.n	800d8c2 <_printf_i+0x1a6>
 800d82a:	4616      	mov	r6, r2
 800d82c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d830:	fb03 5711 	mls	r7, r3, r1, r5
 800d834:	5dc7      	ldrb	r7, [r0, r7]
 800d836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d83a:	462f      	mov	r7, r5
 800d83c:	42bb      	cmp	r3, r7
 800d83e:	460d      	mov	r5, r1
 800d840:	d9f4      	bls.n	800d82c <_printf_i+0x110>
 800d842:	2b08      	cmp	r3, #8
 800d844:	d10b      	bne.n	800d85e <_printf_i+0x142>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	07df      	lsls	r7, r3, #31
 800d84a:	d508      	bpl.n	800d85e <_printf_i+0x142>
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	6861      	ldr	r1, [r4, #4]
 800d850:	4299      	cmp	r1, r3
 800d852:	bfde      	ittt	le
 800d854:	2330      	movle	r3, #48	@ 0x30
 800d856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d85a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d85e:	1b92      	subs	r2, r2, r6
 800d860:	6122      	str	r2, [r4, #16]
 800d862:	464b      	mov	r3, r9
 800d864:	4621      	mov	r1, r4
 800d866:	4640      	mov	r0, r8
 800d868:	f8cd a000 	str.w	sl, [sp]
 800d86c:	aa03      	add	r2, sp, #12
 800d86e:	f7ff fee3 	bl	800d638 <_printf_common>
 800d872:	3001      	adds	r0, #1
 800d874:	d14a      	bne.n	800d90c <_printf_i+0x1f0>
 800d876:	f04f 30ff 	mov.w	r0, #4294967295
 800d87a:	b004      	add	sp, #16
 800d87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	f043 0320 	orr.w	r3, r3, #32
 800d886:	6023      	str	r3, [r4, #0]
 800d888:	2778      	movs	r7, #120	@ 0x78
 800d88a:	4832      	ldr	r0, [pc, #200]	@ (800d954 <_printf_i+0x238>)
 800d88c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	6831      	ldr	r1, [r6, #0]
 800d894:	061f      	lsls	r7, r3, #24
 800d896:	f851 5b04 	ldr.w	r5, [r1], #4
 800d89a:	d402      	bmi.n	800d8a2 <_printf_i+0x186>
 800d89c:	065f      	lsls	r7, r3, #25
 800d89e:	bf48      	it	mi
 800d8a0:	b2ad      	uxthmi	r5, r5
 800d8a2:	6031      	str	r1, [r6, #0]
 800d8a4:	07d9      	lsls	r1, r3, #31
 800d8a6:	bf44      	itt	mi
 800d8a8:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ac:	6023      	strmi	r3, [r4, #0]
 800d8ae:	b11d      	cbz	r5, 800d8b8 <_printf_i+0x19c>
 800d8b0:	2310      	movs	r3, #16
 800d8b2:	e7ad      	b.n	800d810 <_printf_i+0xf4>
 800d8b4:	4826      	ldr	r0, [pc, #152]	@ (800d950 <_printf_i+0x234>)
 800d8b6:	e7e9      	b.n	800d88c <_printf_i+0x170>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	f023 0320 	bic.w	r3, r3, #32
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	e7f6      	b.n	800d8b0 <_printf_i+0x194>
 800d8c2:	4616      	mov	r6, r2
 800d8c4:	e7bd      	b.n	800d842 <_printf_i+0x126>
 800d8c6:	6833      	ldr	r3, [r6, #0]
 800d8c8:	6825      	ldr	r5, [r4, #0]
 800d8ca:	1d18      	adds	r0, r3, #4
 800d8cc:	6961      	ldr	r1, [r4, #20]
 800d8ce:	6030      	str	r0, [r6, #0]
 800d8d0:	062e      	lsls	r6, r5, #24
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	d501      	bpl.n	800d8da <_printf_i+0x1be>
 800d8d6:	6019      	str	r1, [r3, #0]
 800d8d8:	e002      	b.n	800d8e0 <_printf_i+0x1c4>
 800d8da:	0668      	lsls	r0, r5, #25
 800d8dc:	d5fb      	bpl.n	800d8d6 <_printf_i+0x1ba>
 800d8de:	8019      	strh	r1, [r3, #0]
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	4616      	mov	r6, r2
 800d8e4:	6123      	str	r3, [r4, #16]
 800d8e6:	e7bc      	b.n	800d862 <_printf_i+0x146>
 800d8e8:	6833      	ldr	r3, [r6, #0]
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	1d1a      	adds	r2, r3, #4
 800d8ee:	6032      	str	r2, [r6, #0]
 800d8f0:	681e      	ldr	r6, [r3, #0]
 800d8f2:	6862      	ldr	r2, [r4, #4]
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	f000 f9bf 	bl	800dc78 <memchr>
 800d8fa:	b108      	cbz	r0, 800d900 <_printf_i+0x1e4>
 800d8fc:	1b80      	subs	r0, r0, r6
 800d8fe:	6060      	str	r0, [r4, #4]
 800d900:	6863      	ldr	r3, [r4, #4]
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	2300      	movs	r3, #0
 800d906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d90a:	e7aa      	b.n	800d862 <_printf_i+0x146>
 800d90c:	4632      	mov	r2, r6
 800d90e:	4649      	mov	r1, r9
 800d910:	4640      	mov	r0, r8
 800d912:	6923      	ldr	r3, [r4, #16]
 800d914:	47d0      	blx	sl
 800d916:	3001      	adds	r0, #1
 800d918:	d0ad      	beq.n	800d876 <_printf_i+0x15a>
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	079b      	lsls	r3, r3, #30
 800d91e:	d413      	bmi.n	800d948 <_printf_i+0x22c>
 800d920:	68e0      	ldr	r0, [r4, #12]
 800d922:	9b03      	ldr	r3, [sp, #12]
 800d924:	4298      	cmp	r0, r3
 800d926:	bfb8      	it	lt
 800d928:	4618      	movlt	r0, r3
 800d92a:	e7a6      	b.n	800d87a <_printf_i+0x15e>
 800d92c:	2301      	movs	r3, #1
 800d92e:	4632      	mov	r2, r6
 800d930:	4649      	mov	r1, r9
 800d932:	4640      	mov	r0, r8
 800d934:	47d0      	blx	sl
 800d936:	3001      	adds	r0, #1
 800d938:	d09d      	beq.n	800d876 <_printf_i+0x15a>
 800d93a:	3501      	adds	r5, #1
 800d93c:	68e3      	ldr	r3, [r4, #12]
 800d93e:	9903      	ldr	r1, [sp, #12]
 800d940:	1a5b      	subs	r3, r3, r1
 800d942:	42ab      	cmp	r3, r5
 800d944:	dcf2      	bgt.n	800d92c <_printf_i+0x210>
 800d946:	e7eb      	b.n	800d920 <_printf_i+0x204>
 800d948:	2500      	movs	r5, #0
 800d94a:	f104 0619 	add.w	r6, r4, #25
 800d94e:	e7f5      	b.n	800d93c <_printf_i+0x220>
 800d950:	0800e101 	.word	0x0800e101
 800d954:	0800e112 	.word	0x0800e112

0800d958 <__sflush_r>:
 800d958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95e:	0716      	lsls	r6, r2, #28
 800d960:	4605      	mov	r5, r0
 800d962:	460c      	mov	r4, r1
 800d964:	d454      	bmi.n	800da10 <__sflush_r+0xb8>
 800d966:	684b      	ldr	r3, [r1, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dc02      	bgt.n	800d972 <__sflush_r+0x1a>
 800d96c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d96e:	2b00      	cmp	r3, #0
 800d970:	dd48      	ble.n	800da04 <__sflush_r+0xac>
 800d972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d974:	2e00      	cmp	r6, #0
 800d976:	d045      	beq.n	800da04 <__sflush_r+0xac>
 800d978:	2300      	movs	r3, #0
 800d97a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d97e:	682f      	ldr	r7, [r5, #0]
 800d980:	6a21      	ldr	r1, [r4, #32]
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	d030      	beq.n	800d9e8 <__sflush_r+0x90>
 800d986:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	0759      	lsls	r1, r3, #29
 800d98c:	d505      	bpl.n	800d99a <__sflush_r+0x42>
 800d98e:	6863      	ldr	r3, [r4, #4]
 800d990:	1ad2      	subs	r2, r2, r3
 800d992:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d994:	b10b      	cbz	r3, 800d99a <__sflush_r+0x42>
 800d996:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d998:	1ad2      	subs	r2, r2, r3
 800d99a:	2300      	movs	r3, #0
 800d99c:	4628      	mov	r0, r5
 800d99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9a0:	6a21      	ldr	r1, [r4, #32]
 800d9a2:	47b0      	blx	r6
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	89a3      	ldrh	r3, [r4, #12]
 800d9a8:	d106      	bne.n	800d9b8 <__sflush_r+0x60>
 800d9aa:	6829      	ldr	r1, [r5, #0]
 800d9ac:	291d      	cmp	r1, #29
 800d9ae:	d82b      	bhi.n	800da08 <__sflush_r+0xb0>
 800d9b0:	4a28      	ldr	r2, [pc, #160]	@ (800da54 <__sflush_r+0xfc>)
 800d9b2:	40ca      	lsrs	r2, r1
 800d9b4:	07d6      	lsls	r6, r2, #31
 800d9b6:	d527      	bpl.n	800da08 <__sflush_r+0xb0>
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	6062      	str	r2, [r4, #4]
 800d9bc:	6922      	ldr	r2, [r4, #16]
 800d9be:	04d9      	lsls	r1, r3, #19
 800d9c0:	6022      	str	r2, [r4, #0]
 800d9c2:	d504      	bpl.n	800d9ce <__sflush_r+0x76>
 800d9c4:	1c42      	adds	r2, r0, #1
 800d9c6:	d101      	bne.n	800d9cc <__sflush_r+0x74>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b903      	cbnz	r3, 800d9ce <__sflush_r+0x76>
 800d9cc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9d0:	602f      	str	r7, [r5, #0]
 800d9d2:	b1b9      	cbz	r1, 800da04 <__sflush_r+0xac>
 800d9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9d8:	4299      	cmp	r1, r3
 800d9da:	d002      	beq.n	800d9e2 <__sflush_r+0x8a>
 800d9dc:	4628      	mov	r0, r5
 800d9de:	f7ff fbf5 	bl	800d1cc <_free_r>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9e6:	e00d      	b.n	800da04 <__sflush_r+0xac>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	47b0      	blx	r6
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	1c50      	adds	r0, r2, #1
 800d9f2:	d1c9      	bne.n	800d988 <__sflush_r+0x30>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0c6      	beq.n	800d988 <__sflush_r+0x30>
 800d9fa:	2b1d      	cmp	r3, #29
 800d9fc:	d001      	beq.n	800da02 <__sflush_r+0xaa>
 800d9fe:	2b16      	cmp	r3, #22
 800da00:	d11d      	bne.n	800da3e <__sflush_r+0xe6>
 800da02:	602f      	str	r7, [r5, #0]
 800da04:	2000      	movs	r0, #0
 800da06:	e021      	b.n	800da4c <__sflush_r+0xf4>
 800da08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da0c:	b21b      	sxth	r3, r3
 800da0e:	e01a      	b.n	800da46 <__sflush_r+0xee>
 800da10:	690f      	ldr	r7, [r1, #16]
 800da12:	2f00      	cmp	r7, #0
 800da14:	d0f6      	beq.n	800da04 <__sflush_r+0xac>
 800da16:	0793      	lsls	r3, r2, #30
 800da18:	bf18      	it	ne
 800da1a:	2300      	movne	r3, #0
 800da1c:	680e      	ldr	r6, [r1, #0]
 800da1e:	bf08      	it	eq
 800da20:	694b      	ldreq	r3, [r1, #20]
 800da22:	1bf6      	subs	r6, r6, r7
 800da24:	600f      	str	r7, [r1, #0]
 800da26:	608b      	str	r3, [r1, #8]
 800da28:	2e00      	cmp	r6, #0
 800da2a:	ddeb      	ble.n	800da04 <__sflush_r+0xac>
 800da2c:	4633      	mov	r3, r6
 800da2e:	463a      	mov	r2, r7
 800da30:	4628      	mov	r0, r5
 800da32:	6a21      	ldr	r1, [r4, #32]
 800da34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800da38:	47e0      	blx	ip
 800da3a:	2800      	cmp	r0, #0
 800da3c:	dc07      	bgt.n	800da4e <__sflush_r+0xf6>
 800da3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da46:	f04f 30ff 	mov.w	r0, #4294967295
 800da4a:	81a3      	strh	r3, [r4, #12]
 800da4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da4e:	4407      	add	r7, r0
 800da50:	1a36      	subs	r6, r6, r0
 800da52:	e7e9      	b.n	800da28 <__sflush_r+0xd0>
 800da54:	20400001 	.word	0x20400001

0800da58 <_fflush_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	690b      	ldr	r3, [r1, #16]
 800da5c:	4605      	mov	r5, r0
 800da5e:	460c      	mov	r4, r1
 800da60:	b913      	cbnz	r3, 800da68 <_fflush_r+0x10>
 800da62:	2500      	movs	r5, #0
 800da64:	4628      	mov	r0, r5
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	b118      	cbz	r0, 800da72 <_fflush_r+0x1a>
 800da6a:	6a03      	ldr	r3, [r0, #32]
 800da6c:	b90b      	cbnz	r3, 800da72 <_fflush_r+0x1a>
 800da6e:	f7ff fa81 	bl	800cf74 <__sinit>
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d0f3      	beq.n	800da62 <_fflush_r+0xa>
 800da7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da7c:	07d0      	lsls	r0, r2, #31
 800da7e:	d404      	bmi.n	800da8a <_fflush_r+0x32>
 800da80:	0599      	lsls	r1, r3, #22
 800da82:	d402      	bmi.n	800da8a <_fflush_r+0x32>
 800da84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da86:	f7ff fb8a 	bl	800d19e <__retarget_lock_acquire_recursive>
 800da8a:	4628      	mov	r0, r5
 800da8c:	4621      	mov	r1, r4
 800da8e:	f7ff ff63 	bl	800d958 <__sflush_r>
 800da92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da94:	4605      	mov	r5, r0
 800da96:	07da      	lsls	r2, r3, #31
 800da98:	d4e4      	bmi.n	800da64 <_fflush_r+0xc>
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	059b      	lsls	r3, r3, #22
 800da9e:	d4e1      	bmi.n	800da64 <_fflush_r+0xc>
 800daa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daa2:	f7ff fb7d 	bl	800d1a0 <__retarget_lock_release_recursive>
 800daa6:	e7dd      	b.n	800da64 <_fflush_r+0xc>

0800daa8 <__swbuf_r>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	460e      	mov	r6, r1
 800daac:	4614      	mov	r4, r2
 800daae:	4605      	mov	r5, r0
 800dab0:	b118      	cbz	r0, 800daba <__swbuf_r+0x12>
 800dab2:	6a03      	ldr	r3, [r0, #32]
 800dab4:	b90b      	cbnz	r3, 800daba <__swbuf_r+0x12>
 800dab6:	f7ff fa5d 	bl	800cf74 <__sinit>
 800daba:	69a3      	ldr	r3, [r4, #24]
 800dabc:	60a3      	str	r3, [r4, #8]
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	071a      	lsls	r2, r3, #28
 800dac2:	d501      	bpl.n	800dac8 <__swbuf_r+0x20>
 800dac4:	6923      	ldr	r3, [r4, #16]
 800dac6:	b943      	cbnz	r3, 800dada <__swbuf_r+0x32>
 800dac8:	4621      	mov	r1, r4
 800daca:	4628      	mov	r0, r5
 800dacc:	f000 f82a 	bl	800db24 <__swsetup_r>
 800dad0:	b118      	cbz	r0, 800dada <__swbuf_r+0x32>
 800dad2:	f04f 37ff 	mov.w	r7, #4294967295
 800dad6:	4638      	mov	r0, r7
 800dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	6922      	ldr	r2, [r4, #16]
 800dade:	b2f6      	uxtb	r6, r6
 800dae0:	1a98      	subs	r0, r3, r2
 800dae2:	6963      	ldr	r3, [r4, #20]
 800dae4:	4637      	mov	r7, r6
 800dae6:	4283      	cmp	r3, r0
 800dae8:	dc05      	bgt.n	800daf6 <__swbuf_r+0x4e>
 800daea:	4621      	mov	r1, r4
 800daec:	4628      	mov	r0, r5
 800daee:	f7ff ffb3 	bl	800da58 <_fflush_r>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d1ed      	bne.n	800dad2 <__swbuf_r+0x2a>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	60a3      	str	r3, [r4, #8]
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	6022      	str	r2, [r4, #0]
 800db02:	701e      	strb	r6, [r3, #0]
 800db04:	6962      	ldr	r2, [r4, #20]
 800db06:	1c43      	adds	r3, r0, #1
 800db08:	429a      	cmp	r2, r3
 800db0a:	d004      	beq.n	800db16 <__swbuf_r+0x6e>
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	07db      	lsls	r3, r3, #31
 800db10:	d5e1      	bpl.n	800dad6 <__swbuf_r+0x2e>
 800db12:	2e0a      	cmp	r6, #10
 800db14:	d1df      	bne.n	800dad6 <__swbuf_r+0x2e>
 800db16:	4621      	mov	r1, r4
 800db18:	4628      	mov	r0, r5
 800db1a:	f7ff ff9d 	bl	800da58 <_fflush_r>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d0d9      	beq.n	800dad6 <__swbuf_r+0x2e>
 800db22:	e7d6      	b.n	800dad2 <__swbuf_r+0x2a>

0800db24 <__swsetup_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4b29      	ldr	r3, [pc, #164]	@ (800dbcc <__swsetup_r+0xa8>)
 800db28:	4605      	mov	r5, r0
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	460c      	mov	r4, r1
 800db2e:	b118      	cbz	r0, 800db38 <__swsetup_r+0x14>
 800db30:	6a03      	ldr	r3, [r0, #32]
 800db32:	b90b      	cbnz	r3, 800db38 <__swsetup_r+0x14>
 800db34:	f7ff fa1e 	bl	800cf74 <__sinit>
 800db38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db3c:	0719      	lsls	r1, r3, #28
 800db3e:	d422      	bmi.n	800db86 <__swsetup_r+0x62>
 800db40:	06da      	lsls	r2, r3, #27
 800db42:	d407      	bmi.n	800db54 <__swsetup_r+0x30>
 800db44:	2209      	movs	r2, #9
 800db46:	602a      	str	r2, [r5, #0]
 800db48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db4c:	f04f 30ff 	mov.w	r0, #4294967295
 800db50:	81a3      	strh	r3, [r4, #12]
 800db52:	e033      	b.n	800dbbc <__swsetup_r+0x98>
 800db54:	0758      	lsls	r0, r3, #29
 800db56:	d512      	bpl.n	800db7e <__swsetup_r+0x5a>
 800db58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db5a:	b141      	cbz	r1, 800db6e <__swsetup_r+0x4a>
 800db5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db60:	4299      	cmp	r1, r3
 800db62:	d002      	beq.n	800db6a <__swsetup_r+0x46>
 800db64:	4628      	mov	r0, r5
 800db66:	f7ff fb31 	bl	800d1cc <_free_r>
 800db6a:	2300      	movs	r3, #0
 800db6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	2300      	movs	r3, #0
 800db78:	6063      	str	r3, [r4, #4]
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f043 0308 	orr.w	r3, r3, #8
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	b94b      	cbnz	r3, 800db9e <__swsetup_r+0x7a>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db94:	d003      	beq.n	800db9e <__swsetup_r+0x7a>
 800db96:	4621      	mov	r1, r4
 800db98:	4628      	mov	r0, r5
 800db9a:	f000 f8a0 	bl	800dcde <__smakebuf_r>
 800db9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba2:	f013 0201 	ands.w	r2, r3, #1
 800dba6:	d00a      	beq.n	800dbbe <__swsetup_r+0x9a>
 800dba8:	2200      	movs	r2, #0
 800dbaa:	60a2      	str	r2, [r4, #8]
 800dbac:	6962      	ldr	r2, [r4, #20]
 800dbae:	4252      	negs	r2, r2
 800dbb0:	61a2      	str	r2, [r4, #24]
 800dbb2:	6922      	ldr	r2, [r4, #16]
 800dbb4:	b942      	cbnz	r2, 800dbc8 <__swsetup_r+0xa4>
 800dbb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dbba:	d1c5      	bne.n	800db48 <__swsetup_r+0x24>
 800dbbc:	bd38      	pop	{r3, r4, r5, pc}
 800dbbe:	0799      	lsls	r1, r3, #30
 800dbc0:	bf58      	it	pl
 800dbc2:	6962      	ldrpl	r2, [r4, #20]
 800dbc4:	60a2      	str	r2, [r4, #8]
 800dbc6:	e7f4      	b.n	800dbb2 <__swsetup_r+0x8e>
 800dbc8:	2000      	movs	r0, #0
 800dbca:	e7f7      	b.n	800dbbc <__swsetup_r+0x98>
 800dbcc:	2000011c 	.word	0x2000011c

0800dbd0 <_raise_r>:
 800dbd0:	291f      	cmp	r1, #31
 800dbd2:	b538      	push	{r3, r4, r5, lr}
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	d904      	bls.n	800dbe4 <_raise_r+0x14>
 800dbda:	2316      	movs	r3, #22
 800dbdc:	6003      	str	r3, [r0, #0]
 800dbde:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe2:	bd38      	pop	{r3, r4, r5, pc}
 800dbe4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbe6:	b112      	cbz	r2, 800dbee <_raise_r+0x1e>
 800dbe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbec:	b94b      	cbnz	r3, 800dc02 <_raise_r+0x32>
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f000 f830 	bl	800dc54 <_getpid_r>
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbfe:	f000 b817 	b.w	800dc30 <_kill_r>
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d00a      	beq.n	800dc1c <_raise_r+0x4c>
 800dc06:	1c59      	adds	r1, r3, #1
 800dc08:	d103      	bne.n	800dc12 <_raise_r+0x42>
 800dc0a:	2316      	movs	r3, #22
 800dc0c:	6003      	str	r3, [r0, #0]
 800dc0e:	2001      	movs	r0, #1
 800dc10:	e7e7      	b.n	800dbe2 <_raise_r+0x12>
 800dc12:	2100      	movs	r1, #0
 800dc14:	4620      	mov	r0, r4
 800dc16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc1a:	4798      	blx	r3
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e7e0      	b.n	800dbe2 <_raise_r+0x12>

0800dc20 <raise>:
 800dc20:	4b02      	ldr	r3, [pc, #8]	@ (800dc2c <raise+0xc>)
 800dc22:	4601      	mov	r1, r0
 800dc24:	6818      	ldr	r0, [r3, #0]
 800dc26:	f7ff bfd3 	b.w	800dbd0 <_raise_r>
 800dc2a:	bf00      	nop
 800dc2c:	2000011c 	.word	0x2000011c

0800dc30 <_kill_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	2300      	movs	r3, #0
 800dc34:	4d06      	ldr	r5, [pc, #24]	@ (800dc50 <_kill_r+0x20>)
 800dc36:	4604      	mov	r4, r0
 800dc38:	4608      	mov	r0, r1
 800dc3a:	4611      	mov	r1, r2
 800dc3c:	602b      	str	r3, [r5, #0]
 800dc3e:	f7f7 f9c0 	bl	8004fc2 <_kill>
 800dc42:	1c43      	adds	r3, r0, #1
 800dc44:	d102      	bne.n	800dc4c <_kill_r+0x1c>
 800dc46:	682b      	ldr	r3, [r5, #0]
 800dc48:	b103      	cbz	r3, 800dc4c <_kill_r+0x1c>
 800dc4a:	6023      	str	r3, [r4, #0]
 800dc4c:	bd38      	pop	{r3, r4, r5, pc}
 800dc4e:	bf00      	nop
 800dc50:	20000708 	.word	0x20000708

0800dc54 <_getpid_r>:
 800dc54:	f7f7 b9ae 	b.w	8004fb4 <_getpid>

0800dc58 <_sbrk_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	4d05      	ldr	r5, [pc, #20]	@ (800dc74 <_sbrk_r+0x1c>)
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	f7f7 fa32 	bl	80050cc <_sbrk>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_sbrk_r+0x1a>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_sbrk_r+0x1a>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	20000708 	.word	0x20000708

0800dc78 <memchr>:
 800dc78:	4603      	mov	r3, r0
 800dc7a:	b510      	push	{r4, lr}
 800dc7c:	b2c9      	uxtb	r1, r1
 800dc7e:	4402      	add	r2, r0
 800dc80:	4293      	cmp	r3, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	d101      	bne.n	800dc8a <memchr+0x12>
 800dc86:	2000      	movs	r0, #0
 800dc88:	e003      	b.n	800dc92 <memchr+0x1a>
 800dc8a:	7804      	ldrb	r4, [r0, #0]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	428c      	cmp	r4, r1
 800dc90:	d1f6      	bne.n	800dc80 <memchr+0x8>
 800dc92:	bd10      	pop	{r4, pc}

0800dc94 <__swhatbuf_r>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	460c      	mov	r4, r1
 800dc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9c:	4615      	mov	r5, r2
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	461e      	mov	r6, r3
 800dca2:	b096      	sub	sp, #88	@ 0x58
 800dca4:	da0c      	bge.n	800dcc0 <__swhatbuf_r+0x2c>
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	2100      	movs	r1, #0
 800dcaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcae:	bf14      	ite	ne
 800dcb0:	2340      	movne	r3, #64	@ 0x40
 800dcb2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	6031      	str	r1, [r6, #0]
 800dcba:	602b      	str	r3, [r5, #0]
 800dcbc:	b016      	add	sp, #88	@ 0x58
 800dcbe:	bd70      	pop	{r4, r5, r6, pc}
 800dcc0:	466a      	mov	r2, sp
 800dcc2:	f000 f849 	bl	800dd58 <_fstat_r>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	dbed      	blt.n	800dca6 <__swhatbuf_r+0x12>
 800dcca:	9901      	ldr	r1, [sp, #4]
 800dccc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dcd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dcd4:	4259      	negs	r1, r3
 800dcd6:	4159      	adcs	r1, r3
 800dcd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcdc:	e7eb      	b.n	800dcb6 <__swhatbuf_r+0x22>

0800dcde <__smakebuf_r>:
 800dcde:	898b      	ldrh	r3, [r1, #12]
 800dce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dce2:	079d      	lsls	r5, r3, #30
 800dce4:	4606      	mov	r6, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	d507      	bpl.n	800dcfa <__smakebuf_r+0x1c>
 800dcea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dcee:	6023      	str	r3, [r4, #0]
 800dcf0:	6123      	str	r3, [r4, #16]
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	6163      	str	r3, [r4, #20]
 800dcf6:	b003      	add	sp, #12
 800dcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcfa:	466a      	mov	r2, sp
 800dcfc:	ab01      	add	r3, sp, #4
 800dcfe:	f7ff ffc9 	bl	800dc94 <__swhatbuf_r>
 800dd02:	9f00      	ldr	r7, [sp, #0]
 800dd04:	4605      	mov	r5, r0
 800dd06:	4639      	mov	r1, r7
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f7ff fac9 	bl	800d2a0 <_malloc_r>
 800dd0e:	b948      	cbnz	r0, 800dd24 <__smakebuf_r+0x46>
 800dd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd14:	059a      	lsls	r2, r3, #22
 800dd16:	d4ee      	bmi.n	800dcf6 <__smakebuf_r+0x18>
 800dd18:	f023 0303 	bic.w	r3, r3, #3
 800dd1c:	f043 0302 	orr.w	r3, r3, #2
 800dd20:	81a3      	strh	r3, [r4, #12]
 800dd22:	e7e2      	b.n	800dcea <__smakebuf_r+0xc>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	9b01      	ldr	r3, [sp, #4]
 800dd32:	6020      	str	r0, [r4, #0]
 800dd34:	b15b      	cbz	r3, 800dd4e <__smakebuf_r+0x70>
 800dd36:	4630      	mov	r0, r6
 800dd38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd3c:	f000 f81e 	bl	800dd7c <_isatty_r>
 800dd40:	b128      	cbz	r0, 800dd4e <__smakebuf_r+0x70>
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	f023 0303 	bic.w	r3, r3, #3
 800dd48:	f043 0301 	orr.w	r3, r3, #1
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	89a3      	ldrh	r3, [r4, #12]
 800dd50:	431d      	orrs	r5, r3
 800dd52:	81a5      	strh	r5, [r4, #12]
 800dd54:	e7cf      	b.n	800dcf6 <__smakebuf_r+0x18>
	...

0800dd58 <_fstat_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	4d06      	ldr	r5, [pc, #24]	@ (800dd78 <_fstat_r+0x20>)
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	4611      	mov	r1, r2
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	f7f7 f98b 	bl	8005080 <_fstat>
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d102      	bne.n	800dd74 <_fstat_r+0x1c>
 800dd6e:	682b      	ldr	r3, [r5, #0]
 800dd70:	b103      	cbz	r3, 800dd74 <_fstat_r+0x1c>
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	bd38      	pop	{r3, r4, r5, pc}
 800dd76:	bf00      	nop
 800dd78:	20000708 	.word	0x20000708

0800dd7c <_isatty_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	2300      	movs	r3, #0
 800dd80:	4d05      	ldr	r5, [pc, #20]	@ (800dd98 <_isatty_r+0x1c>)
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f7 f989 	bl	800509e <_isatty>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_isatty_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_isatty_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	20000708 	.word	0x20000708

0800dd9c <_init>:
 800dd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd9e:	bf00      	nop
 800dda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dda2:	bc08      	pop	{r3}
 800dda4:	469e      	mov	lr, r3
 800dda6:	4770      	bx	lr

0800dda8 <_fini>:
 800dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddaa:	bf00      	nop
 800ddac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddae:	bc08      	pop	{r3}
 800ddb0:	469e      	mov	lr, r3
 800ddb2:	4770      	bx	lr
