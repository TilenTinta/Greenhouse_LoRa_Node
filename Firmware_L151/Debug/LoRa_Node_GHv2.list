
LoRa_Node_GHv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd80  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800dec0  0800dec0  0000eec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e230  0800e230  0001016c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e230  0800e230  0000f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e238  0800e238  0001016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e238  0800e238  0000f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e23c  0800e23c  0000f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800e240  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  2000016c  0800e3ac  0001016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800e3ac  000106c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ae  00000000  00000000  00010195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d21  00000000  00000000  00026843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001173  00000000  00000000  0002bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181f6  00000000  00000000  0002cd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd20  00000000  00000000  00044f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e946  00000000  00000000  00060ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef5ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b88  00000000  00000000  000ef634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f61bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dea8 	.word	0x0800dea8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	0800dea8 	.word	0x0800dea8

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	@ 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__gedf2>:
 800074c:	f04f 3cff 	mov.w	ip, #4294967295
 8000750:	e006      	b.n	8000760 <__cmpdf2+0x4>
 8000752:	bf00      	nop

08000754 <__ledf2>:
 8000754:	f04f 0c01 	mov.w	ip, #1
 8000758:	e002      	b.n	8000760 <__cmpdf2+0x4>
 800075a:	bf00      	nop

0800075c <__cmpdf2>:
 800075c:	f04f 0c01 	mov.w	ip, #1
 8000760:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000776:	d01b      	beq.n	80007b0 <__cmpdf2+0x54>
 8000778:	b001      	add	sp, #4
 800077a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800077e:	bf0c      	ite	eq
 8000780:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000784:	ea91 0f03 	teqne	r1, r3
 8000788:	bf02      	ittt	eq
 800078a:	ea90 0f02 	teqeq	r0, r2
 800078e:	2000      	moveq	r0, #0
 8000790:	4770      	bxeq	lr
 8000792:	f110 0f00 	cmn.w	r0, #0
 8000796:	ea91 0f03 	teq	r1, r3
 800079a:	bf58      	it	pl
 800079c:	4299      	cmppl	r1, r3
 800079e:	bf08      	it	eq
 80007a0:	4290      	cmpeq	r0, r2
 80007a2:	bf2c      	ite	cs
 80007a4:	17d8      	asrcs	r0, r3, #31
 80007a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007aa:	f040 0001 	orr.w	r0, r0, #1
 80007ae:	4770      	bx	lr
 80007b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b8:	d102      	bne.n	80007c0 <__cmpdf2+0x64>
 80007ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007be:	d107      	bne.n	80007d0 <__cmpdf2+0x74>
 80007c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c8:	d1d6      	bne.n	8000778 <__cmpdf2+0x1c>
 80007ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ce:	d0d3      	beq.n	8000778 <__cmpdf2+0x1c>
 80007d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_cdrcmple>:
 80007d8:	4684      	mov	ip, r0
 80007da:	4610      	mov	r0, r2
 80007dc:	4662      	mov	r2, ip
 80007de:	468c      	mov	ip, r1
 80007e0:	4619      	mov	r1, r3
 80007e2:	4663      	mov	r3, ip
 80007e4:	e000      	b.n	80007e8 <__aeabi_cdcmpeq>
 80007e6:	bf00      	nop

080007e8 <__aeabi_cdcmpeq>:
 80007e8:	b501      	push	{r0, lr}
 80007ea:	f7ff ffb7 	bl	800075c <__cmpdf2>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	bf48      	it	mi
 80007f2:	f110 0f00 	cmnmi.w	r0, #0
 80007f6:	bd01      	pop	{r0, pc}

080007f8 <__aeabi_dcmpeq>:
 80007f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007fc:	f7ff fff4 	bl	80007e8 <__aeabi_cdcmpeq>
 8000800:	bf0c      	ite	eq
 8000802:	2001      	moveq	r0, #1
 8000804:	2000      	movne	r0, #0
 8000806:	f85d fb08 	ldr.w	pc, [sp], #8
 800080a:	bf00      	nop

0800080c <__aeabi_dcmplt>:
 800080c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000810:	f7ff ffea 	bl	80007e8 <__aeabi_cdcmpeq>
 8000814:	bf34      	ite	cc
 8000816:	2001      	movcc	r0, #1
 8000818:	2000      	movcs	r0, #0
 800081a:	f85d fb08 	ldr.w	pc, [sp], #8
 800081e:	bf00      	nop

08000820 <__aeabi_dcmple>:
 8000820:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000824:	f7ff ffe0 	bl	80007e8 <__aeabi_cdcmpeq>
 8000828:	bf94      	ite	ls
 800082a:	2001      	movls	r0, #1
 800082c:	2000      	movhi	r0, #0
 800082e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000832:	bf00      	nop

08000834 <__aeabi_dcmpge>:
 8000834:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000838:	f7ff ffce 	bl	80007d8 <__aeabi_cdrcmple>
 800083c:	bf94      	ite	ls
 800083e:	2001      	movls	r0, #1
 8000840:	2000      	movhi	r0, #0
 8000842:	f85d fb08 	ldr.w	pc, [sp], #8
 8000846:	bf00      	nop

08000848 <__aeabi_dcmpgt>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff ffc4 	bl	80007d8 <__aeabi_cdrcmple>
 8000850:	bf34      	ite	cc
 8000852:	2001      	movcc	r0, #1
 8000854:	2000      	movcs	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	@ 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000baa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	@ 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	@ 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_ldivmod>:
 8000f24:	b97b      	cbnz	r3, 8000f46 <__aeabi_ldivmod+0x22>
 8000f26:	b972      	cbnz	r2, 8000f46 <__aeabi_ldivmod+0x22>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	bfbe      	ittt	lt
 8000f2c:	2000      	movlt	r0, #0
 8000f2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f32:	e006      	blt.n	8000f42 <__aeabi_ldivmod+0x1e>
 8000f34:	bf08      	it	eq
 8000f36:	2800      	cmpeq	r0, #0
 8000f38:	bf1c      	itt	ne
 8000f3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f42:	f000 b9d7 	b.w	80012f4 <__aeabi_idiv0>
 8000f46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	db09      	blt.n	8000f66 <__aeabi_ldivmod+0x42>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db1a      	blt.n	8000f8c <__aeabi_ldivmod+0x68>
 8000f56:	f000 f84d 	bl	8000ff4 <__udivmoddi4>
 8000f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f62:	b004      	add	sp, #16
 8000f64:	4770      	bx	lr
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db1b      	blt.n	8000fa8 <__aeabi_ldivmod+0x84>
 8000f70:	f000 f840 	bl	8000ff4 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4240      	negs	r0, r0
 8000f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f84:	4252      	negs	r2, r2
 8000f86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8a:	4770      	bx	lr
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	f000 f82f 	bl	8000ff4 <__udivmoddi4>
 8000f96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa6:	4770      	bx	lr
 8000fa8:	4252      	negs	r2, r2
 8000faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fae:	f000 f821 	bl	8000ff4 <__udivmoddi4>
 8000fb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fba:	b004      	add	sp, #16
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b98c 	b.w	80012f4 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	468e      	mov	lr, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14a      	bne.n	800109a <__udivmoddi4+0xa6>
 8001004:	428a      	cmp	r2, r1
 8001006:	4617      	mov	r7, r2
 8001008:	d962      	bls.n	80010d0 <__udivmoddi4+0xdc>
 800100a:	fab2 f682 	clz	r6, r2
 800100e:	b14e      	cbz	r6, 8001024 <__udivmoddi4+0x30>
 8001010:	f1c6 0320 	rsb	r3, r6, #32
 8001014:	fa01 f806 	lsl.w	r8, r1, r6
 8001018:	fa20 f303 	lsr.w	r3, r0, r3
 800101c:	40b7      	lsls	r7, r6
 800101e:	ea43 0808 	orr.w	r8, r3, r8
 8001022:	40b4      	lsls	r4, r6
 8001024:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001028:	fbb8 f1fe 	udiv	r1, r8, lr
 800102c:	fa1f fc87 	uxth.w	ip, r7
 8001030:	fb0e 8811 	mls	r8, lr, r1, r8
 8001034:	fb01 f20c 	mul.w	r2, r1, ip
 8001038:	0c23      	lsrs	r3, r4, #16
 800103a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800103e:	429a      	cmp	r2, r3
 8001040:	d909      	bls.n	8001056 <__udivmoddi4+0x62>
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	f101 30ff 	add.w	r0, r1, #4294967295
 8001048:	f080 80eb 	bcs.w	8001222 <__udivmoddi4+0x22e>
 800104c:	429a      	cmp	r2, r3
 800104e:	f240 80e8 	bls.w	8001222 <__udivmoddi4+0x22e>
 8001052:	3902      	subs	r1, #2
 8001054:	443b      	add	r3, r7
 8001056:	1a9a      	subs	r2, r3, r2
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 fc0c 	mul.w	ip, r0, ip
 8001064:	b2a3      	uxth	r3, r4
 8001066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800106a:	459c      	cmp	ip, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x8e>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	f080 80d7 	bcs.w	8001226 <__udivmoddi4+0x232>
 8001078:	459c      	cmp	ip, r3
 800107a:	f240 80d4 	bls.w	8001226 <__udivmoddi4+0x232>
 800107e:	443b      	add	r3, r7
 8001080:	3802      	subs	r0, #2
 8001082:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001086:	2100      	movs	r1, #0
 8001088:	eba3 030c 	sub.w	r3, r3, ip
 800108c:	b11d      	cbz	r5, 8001096 <__udivmoddi4+0xa2>
 800108e:	2200      	movs	r2, #0
 8001090:	40f3      	lsrs	r3, r6
 8001092:	e9c5 3200 	strd	r3, r2, [r5]
 8001096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109a:	428b      	cmp	r3, r1
 800109c:	d905      	bls.n	80010aa <__udivmoddi4+0xb6>
 800109e:	b10d      	cbz	r5, 80010a4 <__udivmoddi4+0xb0>
 80010a0:	e9c5 0100 	strd	r0, r1, [r5]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4608      	mov	r0, r1
 80010a8:	e7f5      	b.n	8001096 <__udivmoddi4+0xa2>
 80010aa:	fab3 f183 	clz	r1, r3
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d146      	bne.n	8001140 <__udivmoddi4+0x14c>
 80010b2:	4573      	cmp	r3, lr
 80010b4:	d302      	bcc.n	80010bc <__udivmoddi4+0xc8>
 80010b6:	4282      	cmp	r2, r0
 80010b8:	f200 8108 	bhi.w	80012cc <__udivmoddi4+0x2d8>
 80010bc:	1a84      	subs	r4, r0, r2
 80010be:	eb6e 0203 	sbc.w	r2, lr, r3
 80010c2:	2001      	movs	r0, #1
 80010c4:	4690      	mov	r8, r2
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d0e5      	beq.n	8001096 <__udivmoddi4+0xa2>
 80010ca:	e9c5 4800 	strd	r4, r8, [r5]
 80010ce:	e7e2      	b.n	8001096 <__udivmoddi4+0xa2>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f000 8091 	beq.w	80011f8 <__udivmoddi4+0x204>
 80010d6:	fab2 f682 	clz	r6, r2
 80010da:	2e00      	cmp	r6, #0
 80010dc:	f040 80a5 	bne.w	800122a <__udivmoddi4+0x236>
 80010e0:	1a8a      	subs	r2, r1, r2
 80010e2:	2101      	movs	r1, #1
 80010e4:	0c03      	lsrs	r3, r0, #16
 80010e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010ea:	b280      	uxth	r0, r0
 80010ec:	b2bc      	uxth	r4, r7
 80010ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80010f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80010f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010fa:	fb04 f20c 	mul.w	r2, r4, ip
 80010fe:	429a      	cmp	r2, r3
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x11e>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001108:	d202      	bcs.n	8001110 <__udivmoddi4+0x11c>
 800110a:	429a      	cmp	r2, r3
 800110c:	f200 80e3 	bhi.w	80012d6 <__udivmoddi4+0x2e2>
 8001110:	46c4      	mov	ip, r8
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	fbb3 f2fe 	udiv	r2, r3, lr
 8001118:	fb0e 3312 	mls	r3, lr, r2, r3
 800111c:	fb02 f404 	mul.w	r4, r2, r4
 8001120:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001124:	429c      	cmp	r4, r3
 8001126:	d907      	bls.n	8001138 <__udivmoddi4+0x144>
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	f102 30ff 	add.w	r0, r2, #4294967295
 800112e:	d202      	bcs.n	8001136 <__udivmoddi4+0x142>
 8001130:	429c      	cmp	r4, r3
 8001132:	f200 80cd 	bhi.w	80012d0 <__udivmoddi4+0x2dc>
 8001136:	4602      	mov	r2, r0
 8001138:	1b1b      	subs	r3, r3, r4
 800113a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800113e:	e7a5      	b.n	800108c <__udivmoddi4+0x98>
 8001140:	f1c1 0620 	rsb	r6, r1, #32
 8001144:	408b      	lsls	r3, r1
 8001146:	fa22 f706 	lsr.w	r7, r2, r6
 800114a:	431f      	orrs	r7, r3
 800114c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001150:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001154:	fbba f8f9 	udiv	r8, sl, r9
 8001158:	fa0e fe01 	lsl.w	lr, lr, r1
 800115c:	fa20 f306 	lsr.w	r3, r0, r6
 8001160:	fb09 aa18 	mls	sl, r9, r8, sl
 8001164:	fa1f fc87 	uxth.w	ip, r7
 8001168:	ea43 030e 	orr.w	r3, r3, lr
 800116c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001170:	fb08 f00c 	mul.w	r0, r8, ip
 8001174:	0c1c      	lsrs	r4, r3, #16
 8001176:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800117a:	42a0      	cmp	r0, r4
 800117c:	fa02 f201 	lsl.w	r2, r2, r1
 8001180:	d90a      	bls.n	8001198 <__udivmoddi4+0x1a4>
 8001182:	193c      	adds	r4, r7, r4
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 809e 	bcs.w	80012c8 <__udivmoddi4+0x2d4>
 800118c:	42a0      	cmp	r0, r4
 800118e:	f240 809b 	bls.w	80012c8 <__udivmoddi4+0x2d4>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	443c      	add	r4, r7
 8001198:	1a24      	subs	r4, r4, r0
 800119a:	b298      	uxth	r0, r3
 800119c:	fbb4 f3f9 	udiv	r3, r4, r9
 80011a0:	fb09 4413 	mls	r4, r9, r3, r4
 80011a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80011ac:	45a4      	cmp	ip, r4
 80011ae:	d909      	bls.n	80011c4 <__udivmoddi4+0x1d0>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80011b6:	f080 8085 	bcs.w	80012c4 <__udivmoddi4+0x2d0>
 80011ba:	45a4      	cmp	ip, r4
 80011bc:	f240 8082 	bls.w	80012c4 <__udivmoddi4+0x2d0>
 80011c0:	3b02      	subs	r3, #2
 80011c2:	443c      	add	r4, r7
 80011c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011c8:	eba4 040c 	sub.w	r4, r4, ip
 80011cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80011d0:	4564      	cmp	r4, ip
 80011d2:	4643      	mov	r3, r8
 80011d4:	46e1      	mov	r9, ip
 80011d6:	d364      	bcc.n	80012a2 <__udivmoddi4+0x2ae>
 80011d8:	d061      	beq.n	800129e <__udivmoddi4+0x2aa>
 80011da:	b15d      	cbz	r5, 80011f4 <__udivmoddi4+0x200>
 80011dc:	ebbe 0203 	subs.w	r2, lr, r3
 80011e0:	eb64 0409 	sbc.w	r4, r4, r9
 80011e4:	fa04 f606 	lsl.w	r6, r4, r6
 80011e8:	fa22 f301 	lsr.w	r3, r2, r1
 80011ec:	431e      	orrs	r6, r3
 80011ee:	40cc      	lsrs	r4, r1
 80011f0:	e9c5 6400 	strd	r6, r4, [r5]
 80011f4:	2100      	movs	r1, #0
 80011f6:	e74e      	b.n	8001096 <__udivmoddi4+0xa2>
 80011f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80011fc:	0c01      	lsrs	r1, r0, #16
 80011fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001202:	b280      	uxth	r0, r0
 8001204:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001208:	463b      	mov	r3, r7
 800120a:	fbb1 f1f7 	udiv	r1, r1, r7
 800120e:	4638      	mov	r0, r7
 8001210:	463c      	mov	r4, r7
 8001212:	46b8      	mov	r8, r7
 8001214:	46be      	mov	lr, r7
 8001216:	2620      	movs	r6, #32
 8001218:	eba2 0208 	sub.w	r2, r2, r8
 800121c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001220:	e765      	b.n	80010ee <__udivmoddi4+0xfa>
 8001222:	4601      	mov	r1, r0
 8001224:	e717      	b.n	8001056 <__udivmoddi4+0x62>
 8001226:	4610      	mov	r0, r2
 8001228:	e72b      	b.n	8001082 <__udivmoddi4+0x8e>
 800122a:	f1c6 0120 	rsb	r1, r6, #32
 800122e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001232:	40b7      	lsls	r7, r6
 8001234:	fa0e fe06 	lsl.w	lr, lr, r6
 8001238:	fa20 f101 	lsr.w	r1, r0, r1
 800123c:	ea41 010e 	orr.w	r1, r1, lr
 8001240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001244:	fbbc f8fe 	udiv	r8, ip, lr
 8001248:	b2bc      	uxth	r4, r7
 800124a:	fb0e cc18 	mls	ip, lr, r8, ip
 800124e:	fb08 f904 	mul.w	r9, r8, r4
 8001252:	0c0a      	lsrs	r2, r1, #16
 8001254:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001258:	40b0      	lsls	r0, r6
 800125a:	4591      	cmp	r9, r2
 800125c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001260:	b280      	uxth	r0, r0
 8001262:	d93e      	bls.n	80012e2 <__udivmoddi4+0x2ee>
 8001264:	18ba      	adds	r2, r7, r2
 8001266:	f108 3cff 	add.w	ip, r8, #4294967295
 800126a:	d201      	bcs.n	8001270 <__udivmoddi4+0x27c>
 800126c:	4591      	cmp	r9, r2
 800126e:	d81f      	bhi.n	80012b0 <__udivmoddi4+0x2bc>
 8001270:	eba2 0209 	sub.w	r2, r2, r9
 8001274:	fbb2 f9fe 	udiv	r9, r2, lr
 8001278:	fb09 f804 	mul.w	r8, r9, r4
 800127c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001280:	b28a      	uxth	r2, r1
 8001282:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001286:	4542      	cmp	r2, r8
 8001288:	d229      	bcs.n	80012de <__udivmoddi4+0x2ea>
 800128a:	18ba      	adds	r2, r7, r2
 800128c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001290:	d2c2      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001292:	4542      	cmp	r2, r8
 8001294:	d2c0      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001296:	f1a9 0102 	sub.w	r1, r9, #2
 800129a:	443a      	add	r2, r7
 800129c:	e7bc      	b.n	8001218 <__udivmoddi4+0x224>
 800129e:	45c6      	cmp	lr, r8
 80012a0:	d29b      	bcs.n	80011da <__udivmoddi4+0x1e6>
 80012a2:	ebb8 0302 	subs.w	r3, r8, r2
 80012a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012aa:	3801      	subs	r0, #1
 80012ac:	46e1      	mov	r9, ip
 80012ae:	e794      	b.n	80011da <__udivmoddi4+0x1e6>
 80012b0:	eba7 0909 	sub.w	r9, r7, r9
 80012b4:	444a      	add	r2, r9
 80012b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80012be:	fb09 f804 	mul.w	r8, r9, r4
 80012c2:	e7db      	b.n	800127c <__udivmoddi4+0x288>
 80012c4:	4603      	mov	r3, r0
 80012c6:	e77d      	b.n	80011c4 <__udivmoddi4+0x1d0>
 80012c8:	46d0      	mov	r8, sl
 80012ca:	e765      	b.n	8001198 <__udivmoddi4+0x1a4>
 80012cc:	4608      	mov	r0, r1
 80012ce:	e6fa      	b.n	80010c6 <__udivmoddi4+0xd2>
 80012d0:	443b      	add	r3, r7
 80012d2:	3a02      	subs	r2, #2
 80012d4:	e730      	b.n	8001138 <__udivmoddi4+0x144>
 80012d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80012da:	443b      	add	r3, r7
 80012dc:	e719      	b.n	8001112 <__udivmoddi4+0x11e>
 80012de:	4649      	mov	r1, r9
 80012e0:	e79a      	b.n	8001218 <__udivmoddi4+0x224>
 80012e2:	eba2 0209 	sub.w	r2, r2, r9
 80012e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ea:	46c4      	mov	ip, r8
 80012ec:	fb09 f804 	mul.w	r8, r9, r4
 80012f0:	e7c4      	b.n	800127c <__udivmoddi4+0x288>
 80012f2:	bf00      	nop

080012f4 <__aeabi_idiv0>:
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001308:	f107 030e 	add.w	r3, r7, #14
 800130c:	461a      	mov	r2, r3
 800130e:	21d0      	movs	r1, #208	@ 0xd0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fd89 	bl	8001e28 <BME280_ReadRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 8001320:	2301      	movs	r3, #1
 8001322:	e005      	b.n	8001330 <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b76      	cmp	r3, #118	@ 0x76
 8001328:	d101      	bne.n	800132e <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 800132a:	2302      	movs	r3, #2
 800132c:	e000      	b.n	8001330 <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 800132e:	2300      	movs	r3, #0
		}
	}
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->dig_H2 = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev->dig_H3 = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->dig_H4 = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev->dig_H5 = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev->dig_H6 = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	dev->dig_P1 = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev->dig_P6 = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev->dig_P7 = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev->dig_P8 = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev->dig_P9 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 80013d8:	22b6      	movs	r2, #182	@ 0xb6
 80013da:	21e0      	movs	r1, #224	@ 0xe0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fd5b 	bl	8001e98 <BME280_WriteRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <BME280_Reset+0xb8>
	{
		return 1;	// NOK
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <BME280_Reset+0xba>
	}
	else
	{
		return 0; // OK
 80013f0:	2300      	movs	r3, #0
	}
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]

	/* Modified for weather monitoring, page: 19; Weather monitoring*/

	// Humidity; Set value: 001 = oversampling x1
	static const uint8_t ctrl_humData = 0x01;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <BME280_Init+0x70>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	21f2      	movs	r1, #242	@ 0xf2
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd3f 	bl	8001e98 <BME280_WriteRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 8001424:	2301      	movs	r3, #1
 8001426:	e01c      	b.n	8001462 <BME280_Init+0x66>
	}

	// Temp | Press | Mode; Set value: 00100100 = oversampling x1, oversampling x1, sleep mode
	static const uint8_t scrl_meadData = 0x24;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <BME280_Init+0x74>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	21f4      	movs	r1, #244	@ 0xf4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fd31 	bl	8001e98 <BME280_WriteRegister>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <BME280_Init+0x48>
	{
		return 1;	// NOK
 8001440:	2301      	movs	r3, #1
 8001442:	e00e      	b.n	8001462 <BME280_Init+0x66>
	}

	// Standbay time | IIR filter | 3-wire SPI; Set value: 0000010 = standbay 0.5ms, IIR off, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <BME280_Init+0x78>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	21f5      	movs	r1, #245	@ 0xf5
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fd23 	bl	8001e98 <BME280_WriteRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <BME280_Init+0x64>
	{
		return 1;	// NOK
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 8001460:	2300      	movs	r3, #0
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800e12f 	.word	0x0800e12f
 8001470:	0800e130 	.word	0x0800e130
 8001474:	0800e131 	.word	0x0800e131

08001478 <BME280_GoToFromSleep>:


uint8_t BME280_GoToFromSleep(BME280 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t sleep){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]

	// sleep value controls if the devide is put to sleep or wake up
	// 1 - wake up, 0 - go to sleep

	dev -> i2cHandle = i2cHandle;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	601a      	str	r2, [r3, #0]
	uint8_t reg_data;

	if (BME280_ReadRegister(dev, CTRL_MEAS, &reg_data) != HAL_OK) return 1; // Read register value
 800148c:	f107 0317 	add.w	r3, r7, #23
 8001490:	461a      	mov	r2, r3
 8001492:	21f4      	movs	r1, #244	@ 0xf4
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fcc7 	bl	8001e28 <BME280_ReadRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <BME280_GoToFromSleep+0x2c>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01c      	b.n	80014de <BME280_GoToFromSleep+0x66>

	if (sleep == 0) reg_data = reg_data & 0xFC; // sleep mode
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <BME280_GoToFromSleep+0x3e>
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e007      	b.n	80014c6 <BME280_GoToFromSleep+0x4e>
	else if (sleep == 1) reg_data = (reg_data & 0xFC) | 0x03; // normal mode
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <BME280_GoToFromSleep+0x4e>
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	f043 0303 	orr.w	r3, r3, #3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75fb      	strb	r3, [r7, #23]

	if (BME280_WriteRegister(dev, CTRL_MEAS, reg_data) != HAL_OK) return 1;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	461a      	mov	r2, r3
 80014ca:	21f4      	movs	r1, #244	@ 0xf4
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fce3 	bl	8001e98 <BME280_WriteRegister>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <BME280_GoToFromSleep+0x64>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <BME280_GoToFromSleep+0x66>

	return 0; // OK
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b08c      	sub	sp, #48	@ 0x30
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	761a      	strb	r2, [r3, #24]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 800150a:	f107 0214 	add.w	r2, r7, #20
 800150e:	2319      	movs	r3, #25
 8001510:	2188      	movs	r1, #136	@ 0x88
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fca2 	bl	8001e5c <BME280_ReadRegisters>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 800151e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <BME280_ReadCalibData+0x44>
	{
		return 1;	// NOK
 8001526:	2301      	movs	r3, #1
 8001528:	e0b7      	b.n	800169a <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	7d3a      	ldrb	r2, [r7, #20]
 8001532:	4313      	orrs	r3, r2
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	7dba      	ldrb	r2, [r7, #22]
 8001542:	4313      	orrs	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	b21a      	sxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 800154c:	7e7b      	ldrb	r3, [r7, #25]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	7e3a      	ldrb	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 800155e:	7efb      	ldrb	r3, [r7, #27]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	7eba      	ldrb	r2, [r7, #26]
 8001566:	4313      	orrs	r3, r2
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800156e:	7f7b      	ldrb	r3, [r7, #29]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	7f3a      	ldrb	r2, [r7, #28]
 8001576:	4313      	orrs	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	7fba      	ldrb	r2, [r7, #30]
 8001588:	4313      	orrs	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 8001592:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159e:	4313      	orrs	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80015a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80015be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 80015ea:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 8001600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800160c:	4313      	orrs	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	b21a      	sxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	855a      	strh	r2, [r3, #42]	@ 0x2a
	dev -> dig_H1 = CalibData[24];
 8001616:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 8001620:	f107 020c 	add.w	r2, r7, #12
 8001624:	2307      	movs	r3, #7
 8001626:	21e1      	movs	r1, #225	@ 0xe1
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fc17 	bl	8001e5c <BME280_ReadRegisters>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <BME280_ReadCalibData+0x15a>
	{
		return 1;	// NOK
 800163c:	2301      	movs	r3, #1
 800163e:	e02c      	b.n	800169a <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	b21b      	sxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21a      	sxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev -> dig_H3 = CalibData2[2];
 8001654:	7bba      	ldrb	r2, [r7, #14]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	7c3b      	ldrb	r3, [r7, #16]
 8001666:	b21b      	sxth	r3, r3
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 8001676:	7c7b      	ldrb	r3, [r7, #17]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21a      	sxth	r2, r3
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev -> dig_H6 = CalibData2[6];
 800168e:	7cbb      	ldrb	r3, [r7, #18]
 8001690:	b25a      	sxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	return 0; // OK
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3730      	adds	r7, #48	@ 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 80016a2:	b480      	push	{r7}
 80016a4:	b087      	sub	sp, #28
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	10da      	asrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	8a9b      	ldrh	r3, [r3, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	12db      	asrs	r3, r3, #11
 80016c4:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	111b      	asrs	r3, r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	8a92      	ldrh	r2, [r2, #20]
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	1112      	asrs	r2, r2, #4
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	8a89      	ldrh	r1, [r1, #20]
 80016d8:	1a52      	subs	r2, r2, r1
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	131b      	asrs	r3, r3, #12
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	139b      	asrs	r3, r3, #14
 80016ec:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3380      	adds	r3, #128	@ 0x80
 8001704:	121b      	asrs	r3, r3, #8
 8001706:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b0ca      	sub	sp, #296	@ 0x128
 800171a:	af00      	add	r7, sp, #0
 800171c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8001720:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8001724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	17da      	asrs	r2, r3, #31
 800172c:	461c      	mov	r4, r3
 800172e:	4615      	mov	r5, r2
 8001730:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001734:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001738:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800173c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001740:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001744:	fb03 f102 	mul.w	r1, r3, r2
 8001748:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800174c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	18ca      	adds	r2, r1, r3
 8001756:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800175a:	fba3 8903 	umull	r8, r9, r3, r3
 800175e:	eb02 0309 	add.w	r3, r2, r9
 8001762:	4699      	mov	r9, r3
 8001764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001768:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800176c:	b21b      	sxth	r3, r3
 800176e:	17da      	asrs	r2, r3, #31
 8001770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001778:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800177c:	4603      	mov	r3, r0
 800177e:	fb03 f209 	mul.w	r2, r3, r9
 8001782:	460b      	mov	r3, r1
 8001784:	fb08 f303 	mul.w	r3, r8, r3
 8001788:	4413      	add	r3, r2
 800178a:	4602      	mov	r2, r0
 800178c:	fba8 2102 	umull	r2, r1, r8, r2
 8001790:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001794:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001798:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800179c:	4413      	add	r3, r2
 800179e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017a2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80017a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80017aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80017ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017b2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	17da      	asrs	r2, r3, #31
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017be:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017c6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80017ca:	462a      	mov	r2, r5
 80017cc:	fb02 f203 	mul.w	r2, r2, r3
 80017d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017d4:	4621      	mov	r1, r4
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	441a      	add	r2, r3
 80017dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017e0:	4621      	mov	r1, r4
 80017e2:	fba3 3101 	umull	r3, r1, r3, r1
 80017e6:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80017ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80017ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001804:	462b      	mov	r3, r5
 8001806:	0459      	lsls	r1, r3, #17
 8001808:	4622      	mov	r2, r4
 800180a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800180e:	4623      	mov	r3, r4
 8001810:	0458      	lsls	r0, r3, #17
 8001812:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001816:	1814      	adds	r4, r2, r0
 8001818:	643c      	str	r4, [r7, #64]	@ 0x40
 800181a:	414b      	adcs	r3, r1
 800181c:	647b      	str	r3, [r7, #68]	@ 0x44
 800181e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001822:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800182a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800182e:	b21b      	sxth	r3, r3
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001836:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001846:	00d9      	lsls	r1, r3, #3
 8001848:	2000      	movs	r0, #0
 800184a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800184e:	1814      	adds	r4, r2, r0
 8001850:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001852:	414b      	adcs	r3, r1
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001856:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800185a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 800185e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001862:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001866:	fb03 f102 	mul.w	r1, r3, r2
 800186a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800186e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	18ca      	adds	r2, r1, r3
 8001878:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800187c:	fba3 3103 	umull	r3, r1, r3, r3
 8001880:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001896:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80018a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80018a6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80018aa:	4622      	mov	r2, r4
 80018ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80018b0:	4641      	mov	r1, r8
 80018b2:	fb01 f202 	mul.w	r2, r1, r2
 80018b6:	464d      	mov	r5, r9
 80018b8:	4618      	mov	r0, r3
 80018ba:	4621      	mov	r1, r4
 80018bc:	4603      	mov	r3, r0
 80018be:	fb03 f305 	mul.w	r3, r3, r5
 80018c2:	4413      	add	r3, r2
 80018c4:	4602      	mov	r2, r0
 80018c6:	4641      	mov	r1, r8
 80018c8:	fba2 2101 	umull	r2, r1, r2, r1
 80018cc:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80018d0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018d4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018de:	f04f 0000 	mov.w	r0, #0
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018ea:	4623      	mov	r3, r4
 80018ec:	0a18      	lsrs	r0, r3, #8
 80018ee:	462a      	mov	r2, r5
 80018f0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80018f4:	462b      	mov	r3, r5
 80018f6:	1219      	asrs	r1, r3, #8
 80018f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001900:	b21b      	sxth	r3, r3
 8001902:	17da      	asrs	r2, r3, #31
 8001904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001908:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800190c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001910:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001914:	464a      	mov	r2, r9
 8001916:	fb02 f203 	mul.w	r2, r2, r3
 800191a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191e:	4644      	mov	r4, r8
 8001920:	fb04 f303 	mul.w	r3, r4, r3
 8001924:	441a      	add	r2, r3
 8001926:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800192a:	4644      	mov	r4, r8
 800192c:	fba3 3404 	umull	r3, r4, r3, r4
 8001930:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001934:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800194e:	464c      	mov	r4, r9
 8001950:	0323      	lsls	r3, r4, #12
 8001952:	46c4      	mov	ip, r8
 8001954:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001958:	4644      	mov	r4, r8
 800195a:	0322      	lsls	r2, r4, #12
 800195c:	1884      	adds	r4, r0, r2
 800195e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001960:	eb41 0303 	adc.w	r3, r1, r3
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
 8001966:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800196a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 800196e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001972:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001976:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800197a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800197e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001982:	8b5b      	ldrh	r3, [r3, #26]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2200      	movs	r2, #0
 8001988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800198c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001990:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001994:	4622      	mov	r2, r4
 8001996:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800199a:	4641      	mov	r1, r8
 800199c:	fb01 f202 	mul.w	r2, r1, r2
 80019a0:	464d      	mov	r5, r9
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	4603      	mov	r3, r0
 80019a8:	fb03 f305 	mul.w	r3, r3, r5
 80019ac:	4413      	add	r3, r2
 80019ae:	4602      	mov	r2, r0
 80019b0:	4641      	mov	r1, r8
 80019b2:	fba2 2101 	umull	r2, r1, r2, r1
 80019b6:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80019ba:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80019be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019c2:	4413      	add	r3, r2
 80019c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019d4:	4629      	mov	r1, r5
 80019d6:	104a      	asrs	r2, r1, #1
 80019d8:	4629      	mov	r1, r5
 80019da:	17cb      	asrs	r3, r1, #31
 80019dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 80019e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019e4:	4313      	orrs	r3, r2
 80019e6:	d101      	bne.n	80019ec <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e146      	b.n	8001c7a <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 80019ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80019f0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80019fe:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	105b      	asrs	r3, r3, #1
 8001a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a10:	07db      	lsls	r3, r3, #31
 8001a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a1e:	4604      	mov	r4, r0
 8001a20:	1aa4      	subs	r4, r4, r2
 8001a22:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001a24:	eb61 0303 	sbc.w	r3, r1, r3
 8001a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a2e:	4622      	mov	r2, r4
 8001a30:	462b      	mov	r3, r5
 8001a32:	1891      	adds	r1, r2, r2
 8001a34:	6239      	str	r1, [r7, #32]
 8001a36:	415b      	adcs	r3, r3
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1851      	adds	r1, r2, r1
 8001a42:	61b9      	str	r1, [r7, #24]
 8001a44:	4629      	mov	r1, r5
 8001a46:	414b      	adcs	r3, r1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a56:	4649      	mov	r1, r9
 8001a58:	018b      	lsls	r3, r1, #6
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a60:	4641      	mov	r1, r8
 8001a62:	018a      	lsls	r2, r1, #6
 8001a64:	4641      	mov	r1, r8
 8001a66:	1889      	adds	r1, r1, r2
 8001a68:	6139      	str	r1, [r7, #16]
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	eb43 0101 	adc.w	r1, r3, r1
 8001a70:	6179      	str	r1, [r7, #20]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a7e:	4649      	mov	r1, r9
 8001a80:	008b      	lsls	r3, r1, #2
 8001a82:	46c4      	mov	ip, r8
 8001a84:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001a88:	4641      	mov	r1, r8
 8001a8a:	008a      	lsls	r2, r1, #2
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	4622      	mov	r2, r4
 8001a94:	189b      	adds	r3, r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	eb42 0303 	adc.w	r3, r2, r3
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001aae:	4649      	mov	r1, r9
 8001ab0:	008b      	lsls	r3, r1, #2
 8001ab2:	46c4      	mov	ip, r8
 8001ab4:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ab8:	4641      	mov	r1, r8
 8001aba:	008a      	lsls	r2, r1, #2
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ac8:	462b      	mov	r3, r5
 8001aca:	460a      	mov	r2, r1
 8001acc:	eb42 0303 	adc.w	r3, r2, r3
 8001ad0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ad2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ad6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ada:	f7ff fa23 	bl	8000f24 <__aeabi_ldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001aea:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001af4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001af6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0b50      	lsrs	r0, r2, #13
 8001b04:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b08:	1359      	asrs	r1, r3, #13
 8001b0a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b0e:	462b      	mov	r3, r5
 8001b10:	fb00 f203 	mul.w	r2, r0, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	fb03 f301 	mul.w	r3, r3, r1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	fba2 2100 	umull	r2, r1, r2, r0
 8001b22:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001b26:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001b2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b34:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	0b50      	lsrs	r0, r2, #13
 8001b42:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b46:	1359      	asrs	r1, r3, #13
 8001b48:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	fb00 f203 	mul.w	r2, r0, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	fb03 f301 	mul.w	r3, r3, r1
 8001b58:	4413      	add	r3, r2
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	fba2 2100 	umull	r2, r1, r2, r0
 8001b60:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001b64:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b7e:	4621      	mov	r1, r4
 8001b80:	0e4a      	lsrs	r2, r1, #25
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	460c      	mov	r4, r1
 8001b88:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001b8c:	164b      	asrs	r3, r1, #25
 8001b8e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 8001b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b96:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	17da      	asrs	r2, r3, #31
 8001b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ba0:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ba2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ba6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001baa:	462a      	mov	r2, r5
 8001bac:	fb02 f203 	mul.w	r2, r2, r3
 8001bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc6:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001bca:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001bce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001be4:	4621      	mov	r1, r4
 8001be6:	0cca      	lsrs	r2, r1, #19
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	460c      	mov	r4, r1
 8001bee:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001bf2:	14cb      	asrs	r3, r1, #19
 8001bf4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001bf8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001bfc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c00:	1884      	adds	r4, r0, r2
 8001c02:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001c04:	eb41 0303 	adc.w	r3, r1, r3
 8001c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c0e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001c12:	4621      	mov	r1, r4
 8001c14:	1889      	adds	r1, r1, r2
 8001c16:	6539      	str	r1, [r7, #80]	@ 0x50
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb43 0101 	adc.w	r1, r3, r1
 8001c1e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	0a18      	lsrs	r0, r3, #8
 8001c30:	462a      	mov	r2, r5
 8001c32:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001c36:	462b      	mov	r3, r5
 8001c38:	1219      	asrs	r1, r3, #8
 8001c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c3e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	17da      	asrs	r2, r3, #31
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c56:	464c      	mov	r4, r9
 8001c58:	0123      	lsls	r3, r4, #4
 8001c5a:	46c4      	mov	ip, r8
 8001c5c:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001c60:	4644      	mov	r4, r8
 8001c62:	0122      	lsls	r2, r4, #4
 8001c64:	1884      	adds	r4, r0, r2
 8001c66:	603c      	str	r4, [r7, #0]
 8001c68:	eb41 0303 	adc.w	r3, r1, r3
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c72:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)pressure;
 8001c76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c86 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c98:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	039a      	lsls	r2, r3, #14
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001ca4:	051b      	lsls	r3, r3, #20
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cbc:	13db      	asrs	r3, r3, #15
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	f992 2036 	ldrsb.w	r2, [r2, #54]	@ 0x36
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	fb01 f202 	mul.w	r2, r1, r2
 8001ccc:	1292      	asrs	r2, r2, #10
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f891 1030 	ldrb.w	r1, [r1, #48]	@ 0x30
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	fb00 f101 	mul.w	r1, r0, r1
 8001cdc:	12c9      	asrs	r1, r1, #11
 8001cde:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001ce2:	fb01 f202 	mul.w	r2, r1, r2
 8001ce6:	1292      	asrs	r2, r2, #10
 8001ce8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	@ 0x2e
 8001cf2:	fb01 f202 	mul.w	r2, r1, r2
 8001cf6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001cfa:	1392      	asrs	r2, r2, #14
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	13db      	asrs	r3, r3, #15
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	13d2      	asrs	r2, r2, #15
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	111b      	asrs	r3, r3, #4
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d28:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001d30:	bfa8      	it	ge
 8001d32:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001d36:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	131b      	asrs	r3, r3, #12
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08e      	sub	sp, #56	@ 0x38
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t Data[8] = {};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
	int32_t RawTemp = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t RawPressure = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t RawHumidity = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	2308      	movs	r3, #8
 8001d78:	21f7      	movs	r1, #247	@ 0xf7
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f86e 	bl	8001e5c <BME280_ReadRegisters>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8001d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <BME280_ReadAllData+0x4c>
	{
		return 1;	// NOK
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e046      	b.n	8001e20 <BME280_ReadAllData+0xda>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	031b      	lsls	r3, r3, #12
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001d98:	7c3b      	ldrb	r3, [r7, #16]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001d9e:	7c7b      	ldrb	r3, [r7, #17]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001db2:	7b3b      	ldrb	r3, [r7, #12]
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001dd2:	7cbb      	ldrb	r3, [r7, #18]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[7];
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fc5b 	bl	80016a2 <BME280_TemperatureCompesation>
 8001dec:	4602      	mov	r2, r0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fc8d 	bl	8001714 <BME280_PressureCompesation>
 8001dfa:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fe51 	bl	8000aa8 <__aeabi_ui2f>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff39 	bl	8001c86 <BME280_HumidityCompesation>
 8001e14:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	0a9a      	lsrs	r2, r3, #10
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3738      	adds	r7, #56	@ 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	460b      	mov	r3, r1
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	2364      	movs	r3, #100	@ 0x64
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2301      	movs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	21ec      	movs	r1, #236	@ 0xec
 8001e4e:	f005 faa3 	bl	8007398 <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	7abb      	ldrb	r3, [r7, #10]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2164      	movs	r1, #100	@ 0x64
 8001e7e:	9102      	str	r1, [sp, #8]
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	21ec      	movs	r1, #236	@ 0xec
 8001e8a:	f005 fa85 	bl	8007398 <HAL_I2C_Mem_Read>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2364      	movs	r3, #100	@ 0x64
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	1cbb      	adds	r3, r7, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	21ec      	movs	r1, #236	@ 0xec
 8001ec0:	f005 f970 	bl	80071a4 <HAL_I2C_Mem_Write>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <EEPROM_Write_Data>:
    return thing.a;
}


HAL_StatusTypeDef EEPROM_Write_Data(uint32_t StartAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
	// Clear any sticky error flags from a previous cycle (survive reset)
	__HAL_FLASH_CLEAR_FLAG(
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <EEPROM_Write_Data+0x90>)
 8001ee0:	f640 7202 	movw	r2, #3842	@ 0xf02
 8001ee4:	619a      	str	r2, [r3, #24]
	    FLASH_FLAG_OPTVERR
	);


    // Check if the address range is valid for the EEPROM
    uint32_t endAddress = StartAddress + (numberofwords * 4) - 1;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	61bb      	str	r3, [r7, #24]
    if (StartAddress < FLASH_EEPROM_BASE || endAddress > FLASH_EEPROM_END) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <EEPROM_Write_Data+0x94>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d903      	bls.n	8001f04 <EEPROM_Write_Data+0x34>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4a1a      	ldr	r2, [pc, #104]	@ (8001f68 <EEPROM_Write_Data+0x98>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <EEPROM_Write_Data+0x38>
        return HAL_ERROR; // Address is out of the valid EEPROM range
 8001f04:	2301      	movs	r3, #1
 8001f06:	e026      	b.n	8001f56 <EEPROM_Write_Data+0x86>
    }

    HAL_FLASHEx_DATAEEPROM_Unlock();
 8001f08:	f004 faae 	bl	8006468 <HAL_FLASHEx_DATAEEPROM_Unlock>

    for (uint16_t i = 0; i < numberofwords; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	83fb      	strh	r3, [r7, #30]
 8001f10:	e01a      	b.n	8001f48 <EEPROM_Write_Data+0x78>
    {
        uint32_t currentAddress = StartAddress + (i * 4);
 8001f12:	8bfb      	ldrh	r3, [r7, #30]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
        uint32_t currentData = Data[i];
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]

        // Program one word at a time. The HAL function handles erasing internally for EEPROM.
        if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, currentAddress, currentData) != HAL_OK)
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f004 faf8 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <EEPROM_Write_Data+0x72>
        {
            HAL_FLASHEx_DATAEEPROM_Lock();
 8001f3a:	f004 fab1 	bl	80064a0 <HAL_FLASHEx_DATAEEPROM_Lock>
            return HAL_ERROR; // Return error code from HAL
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e009      	b.n	8001f56 <EEPROM_Write_Data+0x86>
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f42:	8bfb      	ldrh	r3, [r7, #30]
 8001f44:	3301      	adds	r3, #1
 8001f46:	83fb      	strh	r3, [r7, #30]
 8001f48:	8bfa      	ldrh	r2, [r7, #30]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3e0      	bcc.n	8001f12 <EEPROM_Write_Data+0x42>
        }
    }

    HAL_FLASHEx_DATAEEPROM_Lock();
 8001f50:	f004 faa6 	bl	80064a0 <HAL_FLASHEx_DATAEEPROM_Lock>
    return HAL_OK; // Success
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	0807ffff 	.word	0x0807ffff
 8001f68:	08080fff 	.word	0x08080fff

08001f6c <EEPROM_Read_Data>:


void EEPROM_Read_Data(uint32_t StartAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	82fb      	strh	r3, [r7, #22]
 8001f7e:	e00e      	b.n	8001f9e <EEPROM_Read_Data+0x32>
    {
        // Direct memory read is sufficient for reading from EEPROM
        RxBuf[i] = *(__IO uint32_t *)(StartAddress + (i * 4));
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	680a      	ldr	r2, [r1, #0]
 8001f96:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f98:	8afb      	ldrh	r3, [r7, #22]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	82fb      	strh	r3, [r7, #22]
 8001f9e:	8afa      	ldrh	r2, [r7, #22]
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3ec      	bcc.n	8001f80 <EEPROM_Read_Data+0x14>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0c      	blt.n	8001fe0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_ClearPendingIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	3360      	adds	r3, #96	@ 0x60
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b093      	sub	sp, #76	@ 0x4c
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f003 f906 	bl	8005206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 fd49 	bl	8002a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffe:	f000 ffeb 	bl	8002fd8 <MX_GPIO_Init>
  MX_RTC_Init();
 8002002:	f000 fe5f 	bl	8002cc4 <MX_RTC_Init>
  MX_SPI2_Init();
 8002006:	f000 ff19 	bl	8002e3c <MX_SPI2_Init>
  MX_I2C1_Init();
 800200a:	f000 fdff 	bl	8002c0c <MX_I2C1_Init>
  MX_I2C2_Init();
 800200e:	f000 fe2b 	bl	8002c68 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002012:	f000 fedf 	bl	8002dd4 <MX_SPI1_Init>
  MX_ADC_Init();
 8002016:	f000 fda1 	bl	8002b5c <MX_ADC_Init>
  MX_TIM2_Init();
 800201a:	f000 ff43 	bl	8002ea4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800201e:	f000 ff8d 	bl	8002f3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100 / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t status = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t tx_count = 0; // Read number of TX packets from flash
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* MAIN STATE MACHINE */
	  switch(state)
 8002032:	4bad      	ldr	r3, [pc, #692]	@ (80022e8 <main+0x2f8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b05      	cmp	r3, #5
 8002038:	f200 84fe 	bhi.w	8002a38 <main+0xa48>
 800203c:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <main+0x54>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002325 	.word	0x08002325
 800204c:	08002381 	.word	0x08002381
 8002050:	080026bb 	.word	0x080026bb
 8002054:	0800285f 	.word	0x0800285f
 8002058:	08002a39 	.word	0x08002a39


	  ////////* DEVICE BOOT *////////
	  case STATE_INIT:

		  if (measurements.ADC_read_cnt == 0 && measurements.init_end == 0)
 800205c:	4ba3      	ldr	r3, [pc, #652]	@ (80022ec <main+0x2fc>)
 800205e:	78db      	ldrb	r3, [r3, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d15e      	bne.n	8002122 <main+0x132>
 8002064:	4ba1      	ldr	r3, [pc, #644]	@ (80022ec <main+0x2fc>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d15a      	bne.n	8002122 <main+0x132>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 800206c:	49a0      	ldr	r1, [pc, #640]	@ (80022f0 <main+0x300>)
 800206e:	48a1      	ldr	r0, [pc, #644]	@ (80022f4 <main+0x304>)
 8002070:	f7ff f962 	bl	8001338 <BME280_Reset>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800207c:	4413      	add	r3, r2
 800207e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  HAL_Delay(200);
 8002082:	20c8      	movs	r0, #200	@ 0xc8
 8002084:	f003 f92e 	bl	80052e4 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8002088:	4999      	ldr	r1, [pc, #612]	@ (80022f0 <main+0x300>)
 800208a:	489a      	ldr	r0, [pc, #616]	@ (80022f4 <main+0x304>)
 800208c:	f7ff f934 	bl	80012f8 <BME280_ReadDeviceID>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002098:	4413      	add	r3, r2
 800209a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 800209e:	4994      	ldr	r1, [pc, #592]	@ (80022f0 <main+0x300>)
 80020a0:	4894      	ldr	r0, [pc, #592]	@ (80022f4 <main+0x304>)
 80020a2:	f7ff fa20 	bl	80014e6 <BME280_ReadCalibData>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80020ae:	4413      	add	r3, r2
 80020b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_Init(&bme280, &hi2c2);
 80020b4:	498e      	ldr	r1, [pc, #568]	@ (80022f0 <main+0x300>)
 80020b6:	488f      	ldr	r0, [pc, #572]	@ (80022f4 <main+0x304>)
 80020b8:	f7ff f9a0 	bl	80013fc <BME280_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80020c4:	4413      	add	r3, r2
 80020c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2108      	movs	r1, #8
 80020ce:	488a      	ldr	r0, [pc, #552]	@ (80022f8 <main+0x308>)
 80020d0:	f004 fee0 	bl	8006e94 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	4888      	ldr	r0, [pc, #544]	@ (80022fc <main+0x30c>)
 80020da:	f004 fedb 	bl	8006e94 <HAL_GPIO_WritePin>

			  // Set some pins
			  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	2110      	movs	r1, #16
 80020e2:	4885      	ldr	r0, [pc, #532]	@ (80022f8 <main+0x308>)
 80020e4:	f004 fed6 	bl	8006e94 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ee:	4883      	ldr	r0, [pc, #524]	@ (80022fc <main+0x30c>)
 80020f0:	f004 fed0 	bl	8006e94 <HAL_GPIO_WritePin>

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80020f4:	4b82      	ldr	r3, [pc, #520]	@ (8002300 <main+0x310>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b80      	ldr	r3, [pc, #512]	@ (8002300 <main+0x310>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002104:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210a:	487d      	ldr	r0, [pc, #500]	@ (8002300 <main+0x310>)
 800210c:	f008 fe76 	bl	800adfc <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8002110:	487c      	ldr	r0, [pc, #496]	@ (8002304 <main+0x314>)
 8002112:	f009 fe09 	bl	800bd28 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002116:	487c      	ldr	r0, [pc, #496]	@ (8002308 <main+0x318>)
 8002118:	f009 fe06 	bl	800bd28 <HAL_TIM_Base_Start_IT>

			  measurements.init_end = 1;	// Signal init complete
 800211c:	4b73      	ldr	r3, [pc, #460]	@ (80022ec <main+0x2fc>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002122:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <main+0x2fc>)
 8002124:	789b      	ldrb	r3, [r3, #2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	f040 8489 	bne.w	8002a3e <main+0xa4e>
 800212c:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <main+0x2fc>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b01      	cmp	r3, #1
 8002132:	f040 8484 	bne.w	8002a3e <main+0xa4e>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8002136:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <main+0x2fc>)
 8002138:	78db      	ldrb	r3, [r3, #3]
 800213a:	461c      	mov	r4, r3
 800213c:	4873      	ldr	r0, [pc, #460]	@ (800230c <main+0x31c>)
 800213e:	f001 f897 	bl	8003270 <ADC_Read_Battery>
 8002142:	4602      	mov	r2, r0
 8002144:	4969      	ldr	r1, [pc, #420]	@ (80022ec <main+0x2fc>)
 8002146:	f104 030a 	add.w	r3, r4, #10
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 800214e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002152:	4619      	mov	r1, r3
 8002154:	486e      	ldr	r0, [pc, #440]	@ (8002310 <main+0x320>)
 8002156:	f001 f979 	bl	800344c <ADC_Read_EHum>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <main+0x2fc>)
 8002160:	78db      	ldrb	r3, [r3, #3]
 8002162:	461c      	mov	r4, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fc9f 	bl	8000aa8 <__aeabi_ui2f>
 800216a:	4602      	mov	r2, r0
 800216c:	495f      	ldr	r1, [pc, #380]	@ (80022ec <main+0x2fc>)
 800216e:	1ca3      	adds	r3, r4, #2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 8002176:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <main+0x2fc>)
 8002178:	78db      	ldrb	r3, [r3, #3]
 800217a:	3301      	adds	r3, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ec <main+0x2fc>)
 8002180:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 8002182:	4b5a      	ldr	r3, [pc, #360]	@ (80022ec <main+0x2fc>)
 8002184:	2200      	movs	r2, #0
 8002186:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 		// reset timer read flag
 8002188:	4b58      	ldr	r3, [pc, #352]	@ (80022ec <main+0x2fc>)
 800218a:	2200      	movs	r2, #0
 800218c:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 800218e:	485d      	ldr	r0, [pc, #372]	@ (8002304 <main+0x314>)
 8002190:	f009 fdca 	bl	800bd28 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 8002194:	4b55      	ldr	r3, [pc, #340]	@ (80022ec <main+0x2fc>)
 8002196:	78db      	ldrb	r3, [r3, #3]
 8002198:	2b05      	cmp	r3, #5
 800219a:	f040 8450 	bne.w	8002a3e <main+0xa4e>
			  {
				  measurements.ADC_read_cnt = 0;
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <main+0x2fc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80021a4:	4857      	ldr	r0, [pc, #348]	@ (8002304 <main+0x314>)
 80021a6:	f009 fe11 	bl	800bdcc <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	4852      	ldr	r0, [pc, #328]	@ (80022f8 <main+0x308>)
 80021b0:	f004 fe70 	bl	8006e94 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	4850      	ldr	r0, [pc, #320]	@ (80022fc <main+0x30c>)
 80021ba:	f004 fe6b 	bl	8006e94 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 80021be:	4b4b      	ldr	r3, [pc, #300]	@ (80022ec <main+0x2fc>)
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 80021c6:	4b49      	ldr	r3, [pc, #292]	@ (80022ec <main+0x2fc>)
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80021d2:	e021      	b.n	8002218 <main+0x228>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80021d4:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <main+0x2fc>)
 80021d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d8:	4944      	ldr	r1, [pc, #272]	@ (80022ec <main+0x2fc>)
 80021da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021dc:	330a      	adds	r3, #10
 80021de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7fe fbaf 	bl	8000948 <__addsf3>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <main+0x2fc>)
 80021f0:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 80021f2:	4b3e      	ldr	r3, [pc, #248]	@ (80022ec <main+0x2fc>)
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	493d      	ldr	r1, [pc, #244]	@ (80022ec <main+0x2fc>)
 80021f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021fa:	3302      	adds	r3, #2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7fe fb9f 	bl	8000948 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <main+0x2fc>)
 8002210:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 8002212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002214:	3301      	adds	r3, #1
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
 8002218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221a:	2b04      	cmp	r3, #4
 800221c:	ddda      	ble.n	80021d4 <main+0x1e4>
				  }

				  measurements.battery_voltage /= 5;
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <main+0x2fc>)
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002222:	493c      	ldr	r1, [pc, #240]	@ (8002314 <main+0x324>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fd4b 	bl	8000cc0 <__aeabi_fdiv>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <main+0x2fc>)
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 8002232:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <main+0x2fc>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4937      	ldr	r1, [pc, #220]	@ (8002314 <main+0x324>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd41 	bl	8000cc0 <__aeabi_fdiv>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <main+0x2fc>)
 8002244:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 8002246:	2201      	movs	r2, #1
 8002248:	4929      	ldr	r1, [pc, #164]	@ (80022f0 <main+0x300>)
 800224a:	482a      	ldr	r0, [pc, #168]	@ (80022f4 <main+0x304>)
 800224c:	f7ff f914 	bl	8001478 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002250:	4927      	ldr	r1, [pc, #156]	@ (80022f0 <main+0x300>)
 8002252:	4828      	ldr	r0, [pc, #160]	@ (80022f4 <main+0x304>)
 8002254:	f7ff fd77 	bl	8001d46 <BME280_ReadAllData>
				  //BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 8002258:	482f      	ldr	r0, [pc, #188]	@ (8002318 <main+0x328>)
 800225a:	f001 f83f 	bl	80032dc <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 800225e:	482e      	ldr	r0, [pc, #184]	@ (8002318 <main+0x328>)
 8002260:	f001 fb6e 	bl	8003940 <rfm95_init>
 8002264:	4603      	mov	r3, r0
 8002266:	f083 0301 	eor.w	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d004      	beq.n	800227a <main+0x28a>
 8002270:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002274:	3301      	adds	r3, #1
 8002276:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); 		// Clear EXTI1 NVIC pending flag
 800227a:	2007      	movs	r0, #7
 800227c:	f7ff fe9a 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); 		// Clear EXTI3 NVIC pending
 8002280:	2009      	movs	r0, #9
 8002282:	f7ff fe97 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); 	// Clear EXTI15_10 NVIC pending flag
 8002286:	2028      	movs	r0, #40	@ 0x28
 8002288:	f7ff fe94 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800228c:	2009      	movs	r0, #9
 800228e:	f003 ffce 	bl	800622e <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002292:	2007      	movs	r0, #7
 8002294:	f003 ffcb 	bl	800622e <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 2.8f) status++; //Vbat NEEDS TO BE SET
 8002298:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <main+0x2fc>)
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	491f      	ldr	r1, [pc, #124]	@ (800231c <main+0x32c>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe fdf8 	bl	8000e94 <__aeabi_fcmplt>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <main+0x2c4>
 80022aa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022ae:	3301      	adds	r3, #1
 80022b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  lora_data.errSendCnt += status;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <main+0x330>)
 80022b6:	785a      	ldrb	r2, [r3, #1]
 80022b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022bc:	4413      	add	r3, r2
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <main+0x330>)
 80022c2:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 80022c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <main+0x2f0>
				  {
					  //state = STATE_FIRST_CONN;
					  state = STATE_SEND;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <main+0x2f8>)
 80022ce:	2203      	movs	r2, #3
 80022d0:	701a      	strb	r2, [r3, #0]
					  status = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					  lora_data.errSendCnt = 0;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <main+0x330>)
 80022da:	2200      	movs	r2, #0
 80022dc:	705a      	strb	r2, [r3, #1]
					  state = STATE_GO_SLEEP;
				  }
			  }
		  }

		  break;
 80022de:	e3ae      	b.n	8002a3e <main+0xa4e>
					  state = STATE_GO_SLEEP;
 80022e0:	4b01      	ldr	r3, [pc, #4]	@ (80022e8 <main+0x2f8>)
 80022e2:	2204      	movs	r2, #4
 80022e4:	701a      	strb	r2, [r3, #0]
		  break;
 80022e6:	e3aa      	b.n	8002a3e <main+0xa4e>
 80022e8:	20000540 	.word	0x20000540
 80022ec:	200001c0 	.word	0x200001c0
 80022f0:	2000039c 	.word	0x2000039c
 80022f4:	20000188 	.word	0x20000188
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	200003f0 	.word	0x200003f0
 8002304:	200004c0 	.word	0x200004c0
 8002308:	20000500 	.word	0x20000500
 800230c:	200001c4 	.word	0x200001c4
 8002310:	200001c8 	.word	0x200001c8
 8002314:	40a00000 	.word	0x40a00000
 8002318:	20000210 	.word	0x20000210
 800231c:	40333333 	.word	0x40333333
 8002320:	20000200 	.word	0x20000200

	  ////////* FIRST LoRa/SIM CONNECTION TEST *////////
	  case STATE_FIRST_CONN:

		  // Create data packet that will be send - dummy
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 8002324:	4b84      	ldr	r3, [pc, #528]	@ (8002538 <main+0x548>)
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30

		#ifdef USE_EEPROM
		  EEPROM_Read_Data(FLASH_EEPROM_BASE, &tx_count, 1);
 8002328:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	4882      	ldr	r0, [pc, #520]	@ (800253c <main+0x54c>)
 8002332:	f7ff fe1b 	bl	8001f6c <EEPROM_Read_Data>
		#else
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
		#endif

		  rfm95_handle.config.tx_frame_count = tx_count;
 8002336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002338:	b29a      	uxth	r2, r3
 800233a:	4b81      	ldr	r3, [pc, #516]	@ (8002540 <main+0x550>)
 800233c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 8002340:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002344:	2204      	movs	r2, #4
 8002346:	4619      	mov	r1, r3
 8002348:	487d      	ldr	r0, [pc, #500]	@ (8002540 <main+0x550>)
 800234a:	f002 fafc 	bl	8004946 <rfm95_send_receive_cycle>
 800234e:	4603      	mov	r3, r0
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <main+0x372>
		  {
			  // Put device in error state
			  state = STATE_ERROR;
 800235a:	4b7a      	ldr	r3, [pc, #488]	@ (8002544 <main+0x554>)
 800235c:	2205      	movs	r2, #5
 800235e:	701a      	strb	r2, [r3, #0]

			  // Send data packet
			  //state = STATE_SEND;
		  }

		  break;
 8002360:	e371      	b.n	8002a46 <main+0xa56>
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 8002362:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <main+0x550>)
 8002364:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002368:	60bb      	str	r3, [r7, #8]
			  EEPROM_Write_Data(FLASH_EEPROM_BASE, &temp_data, 1);
 800236a:	f107 0308 	add.w	r3, r7, #8
 800236e:	2201      	movs	r2, #1
 8002370:	4619      	mov	r1, r3
 8002372:	4872      	ldr	r0, [pc, #456]	@ (800253c <main+0x54c>)
 8002374:	f7ff fdac 	bl	8001ed0 <EEPROM_Write_Data>
			  state = STATE_GO_SLEEP;
 8002378:	4b72      	ldr	r3, [pc, #456]	@ (8002544 <main+0x554>)
 800237a:	2204      	movs	r2, #4
 800237c:	701a      	strb	r2, [r3, #0]
		  break;
 800237e:	e362      	b.n	8002a46 <main+0xa56>

	  ////////* DEVICE WAKEUP ROUTINE *////////
	  case STATE_RUN:

		  // Start all clocks
		  if (awake == 1)
 8002380:	4b71      	ldr	r3, [pc, #452]	@ (8002548 <main+0x558>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d135      	bne.n	80023f4 <main+0x404>
		  {
			  awake = 0;
 8002388:	4b6f      	ldr	r3, [pc, #444]	@ (8002548 <main+0x558>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 800238e:	f000 fb7f 	bl	8002a90 <SystemClock_Config>
			  HAL_ResumeTick();
 8002392:	f002 ffc9 	bl	8005328 <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002396:	4b6d      	ldr	r3, [pc, #436]	@ (800254c <main+0x55c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b6b      	ldr	r3, [pc, #428]	@ (800254c <main+0x55c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80023a6:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ac:	4867      	ldr	r0, [pc, #412]	@ (800254c <main+0x55c>)
 80023ae:	f008 fd25 	bl	800adfc <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Init(&htim2);
 80023b2:	4867      	ldr	r0, [pc, #412]	@ (8002550 <main+0x560>)
 80023b4:	f009 fc78 	bl	800bca8 <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Init(&htim3);
 80023b8:	4866      	ldr	r0, [pc, #408]	@ (8002554 <main+0x564>)
 80023ba:	f009 fc75 	bl	800bca8 <HAL_TIM_Base_Init>
			  HAL_NVIC_EnableIRQ(TIM2_IRQn); 	// Disable Timer 2 interrupt
 80023be:	201c      	movs	r0, #28
 80023c0:	f003 ff35 	bl	800622e <HAL_NVIC_EnableIRQ>
			  HAL_NVIC_EnableIRQ(TIM3_IRQn); 	// Disable Timer 3 interrupt
 80023c4:	201d      	movs	r0, #29
 80023c6:	f003 ff32 	bl	800622e <HAL_NVIC_EnableIRQ>

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2108      	movs	r1, #8
 80023ce:	4862      	ldr	r0, [pc, #392]	@ (8002558 <main+0x568>)
 80023d0:	f004 fd60 	bl	8006e94 <HAL_GPIO_WritePin>
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 80023d4:	4b61      	ldr	r3, [pc, #388]	@ (800255c <main+0x56c>)
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	2b17      	cmp	r3, #23
 80023dc:	d904      	bls.n	80023e8 <main+0x3f8>
 80023de:	2201      	movs	r2, #1
 80023e0:	2101      	movs	r1, #1
 80023e2:	485f      	ldr	r0, [pc, #380]	@ (8002560 <main+0x570>)
 80023e4:	f004 fd56 	bl	8006e94 <HAL_GPIO_WritePin>

			  HAL_ADC_Init(&hadc);
 80023e8:	485e      	ldr	r0, [pc, #376]	@ (8002564 <main+0x574>)
 80023ea:	f002 ffb9 	bl	8005360 <HAL_ADC_Init>
			  HAL_ADC_Start(&hadc);
 80023ee:	485d      	ldr	r0, [pc, #372]	@ (8002564 <main+0x574>)
 80023f0:	f003 f9d0 	bl	8005794 <HAL_ADC_Start>

		  }

		  if (measurements.ADC_read_cnt == 0)
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <main+0x56c>)
 80023f6:	78db      	ldrb	r3, [r3, #3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d134      	bne.n	8002466 <main+0x476>
		  {
			  /* BME280 */
			#ifndef SLEEP_MODE_STOP
			  status += BME280_Reset(&bme280, &hi2c2);
 80023fc:	495a      	ldr	r1, [pc, #360]	@ (8002568 <main+0x578>)
 80023fe:	485b      	ldr	r0, [pc, #364]	@ (800256c <main+0x57c>)
 8002400:	f7fe ff9a 	bl	8001338 <BME280_Reset>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800240c:	4413      	add	r3, r2
 800240e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  HAL_Delay(200);
 8002412:	20c8      	movs	r0, #200	@ 0xc8
 8002414:	f002 ff66 	bl	80052e4 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8002418:	4953      	ldr	r1, [pc, #332]	@ (8002568 <main+0x578>)
 800241a:	4854      	ldr	r0, [pc, #336]	@ (800256c <main+0x57c>)
 800241c:	f7fe ff6c 	bl	80012f8 <BME280_ReadDeviceID>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002428:	4413      	add	r3, r2
 800242a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 800242e:	494e      	ldr	r1, [pc, #312]	@ (8002568 <main+0x578>)
 8002430:	484e      	ldr	r0, [pc, #312]	@ (800256c <main+0x57c>)
 8002432:	f7ff f858 	bl	80014e6 <BME280_ReadCalibData>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800243e:	4413      	add	r3, r2
 8002440:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_Init(&bme280, &hi2c2);
 8002444:	4948      	ldr	r1, [pc, #288]	@ (8002568 <main+0x578>)
 8002446:	4849      	ldr	r0, [pc, #292]	@ (800256c <main+0x57c>)
 8002448:	f7fe ffd8 	bl	80013fc <BME280_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002454:	4413      	add	r3, r2
 8002456:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			#endif

			  HAL_TIM_Base_Start_IT(&htim2);
 800245a:	483d      	ldr	r0, [pc, #244]	@ (8002550 <main+0x560>)
 800245c:	f009 fc64 	bl	800bd28 <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002460:	483c      	ldr	r0, [pc, #240]	@ (8002554 <main+0x564>)
 8002462:	f009 fc61 	bl	800bd28 <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <main+0x56c>)
 8002468:	789b      	ldrb	r3, [r3, #2]
 800246a:	2b01      	cmp	r3, #1
 800246c:	f040 82ea 	bne.w	8002a44 <main+0xa54>
 8002470:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <main+0x56c>)
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 82e5 	bne.w	8002a44 <main+0xa54>
		  {
			  // Read analog values
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800247a:	4b38      	ldr	r3, [pc, #224]	@ (800255c <main+0x56c>)
 800247c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002480:	2b17      	cmp	r3, #23
 8002482:	d90b      	bls.n	800249c <main+0x4ac>
 8002484:	4b35      	ldr	r3, [pc, #212]	@ (800255c <main+0x56c>)
 8002486:	78db      	ldrb	r3, [r3, #3]
 8002488:	461c      	mov	r4, r3
 800248a:	4839      	ldr	r0, [pc, #228]	@ (8002570 <main+0x580>)
 800248c:	f000 fef0 	bl	8003270 <ADC_Read_Battery>
 8002490:	4602      	mov	r2, r0
 8002492:	4932      	ldr	r1, [pc, #200]	@ (800255c <main+0x56c>)
 8002494:	f104 030a 	add.w	r3, r4, #10
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 800249c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024a0:	4619      	mov	r1, r3
 80024a2:	4834      	ldr	r0, [pc, #208]	@ (8002574 <main+0x584>)
 80024a4:	f000 ffd2 	bl	800344c <ADC_Read_EHum>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <main+0x56c>)
 80024ae:	78db      	ldrb	r3, [r3, #3]
 80024b0:	461c      	mov	r4, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f7fe faf8 	bl	8000aa8 <__aeabi_ui2f>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4928      	ldr	r1, [pc, #160]	@ (800255c <main+0x56c>)
 80024bc:	1ca3      	adds	r3, r4, #2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <main+0x56c>)
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	3301      	adds	r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	4b23      	ldr	r3, [pc, #140]	@ (800255c <main+0x56c>)
 80024ce:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 80024d0:	4b22      	ldr	r3, [pc, #136]	@ (800255c <main+0x56c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 			// reset timer read flag
 80024d6:	4b21      	ldr	r3, [pc, #132]	@ (800255c <main+0x56c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 80024dc:	481c      	ldr	r0, [pc, #112]	@ (8002550 <main+0x560>)
 80024de:	f009 fc23 	bl	800bd28 <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <main+0x56c>)
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	f040 82ac 	bne.w	8002a44 <main+0xa54>
			  {
				  measurements.ADC_read_cnt = 0;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <main+0x56c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80024f2:	4817      	ldr	r0, [pc, #92]	@ (8002550 <main+0x560>)
 80024f4:	f009 fc6a 	bl	800bdcc <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2108      	movs	r1, #8
 80024fc:	4816      	ldr	r0, [pc, #88]	@ (8002558 <main+0x568>)
 80024fe:	f004 fcc9 	bl	8006e94 <HAL_GPIO_WritePin>
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 8002502:	4b16      	ldr	r3, [pc, #88]	@ (800255c <main+0x56c>)
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b17      	cmp	r3, #23
 800250a:	d904      	bls.n	8002516 <main+0x526>
 800250c:	2200      	movs	r2, #0
 800250e:	2101      	movs	r1, #1
 8002510:	4813      	ldr	r0, [pc, #76]	@ (8002560 <main+0x570>)
 8002512:	f004 fcbf 	bl	8006e94 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage //

				  // Reset values
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage = 0; // Between reads keep the same voltage
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <main+0x56c>)
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800251c:	2b17      	cmp	r3, #23
 800251e:	d903      	bls.n	8002528 <main+0x538>
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <main+0x56c>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <main+0x56c>)
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	621a      	str	r2, [r3, #32]

				  // Sum the measured values
				  for (int i = 0; i < 5; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002534:	e047      	b.n	80025c6 <main+0x5d6>
 8002536:	bf00      	nop
 8002538:	04030201 	.word	0x04030201
 800253c:	08080000 	.word	0x08080000
 8002540:	20000210 	.word	0x20000210
 8002544:	20000540 	.word	0x20000540
 8002548:	20000000 	.word	0x20000000
 800254c:	200003f0 	.word	0x200003f0
 8002550:	200004c0 	.word	0x200004c0
 8002554:	20000500 	.word	0x20000500
 8002558:	40020000 	.word	0x40020000
 800255c:	200001c0 	.word	0x200001c0
 8002560:	40020400 	.word	0x40020400
 8002564:	200002f4 	.word	0x200002f4
 8002568:	2000039c 	.word	0x2000039c
 800256c:	20000188 	.word	0x20000188
 8002570:	200001c4 	.word	0x200001c4
 8002574:	200001c8 	.word	0x200001c8
				  {
					  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage += measurements.bat_voltage[i];
 8002578:	4ba1      	ldr	r3, [pc, #644]	@ (8002800 <main+0x810>)
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800257e:	2b17      	cmp	r3, #23
 8002580:	d90e      	bls.n	80025a0 <main+0x5b0>
 8002582:	4b9f      	ldr	r3, [pc, #636]	@ (8002800 <main+0x810>)
 8002584:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002586:	499e      	ldr	r1, [pc, #632]	@ (8002800 <main+0x810>)
 8002588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258a:	330a      	adds	r3, #10
 800258c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe f9d8 	bl	8000948 <__addsf3>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	4b98      	ldr	r3, [pc, #608]	@ (8002800 <main+0x810>)
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 80025a0:	4b97      	ldr	r3, [pc, #604]	@ (8002800 <main+0x810>)
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	4996      	ldr	r1, [pc, #600]	@ (8002800 <main+0x810>)
 80025a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a8:	3302      	adds	r3, #2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f7fe f9c8 	bl	8000948 <__addsf3>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b90      	ldr	r3, [pc, #576]	@ (8002800 <main+0x810>)
 80025be:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 80025c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c2:	3301      	adds	r3, #1
 80025c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	ddd5      	ble.n	8002578 <main+0x588>
				  }

				  // Calculate average value
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage /= 5;
 80025cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002800 <main+0x810>)
 80025ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d2:	2b17      	cmp	r3, #23
 80025d4:	d909      	bls.n	80025ea <main+0x5fa>
 80025d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002800 <main+0x810>)
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	498a      	ldr	r1, [pc, #552]	@ (8002804 <main+0x814>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fb6f 	bl	8000cc0 <__aeabi_fdiv>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b86      	ldr	r3, [pc, #536]	@ (8002800 <main+0x810>)
 80025e8:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 80025ea:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <main+0x810>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4985      	ldr	r1, [pc, #532]	@ (8002804 <main+0x814>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fb65 	bl	8000cc0 <__aeabi_fdiv>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b81      	ldr	r3, [pc, #516]	@ (8002800 <main+0x810>)
 80025fc:	621a      	str	r2, [r3, #32]

				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_period_counter = 0; // Reset hour counter for battery measurement
 80025fe:	4b80      	ldr	r3, [pc, #512]	@ (8002800 <main+0x810>)
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002604:	2b17      	cmp	r3, #23
 8002606:	d903      	bls.n	8002610 <main+0x620>
 8002608:	4b7d      	ldr	r3, [pc, #500]	@ (8002800 <main+0x810>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 8002610:	2201      	movs	r2, #1
 8002612:	497d      	ldr	r1, [pc, #500]	@ (8002808 <main+0x818>)
 8002614:	487d      	ldr	r0, [pc, #500]	@ (800280c <main+0x81c>)
 8002616:	f7fe ff2f 	bl	8001478 <BME280_GoToFromSleep>
				  BME280_ReadAllData(&bme280, &hi2c2);
 800261a:	497b      	ldr	r1, [pc, #492]	@ (8002808 <main+0x818>)
 800261c:	487b      	ldr	r0, [pc, #492]	@ (800280c <main+0x81c>)
 800261e:	f7ff fb92 	bl	8001d46 <BME280_ReadAllData>
				  //BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep

				  // LoRa module
				#ifndef SLEEP_MODE_STOP
				  RFM95W_Struct_Init(&rfm95_handle);
 8002622:	487b      	ldr	r0, [pc, #492]	@ (8002810 <main+0x820>)
 8002624:	f000 fe5a 	bl	80032dc <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status += 10; // Increase error counter for 10 to detect LoRa error (data can't be send)
 8002628:	4879      	ldr	r0, [pc, #484]	@ (8002810 <main+0x820>)
 800262a:	f001 f989 	bl	8003940 <rfm95_init>
 800262e:	4603      	mov	r3, r0
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <main+0x654>
 800263a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800263e:	330a      	adds	r3, #10
 8002640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); 		// Clear EXTI1 NVIC pending flag
 8002644:	2007      	movs	r0, #7
 8002646:	f7ff fcb5 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); 		// Clear EXTI3 NVIC pending
 800264a:	2009      	movs	r0, #9
 800264c:	f7ff fcb2 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); 	// Clear EXTI15_10 NVIC pending flag
 8002650:	2028      	movs	r0, #40	@ 0x28
 8002652:	f7ff fcaf 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  __HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 8002656:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <main+0x824>)
 8002658:	2208      	movs	r2, #8
 800265a:	615a      	str	r2, [r3, #20]
				  __HAL_GPIO_EXTI_CLEAR_IT(DIO5_Pin);
 800265c:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <main+0x824>)
 800265e:	2202      	movs	r2, #2
 8002660:	615a      	str	r2, [r3, #20]
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002662:	2009      	movs	r0, #9
 8002664:	f003 fde3 	bl	800622e <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002668:	2007      	movs	r0, #7
 800266a:	f003 fde0 	bl	800622e <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX
				#endif

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < VBAT_CRYTHICAL) status++; // TODO Vbat NEED TO BE SET
 800266e:	4b64      	ldr	r3, [pc, #400]	@ (8002800 <main+0x810>)
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe f812 	bl	800069c <__aeabi_f2d>
 8002678:	a35f      	add	r3, pc, #380	@ (adr r3, 80027f8 <main+0x808>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe f8c5 	bl	800080c <__aeabi_dcmplt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <main+0x6a2>
 8002688:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800268c:	3301      	adds	r3, #1
 800268e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  lora_data.errSendCnt += status;
 8002692:	4b61      	ldr	r3, [pc, #388]	@ (8002818 <main+0x828>)
 8002694:	785a      	ldrb	r2, [r3, #1]
 8002696:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800269a:	4413      	add	r3, r2
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b5e      	ldr	r3, [pc, #376]	@ (8002818 <main+0x828>)
 80026a0:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 80026a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d803      	bhi.n	80026b2 <main+0x6c2>
				  {
					  state = STATE_SEND;
 80026aa:	4b5c      	ldr	r3, [pc, #368]	@ (800281c <main+0x82c>)
 80026ac:	2203      	movs	r2, #3
 80026ae:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 80026b0:	e1c8      	b.n	8002a44 <main+0xa54>
					  state = STATE_ERROR;
 80026b2:	4b5a      	ldr	r3, [pc, #360]	@ (800281c <main+0x82c>)
 80026b4:	2205      	movs	r2, #5
 80026b6:	701a      	strb	r2, [r3, #0]
		  break;
 80026b8:	e1c4      	b.n	8002a44 <main+0xa54>

	  ////////* SEND DATA *////////
	  case STATE_SEND:

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 80026ba:	4b57      	ldr	r3, [pc, #348]	@ (8002818 <main+0x828>)
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <main+0x6d8>
 80026c2:	4b55      	ldr	r3, [pc, #340]	@ (8002818 <main+0x828>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t)(measurements.battery_voltage * 10);		// Battery voltage [3.5V -> 35V, no float]
 80026c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <main+0x810>)
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	4954      	ldr	r1, [pc, #336]	@ (8002820 <main+0x830>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fa42 	bl	8000b58 <__aeabi_fmul>
 80026d4:	4603      	mov	r3, r0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fc04 	bl	8000ee4 <__aeabi_f2uiz>
 80026dc:	4603      	mov	r3, r0
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002818 <main+0x828>)
 80026e2:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int32_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 80026e4:	4b49      	ldr	r3, [pc, #292]	@ (800280c <main+0x81c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002818 <main+0x828>)
 80026ec:	809a      	strh	r2, [r3, #4]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in perscents [0-100%]
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <main+0x81c>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <main+0x828>)
 80026f6:	719a      	strb	r2, [r3, #6]
		  lora_data.air_pressure = (uint32_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_ts]
 80026f8:	4b44      	ldr	r3, [pc, #272]	@ (800280c <main+0x81c>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fbf1 	bl	8000ee4 <__aeabi_f2uiz>
 8002702:	4603      	mov	r3, r0
 8002704:	4a44      	ldr	r2, [pc, #272]	@ (8002818 <main+0x828>)
 8002706:	6093      	str	r3, [r2, #8]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 8002708:	4b3d      	ldr	r3, [pc, #244]	@ (8002800 <main+0x810>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fbe9 	bl	8000ee4 <__aeabi_f2uiz>
 8002712:	4603      	mov	r3, r0
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b40      	ldr	r3, [pc, #256]	@ (8002818 <main+0x828>)
 8002718:	731a      	strb	r2, [r3, #12]

		  // Data packet that will be send (modify if needed)
		  uint8_t data_packet[14];

		  data_packet[0] = DEVICE_ID;                              // Device ID number
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3020 	strb.w	r3, [r7, #32]
		  data_packet[1] = lora_data.error;                        // Error flag
 8002720:	4b3d      	ldr	r3, [pc, #244]	@ (8002818 <main+0x828>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		  data_packet[2] = lora_data.errSendCnt;                   // No. of errors
 8002728:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <main+0x828>)
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		  data_packet[3] = lora_data.battery;                      // battery voltage
 8002730:	4b39      	ldr	r3, [pc, #228]	@ (8002818 <main+0x828>)
 8002732:	789b      	ldrb	r3, [r3, #2]
 8002734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		  // Encode air_temperature (int32_t -> 4 bytes)
		  data_packet[4] = (uint8_t)(lora_data.air_temperature & 0xFF);
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <main+0x828>)
 800273a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		  data_packet[5] = (uint8_t)((lora_data.air_temperature >> 8) & 0xFF);
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <main+0x828>)
 8002746:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800274a:	121b      	asrs	r3, r3, #8
 800274c:	b21b      	sxth	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		  data_packet[6] = (uint8_t)((lora_data.air_temperature >> 16) & 0xFF);
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <main+0x828>)
 8002756:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800275a:	141b      	asrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		  data_packet[7] = (uint8_t)((lora_data.air_temperature >> 24) & 0xFF);
 8002762:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <main+0x828>)
 8002764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002768:	161b      	asrs	r3, r3, #24
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  // Encode air_humidity
		  data_packet[8] = lora_data.air_humidity;
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <main+0x828>)
 8002772:	799b      	ldrb	r3, [r3, #6]
 8002774:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		  // Encode air_pressure (uint32_t -> 4 bytes)
		  data_packet[9] = (uint8_t)(lora_data.air_pressure & 0xFF);
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <main+0x828>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		  data_packet[10] = (uint8_t)((lora_data.air_pressure >> 8) & 0xFF);
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <main+0x828>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		  data_packet[11] = (uint8_t)((lora_data.air_pressure >> 16) & 0xFF);
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <main+0x828>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  data_packet[12] = (uint8_t)((lora_data.air_pressure >> 24) & 0xFF);
 800279a:	4b1f      	ldr	r3, [pc, #124]	@ (8002818 <main+0x828>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0e1b      	lsrs	r3, r3, #24
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

		  // Encode earth_humidity
		  data_packet[13] = lora_data.earth_humudity;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <main+0x828>)
 80027a8:	7b1b      	ldrb	r3, [r3, #12]
 80027aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		  // Read number of TX packets from flash
		#ifdef USE_EEPROM
		  EEPROM_Read_Data(FLASH_EEPROM_BASE, &tx_count, 1);
 80027ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027b2:	2201      	movs	r2, #1
 80027b4:	4619      	mov	r1, r3
 80027b6:	481b      	ldr	r0, [pc, #108]	@ (8002824 <main+0x834>)
 80027b8:	f7ff fbd8 	bl	8001f6c <EEPROM_Read_Data>
		#else
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
		#endif

		  rfm95_handle.config.tx_frame_count = tx_count;
 80027bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <main+0x820>)
 80027c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  status = rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet));
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	220e      	movs	r2, #14
 80027cc:	4619      	mov	r1, r3
 80027ce:	4810      	ldr	r0, [pc, #64]	@ (8002810 <main+0x820>)
 80027d0:	f002 f8b9 	bl	8004946 <rfm95_send_receive_cycle>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		  if (!status) // test_data_packet
 80027da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d122      	bne.n	8002828 <main+0x838>
		  {
			  lora_data.errSendCnt++; // Not used
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <main+0x828>)
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <main+0x828>)
 80027ec:	705a      	strb	r2, [r3, #1]
			  state = STATE_GO_SLEEP;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <main+0x82c>)
 80027f0:	2204      	movs	r2, #4
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	e02c      	b.n	8002850 <main+0x860>
 80027f6:	bf00      	nop
 80027f8:	33333333 	.word	0x33333333
 80027fc:	40033333 	.word	0x40033333
 8002800:	200001c0 	.word	0x200001c0
 8002804:	40a00000 	.word	0x40a00000
 8002808:	2000039c 	.word	0x2000039c
 800280c:	20000188 	.word	0x20000188
 8002810:	20000210 	.word	0x20000210
 8002814:	40010400 	.word	0x40010400
 8002818:	20000200 	.word	0x20000200
 800281c:	20000540 	.word	0x20000540
 8002820:	41200000 	.word	0x41200000
 8002824:	08080000 	.word	0x08080000
		  }
		  else
		  {

			  // Write number of TX packets to flash
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 8002828:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <main+0xa5c>)
 800282a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800282e:	607b      	str	r3, [r7, #4]

			#ifdef USE_EEPROM
			  EEPROM_Write_Data(FLASH_EEPROM_BASE, &temp_data, 1);	// Write to eeprom
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2201      	movs	r2, #1
 8002834:	4619      	mov	r1, r3
 8002836:	4886      	ldr	r0, [pc, #536]	@ (8002a50 <main+0xa60>)
 8002838:	f7ff fb4a 	bl	8001ed0 <EEPROM_Write_Data>
			#else
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); // 1 = one word
			#endif

			  EEPROM_Read_Data(FLASH_EEPROM_BASE, &tx_count, 1);
 800283c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002840:	2201      	movs	r2, #1
 8002842:	4619      	mov	r1, r3
 8002844:	4882      	ldr	r0, [pc, #520]	@ (8002a50 <main+0xa60>)
 8002846:	f7ff fb91 	bl	8001f6c <EEPROM_Read_Data>
			  state = STATE_GO_SLEEP;
 800284a:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <main+0xa64>)
 800284c:	2204      	movs	r2, #4
 800284e:	701a      	strb	r2, [r3, #0]
		  }



		  // Reset error counter
		  status = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		  lora_data.errSendCnt = 0;
 8002856:	4b80      	ldr	r3, [pc, #512]	@ (8002a58 <main+0xa68>)
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]

		  break;
 800285c:	e0f3      	b.n	8002a46 <main+0xa56>


	  ////////* PUT DEVICE TO SLEEP *////////
	  case STATE_GO_SLEEP:

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800285e:	2200      	movs	r2, #0
 8002860:	497e      	ldr	r1, [pc, #504]	@ (8002a5c <main+0xa6c>)
 8002862:	487f      	ldr	r0, [pc, #508]	@ (8002a60 <main+0xa70>)
 8002864:	f008 f873 	bl	800a94e <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002868:	2200      	movs	r2, #0
 800286a:	497e      	ldr	r1, [pc, #504]	@ (8002a64 <main+0xa74>)
 800286c:	487c      	ldr	r0, [pc, #496]	@ (8002a60 <main+0xa70>)
 800286e:	f008 f944 	bl	800aafa <HAL_RTC_GetDate>

		  // Based on defines select sleep period
		#ifdef SLEEP_PERIOD_TEST
		  time.Seconds += 10;
 8002872:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <main+0xa6c>)
 8002874:	789b      	ldrb	r3, [r3, #2]
 8002876:	330a      	adds	r3, #10
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <main+0xa6c>)
 800287c:	709a      	strb	r2, [r3, #2]
		#ifdef SLEEP_PERIOD_CUSTOM
		  time.Minutes += SLEEP_PERIOD_CUSTOM;
		#endif


		  if(time.Seconds >= 60)
 800287e:	4b77      	ldr	r3, [pc, #476]	@ (8002a5c <main+0xa6c>)
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	2b3b      	cmp	r3, #59	@ 0x3b
 8002884:	d908      	bls.n	8002898 <main+0x8a8>
		  {
			  time.Minutes ++;
 8002886:	4b75      	ldr	r3, [pc, #468]	@ (8002a5c <main+0xa6c>)
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <main+0xa6c>)
 8002890:	705a      	strb	r2, [r3, #1]
			  time.Seconds = 0;
 8002892:	4b72      	ldr	r3, [pc, #456]	@ (8002a5c <main+0xa6c>)
 8002894:	2200      	movs	r2, #0
 8002896:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 8002898:	4b70      	ldr	r3, [pc, #448]	@ (8002a5c <main+0xa6c>)
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b3b      	cmp	r3, #59	@ 0x3b
 800289e:	d908      	bls.n	80028b2 <main+0x8c2>
		  {
			  time.Hours++;
 80028a0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a5c <main+0xa6c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a5c <main+0xa6c>)
 80028aa:	701a      	strb	r2, [r3, #0]
			  time.Minutes = 0;
 80028ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002a5c <main+0xa6c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 80028b2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a5c <main+0xa6c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b17      	cmp	r3, #23
 80028b8:	d902      	bls.n	80028c0 <main+0x8d0>
		  {
			  time.Hours = 0;
 80028ba:	4b68      	ldr	r3, [pc, #416]	@ (8002a5c <main+0xa6c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm 					= RTC_ALARM_A;
 80028c0:	4b69      	ldr	r3, [pc, #420]	@ (8002a68 <main+0xa78>)
 80028c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028c6:	619a      	str	r2, [r3, #24]
		  sAlarm.AlarmTime.Hours 		= time.Hours;
 80028c8:	4b64      	ldr	r3, [pc, #400]	@ (8002a5c <main+0xa6c>)
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	4b66      	ldr	r3, [pc, #408]	@ (8002a68 <main+0xa78>)
 80028ce:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes 		= time.Minutes;
 80028d0:	4b62      	ldr	r3, [pc, #392]	@ (8002a5c <main+0xa6c>)
 80028d2:	785a      	ldrb	r2, [r3, #1]
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <main+0xa78>)
 80028d6:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds 		= time.Seconds;
 80028d8:	4b60      	ldr	r3, [pc, #384]	@ (8002a5c <main+0xa6c>)
 80028da:	789a      	ldrb	r2, [r3, #2]
 80028dc:	4b62      	ldr	r3, [pc, #392]	@ (8002a68 <main+0xa78>)
 80028de:	709a      	strb	r2, [r3, #2]
		  sAlarm.AlarmMask            	= RTC_ALARMMASK_DATEWEEKDAY; /* ignore date   */
 80028e0:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <main+0xa78>)
 80028e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028e6:	60da      	str	r2, [r3, #12]
		  sAlarm.AlarmDateWeekDaySel  	= RTC_ALARMDATEWEEKDAYSEL_DATE;
 80028e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a68 <main+0xa78>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
		  sAlarm.AlarmDateWeekDay     	= 1;                           /* don’t care   */
 80028ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002a68 <main+0xa78>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	751a      	strb	r2, [r3, #20]
		  sAlarm.Alarm                	= RTC_ALARM_A;
 80028f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a68 <main+0xa78>)
 80028f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028fa:	619a      	str	r2, [r3, #24]

		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80028fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002900:	4857      	ldr	r0, [pc, #348]	@ (8002a60 <main+0xa70>)
 8002902:	f008 fa7b 	bl	800adfc <HAL_RTC_DeactivateAlarm>

		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002906:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <main+0xa7c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <main+0xa7c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6013      	str	r3, [r2, #0]
		  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002912:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <main+0xa70>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b51      	ldr	r3, [pc, #324]	@ (8002a60 <main+0xa70>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002922:	60da      	str	r2, [r3, #12]
		  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8002924:	2200      	movs	r2, #0
 8002926:	4950      	ldr	r1, [pc, #320]	@ (8002a68 <main+0xa78>)
 8002928:	484d      	ldr	r0, [pc, #308]	@ (8002a60 <main+0xa70>)
 800292a:	f008 f935 	bl	800ab98 <HAL_RTC_SetAlarm_IT>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <main+0x948>
 8002934:	f000 fdb2 	bl	800349c <Error_Handler>

		  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2100      	movs	r1, #0
 800293c:	2029      	movs	r0, #41	@ 0x29
 800293e:	f003 fc5a 	bl	80061f6 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002942:	2029      	movs	r0, #41	@ 0x29
 8002944:	f003 fc73 	bl	800622e <HAL_NVIC_EnableIRQ>


		  // Put devices and sensors to sleep
		  rfm95_goto_sleep(&rfm95_handle); // If the module is not in sleep mode (it should be)
 8002948:	4840      	ldr	r0, [pc, #256]	@ (8002a4c <main+0xa5c>)
 800294a:	f001 f941 	bl	8003bd0 <rfm95_goto_sleep>
		  BME280_GoToFromSleep(&bme280, &hi2c2, 0); // If the sensor is not in sleep mode (it should be)
 800294e:	2200      	movs	r2, #0
 8002950:	4947      	ldr	r1, [pc, #284]	@ (8002a70 <main+0xa80>)
 8002952:	4848      	ldr	r0, [pc, #288]	@ (8002a74 <main+0xa84>)
 8002954:	f7fe fd90 	bl	8001478 <BME280_GoToFromSleep>

		  // Disable power to humidity probe and to voltage divider for battery measurement
		  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002958:	2200      	movs	r2, #0
 800295a:	2108      	movs	r1, #8
 800295c:	4846      	ldr	r0, [pc, #280]	@ (8002a78 <main+0xa88>)
 800295e:	f004 fa99 	bl	8006e94 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 8002962:	2201      	movs	r2, #1
 8002964:	2101      	movs	r1, #1
 8002966:	4845      	ldr	r0, [pc, #276]	@ (8002a7c <main+0xa8c>)
 8002968:	f004 fa94 	bl	8006e94 <HAL_GPIO_WritePin>

		  // Set SPI CS pins
		  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 800296c:	2201      	movs	r2, #1
 800296e:	2110      	movs	r1, #16
 8002970:	4841      	ldr	r0, [pc, #260]	@ (8002a78 <main+0xa88>)
 8002972:	f004 fa8f 	bl	8006e94 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800297c:	483f      	ldr	r0, [pc, #252]	@ (8002a7c <main+0xa8c>)
 800297e:	f004 fa89 	bl	8006e94 <HAL_GPIO_WritePin>

		  // Stop Timers if they running and disable their interrupts
		  HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer 2
 8002982:	483f      	ldr	r0, [pc, #252]	@ (8002a80 <main+0xa90>)
 8002984:	f009 fa22 	bl	800bdcc <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer 3
 8002988:	483e      	ldr	r0, [pc, #248]	@ (8002a84 <main+0xa94>)
 800298a:	f009 fa1f 	bl	800bdcc <HAL_TIM_Base_Stop_IT>
		  HAL_NVIC_DisableIRQ(TIM2_IRQn); // Disable Timer 2 interrupt
 800298e:	201c      	movs	r0, #28
 8002990:	f003 fc5b 	bl	800624a <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(TIM3_IRQn); // Disable Timer 3 interrupt
 8002994:	201d      	movs	r0, #29
 8002996:	f003 fc58 	bl	800624a <HAL_NVIC_DisableIRQ>

		  HAL_ADC_Stop(&hadc);
 800299a:	483b      	ldr	r0, [pc, #236]	@ (8002a88 <main+0xa98>)
 800299c:	f002 ff5a 	bl	8005854 <HAL_ADC_Stop>
		  HAL_ADC_DeInit(&hadc);
 80029a0:	4839      	ldr	r0, [pc, #228]	@ (8002a88 <main+0xa98>)
 80029a2:	f002 fe23 	bl	80055ec <HAL_ADC_DeInit>

		  // Disable IRQs from LoRa module
		  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80029a6:	2007      	movs	r0, #7
 80029a8:	f003 fc4f 	bl	800624a <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80029ac:	2009      	movs	r0, #9
 80029ae:	f003 fc4c 	bl	800624a <HAL_NVIC_DisableIRQ>
		  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80029b2:	2007      	movs	r0, #7
 80029b4:	f7ff fafe 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
		  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 80029b8:	2009      	movs	r0, #9
 80029ba:	f7ff fafb 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
		  __HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 80029be:	4b33      	ldr	r3, [pc, #204]	@ (8002a8c <main+0xa9c>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	615a      	str	r2, [r3, #20]
		  __HAL_GPIO_EXTI_CLEAR_IT(DIO5_Pin);
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <main+0xa9c>)
 80029c6:	2202      	movs	r2, #2
 80029c8:	615a      	str	r2, [r3, #20]

		  // Reconfigure to analog (or input with pull-down) for sleep
		  GPIO_InitTypeDef g = {0};
 80029ca:	f107 030c 	add.w	r3, r7, #12
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	611a      	str	r2, [r3, #16]
		  g.Mode = GPIO_MODE_ANALOG;
 80029da:	2303      	movs	r3, #3
 80029dc:	613b      	str	r3, [r7, #16]
		  g.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
		  g.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
		  g.Pin = DIO0_Pin | DIO5_Pin;
 80029e6:	230a      	movs	r3, #10
 80029e8:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(GPIOB, &g);
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	4619      	mov	r1, r3
 80029f0:	4822      	ldr	r0, [pc, #136]	@ (8002a7c <main+0xa8c>)
 80029f2:	f003 ffef 	bl	80069d4 <HAL_GPIO_Init>
		  //HAL_I2C_DeInit(&hi2c1);
		  //HAL_I2C_DeInit(&hi2c2);
		  //HAL_UART_DeInit(&huart1);


		  HAL_PWREx_EnableUltraLowPower();   // ULP reduces STOP current
 80029f6:	f007 f806 	bl	8009a06 <HAL_PWREx_EnableUltraLowPower>
		  HAL_PWREx_DisableFastWakeUp();     // FWU increases STOP current
 80029fa:	f006 ffe9 	bl	80099d0 <HAL_PWREx_DisableFastWakeUp>
		  HAL_PWR_DisablePVD();              // PVD costs µA
 80029fe:	f006 ff98 	bl	8009932 <HAL_PWR_DisablePVD>
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8002a02:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a06:	f006 ffaf 	bl	8009968 <HAL_PWR_DisableWakeUpPin>
		#endif

		#ifndef SLEEP_MODE_STOP
//		  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);   // clear any pending alarm
//		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);                   // clear Wakeup flag
		  HAL_DBGMCU_DisableDBGStandbyMode();
 8002a0a:	f002 fc9b 	bl	8005344 <HAL_DBGMCU_DisableDBGStandbyMode>
		  HAL_PWR_EnterSTANDBYMode();
 8002a0e:	f006 ffc7 	bl	80099a0 <HAL_PWR_EnterSTANDBYMode>
		#endif

		  // Resume clock and ticks
		  SystemClock_Config();
 8002a12:	f000 f83d 	bl	8002a90 <SystemClock_Config>
		  HAL_ResumeTick();
 8002a16:	f002 fc87 	bl	8005328 <HAL_ResumeTick>

		  // Reset wake up flag
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a1e:	4810      	ldr	r0, [pc, #64]	@ (8002a60 <main+0xa70>)
 8002a20:	f008 f9ec 	bl	800adfc <HAL_RTC_DeactivateAlarm>
		  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <main+0xa70>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <main+0xa70>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002a34:	60da      	str	r2, [r3, #12]


		  break;
 8002a36:	e006      	b.n	8002a46 <main+0xa56>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 8002a38:	bf00      	nop
 8002a3a:	f7ff bafa 	b.w	8002032 <main+0x42>
		  break;
 8002a3e:	bf00      	nop
 8002a40:	f7ff baf7 	b.w	8002032 <main+0x42>
		  break;
 8002a44:	bf00      	nop
	  switch(state)
 8002a46:	f7ff baf4 	b.w	8002032 <main+0x42>
 8002a4a:	bf00      	nop
 8002a4c:	20000210 	.word	0x20000210
 8002a50:	08080000 	.word	0x08080000
 8002a54:	20000540 	.word	0x20000540
 8002a58:	20000200 	.word	0x20000200
 8002a5c:	200002c8 	.word	0x200002c8
 8002a60:	200003f0 	.word	0x200003f0
 8002a64:	200002d4 	.word	0x200002d4
 8002a68:	200002d8 	.word	0x200002d8
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	2000039c 	.word	0x2000039c
 8002a74:	20000188 	.word	0x20000188
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	200004c0 	.word	0x200004c0
 8002a84:	20000500 	.word	0x20000500
 8002a88:	200002f4 	.word	0x200002f4
 8002a8c:	40010400 	.word	0x40010400

08002a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b094      	sub	sp, #80	@ 0x50
 8002a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	2234      	movs	r2, #52	@ 0x34
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f00a fb89 	bl	800d1b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <SystemClock_Config+0xc8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002ac4:	4a24      	ldr	r2, [pc, #144]	@ (8002b58 <SystemClock_Config+0xc8>)
 8002ac6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002aca:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002acc:	2307      	movs	r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002adc:	2310      	movs	r3, #16
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002aea:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002af0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af6:	f107 031c 	add.w	r3, r7, #28
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 ff9e 	bl	8009a3c <HAL_RCC_OscConfig>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002b06:	f000 fcc9 	bl	800349c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0a:	230f      	movs	r3, #15
 8002b0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f007 fab9 	bl	800a09c <HAL_RCC_ClockConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002b30:	f000 fcb4 	bl	800349c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b34:	2301      	movs	r3, #1
 8002b36:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b3c:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4618      	mov	r0, r3
 8002b42:	f007 fd1b 	bl	800a57c <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b4c:	f000 fca6 	bl	800349c <Error_Handler>
  }
}
 8002b50:	bf00      	nop
 8002b52:	3750      	adds	r7, #80	@ 0x50
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40007000 	.word	0x40007000

08002b5c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b6e:	4a26      	ldr	r2, [pc, #152]	@ (8002c08 <MX_ADC_Init+0xac>)
 8002b70:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b72:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002b78:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8002baa:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bba:	2210      	movs	r2, #16
 8002bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002bcc:	480d      	ldr	r0, [pc, #52]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bce:	f002 fbc7 	bl	8005360 <HAL_ADC_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002bd8:	f000 fc60 	bl	800349c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <MX_ADC_Init+0xa8>)
 8002bee:	f003 f811 	bl	8005c14 <HAL_ADC_ConfigChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002bf8:	f000 fc50 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200002f4 	.word	0x200002f4
 8002c08:	40012400 	.word	0x40012400

08002c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c10:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c12:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <MX_I2C1_Init+0x54>)
 8002c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <MX_I2C1_Init+0x58>)
 8002c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c48:	4804      	ldr	r0, [pc, #16]	@ (8002c5c <MX_I2C1_Init+0x50>)
 8002c4a:	f004 f953 	bl	8006ef4 <HAL_I2C_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c54:	f000 fc22 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000348 	.word	0x20000348
 8002c60:	40005400 	.word	0x40005400
 8002c64:	000186a0 	.word	0x000186a0

08002c68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <MX_I2C2_Init+0x54>)
 8002c70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c74:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <MX_I2C2_Init+0x58>)
 8002c76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ca4:	4804      	ldr	r0, [pc, #16]	@ (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca6:	f004 f925 	bl	8006ef4 <HAL_I2C_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002cb0:	f000 fbf4 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000039c 	.word	0x2000039c
 8002cbc:	40005800 	.word	0x40005800
 8002cc0:	000186a0 	.word	0x000186a0

08002cc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	@ 0x30
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
 8002ce8:	615a      	str	r2, [r3, #20]
 8002cea:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cec:	4b37      	ldr	r3, [pc, #220]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002cee:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <MX_RTC_Init+0x10c>)
 8002cf0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002cfa:	227f      	movs	r2, #127	@ 0x7f
 8002cfc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002cfe:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d04:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d10:	4b2e      	ldr	r3, [pc, #184]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d16:	482d      	ldr	r0, [pc, #180]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d18:	f007 fcfe 	bl	800a718 <HAL_RTC_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8002d22:	f000 fbbb 	bl	800349c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d44:	2200      	movs	r2, #0
 8002d46:	4619      	mov	r1, r3
 8002d48:	4820      	ldr	r0, [pc, #128]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d4a:	f007 fd66 	bl	800a81a <HAL_RTC_SetTime>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002d54:	f000 fba2 	bl	800349c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d70:	f107 0320 	add.w	r3, r7, #32
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4814      	ldr	r0, [pc, #80]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002d7a:	f007 fe3a 	bl	800a9f2 <HAL_RTC_SetDate>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002d84:	f000 fb8a 	bl	800349c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8002da4:	2301      	movs	r3, #1
 8002da6:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8002da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dac:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	2200      	movs	r2, #0
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	@ (8002dcc <MX_RTC_Init+0x108>)
 8002db6:	f007 feef 	bl	800ab98 <HAL_RTC_SetAlarm_IT>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8002dc0:	f000 fb6c 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	3730      	adds	r7, #48	@ 0x30
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200003f0 	.word	0x200003f0
 8002dd0:	40002800 	.word	0x40002800

08002dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002dda:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <MX_SPI1_Init+0x64>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002de0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e1e:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <MX_SPI1_Init+0x60>)
 8002e20:	f008 f97d 	bl	800b11e <HAL_SPI_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8002e2a:	f000 fb37 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000410 	.word	0x20000410
 8002e38:	40013000 	.word	0x40013000

08002e3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e40:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e42:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <MX_SPI2_Init+0x64>)
 8002e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e66:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e82:	220a      	movs	r2, #10
 8002e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e86:	4805      	ldr	r0, [pc, #20]	@ (8002e9c <MX_SPI2_Init+0x60>)
 8002e88:	f008 f949 	bl	800b11e <HAL_SPI_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8002e92:	f000 fb03 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000468 	.word	0x20000468
 8002ea0:	40003800 	.word	0x40003800

08002ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002ec2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ec6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002eca:	223f      	movs	r2, #63	@ 0x3f
 8002ecc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002ed6:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002eda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002edc:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ee8:	4813      	ldr	r0, [pc, #76]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002eea:	f008 fedd 	bl	800bca8 <HAL_TIM_Base_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ef4:	f000 fad2 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	4619      	mov	r1, r3
 8002f04:	480c      	ldr	r0, [pc, #48]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002f06:	f009 f853 	bl	800bfb0 <HAL_TIM_ConfigClockSource>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f10:	f000 fac4 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	@ (8002f38 <MX_TIM2_Init+0x94>)
 8002f22:	f009 fa2f 	bl	800c384 <HAL_TIMEx_MasterConfigSynchronization>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f2c:	f000 fab6 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200004c0 	.word	0x200004c0

08002f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f50:	463b      	mov	r3, r7
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd4 <MX_TIM3_Init+0x98>)
 8002f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1983;
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f60:	f240 72bf 	movw	r2, #1983	@ 0x7bf
 8002f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64515;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f6e:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 8002f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f74:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f80:	4813      	ldr	r0, [pc, #76]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f82:	f008 fe91 	bl	800bca8 <HAL_TIM_Base_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f8c:	f000 fa86 	bl	800349c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f96:	f107 0308 	add.w	r3, r7, #8
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	480c      	ldr	r0, [pc, #48]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002f9e:	f009 f807 	bl	800bfb0 <HAL_TIM_ConfigClockSource>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002fa8:	f000 fa78 	bl	800349c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fac:	2300      	movs	r3, #0
 8002fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <MX_TIM3_Init+0x94>)
 8002fba:	f009 f9e3 	bl	800c384 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002fc4:	f000 fa6a 	bl	800349c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000500 	.word	0x20000500
 8002fd4:	40000400 	.word	0x40000400

08002fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fee:	4b65      	ldr	r3, [pc, #404]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a64      	ldr	r2, [pc, #400]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	61d3      	str	r3, [r2, #28]
 8002ffa:	4b62      	ldr	r3, [pc, #392]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003006:	4b5f      	ldr	r3, [pc, #380]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a5e      	ldr	r2, [pc, #376]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 800300c:	f043 0320 	orr.w	r3, r3, #32
 8003010:	61d3      	str	r3, [r2, #28]
 8003012:	4b5c      	ldr	r3, [pc, #368]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	4b59      	ldr	r3, [pc, #356]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	61d3      	str	r3, [r2, #28]
 800302a:	4b56      	ldr	r3, [pc, #344]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b53      	ldr	r3, [pc, #332]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4a52      	ldr	r2, [pc, #328]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	61d3      	str	r3, [r2, #28]
 8003042:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <MX_GPIO_Init+0x1ac>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOOST_EN_Pin|EHUM_PWR_Pin|RESET_Pin, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	f240 1109 	movw	r1, #265	@ 0x109
 8003054:	484c      	ldr	r0, [pc, #304]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 8003056:	f003 ff1d 	bl	8006e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 800305a:	2201      	movs	r2, #1
 800305c:	2110      	movs	r1, #16
 800305e:	484a      	ldr	r0, [pc, #296]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 8003060:	f003 ff18 	bl	8006e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_VBAT_EN_Pin|SPI2_NSS_Pin, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	f241 0101 	movw	r1, #4097	@ 0x1001
 800306a:	4848      	ldr	r0, [pc, #288]	@ (800318c <MX_GPIO_Init+0x1b4>)
 800306c:	f003 ff12 	bl	8006e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOST_EN_Pin EHUM_PWR_Pin SPI1_CS_EX_Pin RESET_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin|EHUM_PWR_Pin|SPI1_CS_EX_Pin|RESET_Pin;
 8003070:	f240 1319 	movw	r3, #281	@ 0x119
 8003074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	483f      	ldr	r0, [pc, #252]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 800308a:	f003 fca3 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_VBAT_EN_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = D_VBAT_EN_Pin|SPI2_NSS_Pin;
 800308e:	f241 0301 	movw	r3, #4097	@ 0x1001
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4619      	mov	r1, r3
 80030a6:	4839      	ldr	r0, [pc, #228]	@ (800318c <MX_GPIO_Init+0x1b4>)
 80030a8:	f003 fc94 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin;
 80030ac:	230a      	movs	r3, #10
 80030ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	4832      	ldr	r0, [pc, #200]	@ (800318c <MX_GPIO_Init+0x1b4>)
 80030c2:	f003 fc87 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED1_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = UNUSED1_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80030c6:	f44f 7341 	mov.w	r3, #772	@ 0x304
 80030ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030cc:	2303      	movs	r3, #3
 80030ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	482c      	ldr	r0, [pc, #176]	@ (800318c <MX_GPIO_Init+0x1b4>)
 80030dc:	f003 fc7a 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80030e0:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e6:	2303      	movs	r3, #3
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4824      	ldr	r0, [pc, #144]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 80030f6:	f003 fc6d 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 80030fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	481e      	ldr	r0, [pc, #120]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 8003110:	f003 fc60 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8003114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800311a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800311e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	4817      	ldr	r0, [pc, #92]	@ (8003188 <MX_GPIO_Init+0x1b0>)
 800312c:	f003 fc52 	bl	80069d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 8003130:	2330      	movs	r3, #48	@ 0x30
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	4812      	ldr	r0, [pc, #72]	@ (800318c <MX_GPIO_Init+0x1b4>)
 8003144:	f003 fc46 	bl	80069d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2101      	movs	r1, #1
 800314c:	2007      	movs	r0, #7
 800314e:	f003 f852 	bl	80061f6 <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2101      	movs	r1, #1
 8003156:	2009      	movs	r0, #9
 8003158:	f003 f84d 	bl	80061f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  // ^^^^^^^^ COMMENT ALL IRQ ENABLE WRITEN BY IDE ^^^^^^^^
  // Manual setup IRQs - interrupt signal already at startup
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2101      	movs	r1, #1
 8003160:	2007      	movs	r0, #7
 8003162:	f003 f848 	bl	80061f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1); // 1,0
 8003166:	2201      	movs	r2, #1
 8003168:	2101      	movs	r1, #1
 800316a:	2009      	movs	r0, #9
 800316c:	f003 f843 	bl	80061f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8003170:	2009      	movs	r0, #9
 8003172:	f003 f86a 	bl	800624a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8003176:	2007      	movs	r0, #7
 8003178:	f003 f867 	bl	800624a <HAL_NVIC_DisableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400

08003190 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Wake up interrupt - STOP mode //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	awake = 1;
 8003198:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HAL_RTC_AlarmAEventCallback+0x28>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <HAL_RTC_AlarmAEventCallback+0x2c>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_RTC_AlarmAEventCallback+0x1c>
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RTC_AlarmAEventCallback+0x2c>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000540 	.word	0x20000540

080031c0 <HAL_TIM_PeriodElapsedCallback>:
}


// TIMER Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d0:	d10c      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (measurements.ADC_read == 0)
 80031d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80031da:	480e      	ldr	r0, [pc, #56]	@ (8003214 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80031dc:	f008 fdf6 	bl	800bdcc <HAL_TIM_Base_Stop_IT>
			HAL_ADC_Start_IT(&hadc);
 80031e0:	480d      	ldr	r0, [pc, #52]	@ (8003218 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80031e2:	f002 fb63 	bl	80058ac <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 80031e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	705a      	strb	r2, [r3, #1]
		}
	}

	if (htim->Instance == TIM3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM2 overflows
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80031fe:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003200:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8003202:	4808      	ldr	r0, [pc, #32]	@ (8003224 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003204:	f008 fd90 	bl	800bd28 <HAL_TIM_Base_Start_IT>
	}
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200001c0 	.word	0x200001c0
 8003214:	200004c0 	.word	0x200004c0
 8003218:	200002f4 	.word	0x200002f4
 800321c:	40000400 	.word	0x40000400
 8003220:	20000544 	.word	0x20000544
 8003224:	20000500 	.word	0x20000500

08003228 <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0c      	ldr	r2, [pc, #48]	@ (8003268 <HAL_ADC_ConvCpltCallback+0x40>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d111      	bne.n	800325e <HAL_ADC_ConvCpltCallback+0x36>
    {
    	measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f002 fbd4 	bl	80059e8 <HAL_ADC_GetValue>
 8003240:	4603      	mov	r3, r0
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <HAL_ADC_ConvCpltCallback+0x44>)
 8003244:	6053      	str	r3, [r2, #4]
    	measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f002 fbce 	bl	80059e8 <HAL_ADC_GetValue>
 800324c:	4603      	mov	r3, r0
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_ADC_ConvCpltCallback+0x44>)
 8003250:	6093      	str	r3, [r2, #8]
    	HAL_ADC_Stop_IT(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f002 fb94 	bl	8005980 <HAL_ADC_Stop_IT>
    	measurements.ADC_read_end = 1;
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <HAL_ADC_ConvCpltCallback+0x44>)
 800325a:	2201      	movs	r2, #1
 800325c:	709a      	strb	r2, [r3, #2]
    }
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40012400 	.word	0x40012400
 800326c:	200001c0 	.word	0x200001c0

08003270 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
	// If LDO is used to power the board
#ifdef LDO_USE
	float Vout = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f9eb 	bl	8000658 <__aeabi_ui2d>
 8003282:	a311      	add	r3, pc, #68	@ (adr r3, 80032c8 <ADC_Read_Battery+0x58>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fc ff7a 	bl	8000180 <__aeabi_dmul>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	f7fd fb02 	bl	800089c <__aeabi_d2f>
 8003298:	4603      	mov	r3, r0
 800329a:	490d      	ldr	r1, [pc, #52]	@ (80032d0 <ADC_Read_Battery+0x60>)
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fd0f 	bl	8000cc0 <__aeabi_fdiv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	60fb      	str	r3, [r7, #12]
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
 80032a6:	490b      	ldr	r1, [pc, #44]	@ (80032d4 <ADC_Read_Battery+0x64>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7fd fd09 	bl	8000cc0 <__aeabi_fdiv>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4909      	ldr	r1, [pc, #36]	@ (80032d8 <ADC_Read_Battery+0x68>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fc50 	bl	8000b58 <__aeabi_fmul>
 80032b8:	4603      	mov	r3, r0
 80032ba:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 80032bc:	68bb      	ldr	r3, [r7, #8]
#ifndef LDO_USE
	float Vout = ((float)(*ADC_value * BAT_U)) / 4095;
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
	return (float) voltage;
#endif
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	cccccccd 	.word	0xcccccccd
 80032cc:	400ccccc 	.word	0x400ccccc
 80032d0:	457ff000 	.word	0x457ff000
 80032d4:	42c80000 	.word	0x42c80000
 80032d8:	43480000 	.word	0x43480000

080032dc <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 80032dc:	b4b0      	push	{r4, r5, r7}
 80032de:	b08d      	sub	sp, #52	@ 0x34
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a26      	ldr	r2, [pc, #152]	@ (8003380 <RFM95W_Struct_Init+0xa4>)
 80032e8:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a25      	ldr	r2, [pc, #148]	@ (8003384 <RFM95W_Struct_Init+0xa8>)
 80032ee:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032f6:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a23      	ldr	r2, [pc, #140]	@ (8003388 <RFM95W_Struct_Init+0xac>)
 80032fc:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003304:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003314:	63da      	str	r2, [r3, #60]	@ 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1a      	ldr	r2, [pc, #104]	@ (800338c <RFM95W_Struct_Init+0xb0>)
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a1a      	ldr	r2, [pc, #104]	@ (8003390 <RFM95W_Struct_Init+0xb4>)
 8003328:	64da      	str	r2, [r3, #76]	@ 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 800332a:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <RFM95W_Struct_Init+0xb8>)
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3312      	adds	r3, #18
 8003332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003334:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 8003336:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <RFM95W_Struct_Init+0xbc>)
 8003338:	f107 041c 	add.w	r4, r7, #28
 800333c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800333e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3326      	adds	r3, #38	@ 0x26
 8003346:	461d      	mov	r5, r3
 8003348:	f107 041c 	add.w	r4, r7, #28
 800334c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334e:	6028      	str	r0, [r5, #0]
 8003350:	6069      	str	r1, [r5, #4]
 8003352:	60aa      	str	r2, [r5, #8]
 8003354:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <RFM95W_Struct_Init+0xc0>)
 8003358:	f107 040c 	add.w	r4, r7, #12
 800335c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800335e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3316      	adds	r3, #22
 8003366:	461d      	mov	r5, r3
 8003368:	f107 040c 	add.w	r4, r7, #12
 800336c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336e:	6028      	str	r0, [r5, #0]
 8003370:	6069      	str	r1, [r5, #4]
 8003372:	60aa      	str	r2, [r5, #8]
 8003374:	60eb      	str	r3, [r5, #12]
}
 8003376:	bf00      	nop
 8003378:	3734      	adds	r7, #52	@ 0x34
 800337a:	46bd      	mov	sp, r7
 800337c:	bcb0      	pop	{r4, r5, r7}
 800337e:	4770      	bx	lr
 8003380:	20000468 	.word	0x20000468
 8003384:	40020400 	.word	0x40020400
 8003388:	40020000 	.word	0x40020000
 800338c:	0800341d 	.word	0x0800341d
 8003390:	080033f9 	.word	0x080033f9
 8003394:	e9780b26 	.word	0xe9780b26
 8003398:	0800dec0 	.word	0x0800dec0
 800339c:	0800ded0 	.word	0x0800ded0

080033a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	80fb      	strh	r3, [r7, #6]
	//__disable_irq();
    if (GPIO_Pin == DIO0_Pin) {
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d104      	bne.n	80033ba <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 80033b0:	2100      	movs	r1, #0
 80033b2:	480f      	ldr	r0, [pc, #60]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80033b4:	f001 fbb0 	bl	8004b18 <rfm95_on_interrupt>
 80033b8:	e013      	b.n	80033e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO1_Pin) {
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033c0:	d104      	bne.n	80033cc <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 80033c2:	2101      	movs	r1, #1
 80033c4:	480a      	ldr	r0, [pc, #40]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80033c6:	f001 fba7 	bl	8004b18 <rfm95_on_interrupt>
 80033ca:	e00a      	b.n	80033e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO5_Pin) {
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d104      	bne.n	80033dc <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 80033d2:	2102      	movs	r1, #2
 80033d4:	4806      	ldr	r0, [pc, #24]	@ (80033f0 <HAL_GPIO_EXTI_Callback+0x50>)
 80033d6:	f001 fb9f 	bl	8004b18 <rfm95_on_interrupt>
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_EXTI_Callback+0x42>
    } else {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear any unexpected interrupt
 80033dc:	4a05      	ldr	r2, [pc, #20]	@ (80033f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	6153      	str	r3, [r2, #20]
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the flag
 80033e2:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	6153      	str	r3, [r2, #20]
    //__enable_irq();
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000210 	.word	0x20000210
 80033f4:	40010400 	.word	0x40010400

080033f8 <random_int>:

static uint8_t random_int(uint8_t max)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 8003402:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <random_int+0x20>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2db      	uxtb	r3, r3
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	200001c0 	.word	0x200001c0

0800341c <get_precision_tick>:

static uint32_t get_precision_tick()
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003422:	b672      	cpsid	i
}
 8003424:	bf00      	nop
    __disable_irq(); 		// Disable interrupts to ensure atomic access to tick variables
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 8003426:	4b07      	ldr	r3, [pc, #28]	@ (8003444 <get_precision_tick+0x28>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <get_precision_tick+0x2c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003434:	b662      	cpsie	i
}
 8003436:	bf00      	nop
    __enable_irq(); 		// Re-enable interrupts
    return precision_tick;
 8003438:	687b      	ldr	r3, [r7, #4]
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000500 	.word	0x20000500
 8003448:	20000544 	.word	0x20000544

0800344c <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	uint8_t humidity = (uint8_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3bf0      	subs	r3, #240	@ 0xf0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f8fb 	bl	8000658 <__aeabi_ui2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd f9f7 	bl	800085c <__aeabi_d2uiz>
 800346e:	4603      	mov	r3, r0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fb1c 	bl	8000ab0 <__aeabi_i2f>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7fd fb69 	bl	8000b58 <__aeabi_fmul>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd fd2b 	bl	8000ee4 <__aeabi_f2uiz>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
	return humidity;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80034a0:	b672      	cpsid	i
}
 80034a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <Error_Handler+0x8>

080034a8 <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	460b      	mov	r3, r1
 80034b6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6858      	ldr	r0, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	891b      	ldrh	r3, [r3, #8]
 80034c0:	2200      	movs	r2, #0
 80034c2:	4619      	mov	r1, r3
 80034c4:	f003 fce6 	bl	8006e94 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f107 0117 	add.w	r1, r7, #23
 80034da:	2364      	movs	r3, #100	@ 0x64
 80034dc:	2201      	movs	r2, #1
 80034de:	f007 fe9a 	bl	800b216 <HAL_SPI_Transmit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <read_register+0x44>
		return false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e015      	b.n	8003518 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	2364      	movs	r3, #100	@ 0x64
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f007 ffd1 	bl	800b49e <HAL_SPI_Receive>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <read_register+0x5e>
		return false;
 8003502:	2300      	movs	r3, #0
 8003504:	e008      	b.n	8003518 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6858      	ldr	r0, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	891b      	ldrh	r3, [r3, #8]
 800350e:	2201      	movs	r2, #1
 8003510:	4619      	mov	r1, r3
 8003512:	f003 fcbf 	bl	8006e94 <HAL_GPIO_WritePin>

	return true;
 8003516:	2301      	movs	r3, #1

}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
 800352c:	4613      	mov	r3, r2
 800352e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6858      	ldr	r0, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	891b      	ldrh	r3, [r3, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	4619      	mov	r1, r3
 800353c:	f003 fcaa 	bl	8006e94 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003546:	b2db      	uxtb	r3, r3
 8003548:	733b      	strb	r3, [r7, #12]
 800354a:	78bb      	ldrb	r3, [r7, #2]
 800354c:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	f107 010c 	add.w	r1, r7, #12
 8003556:	2364      	movs	r3, #100	@ 0x64
 8003558:	2202      	movs	r2, #2
 800355a:	f007 fe5c 	bl	800b216 <HAL_SPI_Transmit>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <write_register+0x48>
		return false;
 8003564:	2300      	movs	r3, #0
 8003566:	e008      	b.n	800357a <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6858      	ldr	r0, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	891b      	ldrh	r3, [r3, #8]
 8003570:	2201      	movs	r2, #1
 8003572:	4619      	mov	r1, r3
 8003574:	f003 fc8e 	bl	8006e94 <HAL_GPIO_WritePin>

	return true;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	460b      	mov	r3, r1
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d905      	bls.n	80035a4 <config_set_channel+0x20>
 8003598:	4b0f      	ldr	r3, [pc, #60]	@ (80035d8 <config_set_channel+0x54>)
 800359a:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <config_set_channel+0x58>)
 800359c:	2175      	movs	r1, #117	@ 0x75
 800359e:	4810      	ldr	r0, [pc, #64]	@ (80035e0 <config_set_channel+0x5c>)
 80035a0:	f009 fcc4 	bl	800cf2c <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80035a4:	7afa      	ldrb	r2, [r7, #11]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	321a      	adds	r2, #26
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	7afb      	ldrb	r3, [r7, #11]
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	0800dee0 	.word	0x0800dee0
 80035dc:	0800e134 	.word	0x0800e134
 80035e0:	0800def4 	.word	0x0800def4

080035e4 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f64a 3267 	movw	r2, #43879	@ 0xab67
 80035f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	handle->config.tx_frame_count = 0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	handle->config.rx_frame_count = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	handle->config.rx1_delay = 1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	handle->config.channel_mask = 0;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	config_set_channel(handle, 0, 868100000);
 8003616:	4a09      	ldr	r2, [pc, #36]	@ (800363c <config_load_default+0x58>)
 8003618:	2100      	movs	r1, #0
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffb2 	bl	8003584 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8003620:	4a07      	ldr	r2, [pc, #28]	@ (8003640 <config_load_default+0x5c>)
 8003622:	2101      	movs	r1, #1
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ffad 	bl	8003584 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 800362a:	4a06      	ldr	r2, [pc, #24]	@ (8003644 <config_load_default+0x60>)
 800362c:	2102      	movs	r1, #2
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa8 	bl	8003584 <config_set_channel>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	33be27a0 	.word	0x33be27a0
 8003640:	33c134e0 	.word	0x33c134e0
 8003644:	33c44220 	.word	0x33c44220

08003648 <reset>:


static void reset(rfm95_handle_t *handle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68d8      	ldr	r0, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8a1b      	ldrh	r3, [r3, #16]
 8003658:	2200      	movs	r2, #0
 800365a:	4619      	mov	r1, r3
 800365c:	f003 fc1a 	bl	8006e94 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8003660:	2001      	movs	r0, #1
 8003662:	f001 fe3f 	bl	80052e4 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68d8      	ldr	r0, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8a1b      	ldrh	r3, [r3, #16]
 800366e:	2201      	movs	r2, #1
 8003670:	4619      	mov	r1, r3
 8003672:	f003 fc0f 	bl	8006e94 <HAL_GPIO_WritePin>
	HAL_Delay(20);//5
 8003676:	2014      	movs	r0, #20
 8003678:	f001 fe34 	bl	80052e4 <HAL_Delay>
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8003684:	b5b0      	push	{r4, r5, r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	2000      	movs	r0, #0
 8003692:	460a      	mov	r2, r1
 8003694:	4603      	mov	r3, r0
 8003696:	0b55      	lsrs	r5, r2, #13
 8003698:	04d4      	lsls	r4, r2, #19
 800369a:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <configure_frequency+0xb4>)
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	4620      	mov	r0, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	f7fd fc8e 	bl	8000fc4 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80036b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	0c02      	lsrs	r2, r0, #16
 80036be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036c2:	0c0b      	lsrs	r3, r1, #16
 80036c4:	b2d3      	uxtb	r3, r2
 80036c6:	461a      	mov	r2, r3
 80036c8:	2106      	movs	r1, #6
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff28 	bl	8003520 <write_register>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <configure_frequency+0x5c>
 80036dc:	2300      	movs	r3, #0
 80036de:	e026      	b.n	800372e <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80036e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	0a02      	lsrs	r2, r0, #8
 80036ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036f2:	0a0b      	lsrs	r3, r1, #8
 80036f4:	b2d3      	uxtb	r3, r2
 80036f6:	461a      	mov	r2, r3
 80036f8:	2107      	movs	r1, #7
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff10 	bl	8003520 <write_register>
 8003700:	4603      	mov	r3, r0
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <configure_frequency+0x8c>
 800370c:	2300      	movs	r3, #0
 800370e:	e00e      	b.n	800372e <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8003710:	7a3b      	ldrb	r3, [r7, #8]
 8003712:	461a      	mov	r2, r3
 8003714:	2108      	movs	r1, #8
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff02 	bl	8003520 <write_register>
 800371c:	4603      	mov	r3, r0
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <configure_frequency+0xa8>
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <configure_frequency+0xaa>

	return true;
 800372c:	2301      	movs	r3, #1
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bdb0      	pop	{r4, r5, r7, pc}
 8003736:	bf00      	nop
 8003738:	01e84800 	.word	0x01e84800

0800373c <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800374c:	461a      	mov	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	fa42 f303 	asr.w	r3, r2, r3
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <configure_channel+0x2c>
 800375c:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <configure_channel+0x48>)
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <configure_channel+0x4c>)
 8003760:	21a1      	movs	r1, #161	@ 0xa1
 8003762:	480a      	ldr	r0, [pc, #40]	@ (800378c <configure_channel+0x50>)
 8003764:	f009 fbe2 	bl	800cf2c <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	321a      	adds	r2, #26
 800376e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff85 	bl	8003684 <configure_frequency>
 800377a:	4603      	mov	r3, r0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	0800df08 	.word	0x0800df08
 8003788:	0800e148 	.word	0x0800e148
 800378c:	0800def4 	.word	0x0800def4

08003790 <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	460b      	mov	r3, r1
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	72fb      	strb	r3, [r7, #11]
	// Works with interrupt but it needs more testing for timeout
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	4798      	blx	r3
 80037a4:	4601      	mov	r1, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	4a0e      	ldr	r2, [pc, #56]	@ (80037ec <wait_for_irq+0x5c>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	440b      	add	r3, r1
 80037ba:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 80037bc:	e008      	b.n	80037d0 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4798      	blx	r3
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d801      	bhi.n	80037d0 <wait_for_irq+0x40>
			return false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e008      	b.n	80037e2 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	332a      	adds	r3, #42	@ 0x2a
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ee      	beq.n	80037be <wait_for_irq+0x2e>
		}
	}
	return true;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fc:	4798      	blx	r3
 80037fe:	4602      	mov	r2, r0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4912      	ldr	r1, [pc, #72]	@ (8003858 <wait_for_rx_irqs+0x68>)
 800380e:	fba1 1303 	umull	r1, r3, r1, r3
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8003818:	e008      	b.n	800382c <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	4798      	blx	r3
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4293      	cmp	r3, r2
 8003826:	d801      	bhi.n	800382c <wait_for_rx_irqs+0x3c>
			return false;
 8003828:	2300      	movs	r3, #0
 800382a:	e011      	b.n	8003850 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <wait_for_rx_irqs+0x50>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ec      	beq.n	800381a <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	10624dd3 	.word	0x10624dd3

0800385c <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8003868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386c:	2b01      	cmp	r3, #1
 800386e:	dd03      	ble.n	8003878 <rfm95_set_power+0x1c>
 8003870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003874:	2b11      	cmp	r3, #17
 8003876:	dd09      	ble.n	800388c <rfm95_set_power+0x30>
 8003878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800387c:	2b14      	cmp	r3, #20
 800387e:	d005      	beq.n	800388c <rfm95_set_power+0x30>
 8003880:	4b2c      	ldr	r3, [pc, #176]	@ (8003934 <rfm95_set_power+0xd8>)
 8003882:	4a2d      	ldr	r2, [pc, #180]	@ (8003938 <rfm95_set_power+0xdc>)
 8003884:	21c3      	movs	r1, #195	@ 0xc3
 8003886:	482d      	ldr	r0, [pc, #180]	@ (800393c <rfm95_set_power+0xe0>)
 8003888:	f009 fb50 	bl	800cf2c <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 800388c:	2300      	movs	r3, #0
 800388e:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003898:	2b01      	cmp	r3, #1
 800389a:	dd18      	ble.n	80038ce <rfm95_set_power+0x72>
 800389c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a0:	2b11      	cmp	r3, #17
 80038a2:	dc14      	bgt.n	80038ce <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 80038a4:	7b3b      	ldrb	r3, [r7, #12]
 80038a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80038aa:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80038ac:	7b3b      	ldrb	r3, [r7, #12]
 80038ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b2:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	3b02      	subs	r3, #2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	7b3b      	ldrb	r3, [r7, #12]
 80038c2:	f362 0303 	bfi	r3, r2, #0, #4
 80038c6:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER; //0x14;
 80038c8:	2384      	movs	r3, #132	@ 0x84
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e011      	b.n	80038f2 <rfm95_set_power+0x96>

	} else if (power == 20) {
 80038ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d2:	2b14      	cmp	r3, #20
 80038d4:	d10d      	bne.n	80038f2 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 80038d6:	7b3b      	ldrb	r3, [r7, #12]
 80038d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80038dc:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 80038de:	7b3b      	ldrb	r3, [r7, #12]
 80038e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e4:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 80038e6:	7b3b      	ldrb	r3, [r7, #12]
 80038e8:	f043 030f 	orr.w	r3, r3, #15
 80038ec:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 80038ee:	2387      	movs	r3, #135	@ 0x87
 80038f0:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 80038f2:	7b3b      	ldrb	r3, [r7, #12]
 80038f4:	461a      	mov	r2, r3
 80038f6:	2109      	movs	r1, #9
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fe11 	bl	8003520 <write_register>
 80038fe:	4603      	mov	r3, r0
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <rfm95_set_power+0xb2>
 800390a:	2300      	movs	r3, #0
 800390c:	e00e      	b.n	800392c <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	461a      	mov	r2, r3
 8003912:	214d      	movs	r1, #77	@ 0x4d
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fe03 	bl	8003520 <write_register>
 800391a:	4603      	mov	r3, r0
 800391c:	f083 0301 	eor.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <rfm95_set_power+0xce>
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <rfm95_set_power+0xd0>

	return true;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800df3c 	.word	0x0800df3c
 8003938:	0800e15c 	.word	0x0800e15c
 800393c:	0800def4 	.word	0x0800def4

08003940 <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003952:	d005      	beq.n	8003960 <rfm95_init+0x20>
 8003954:	4b94      	ldr	r3, [pc, #592]	@ (8003ba8 <rfm95_init+0x268>)
 8003956:	4a95      	ldr	r2, [pc, #596]	@ (8003bac <rfm95_init+0x26c>)
 8003958:	21de      	movs	r1, #222	@ 0xde
 800395a:	4895      	ldr	r0, [pc, #596]	@ (8003bb0 <rfm95_init+0x270>)
 800395c:	f009 fae6 	bl	800cf2c <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <rfm95_init+0x36>
 800396a:	4b92      	ldr	r3, [pc, #584]	@ (8003bb4 <rfm95_init+0x274>)
 800396c:	4a8f      	ldr	r2, [pc, #572]	@ (8003bac <rfm95_init+0x26c>)
 800396e:	21df      	movs	r1, #223	@ 0xdf
 8003970:	488f      	ldr	r0, [pc, #572]	@ (8003bb0 <rfm95_init+0x270>)
 8003972:	f009 fadb 	bl	800cf2c <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <rfm95_init+0x4c>
 8003980:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb8 <rfm95_init+0x278>)
 8003982:	4a8a      	ldr	r2, [pc, #552]	@ (8003bac <rfm95_init+0x26c>)
 8003984:	21e0      	movs	r1, #224	@ 0xe0
 8003986:	488a      	ldr	r0, [pc, #552]	@ (8003bb0 <rfm95_init+0x270>)
 8003988:	f009 fad0 	bl	800cf2c <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <rfm95_init+0x62>
 8003996:	4b89      	ldr	r3, [pc, #548]	@ (8003bbc <rfm95_init+0x27c>)
 8003998:	4a84      	ldr	r2, [pc, #528]	@ (8003bac <rfm95_init+0x26c>)
 800399a:	21e1      	movs	r1, #225	@ 0xe1
 800399c:	4884      	ldr	r0, [pc, #528]	@ (8003bb0 <rfm95_init+0x270>)
 800399e:	f009 fac5 	bl	800cf2c <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <rfm95_init+0x78>
 80039ac:	4b84      	ldr	r3, [pc, #528]	@ (8003bc0 <rfm95_init+0x280>)
 80039ae:	4a7f      	ldr	r2, [pc, #508]	@ (8003bac <rfm95_init+0x26c>)
 80039b0:	21e2      	movs	r1, #226	@ 0xe2
 80039b2:	487f      	ldr	r0, [pc, #508]	@ (8003bb0 <rfm95_init+0x270>)
 80039b4:	f009 faba 	bl	800cf2c <__assert_func>
	assert(handle->get_precision_tick != NULL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <rfm95_init+0x8c>
 80039c0:	4b80      	ldr	r3, [pc, #512]	@ (8003bc4 <rfm95_init+0x284>)
 80039c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003bac <rfm95_init+0x26c>)
 80039c4:	21e3      	movs	r1, #227	@ 0xe3
 80039c6:	487a      	ldr	r0, [pc, #488]	@ (8003bb0 <rfm95_init+0x270>)
 80039c8:	f009 fab0 	bl	800cf2c <__assert_func>
	assert(handle->random_int != NULL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <rfm95_init+0xa0>
 80039d4:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <rfm95_init+0x288>)
 80039d6:	4a75      	ldr	r2, [pc, #468]	@ (8003bac <rfm95_init+0x26c>)
 80039d8:	21e4      	movs	r1, #228	@ 0xe4
 80039da:	4875      	ldr	r0, [pc, #468]	@ (8003bb0 <rfm95_init+0x270>)
 80039dc:	f009 faa6 	bl	800cf2c <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d805      	bhi.n	80039f8 <rfm95_init+0xb8>
 80039ec:	4b77      	ldr	r3, [pc, #476]	@ (8003bcc <rfm95_init+0x28c>)
 80039ee:	4a6f      	ldr	r2, [pc, #444]	@ (8003bac <rfm95_init+0x26c>)
 80039f0:	21e6      	movs	r1, #230	@ 0xe6
 80039f2:	486f      	ldr	r0, [pc, #444]	@ (8003bb0 <rfm95_init+0x270>)
 80039f4:	f009 fa9a 	bl	800cf2c <__assert_func>

	reset(handle);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fe25 	bl	8003648 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <rfm95_init+0xec>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	3260      	adds	r2, #96	@ 0x60
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4798      	blx	r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003a24:	f64a 3267 	movw	r2, #43879	@ 0xab67
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d002      	beq.n	8003a32 <rfm95_init+0xf2>
		config_load_default(handle);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fdd9 	bl	80035e4 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8003a32:	f107 020f 	add.w	r2, r7, #15
 8003a36:	2301      	movs	r3, #1
 8003a38:	2142      	movs	r1, #66	@ 0x42
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fd34 	bl	80034a8 <read_register>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <rfm95_init+0x110>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e0a7      	b.n	8003ba0 <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d001      	beq.n	8003a5a <rfm95_init+0x11a>
 8003a56:	2300      	movs	r3, #0
 8003a58:	e0a2      	b.n	8003ba0 <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fd5e 	bl	8003520 <write_register>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <rfm95_init+0x134>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e095      	b.n	8003ba0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003a74:	2280      	movs	r2, #128	@ 0x80
 8003a76:	2101      	movs	r1, #1
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fd51 	bl	8003520 <write_register>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f083 0301 	eor.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <rfm95_init+0x14e>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e088      	b.n	8003ba0 <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz RX_DONE
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	2140      	movs	r1, #64	@ 0x40
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fd44 	bl	8003520 <write_register>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <rfm95_init+0x168>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e07b      	b.n	8003ba0 <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 8003ab6:	2111      	movs	r1, #17
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fecf 	bl	800385c <rfm95_set_power>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <rfm95_init+0x18e>
 8003aca:	2300      	movs	r3, #0
 8003acc:	e068      	b.n	8003ba0 <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8003ace:	2223      	movs	r2, #35	@ 0x23
 8003ad0:	210c      	movs	r1, #12
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fd24 	bl	8003520 <write_register>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <rfm95_init+0x1a8>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e05b      	b.n	8003ba0 <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2120      	movs	r1, #32
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fd17 	bl	8003520 <write_register>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <rfm95_init+0x1c2>
 8003afe:	2300      	movs	r3, #0
 8003b00:	e04e      	b.n	8003ba0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8003b02:	2208      	movs	r2, #8
 8003b04:	2121      	movs	r1, #33	@ 0x21
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff fd0a 	bl	8003520 <write_register>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <rfm95_init+0x1dc>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e041      	b.n	8003ba0 <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8003b1c:	2234      	movs	r2, #52	@ 0x34
 8003b1e:	2139      	movs	r1, #57	@ 0x39
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fcfd 	bl	8003520 <write_register>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <rfm95_init+0x1f6>
 8003b32:	2300      	movs	r3, #0
 8003b34:	e034      	b.n	8003ba0 <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	210e      	movs	r1, #14
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fcf0 	bl	8003520 <write_register>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f083 0301 	eor.w	r3, r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <rfm95_init+0x210>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e027      	b.n	8003ba0 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8003b50:	2200      	movs	r2, #0
 8003b52:	210f      	movs	r1, #15
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fce3 	bl	8003520 <write_register>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <rfm95_init+0x22a>
 8003b66:	2300      	movs	r3, #0
 8003b68:	e01a      	b.n	8003ba0 <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	2123      	movs	r1, #35	@ 0x23
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fcd6 	bl	8003520 <write_register>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <rfm95_init+0x244>
 8003b80:	2300      	movs	r3, #0
 8003b82:	e00d      	b.n	8003ba0 <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003b84:	2280      	movs	r2, #128	@ 0x80
 8003b86:	2101      	movs	r1, #1
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fcc9 	bl	8003520 <write_register>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f083 0301 	eor.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <rfm95_init+0x25e>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <rfm95_init+0x260>

	return true;
 8003b9e:	2301      	movs	r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	0800df68 	.word	0x0800df68
 8003bac:	0800e16c 	.word	0x0800e16c
 8003bb0:	0800def4 	.word	0x0800def4
 8003bb4:	0800df9c 	.word	0x0800df9c
 8003bb8:	0800dfd8 	.word	0x0800dfd8
 8003bbc:	0800e010 	.word	0x0800e010
 8003bc0:	0800e04c 	.word	0x0800e04c
 8003bc4:	0800e084 	.word	0x0800e084
 8003bc8:	0800e0a8 	.word	0x0800e0a8
 8003bcc:	0800e0c4 	.word	0x0800e0c4

08003bd0 <rfm95_goto_sleep>:


bool rfm95_goto_sleep(rfm95_handle_t *handle)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	// Put module to sleep
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003bd8:	2280      	movs	r2, #128	@ 0x80
 8003bda:	2101      	movs	r1, #1
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fc9f 	bl	8003520 <write_register>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <rfm95_goto_sleep+0x22>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e000      	b.n	8003bf4 <rfm95_goto_sleep+0x24>

	return true;
 8003bf2:	2301      	movs	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <process_mac_commands>:


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	@ 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t answer_index = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	while (index < frame_payload_length) {
 8003c16:	e1a1      	b.n	8003f5c <process_mac_commands+0x360>
		switch (frame_payload[index++])
 8003c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	f200 8195 	bhi.w	8003f5c <process_mac_commands+0x360>
 8003c32:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <process_mac_commands+0x3c>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c87 	.word	0x08003c87
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003cc3 	.word	0x08003cc3
 8003c48:	08003cdd 	.word	0x08003cdd
 8003c4c:	08003d25 	.word	0x08003d25
 8003c50:	08003d8f 	.word	0x08003d8f
 8003c54:	08003eb3 	.word	0x08003eb3
 8003c58:	08003f13 	.word	0x08003f13
 8003c5c:	08003f21 	.word	0x08003f21
 8003c60:	08003f33 	.word	0x08003f33
 8003c64:	08003f41 	.word	0x08003f41
 8003c68:	08003f5d 	.word	0x08003f5d
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8003c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d801      	bhi.n	8003c7a <process_mac_commands+0x7e>
 8003c76:	2300      	movs	r3, #0
 8003c78:	e17b      	b.n	8003f72 <process_mac_commands+0x376>

				index += 1;
 8003c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003c84:	e16a      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8003c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d801      	bhi.n	8003c98 <process_mac_commands+0x9c>
 8003c94:	2300      	movs	r3, #0
 8003c96:	e16c      	b.n	8003f72 <process_mac_commands+0x376>

				index += 2;
 8003c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003ca2:	e15b      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8003ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ca8:	3303      	adds	r3, #3
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d801      	bhi.n	8003cb6 <process_mac_commands+0xba>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e15d      	b.n	8003f72 <process_mac_commands+0x376>

				index += 4;
 8003cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cba:	3304      	adds	r3, #4
 8003cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003cc0:	e14c      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8003cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d801      	bhi.n	8003cd0 <process_mac_commands+0xd4>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e150      	b.n	8003f72 <process_mac_commands+0x376>

				index += 1;
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003cda:	e13f      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d801      	bhi.n	8003cee <process_mac_commands+0xf2>
 8003cea:	2300      	movs	r3, #0
 8003cec:	e141      	b.n	8003f72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003cee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cf2:	2b30      	cmp	r3, #48	@ 0x30
 8003cf4:	d901      	bls.n	8003cfa <process_mac_commands+0xfe>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e13b      	b.n	8003f72 <process_mac_commands+0x376>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 8003cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d04:	461a      	mov	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	2205      	movs	r2, #5
 8003d0c:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8003d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d18:	461a      	mov	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	2207      	movs	r2, #7
 8003d20:	701a      	strb	r2, [r3, #0]
				break;
 8003d22:	e11b      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8003d24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d28:	2b2f      	cmp	r3, #47	@ 0x2f
 8003d2a:	d901      	bls.n	8003d30 <process_mac_commands+0x134>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e120      	b.n	8003f72 <process_mac_commands+0x376>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8003d30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <process_mac_commands+0x150>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d46:	4798      	blx	r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	e000      	b.n	8003d4e <process_mac_commands+0x152>
 8003d4c:	23ff      	movs	r3, #255	@ 0xff
 8003d4e:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 8003d50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	2206      	movs	r2, #6
 8003d62:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8003d64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d6e:	461a      	mov	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	7dfa      	ldrb	r2, [r7, #23]
 8003d76:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8003d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d82:	461a      	mov	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	7e3a      	ldrb	r2, [r7, #24]
 8003d8a:	701a      	strb	r2, [r3, #0]
				break;
 8003d8c:	e0e6      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d92:	3304      	adds	r3, #4
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d801      	bhi.n	8003da0 <process_mac_commands+0x1a4>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e0e8      	b.n	8003f72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003da4:	2b30      	cmp	r3, #48	@ 0x30
 8003da6:	d901      	bls.n	8003dac <process_mac_commands+0x1b0>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e0e2      	b.n	8003f72 <process_mac_commands+0x376>

				uint8_t channel_index = frame_payload[index++];
 8003dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003db6:	461a      	mov	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4413      	add	r3, r2
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 8003dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				uint8_t frequency_msb = frame_payload[index++];
 8003dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003de2:	461a      	mov	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4413      	add	r3, r2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 8003dee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4413      	add	r3, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8003e1a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	431a      	orrs	r2, r3
 8003e26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	2264      	movs	r2, #100	@ 0x64
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 8003e36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8003e40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 8003e48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d906      	bls.n	8003e5e <process_mac_commands+0x262>
					config_set_channel(handle, channel_index, frequency);
 8003e50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff fb93 	bl	8003584 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8003e5e:	7efb      	ldrb	r3, [r7, #27]
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d902      	bls.n	8003e6a <process_mac_commands+0x26e>
 8003e64:	7ebb      	ldrb	r3, [r7, #26]
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d901      	bls.n	8003e6e <process_mac_commands+0x272>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <process_mac_commands+0x274>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	767b      	strb	r3, [r7, #25]
 8003e72:	7e7b      	ldrb	r3, [r7, #25]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 8003e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003e84:	461a      	mov	r2, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	2207      	movs	r2, #7
 8003e8c:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8003e8e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	b25a      	sxtb	r2, r3
 8003e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ea0:	1c59      	adds	r1, r3, #1
 8003ea2:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	440b      	add	r3, r1
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
				break;
 8003eb0:	e054      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d801      	bhi.n	8003ec0 <process_mac_commands+0x2c4>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e058      	b.n	8003f72 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ec4:	2b30      	cmp	r3, #48	@ 0x30
 8003ec6:	d901      	bls.n	8003ecc <process_mac_commands+0x2d0>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e052      	b.n	8003f72 <process_mac_commands+0x376>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8003ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				if (handle->config.rx1_delay == 0) {
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d103      	bne.n	8003efc <process_mac_commands+0x300>
					handle->config.rx1_delay = 1;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8003efc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003f06:	461a      	mov	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	701a      	strb	r2, [r3, #0]
				break;
 8003f10:	e024      	b.n	8003f5c <process_mac_commands+0x360>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d818      	bhi.n	8003f4e <process_mac_commands+0x352>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e028      	b.n	8003f72 <process_mac_commands+0x376>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f24:	3304      	adds	r3, #4
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d811      	bhi.n	8003f52 <process_mac_commands+0x356>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e01f      	b.n	8003f72 <process_mac_commands+0x376>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d80c      	bhi.n	8003f56 <process_mac_commands+0x35a>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e018      	b.n	8003f72 <process_mac_commands+0x376>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d807      	bhi.n	8003f5a <process_mac_commands+0x35e>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e011      	b.n	8003f72 <process_mac_commands+0x376>
				break;
 8003f4e:	bf00      	nop
 8003f50:	e004      	b.n	8003f5c <process_mac_commands+0x360>
				break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <process_mac_commands+0x360>
				break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <process_mac_commands+0x360>

				break;
 8003f5a:	bf00      	nop
	while (index < frame_payload_length) {
 8003f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f63f ae58 	bhi.w	8003c18 <process_mac_commands+0x1c>
				break;
			}
		}
	}

	*answer_buffer_length = answer_index;
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f6e:	701a      	strb	r2, [r3, #0]
	return true;
 8003f70:	2301      	movs	r3, #1
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3728      	adds	r7, #40	@ 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop

08003f7c <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f8e:	492b      	ldr	r1, [pc, #172]	@ (800403c <receive_at_scheduled_time+0xc0>)
 8003f90:	fba1 1202 	umull	r1, r2, r1, r2
 8003f94:	0992      	lsrs	r2, r2, #6
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	1a8a      	subs	r2, r1, r2
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2140      	movs	r1, #64	@ 0x40
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fabc 	bl	8003520 <write_register>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f083 0301 	eor.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <receive_at_scheduled_time+0x3c>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e03c      	b.n	8004032 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8003fb8:	22ff      	movs	r2, #255	@ 0xff
 8003fba:	2112      	movs	r1, #18
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff faaf 	bl	8003520 <write_register>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <receive_at_scheduled_time+0x56>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e02f      	b.n	8004032 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8003fea:	2281      	movs	r2, #129	@ 0x81
 8003fec:	2101      	movs	r1, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fa96 	bl	8003520 <write_register>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f083 0301 	eor.w	r3, r3, #1
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <receive_at_scheduled_time+0x88>
 8004000:	2300      	movs	r3, #0
 8004002:	e016      	b.n	8004032 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8004004:	22c8      	movs	r2, #200	@ 0xc8
 8004006:	2102      	movs	r1, #2
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fbc1 	bl	8003790 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8004016:	2286      	movs	r2, #134	@ 0x86
 8004018:	2101      	movs	r1, #1
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fa80 	bl	8003520 <write_register>
 8004020:	4603      	mov	r3, r0
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <receive_at_scheduled_time+0xb4>
 800402c:	2300      	movs	r3, #0
 800402e:	e000      	b.n	8004032 <receive_at_scheduled_time+0xb6>

	return true;
 8004030:	2301      	movs	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b08a      	sub	sp, #40	@ 0x28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	3b01      	subs	r3, #1
 8004056:	2202      	movs	r2, #2
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	4a29      	ldr	r2, [pc, #164]	@ (8004104 <calculate_rx_timings+0xc4>)
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	461a      	mov	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 800407c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	4413      	add	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	0fd9      	lsrs	r1, r3, #31
 800408e:	440b      	add	r3, r1
 8004090:	105b      	asrs	r3, r3, #1
 8004092:	425b      	negs	r3, r3
 8004094:	4413      	add	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	17da      	asrs	r2, r3, #31
 800409c:	469a      	mov	sl, r3
 800409e:	4693      	mov	fp, r2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	2200      	movs	r2, #0
 80040a6:	4698      	mov	r8, r3
 80040a8:	4691      	mov	r9, r2
 80040aa:	fb08 f20b 	mul.w	r2, r8, fp
 80040ae:	fb0a f309 	mul.w	r3, sl, r9
 80040b2:	4413      	add	r3, r2
 80040b4:	fbaa 4508 	umull	r4, r5, sl, r8
 80040b8:	442b      	add	r3, r5
 80040ba:	461d      	mov	r5, r3
 80040bc:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <calculate_rx_timings+0xc4>)
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	4620      	mov	r0, r4
 80040c4:	4629      	mov	r1, r5
 80040c6:	f7fc ff2d 	bl	8000f24 <__aeabi_ldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4613      	mov	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	441a      	add	r2, r3
 80040e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ea:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040f8:	601a      	str	r2, [r3, #0]
}
 80040fa:	bf00      	nop
 80040fc:	3728      	adds	r7, #40	@ 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004104:	000f4240 	.word	0x000f4240

08004108 <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	@ 0x30
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 800411c:	f107 0320 	add.w	r3, r7, #32
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2207      	movs	r2, #7
 800412c:	49ab      	ldr	r1, [pc, #684]	@ (80043dc <receive_package+0x2d4>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ff86 	bl	8004040 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413a:	d306      	bcc.n	800414a <receive_package+0x42>
 800413c:	4ba8      	ldr	r3, [pc, #672]	@ (80043e0 <receive_package+0x2d8>)
 800413e:	4aa9      	ldr	r2, [pc, #676]	@ (80043e4 <receive_package+0x2dc>)
 8004140:	f240 11df 	movw	r1, #479	@ 0x1df
 8004144:	48a8      	ldr	r0, [pc, #672]	@ (80043e8 <receive_package+0x2e0>)
 8004146:	f008 fef1 	bl	800cf2c <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800414a:	2272      	movs	r2, #114	@ 0x72
 800414c:	211d      	movs	r1, #29
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff f9e6 	bl	8003520 <write_register>
 8004154:	4603      	mov	r3, r0
 8004156:	f083 0301 	eor.w	r3, r3, #1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <receive_package+0x5c>
 8004160:	2300      	movs	r3, #0
 8004162:	e136      	b.n	80043d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	211e      	movs	r1, #30
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff f9d0 	bl	8003520 <write_register>
 8004180:	4603      	mov	r3, r0
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <receive_package+0x88>
 800418c:	2300      	movs	r3, #0
 800418e:	e120      	b.n	80043d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8004190:	2204      	movs	r2, #4
 8004192:	2126      	movs	r1, #38	@ 0x26
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff f9c3 	bl	8003520 <write_register>
 800419a:	4603      	mov	r3, r0
 800419c:	f083 0301 	eor.w	r3, r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <receive_package+0xa2>
 80041a6:	2300      	movs	r3, #0
 80041a8:	e113      	b.n	80043d2 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	211f      	movs	r1, #31
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff f9b4 	bl	8003520 <write_register>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f083 0301 	eor.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <receive_package+0xc0>
 80041c4:	2300      	movs	r3, #0
 80041c6:	e104      	b.n	80043d2 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 80041c8:	2267      	movs	r2, #103	@ 0x67
 80041ca:	2133      	movs	r1, #51	@ 0x33
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff f9a7 	bl	8003520 <write_register>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <receive_package+0xda>
 80041de:	2300      	movs	r3, #0
 80041e0:	e0f7      	b.n	80043d2 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 80041e2:	2219      	movs	r2, #25
 80041e4:	213b      	movs	r1, #59	@ 0x3b
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff f99a 	bl	8003520 <write_register>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <receive_package+0xf4>
 80041f8:	2300      	movs	r3, #0
 80041fa:	e0ea      	b.n	80043d2 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff febb 	bl	8003f7c <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff faf2 	bl	80037f0 <wait_for_rx_irqs>
 800420c:	4603      	mov	r3, r0
 800420e:	f083 0301 	eor.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d07a      	beq.n	800430e <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	2101      	movs	r1, #1
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff f97f 	bl	8003520 <write_register>
 8004222:	4603      	mov	r3, r0
 8004224:	f083 0301 	eor.w	r3, r3, #1
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <receive_package+0x12a>
 800422e:	2300      	movs	r3, #0
 8004230:	e0cf      	b.n	80043d2 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004238:	2b02      	cmp	r3, #2
 800423a:	d166      	bne.n	800430a <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	f107 0318 	add.w	r3, r7, #24
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	220c      	movs	r2, #12
 800424c:	4963      	ldr	r1, [pc, #396]	@ (80043dc <receive_package+0x2d4>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7ff fef6 	bl	8004040 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8004254:	4965      	ldr	r1, [pc, #404]	@ (80043ec <receive_package+0x2e4>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff fa14 	bl	8003684 <configure_frequency>
 800425c:	4603      	mov	r3, r0
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <receive_package+0x164>
 8004268:	2300      	movs	r3, #0
 800426a:	e0b2      	b.n	80043d2 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 800426c:	22c2      	movs	r2, #194	@ 0xc2
 800426e:	211d      	movs	r1, #29
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff f955 	bl	8003520 <write_register>
 8004276:	4603      	mov	r3, r0
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <receive_package+0x17e>
 8004282:	2300      	movs	r3, #0
 8004284:	e0a5      	b.n	80043d2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0a1b      	lsrs	r3, r3, #8
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	211e      	movs	r1, #30
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff f93f 	bl	8003520 <write_register>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <receive_package+0x1aa>
 80042ae:	2300      	movs	r3, #0
 80042b0:	e08f      	b.n	80043d2 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80042b2:	2204      	movs	r2, #4
 80042b4:	2126      	movs	r1, #38	@ 0x26
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff f932 	bl	8003520 <write_register>
 80042bc:	4603      	mov	r3, r0
 80042be:	f083 0301 	eor.w	r3, r3, #1
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <receive_package+0x1c4>
 80042c8:	2300      	movs	r3, #0
 80042ca:	e082      	b.n	80043d2 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	211f      	movs	r1, #31
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff f923 	bl	8003520 <write_register>
 80042da:	4603      	mov	r3, r0
 80042dc:	f083 0301 	eor.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <receive_package+0x1e2>
 80042e6:	2300      	movs	r3, #0
 80042e8:	e073      	b.n	80043d2 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4619      	mov	r1, r3
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fe44 	bl	8003f7c <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7ff fa7b 	bl	80037f0 <wait_for_rx_irqs>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8004306:	2301      	movs	r3, #1
 8004308:	e063      	b.n	80043d2 <receive_package+0x2ca>
			}
		}

		return true;
 800430a:	2301      	movs	r3, #1
 800430c:	e061      	b.n	80043d2 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800430e:	f107 021f 	add.w	r2, r7, #31
 8004312:	2301      	movs	r3, #1
 8004314:	2112      	movs	r1, #18
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff f8c6 	bl	80034a8 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <receive_package+0x222>
		return true;
 8004326:	2301      	movs	r3, #1
 8004328:	e053      	b.n	80043d2 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 800432a:	f107 021e 	add.w	r2, r7, #30
 800432e:	2301      	movs	r3, #1
 8004330:	2119      	movs	r1, #25
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff f8b8 	bl	80034a8 <read_register>
 8004338:	4603      	mov	r3, r0
 800433a:	f083 0301 	eor.w	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <receive_package+0x240>
 8004344:	2300      	movs	r3, #0
 8004346:	e044      	b.n	80043d2 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8004348:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800434c:	2b00      	cmp	r3, #0
 800434e:	da00      	bge.n	8004352 <receive_package+0x24a>
 8004350:	3303      	adds	r3, #3
 8004352:	109b      	asrs	r3, r3, #2
 8004354:	b25a      	sxtb	r2, r3
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 800435a:	f107 021d 	add.w	r2, r7, #29
 800435e:	2301      	movs	r3, #1
 8004360:	2113      	movs	r1, #19
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff f8a0 	bl	80034a8 <read_register>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <receive_package+0x270>
 8004374:	2300      	movs	r3, #0
 8004376:	e02c      	b.n	80043d2 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8004378:	2200      	movs	r2, #0
 800437a:	210d      	movs	r1, #13
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff f8cf 	bl	8003520 <write_register>
 8004382:	4603      	mov	r3, r0
 8004384:	f083 0301 	eor.w	r3, r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <receive_package+0x28a>
 800438e:	2300      	movs	r3, #0
 8004390:	e01f      	b.n	80043d2 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8004392:	7f7b      	ldrb	r3, [r7, #29]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	2100      	movs	r1, #0
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff f885 	bl	80034a8 <read_register>
 800439e:	4603      	mov	r3, r0
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <receive_package+0x2a6>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e011      	b.n	80043d2 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80043ae:	2280      	movs	r2, #128	@ 0x80
 80043b0:	2101      	movs	r1, #1
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff f8b4 	bl	8003520 <write_register>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f083 0301 	eor.w	r3, r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <receive_package+0x2c0>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e004      	b.n	80043d2 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80043c8:	7f7b      	ldrb	r3, [r7, #29]
 80043ca:	461a      	mov	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
	return true;
 80043d0:	2301      	movs	r3, #1
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3728      	adds	r7, #40	@ 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	0001e848 	.word	0x0001e848
 80043e0:	0800e0f0 	.word	0x0800e0f0
 80043e4:	0800e178 	.word	0x0800e178
 80043e8:	0800def4 	.word	0x0800def4
 80043ec:	33d3e608 	.word	0x33d3e608

080043f0 <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	4619      	mov	r1, r3
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff f99a 	bl	800373c <configure_channel>
 8004408:	4603      	mov	r3, r0
 800440a:	f083 0301 	eor.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <send_package+0x28>
 8004414:	2300      	movs	r3, #0
 8004416:	e0d9      	b.n	80045cc <send_package+0x1dc>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8004418:	2272      	movs	r2, #114	@ 0x72
 800441a:	211d      	movs	r1, #29
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7ff f87f 	bl	8003520 <write_register>
 8004422:	4603      	mov	r3, r0
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <send_package+0x42>
 800442e:	2300      	movs	r3, #0
 8004430:	e0cc      	b.n	80045cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8004432:	2274      	movs	r2, #116	@ 0x74
 8004434:	211e      	movs	r1, #30
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff f872 	bl	8003520 <write_register>
 800443c:	4603      	mov	r3, r0
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <send_package+0x5c>
 8004448:	2300      	movs	r3, #0
 800444a:	e0bf      	b.n	80045cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800444c:	2204      	movs	r2, #4
 800444e:	2126      	movs	r1, #38	@ 0x26
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff f865 	bl	8003520 <write_register>
 8004456:	4603      	mov	r3, r0
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <send_package+0x76>
 8004462:	2300      	movs	r3, #0
 8004464:	e0b2      	b.n	80045cc <send_package+0x1dc>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8004466:	2227      	movs	r2, #39	@ 0x27
 8004468:	2133      	movs	r1, #51	@ 0x33
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff f858 	bl	8003520 <write_register>
 8004470:	4603      	mov	r3, r0
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <send_package+0x90>
 800447c:	2300      	movs	r3, #0
 800447e:	e0a5      	b.n	80045cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8004480:	221d      	movs	r2, #29
 8004482:	213b      	movs	r1, #59	@ 0x3b
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff f84b 	bl	8003520 <write_register>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <send_package+0xaa>
 8004496:	2300      	movs	r3, #0
 8004498:	e098      	b.n	80045cc <send_package+0x1dc>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	2122      	movs	r1, #34	@ 0x22
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff f83c 	bl	8003520 <write_register>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f083 0301 	eor.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <send_package+0xc8>
 80044b4:	2300      	movs	r3, #0
 80044b6:	e089      	b.n	80045cc <send_package+0x1dc>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	2140      	movs	r1, #64	@ 0x40
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff f82f 	bl	8003520 <write_register>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f083 0301 	eor.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <send_package+0xe2>
 80044ce:	2300      	movs	r3, #0
 80044d0:	e07c      	b.n	80045cc <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80044d2:	22ff      	movs	r2, #255	@ 0xff
 80044d4:	2112      	movs	r1, #18
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff f822 	bl	8003520 <write_register>
 80044dc:	4603      	mov	r3, r0
 80044de:	f083 0301 	eor.w	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <send_package+0xfc>
 80044e8:	2300      	movs	r3, #0
 80044ea:	e06f      	b.n	80045cc <send_package+0x1dc>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80044fc:	2281      	movs	r2, #129	@ 0x81
 80044fe:	2101      	movs	r1, #1
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff f80d 	bl	8003520 <write_register>
 8004506:	4603      	mov	r3, r0
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <send_package+0x126>
 8004512:	2300      	movs	r3, #0
 8004514:	e05a      	b.n	80045cc <send_package+0x1dc>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8004516:	22c8      	movs	r2, #200	@ 0xc8
 8004518:	2102      	movs	r1, #2
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff f938 	bl	8003790 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	210d      	movs	r1, #13
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7fe fffb 	bl	8003520 <write_register>
 800452a:	4603      	mov	r3, r0
 800452c:	f083 0301 	eor.w	r3, r3, #1
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <send_package+0x14a>
 8004536:	2300      	movs	r3, #0
 8004538:	e048      	b.n	80045cc <send_package+0x1dc>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e00b      	b.n	8004558 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4413      	add	r3, r2
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7fe ffe7 	bl	8003520 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3301      	adds	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3ef      	bcc.n	8004540 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8004560:	2283      	movs	r2, #131	@ 0x83
 8004562:	2101      	movs	r1, #1
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fe ffdb 	bl	8003520 <write_register>
 800456a:	4603      	mov	r3, r0
 800456c:	f083 0301 	eor.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <send_package+0x18a>
 8004576:	2300      	movs	r3, #0
 8004578:	e028      	b.n	80045cc <send_package+0x1dc>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 800457a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800457e:	2100      	movs	r1, #0
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff f905 	bl	8003790 <wait_for_irq>
 8004586:	4603      	mov	r3, r0
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <send_package+0x1a6>
 8004592:	2300      	movs	r3, #0
 8004594:	e01a      	b.n	80045cc <send_package+0x1dc>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80045a0:	2280      	movs	r2, #128	@ 0x80
 80045a2:	2101      	movs	r1, #1
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7fe ffbb 	bl	8003520 <write_register>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <send_package+0x1ca>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e008      	b.n	80045cc <send_package+0x1dc>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80045c0:	3301      	adds	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

	return true;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b08d      	sub	sp, #52	@ 0x34
 80045d8:	af04      	add	r7, sp, #16
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	330d      	adds	r3, #13
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d906      	bls.n	80045fc <encode_phy_payload+0x28>
 80045ee:	4b51      	ldr	r3, [pc, #324]	@ (8004734 <encode_phy_payload+0x160>)
 80045f0:	4a51      	ldr	r2, [pc, #324]	@ (8004738 <encode_phy_payload+0x164>)
 80045f2:	f240 216a 	movw	r1, #618	@ 0x26a
 80045f6:	4851      	ldr	r0, [pc, #324]	@ (800473c <encode_phy_payload+0x168>)
 80045f8:	f008 fc98 	bl	800cf2c <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2240      	movs	r2, #64	@ 0x40
 8004600:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	7d52      	ldrb	r2, [r2, #21]
 800460a:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3302      	adds	r3, #2
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	7d12      	ldrb	r2, [r2, #20]
 8004614:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3303      	adds	r3, #3
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	7cd2      	ldrb	r2, [r2, #19]
 800461e:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3304      	adds	r3, #4
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	7c92      	ldrb	r2, [r2, #18]
 8004628:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3305      	adds	r3, #5
 800462e:	2200      	movs	r2, #0
 8004630:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3306      	adds	r3, #6
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b29a      	uxth	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3307      	adds	r3, #7
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	3308      	adds	r3, #8
 8004656:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800465a:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	3309      	adds	r3, #9
 8004660:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4413      	add	r3, r2
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	f008 fe1e 	bl	800d2ae <memcpy>
	if (port == 0) {
 8004672:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	18d0      	adds	r0, r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	b2d9      	uxtb	r1, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800468a:	461c      	mov	r4, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3316      	adds	r3, #22
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	3212      	adds	r2, #18
 8004694:	9201      	str	r2, [sp, #4]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2300      	movs	r3, #0
 800469a:	4622      	mov	r2, r4
 800469c:	f008 f96b 	bl	800c976 <Encrypt_Payload>
 80046a0:	e012      	b.n	80046c8 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	18d0      	adds	r0, r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80046b2:	461c      	mov	r4, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3326      	adds	r3, #38	@ 0x26
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	3212      	adds	r2, #18
 80046bc:	9201      	str	r2, [sp, #4]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	4622      	mov	r2, r4
 80046c4:	f008 f957 	bl	800c976 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	b2d8      	uxtb	r0, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80046da:	461c      	mov	r4, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3316      	adds	r3, #22
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	3212      	adds	r2, #18
 80046e4:	f107 0114 	add.w	r1, r7, #20
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4623      	mov	r3, r4
 80046f2:	4602      	mov	r2, r0
 80046f4:	68b8      	ldr	r0, [r7, #8]
 80046f6:	f008 f9f2 	bl	800cade <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e00d      	b.n	800471c <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8004700:	7ffa      	ldrb	r2, [r7, #31]
 8004702:	7ff9      	ldrb	r1, [r7, #31]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	440b      	add	r3, r1
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	440b      	add	r3, r1
 800470c:	3220      	adds	r2, #32
 800470e:	443a      	add	r2, r7
 8004710:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004714:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8004716:	7ffb      	ldrb	r3, [r7, #31]
 8004718:	3301      	adds	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	7ffb      	ldrb	r3, [r7, #31]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d9ee      	bls.n	8004700 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	3304      	adds	r3, #4
 8004726:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8004728:	69bb      	ldr	r3, [r7, #24]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	@ 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	0800e10c 	.word	0x0800e10c
 8004738:	0800e188 	.word	0x0800e188
 800473c:	0800def4 	.word	0x0800def4

08004740 <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b08d      	sub	sp, #52	@ 0x34
 8004744:	af04      	add	r7, sp, #16
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d001      	beq.n	800475c <decode_phy_payload+0x1c>
		return false;
 8004758:	2300      	movs	r3, #0
 800475a:	e0ab      	b.n	80048b4 <decode_phy_payload+0x174>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3301      	adds	r3, #1
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	7d5b      	ldrb	r3, [r3, #21]
 8004766:	429a      	cmp	r2, r3
 8004768:	d114      	bne.n	8004794 <decode_phy_payload+0x54>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3302      	adds	r3, #2
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	7d1b      	ldrb	r3, [r3, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	d10d      	bne.n	8004794 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3303      	adds	r3, #3
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d106      	bne.n	8004794 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3304      	adds	r3, #4
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	7c9b      	ldrb	r3, [r3, #18]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <decode_phy_payload+0x58>
		return false;
 8004794:	2300      	movs	r3, #0
 8004796:	e08d      	b.n	80048b4 <decode_phy_payload+0x174>
	}

	uint8_t frame_control = payload_buf[5];
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	795b      	ldrb	r3, [r3, #5]
 800479c:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	3307      	adds	r3, #7
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	b21a      	sxth	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3306      	adds	r3, #6
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b21b      	sxth	r3, r3
 80047ba:	4313      	orrs	r3, r2
 80047bc:	b21b      	sxth	r3, r3
 80047be:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80047c6:	8bba      	ldrh	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d201      	bcs.n	80047d0 <decode_phy_payload+0x90>
		return false;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e071      	b.n	80048b4 <decode_phy_payload+0x174>
	}
	handle->config.rx_frame_count = rx_frame_count;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8bba      	ldrh	r2, [r7, #28]
 80047d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	3b04      	subs	r3, #4
 80047dc:	b2d8      	uxtb	r0, r3
 80047de:	8bbc      	ldrh	r4, [r7, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3316      	adds	r3, #22
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	3212      	adds	r2, #18
 80047e8:	f107 0114 	add.w	r1, r7, #20
 80047ec:	9202      	str	r2, [sp, #8]
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2301      	movs	r3, #1
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4623      	mov	r3, r4
 80047f6:	4602      	mov	r2, r0
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f008 f970 	bl	800cade <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	3b04      	subs	r3, #4
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	18d1      	adds	r1, r2, r3
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	2204      	movs	r2, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f008 fcc2 	bl	800d196 <memcmp>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <decode_phy_payload+0xdc>
		return false;
 8004818:	2300      	movs	r3, #0
 800481a:	e04b      	b.n	80048b4 <decode_phy_payload+0x174>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f1a3 020c 	sub.w	r2, r3, #12
 8004822:	7fbb      	ldrb	r3, [r7, #30]
 8004824:	429a      	cmp	r2, r3
 8004826:	d10b      	bne.n	8004840 <decode_phy_payload+0x100>
		*frame_port = 0;
 8004828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f103 0208 	add.w	r2, r3, #8
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	7fba      	ldrb	r2, [r7, #30]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e038      	b.n	80048b2 <decode_phy_payload+0x172>

	} else {
		*frame_port = payload_buf[8];
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	7a1a      	ldrb	r2, [r3, #8]
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8004848:	7fbb      	ldrb	r3, [r7, #30]
 800484a:	3309      	adds	r3, #9
 800484c:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	3b04      	subs	r3, #4
 8004852:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8004854:	7eba      	ldrb	r2, [r7, #26]
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 800485c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <decode_phy_payload+0x144>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 8004864:	7efb      	ldrb	r3, [r7, #27]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	18d0      	adds	r0, r2, r3
 800486a:	8bbc      	ldrh	r4, [r7, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3316      	adds	r3, #22
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	3212      	adds	r2, #18
 8004874:	7e79      	ldrb	r1, [r7, #25]
 8004876:	9201      	str	r2, [sp, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	2301      	movs	r3, #1
 800487c:	4622      	mov	r2, r4
 800487e:	f008 f87a 	bl	800c976 <Encrypt_Payload>
 8004882:	e00e      	b.n	80048a2 <decode_phy_payload+0x162>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 8004884:	7efb      	ldrb	r3, [r7, #27]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	18d0      	adds	r0, r2, r3
 800488a:	8bbc      	ldrh	r4, [r7, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3326      	adds	r3, #38	@ 0x26
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	3212      	adds	r2, #18
 8004894:	7e79      	ldrb	r1, [r7, #25]
 8004896:	9201      	str	r2, [sp, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2301      	movs	r3, #1
 800489c:	4622      	mov	r2, r4
 800489e:	f008 f86a 	bl	800c976 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 80048a2:	7efb      	ldrb	r3, [r7, #27]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	441a      	add	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	7e7a      	ldrb	r2, [r7, #25]
 80048b0:	701a      	strb	r2, [r3, #0]
	}

	return true;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3724      	adds	r7, #36	@ 0x24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}

080048bc <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80048c8:	2300      	movs	r3, #0
 80048ca:	73bb      	strb	r3, [r7, #14]
 80048cc:	e010      	b.n	80048f0 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80048d4:	461a      	mov	r2, r3
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	fa42 f303 	asr.w	r3, r2, r3
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <select_random_channel+0x2e>
			channel_count++;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	3301      	adds	r3, #1
 80048e8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 80048ea:	7bbb      	ldrb	r3, [r7, #14]
 80048ec:	3301      	adds	r3, #1
 80048ee:	73bb      	strb	r3, [r7, #14]
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d9eb      	bls.n	80048ce <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
 8004900:	4603      	mov	r3, r0
 8004902:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8004904:	2300      	movs	r3, #0
 8004906:	733b      	strb	r3, [r7, #12]
 8004908:	e015      	b.n	8004936 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8004910:	461a      	mov	r2, r3
 8004912:	7b3b      	ldrb	r3, [r7, #12]
 8004914:	fa42 f303 	asr.w	r3, r2, r3
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <select_random_channel+0x74>
			if (random_channel == 0) {
 8004920:	7b7b      	ldrb	r3, [r7, #13]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <select_random_channel+0x6e>
				return i;
 8004926:	7b3b      	ldrb	r3, [r7, #12]
 8004928:	e009      	b.n	800493e <select_random_channel+0x82>
			} else {
				random_channel--;
 800492a:	7b7b      	ldrb	r3, [r7, #13]
 800492c:	3b01      	subs	r3, #1
 800492e:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8004930:	7b3b      	ldrb	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	733b      	strb	r3, [r7, #12]
 8004936:	7b3b      	ldrb	r3, [r7, #12]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	d9e6      	bls.n	800490a <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b0aa      	sub	sp, #168	@ 0xa8
 800494a:	af02      	add	r7, sp, #8
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8004952:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004956:	2240      	movs	r2, #64	@ 0x40
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f008 fc2b 	bl	800d1b6 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8004960:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004964:	2301      	movs	r3, #1
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe31 	bl	80045d4 <encode_phy_payload>
 8004972:	4603      	mov	r3, r0
 8004974:	65bb      	str	r3, [r7, #88]	@ 0x58

	uint8_t random_channel = select_random_channel(handle);
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ffa0 	bl	80048bc <select_random_channel>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks))
 8004982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004984:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8004988:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800498c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	4603      	mov	r3, r0
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fd2b 	bl	80043f0 <send_package>
 800499a:	4603      	mov	r3, r0
 800499c:	f083 0301 	eor.w	r3, r3, #1
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <rfm95_send_receive_cycle+0x6e>
	{
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80049a6:	2280      	movs	r2, #128	@ 0x80
 80049a8:	2101      	movs	r1, #1
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7fe fdb8 	bl	8003520 <write_register>
		return false;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e0ad      	b.n	8004b10 <rfm95_send_receive_cycle+0x1ca>
	}


	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 80049b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80049b8:	2240      	movs	r2, #64	@ 0x40
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f008 fbfa 	bl	800d1b6 <memset>
	phy_payload_len = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8094 	beq.w	8004afa <rfm95_send_receive_cycle+0x1b4>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 80049d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049d4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80049d8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80049dc:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4603      	mov	r3, r0
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fb8f 	bl	8004108 <receive_package>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f083 0301 	eor.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d010      	beq.n	8004a18 <rfm95_send_receive_cycle+0xd2>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80049f6:	2280      	movs	r2, #128	@ 0x80
 80049f8:	2101      	movs	r1, #1
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7fe fd90 	bl	8003520 <write_register>
			if (handle->save_config) {
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <rfm95_send_receive_cycle+0xce>
				handle->save_config(&(handle->config));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	3260      	adds	r2, #96	@ 0x60
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
			}
			return false;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e07b      	b.n	8004b10 <rfm95_send_receive_cycle+0x1ca>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8004a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d06d      	beq.n	8004afa <rfm95_send_receive_cycle+0x1b4>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 8004a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8004a2c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004a30:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff fe7e 	bl	8004740 <decode_phy_payload>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d057      	beq.n	8004afa <rfm95_send_receive_cycle+0x1b4>

				// Process Mac Commands
				if (frame_port == 0) {
 8004a4a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d153      	bne.n	8004afa <rfm95_send_receive_cycle+0x1b4>

					uint8_t mac_response_data[51] = {0};
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	2233      	movs	r2, #51	@ 0x33
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f008 fbab 	bl	800d1b6 <memset>
					uint8_t mac_response_len = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 8004a66:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004a68:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004a72:	f107 0214 	add.w	r2, r7, #20
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	f107 0349 	add.w	r3, r7, #73	@ 0x49
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	4602      	mov	r2, r0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f7ff f8ba 	bl	8003bfc <process_mac_commands>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d035      	beq.n	8004afa <rfm95_send_receive_cycle+0x1b4>
 8004a8e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d031      	beq.n	8004afa <rfm95_send_receive_cycle+0x1b4>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 8004a96:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f107 0214 	add.w	r2, r7, #20
 8004aa0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fd92 	bl	80045d4 <encode_phy_payload>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	65bb      	str	r3, [r7, #88]	@ 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8004ab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab6:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8004aba:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004abe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff fc92 	bl	80043f0 <send_package>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f083 0301 	eor.w	r3, r3, #1
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <rfm95_send_receive_cycle+0x1b4>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004ad8:	2280      	movs	r2, #128	@ 0x80
 8004ada:	2101      	movs	r1, #1
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7fe fd1f 	bl	8003520 <write_register>
							if (handle->save_config) {
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <rfm95_send_receive_cycle+0x1b0>
								handle->save_config(&(handle->config));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	3260      	adds	r2, #96	@ 0x60
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
							}
							return false;
 8004af6:	2300      	movs	r3, #0
			return false;
 8004af8:	e00a      	b.n	8004b10 <rfm95_send_receive_cycle+0x1ca>
				}
			}
		}
	}

	if (handle->save_config) {
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <rfm95_send_receive_cycle+0x1c8>
		handle->save_config(&(handle->config));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	3260      	adds	r2, #96	@ 0x60
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4798      	blx	r3
	}

	return true;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	37a0      	adds	r7, #160	@ 0xa0
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b28:	78fc      	ldrb	r4, [r7, #3]
 8004b2a:	4798      	blx	r3
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	6059      	str	r1, [r3, #4]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd90      	pop	{r4, r7, pc}
	...

08004b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004b4a:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b54:	6253      	str	r3, [r2, #36]	@ 0x24
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b62:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	4a0d      	ldr	r2, [pc, #52]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	6213      	str	r3, [r2, #32]
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	6253      	str	r3, [r2, #36]	@ 0x24
 8004b86:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_MspInit+0x58>)
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	40023800 	.word	0x40023800

08004ba0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	@ 0x28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <HAL_ADC_MspInit+0x84>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d12b      	bne.n	8004c1a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bc2:	4b19      	ldr	r3, [pc, #100]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bcc:	6213      	str	r3, [r2, #32]
 8004bce:	4b16      	ldr	r3, [pc, #88]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bda:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	4a12      	ldr	r2, [pc, #72]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	61d3      	str	r3, [r2, #28]
 8004be6:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <HAL_ADC_MspInit+0x88>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4809      	ldr	r0, [pc, #36]	@ (8004c2c <HAL_ADC_MspInit+0x8c>)
 8004c06:	f001 fee5 	bl	80069d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	2012      	movs	r0, #18
 8004c10:	f001 faf1 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004c14:	2012      	movs	r0, #18
 8004c16:	f001 fb0a 	bl	800622e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004c1a:	bf00      	nop
 8004c1c:	3728      	adds	r7, #40	@ 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40012400 	.word	0x40012400
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40020000 	.word	0x40020000

08004c30 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <HAL_ADC_MspDeInit+0x34>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_ADC_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004c42:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_ADC_MspDeInit+0x38>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4a08      	ldr	r2, [pc, #32]	@ (8004c68 <HAL_ADC_MspDeInit+0x38>)
 8004c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c4c:	6213      	str	r3, [r2, #32]

    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    HAL_GPIO_DeInit(GPIOA, AN_BAT_Pin|AN_E_HUM_Pin);
 8004c4e:	2106      	movs	r1, #6
 8004c50:	4806      	ldr	r0, [pc, #24]	@ (8004c6c <HAL_ADC_MspDeInit+0x3c>)
 8004c52:	f002 f83f 	bl	8006cd4 <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8004c56:	2012      	movs	r0, #18
 8004c58:	f001 faf7 	bl	800624a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40012400 	.word	0x40012400
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40020000 	.word	0x40020000

08004c70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	@ 0x30
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c78:	f107 031c 	add.w	r3, r7, #28
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	609a      	str	r2, [r3, #8]
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d78 <HAL_I2C_MspInit+0x108>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d138      	bne.n	8004d04 <HAL_I2C_MspInit+0x94>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c92:	4b3a      	ldr	r3, [pc, #232]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a39      	ldr	r2, [pc, #228]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b37      	ldr	r3, [pc, #220]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004caa:	23c0      	movs	r3, #192	@ 0xc0
 8004cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cae:	2312      	movs	r3, #18
 8004cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004cba:	2304      	movs	r3, #4
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cbe:	f107 031c 	add.w	r3, r7, #28
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	482e      	ldr	r0, [pc, #184]	@ (8004d80 <HAL_I2C_MspInit+0x110>)
 8004cc6:	f001 fe85 	bl	80069d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cca:	4b2c      	ldr	r3, [pc, #176]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	4a2b      	ldr	r2, [pc, #172]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004cd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cd4:	6253      	str	r3, [r2, #36]	@ 0x24
 8004cd6:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	201f      	movs	r0, #31
 8004ce8:	f001 fa85 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004cec:	201f      	movs	r0, #31
 8004cee:	f001 fa9e 	bl	800622e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2020      	movs	r0, #32
 8004cf8:	f001 fa7d 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004cfc:	2020      	movs	r0, #32
 8004cfe:	f001 fa96 	bl	800622e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004d02:	e035      	b.n	8004d70 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <HAL_I2C_MspInit+0x114>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d130      	bne.n	8004d70 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	61d3      	str	r3, [r2, #28]
 8004d1a:	4b18      	ldr	r3, [pc, #96]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d2c:	2312      	movs	r3, #18
 8004d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d34:	2303      	movs	r3, #3
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004d38:	2304      	movs	r3, #4
 8004d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3c:	f107 031c 	add.w	r3, r7, #28
 8004d40:	4619      	mov	r1, r3
 8004d42:	480f      	ldr	r0, [pc, #60]	@ (8004d80 <HAL_I2C_MspInit+0x110>)
 8004d44:	f001 fe46 	bl	80069d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d52:	6253      	str	r3, [r2, #36]	@ 0x24
 8004d54:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <HAL_I2C_MspInit+0x10c>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	2021      	movs	r0, #33	@ 0x21
 8004d66:	f001 fa46 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004d6a:	2021      	movs	r0, #33	@ 0x21
 8004d6c:	f001 fa5f 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 8004d70:	bf00      	nop
 8004d72:	3730      	adds	r7, #48	@ 0x30
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40005400 	.word	0x40005400
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40020400 	.word	0x40020400
 8004d84:	40005800 	.word	0x40005800

08004d88 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <HAL_RTC_MspInit+0x30>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10a      	bne.n	8004db0 <HAL_RTC_MspInit+0x28>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d9a:	4b08      	ldr	r3, [pc, #32]	@ (8004dbc <HAL_RTC_MspInit+0x34>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004da0:	2200      	movs	r2, #0
 8004da2:	2100      	movs	r1, #0
 8004da4:	2029      	movs	r0, #41	@ 0x29
 8004da6:	f001 fa26 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004daa:	2029      	movs	r0, #41	@ 0x29
 8004dac:	f001 fa3f 	bl	800622e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40002800 	.word	0x40002800
 8004dbc:	424706d8 	.word	0x424706d8

08004dc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	@ 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8004e98 <HAL_SPI_MspInit+0xd8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d128      	bne.n	8004e34 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004de2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004de8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dec:	6213      	str	r3, [r2, #32]
 8004dee:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfa:	4b28      	ldr	r3, [pc, #160]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	61d3      	str	r3, [r2, #28]
 8004e06:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e12:	23e0      	movs	r3, #224	@ 0xe0
 8004e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e16:	2302      	movs	r3, #2
 8004e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e22:	2305      	movs	r3, #5
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e26:	f107 031c 	add.w	r3, r7, #28
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	481c      	ldr	r0, [pc, #112]	@ (8004ea0 <HAL_SPI_MspInit+0xe0>)
 8004e2e:	f001 fdd1 	bl	80069d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e32:	e02d      	b.n	8004e90 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea4 <HAL_SPI_MspInit+0xe4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d128      	bne.n	8004e90 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e3e:	4b17      	ldr	r3, [pc, #92]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e48:	6253      	str	r3, [r2, #36]	@ 0x24
 8004e4a:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e56:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	61d3      	str	r3, [r2, #28]
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_SPI_MspInit+0xdc>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004e6e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e80:	2305      	movs	r3, #5
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4807      	ldr	r0, [pc, #28]	@ (8004ea8 <HAL_SPI_MspInit+0xe8>)
 8004e8c:	f001 fda2 	bl	80069d4 <HAL_GPIO_Init>
}
 8004e90:	bf00      	nop
 8004e92:	3730      	adds	r7, #48	@ 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40013000 	.word	0x40013000
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40020000 	.word	0x40020000
 8004ea4:	40003800 	.word	0x40003800
 8004ea8:	40020400 	.word	0x40020400

08004eac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebc:	d114      	bne.n	8004ee8 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ebe:	4b19      	ldr	r3, [pc, #100]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	4a18      	ldr	r2, [pc, #96]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6253      	str	r3, [r2, #36]	@ 0x24
 8004eca:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	201c      	movs	r0, #28
 8004edc:	f001 f98b 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ee0:	201c      	movs	r0, #28
 8004ee2:	f001 f9a4 	bl	800622e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004ee6:	e018      	b.n	8004f1a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a0e      	ldr	r2, [pc, #56]	@ (8004f28 <HAL_TIM_Base_MspInit+0x7c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d113      	bne.n	8004f1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	6253      	str	r3, [r2, #36]	@ 0x24
 8004efe:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_TIM_Base_MspInit+0x78>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	201d      	movs	r0, #29
 8004f10:	f001 f971 	bl	80061f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f14:	201d      	movs	r0, #29
 8004f16:	f001 f98a 	bl	800622e <HAL_NVIC_EnableIRQ>
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40000400 	.word	0x40000400

08004f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <NMI_Handler+0x4>

08004f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <HardFault_Handler+0x4>

08004f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f40:	bf00      	nop
 8004f42:	e7fd      	b.n	8004f40 <MemManage_Handler+0x4>

08004f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <BusFault_Handler+0x4>

08004f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <UsageFault_Handler+0x4>

08004f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f7c:	f000 f996 	bl	80052ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO5_Pin);
 8004f88:	2002      	movs	r0, #2
 8004f8a:	f001 ff9b 	bl	8006ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8004f96:	2008      	movs	r0, #8
 8004f98:	f001 ff94 	bl	8006ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004fa4:	4802      	ldr	r0, [pc, #8]	@ (8004fb0 <ADC1_IRQHandler+0x10>)
 8004fa6:	f000 fd2b 	bl	8005a00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200002f4 	.word	0x200002f4

08004fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fb8:	4802      	ldr	r0, [pc, #8]	@ (8004fc4 <TIM2_IRQHandler+0x10>)
 8004fba:	f006 ff2d 	bl	800be18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fbe:	bf00      	nop
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200004c0 	.word	0x200004c0

08004fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004fcc:	4802      	ldr	r0, [pc, #8]	@ (8004fd8 <TIM3_IRQHandler+0x10>)
 8004fce:	f006 ff23 	bl	800be18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000500 	.word	0x20000500

08004fdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004fe0:	4802      	ldr	r0, [pc, #8]	@ (8004fec <I2C1_EV_IRQHandler+0x10>)
 8004fe2:	f002 fc0b 	bl	80077fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000348 	.word	0x20000348

08004ff0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ff4:	4802      	ldr	r0, [pc, #8]	@ (8005000 <I2C1_ER_IRQHandler+0x10>)
 8004ff6:	f002 fd72 	bl	8007ade <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000348 	.word	0x20000348

08005004 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005008:	4802      	ldr	r0, [pc, #8]	@ (8005014 <I2C2_EV_IRQHandler+0x10>)
 800500a:	f002 fbf7 	bl	80077fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2000039c 	.word	0x2000039c

08005018 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800501c:	4802      	ldr	r0, [pc, #8]	@ (8005028 <RTC_Alarm_IRQHandler+0x10>)
 800501e:	f005 ff7b 	bl	800af18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200003f0 	.word	0x200003f0

0800502c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return 1;
 8005030:	2301      	movs	r3, #1
}
 8005032:	4618      	mov	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <_kill>:

int _kill(int pid, int sig)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005044:	f008 f906 	bl	800d254 <__errno>
 8005048:	4603      	mov	r3, r0
 800504a:	2216      	movs	r2, #22
 800504c:	601a      	str	r2, [r3, #0]
  return -1;
 800504e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <_exit>:

void _exit (int status)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005062:	f04f 31ff 	mov.w	r1, #4294967295
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffe7 	bl	800503a <_kill>
  while (1) {}    /* Make sure we hang here */
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <_exit+0x12>

08005070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e00a      	b.n	8005098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005082:	f3af 8000 	nop.w
 8005086:	4601      	mov	r1, r0
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	60ba      	str	r2, [r7, #8]
 800508e:	b2ca      	uxtb	r2, r1
 8005090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	3301      	adds	r3, #1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	dbf0      	blt.n	8005082 <_read+0x12>
  }

  return len;
 80050a0:	687b      	ldr	r3, [r7, #4]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e009      	b.n	80050d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	60ba      	str	r2, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3301      	adds	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	dbf1      	blt.n	80050bc <_write+0x12>
  }
  return len;
 80050d8:	687b      	ldr	r3, [r7, #4]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <_close>:

int _close(int file)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005108:	605a      	str	r2, [r3, #4]
  return 0;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <_isatty>:

int _isatty(int file)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800511e:	2301      	movs	r3, #1
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
	...

08005144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800514c:	4a14      	ldr	r2, [pc, #80]	@ (80051a0 <_sbrk+0x5c>)
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <_sbrk+0x60>)
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005158:	4b13      	ldr	r3, [pc, #76]	@ (80051a8 <_sbrk+0x64>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005160:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <_sbrk+0x64>)
 8005162:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <_sbrk+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005166:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <_sbrk+0x64>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d207      	bcs.n	8005184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005174:	f008 f86e 	bl	800d254 <__errno>
 8005178:	4603      	mov	r3, r0
 800517a:	220c      	movs	r2, #12
 800517c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e009      	b.n	8005198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005184:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <_sbrk+0x64>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <_sbrk+0x64>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	4a05      	ldr	r2, [pc, #20]	@ (80051a8 <_sbrk+0x64>)
 8005194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20002800 	.word	0x20002800
 80051a4:	00000400 	.word	0x00000400
 80051a8:	20000548 	.word	0x20000548
 80051ac:	200006c8 	.word	0x200006c8

080051b0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80051bc:	f7ff fff8 	bl	80051b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051c0:	480b      	ldr	r0, [pc, #44]	@ (80051f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80051c2:	490c      	ldr	r1, [pc, #48]	@ (80051f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80051c4:	4a0c      	ldr	r2, [pc, #48]	@ (80051f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80051c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051c8:	e002      	b.n	80051d0 <LoopCopyDataInit>

080051ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ce:	3304      	adds	r3, #4

080051d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051d4:	d3f9      	bcc.n	80051ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051d6:	4a09      	ldr	r2, [pc, #36]	@ (80051fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80051d8:	4c09      	ldr	r4, [pc, #36]	@ (8005200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051dc:	e001      	b.n	80051e2 <LoopFillZerobss>

080051de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051e0:	3204      	adds	r2, #4

080051e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051e4:	d3fb      	bcc.n	80051de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051e6:	f008 f83b 	bl	800d260 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051ea:	f7fc ff01 	bl	8001ff0 <main>
  bx lr
 80051ee:	4770      	bx	lr
  ldr r0, =_sdata
 80051f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051f4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 80051f8:	0800e240 	.word	0x0800e240
  ldr r2, =_sbss
 80051fc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8005200:	200006c4 	.word	0x200006c4

08005204 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005204:	e7fe      	b.n	8005204 <COMP_IRQHandler>

08005206 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005210:	2003      	movs	r0, #3
 8005212:	f000 ffe5 	bl	80061e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005216:	200f      	movs	r0, #15
 8005218:	f000 f80e 	bl	8005238 <HAL_InitTick>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	71fb      	strb	r3, [r7, #7]
 8005226:	e001      	b.n	800522c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005228:	f7ff fc8c 	bl	8004b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800522c:	79fb      	ldrb	r3, [r7, #7]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005244:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <HAL_InitTick+0x68>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d022      	beq.n	8005292 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800524c:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <HAL_InitTick+0x6c>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b13      	ldr	r3, [pc, #76]	@ (80052a0 <HAL_InitTick+0x68>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005258:	fbb1 f3f3 	udiv	r3, r1, r3
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	4618      	mov	r0, r3
 8005262:	f001 f800 	bl	8006266 <HAL_SYSTICK_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d809      	bhi.n	8005286 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005272:	2200      	movs	r2, #0
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	f000 ffbc 	bl	80061f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800527e:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <HAL_InitTick+0x70>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e007      	b.n	8005296 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
 800528a:	e004      	b.n	8005296 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
 8005290:	e001      	b.n	8005296 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	20000004 	.word	0x20000004
 80052a8:	20000008 	.word	0x20000008

080052ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_IncTick+0x1c>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <HAL_IncTick+0x20>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4413      	add	r3, r2
 80052ba:	4a03      	ldr	r2, [pc, #12]	@ (80052c8 <HAL_IncTick+0x1c>)
 80052bc:	6013      	str	r3, [r2, #0]
}
 80052be:	bf00      	nop
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2000054c 	.word	0x2000054c
 80052cc:	2000000c 	.word	0x2000000c

080052d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return uwTick;
 80052d4:	4b02      	ldr	r3, [pc, #8]	@ (80052e0 <HAL_GetTick+0x10>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	2000054c 	.word	0x2000054c

080052e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052ec:	f7ff fff0 	bl	80052d0 <HAL_GetTick>
 80052f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d004      	beq.n	8005308 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_Delay+0x40>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005308:	bf00      	nop
 800530a:	f7ff ffe1 	bl	80052d0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	429a      	cmp	r2, r3
 8005318:	d8f7      	bhi.n	800530a <HAL_Delay+0x26>
  {
  }
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2000000c 	.word	0x2000000c

08005328 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800532c:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <HAL_ResumeTick+0x18>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a03      	ldr	r2, [pc, #12]	@ (8005340 <HAL_ResumeTick+0x18>)
 8005332:	f043 0302 	orr.w	r3, r3, #2
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	e000e010 	.word	0xe000e010

08005344 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005348:	4b04      	ldr	r3, [pc, #16]	@ (800535c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a03      	ldr	r2, [pc, #12]	@ (800535c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800534e:	f023 0304 	bic.w	r3, r3, #4
 8005352:	6053      	str	r3, [r2, #4]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	e0042000 	.word	0xe0042000

08005360 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	@ 0x38
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e127      	b.n	80055d0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d115      	bne.n	80053ba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539c:	4b8e      	ldr	r3, [pc, #568]	@ (80055d8 <HAL_ADC_Init+0x278>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a8d      	ldr	r2, [pc, #564]	@ (80055d8 <HAL_ADC_Init+0x278>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	4b8b      	ldr	r3, [pc, #556]	@ (80055d8 <HAL_ADC_Init+0x278>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fbf3 	bl	8004ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 80ff 	bne.w	80055c6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053d0:	f023 0302 	bic.w	r3, r3, #2
 80053d4:	f043 0202 	orr.w	r2, r3, #2
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80053dc:	4b7f      	ldr	r3, [pc, #508]	@ (80055dc <HAL_ADC_Init+0x27c>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	497c      	ldr	r1, [pc, #496]	@ (80055dc <HAL_ADC_Init+0x27c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80053f6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053fe:	4619      	mov	r1, r3
 8005400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005404:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800541a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005420:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005428:	4619      	mov	r1, r3
 800542a:	2302      	movs	r3, #2
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	fa93 f3a3 	rbit	r3, r3
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	fab3 f383 	clz	r3, r3
 800543c:	b2db      	uxtb	r3, r3
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8005442:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005446:	4313      	orrs	r3, r2
 8005448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800544e:	2b10      	cmp	r3, #16
 8005450:	d007      	beq.n	8005462 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800545a:	4313      	orrs	r3, r2
 800545c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545e:	4313      	orrs	r3, r2
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d04f      	beq.n	8005510 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005476:	4313      	orrs	r3, r2
 8005478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005482:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6912      	ldr	r2, [r2, #16]
 8005488:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800548c:	d003      	beq.n	8005496 <HAL_ADC_Init+0x136>
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6912      	ldr	r2, [r2, #16]
 8005492:	2a01      	cmp	r2, #1
 8005494:	d102      	bne.n	800549c <HAL_ADC_Init+0x13c>
 8005496:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800549a:	e000      	b.n	800549e <HAL_ADC_Init+0x13e>
 800549c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800549e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80054a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a2:	4313      	orrs	r3, r2
 80054a4:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d125      	bne.n	80054fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d114      	bne.n	80054e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	3b01      	subs	r3, #1
 80054c0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80054c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	fa92 f2a2 	rbit	r2, r2
 80054cc:	617a      	str	r2, [r7, #20]
  return result;
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	4093      	lsls	r3, r2
 80054d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054de:	4313      	orrs	r3, r2
 80054e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e2:	e00b      	b.n	80054fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	4b37      	ldr	r3, [pc, #220]	@ (80055e0 <HAL_ADC_Init+0x280>)
 8005504:	4013      	ands	r3, r2
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800550c:	430b      	orrs	r3, r1
 800550e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <HAL_ADC_Init+0x284>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005520:	430b      	orrs	r3, r1
 8005522:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552c:	d003      	beq.n	8005536 <HAL_ADC_Init+0x1d6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d119      	bne.n	800556a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553c:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	3b01      	subs	r3, #1
 8005546:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800554a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	fa92 f2a2 	rbit	r2, r2
 8005552:	60fa      	str	r2, [r7, #12]
  return result;
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	fab2 f282 	clz	r2, r2
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	fa03 f202 	lsl.w	r2, r3, r2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
 8005568:	e007      	b.n	800557a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <HAL_ADC_Init+0x288>)
 8005582:	4013      	ands	r3, r2
 8005584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d10b      	bne.n	80055a2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005594:	f023 0303 	bic.w	r3, r3, #3
 8005598:	f043 0201 	orr.w	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80055a0:	e014      	b.n	80055cc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a6:	f023 0312 	bic.w	r3, r3, #18
 80055aa:	f043 0210 	orr.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b6:	f043 0201 	orr.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80055c4:	e002      	b.n	80055cc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80055cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3738      	adds	r7, #56	@ 0x38
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40012700 	.word	0x40012700
 80055e0:	fcfc16ff 	.word	0xfcfc16ff
 80055e4:	c0fff18d 	.word	0xc0fff18d
 80055e8:	bf80fffe 	.word	0xbf80fffe

080055ec <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e0bc      	b.n	800577c <HAL_ADC_DeInit+0x190>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fcac 	bl	8005f6c <ADC_ConversionStop_Disable>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 80a9 	bne.w	8005772 <HAL_ADC_DeInit+0x186>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 021f 	mvn.w	r2, #31
 8005628:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b53      	ldr	r3, [pc, #332]	@ (8005784 <HAL_ADC_DeInit+0x198>)
 8005636:	400b      	ands	r3, r1
 8005638:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
                                    ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
                                    ADC_CR1_AWDCH                                       ));
    
    /* Reset register CR2 */
    ADC_CR2_CLEAR(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6899      	ldr	r1, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b50      	ldr	r3, [pc, #320]	@ (8005788 <HAL_ADC_DeInit+0x19c>)
 8005646:	400b      	ands	r3, r1
 8005648:	6093      	str	r3, [r2, #8]
    
    /* Reset register SMPR0 */
    ADC_SMPR0_CLEAR(hadc);
 800564a:	bf00      	nop
    
    /* Reset register SMPR1 */
    ADC_SMPR1_CLEAR(hadc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	0d5b      	lsrs	r3, r3, #21
 8005658:	055b      	lsls	r3, r3, #21
 800565a:	60d3      	str	r3, [r2, #12]
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800566a:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
                                      ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
                                      ADC_SMPR2_SMP10                                      ));
    
    /* Reset register SMPR3 */
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800567a:	615a      	str	r2, [r3, #20]
                                      ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
                                      ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
                                      ADC_SMPR3_SMP0                                    ));
    
    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800568a:	f023 030f 	bic.w	r3, r3, #15
 800568e:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800569e:	f023 030f 	bic.w	r3, r3, #15
 80056a2:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056b2:	f023 030f 	bic.w	r3, r3, #15
 80056b6:	6213      	str	r3, [r2, #32]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056c6:	f023 030f 	bic.w	r3, r3, #15
 80056ca:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056da:	f023 030f 	bic.w	r3, r3, #15
 80056de:	6293      	str	r3, [r2, #40]	@ 0x28
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80056ee:	f023 030f 	bic.w	r3, r3, #15
 80056f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b23      	ldr	r3, [pc, #140]	@ (800578c <HAL_ADC_DeInit+0x1a0>)
 8005700:	400b      	ands	r3, r1
 8005702:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8005712:	635a      	str	r2, [r3, #52]	@ 0x34
                                     ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
                                     ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8005732:	63da      	str	r2, [r3, #60]	@ 0x3c
                                     ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
    
    /* Reset register SQR5 */
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40
                                     ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
    
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	0d9b      	lsrs	r3, r3, #22
 8005750:	059b      	lsls	r3, r3, #22
 8005752:	6453      	str	r3, [r2, #68]	@ 0x44
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8005754:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <HAL_ADC_DeInit+0x1a4>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a0d      	ldr	r2, [pc, #52]	@ (8005790 <HAL_ADC_DeInit+0x1a4>)
 800575a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800575e:	6053      	str	r3, [r2, #4]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff fa65 	bl	8004c30 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	64da      	str	r2, [r3, #76]	@ 0x4c
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	f83c0000 	.word	0xf83c0000
 8005788:	8080f08c 	.word	0x8080f08c
 800578c:	fe0f8000 	.word	0xfe0f8000
 8005790:	40012700 	.word	0x40012700

08005794 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_ADC_Start+0x1a>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e04e      	b.n	800584c <HAL_ADC_Start+0xb8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb7c 	bl	8005eb4 <ADC_Enable>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d141      	bne.n	800584a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80057f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005804:	d106      	bne.n	8005814 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	f023 0206 	bic.w	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	651a      	str	r2, [r3, #80]	@ 0x50
 8005812:	e002      	b.n	800581a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800582a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d107      	bne.n	800584a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005848:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_ADC_Stop+0x1a>
 800586a:	2302      	movs	r3, #2
 800586c:	e01a      	b.n	80058a4 <HAL_ADC_Stop+0x50>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fb78 	bl	8005f6c <ADC_ConversionStop_Disable>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	f043 0201 	orr.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_ADC_Start_IT+0x1a>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e058      	b.n	8005978 <HAL_ADC_Start_IT+0xcc>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 faf0 	bl	8005eb4 <ADC_Enable>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d14b      	bne.n	8005976 <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005904:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005908:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591c:	d106      	bne.n	800592c <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	f023 0206 	bic.w	r2, r3, #6
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	651a      	str	r2, [r3, #80]	@ 0x50
 800592a:	e002      	b.n	8005932 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005942:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005952:	f043 0320 	orr.w	r3, r3, #32
 8005956:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d107      	bne.n	8005976 <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005974:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_ADC_Stop_IT+0x1a>
 8005996:	2302      	movs	r3, #2
 8005998:	e022      	b.n	80059e0 <HAL_ADC_Stop_IT+0x60>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fae2 	bl	8005f6c <ADC_ConversionStop_Disable>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d111      	bne.n	80059d6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0220 	bic.w	r2, r2, #32
 80059c0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04c      	beq.n	8005abc <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d047      	beq.n	8005abc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d12c      	bne.n	8005aac <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d127      	bne.n	8005aac <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d006      	beq.n	8005a78 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d119      	bne.n	8005aac <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0220 	bic.w	r2, r2, #32
 8005a86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa4:	f043 0201 	orr.w	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7fd fbbb 	bl	8003228 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f06f 0212 	mvn.w	r2, #18
 8005aba:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d05a      	beq.n	8005b7c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d055      	beq.n	8005b7c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d13a      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12c      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d125      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11e      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d119      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b46:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa3e 	bl	8005fee <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 020c 	mvn.w	r2, #12
 8005b7a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00d      	beq.n	8005bac <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f826 	bl	8005bee <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0201 	mvn.w	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d017      	beq.n	8005be6 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d012      	beq.n	8005be6 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc4:	f043 0202 	orr.w	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0220 	mvn.w	r2, #32
 8005bd4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f812 	bl	8005c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0220 	mvn.w	r2, #32
 8005be4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x20>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e134      	b.n	8005e9e <HAL_ADC_ConfigChannel+0x28a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d81c      	bhi.n	8005c7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	3b05      	subs	r3, #5
 8005c56:	221f      	movs	r2, #31
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	4019      	ands	r1, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3b05      	subs	r3, #5
 8005c70:	fa00 f203 	lsl.w	r2, r0, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c7c:	e07e      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b0c      	cmp	r3, #12
 8005c84:	d81c      	bhi.n	8005cc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	3b23      	subs	r3, #35	@ 0x23
 8005c98:	221f      	movs	r2, #31
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	4019      	ands	r1, r3
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	3b23      	subs	r3, #35	@ 0x23
 8005cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cbe:	e05d      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b12      	cmp	r3, #18
 8005cc6:	d81c      	bhi.n	8005d02 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3b41      	subs	r3, #65	@ 0x41
 8005cda:	221f      	movs	r2, #31
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	4019      	ands	r1, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3b41      	subs	r3, #65	@ 0x41
 8005cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d00:	e03c      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	d81c      	bhi.n	8005d44 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b5f      	subs	r3, #95	@ 0x5f
 8005d1c:	221f      	movs	r2, #31
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	4019      	ands	r1, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	3b5f      	subs	r3, #95	@ 0x5f
 8005d36:	fa00 f203 	lsl.w	r2, r0, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d42:	e01b      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	3b7d      	subs	r3, #125	@ 0x7d
 8005d56:	221f      	movs	r2, #31
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	4019      	ands	r1, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3b7d      	subs	r3, #125	@ 0x7d
 8005d70:	fa00 f203 	lsl.w	r2, r0, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d81a      	bhi.n	8005dba <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6959      	ldr	r1, [r3, #20]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	2207      	movs	r2, #7
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	4019      	ands	r1, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6898      	ldr	r0, [r3, #8]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	4413      	add	r3, r2
 8005dac:	fa00 f203 	lsl.w	r2, r0, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	615a      	str	r2, [r3, #20]
 8005db8:	e042      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b13      	cmp	r3, #19
 8005dc0:	d81c      	bhi.n	8005dfc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6919      	ldr	r1, [r3, #16]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3b1e      	subs	r3, #30
 8005dd4:	2207      	movs	r2, #7
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	4019      	ands	r1, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6898      	ldr	r0, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4613      	mov	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	3b1e      	subs	r3, #30
 8005dee:	fa00 f203 	lsl.w	r2, r0, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	e021      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b1a      	cmp	r3, #26
 8005e02:	d81c      	bhi.n	8005e3e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68d9      	ldr	r1, [r3, #12]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	3b3c      	subs	r3, #60	@ 0x3c
 8005e16:	2207      	movs	r2, #7
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	4019      	ands	r1, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	6898      	ldr	r0, [r3, #8]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3b3c      	subs	r3, #60	@ 0x3c
 8005e30:	fa00 f203 	lsl.w	r2, r0, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e000      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005e3e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d003      	beq.n	8005e50 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005e4c:	2b11      	cmp	r3, #17
 8005e4e:	d121      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005e50:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <HAL_ADC_ConfigChannel+0x294>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d11b      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005e5c:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <HAL_ADC_ConfigChannel+0x294>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a11      	ldr	r2, [pc, #68]	@ (8005ea8 <HAL_ADC_ConfigChannel+0x294>)
 8005e62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e66:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d111      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e70:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <HAL_ADC_ConfigChannel+0x298>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a0e      	ldr	r2, [pc, #56]	@ (8005eb0 <HAL_ADC_ConfigChannel+0x29c>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0c9a      	lsrs	r2, r3, #18
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005e86:	e002      	b.n	8005e8e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f9      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	40012700 	.word	0x40012700
 8005eac:	20000004 	.word	0x20000004
 8005eb0:	431bde83 	.word	0x431bde83

08005eb4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b40      	cmp	r3, #64	@ 0x40
 8005ed0:	d043      	beq.n	8005f5a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005ee2:	4b20      	ldr	r3, [pc, #128]	@ (8005f64 <ADC_Enable+0xb0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a20      	ldr	r2, [pc, #128]	@ (8005f68 <ADC_Enable+0xb4>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0c9a      	lsrs	r2, r3, #18
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005ef6:	e002      	b.n	8005efe <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1f9      	bne.n	8005ef8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005f04:	f7ff f9e4 	bl	80052d0 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005f0a:	e01f      	b.n	8005f4c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005f0c:	f7ff f9e0 	bl	80052d0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d918      	bls.n	8005f4c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b40      	cmp	r3, #64	@ 0x40
 8005f26:	d011      	beq.n	8005f4c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2c:	f043 0210 	orr.w	r2, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f38:	f043 0201 	orr.w	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e007      	b.n	8005f5c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f56:	2b40      	cmp	r3, #64	@ 0x40
 8005f58:	d1d8      	bne.n	8005f0c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000004 	.word	0x20000004
 8005f68:	431bde83 	.word	0x431bde83

08005f6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d12e      	bne.n	8005fe4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0201 	bic.w	r2, r2, #1
 8005f94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f96:	f7ff f99b 	bl	80052d0 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005f9c:	e01b      	b.n	8005fd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8005f9e:	f7ff f997 	bl	80052d0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d914      	bls.n	8005fd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb6:	2b40      	cmp	r3, #64	@ 0x40
 8005fb8:	d10d      	bne.n	8005fd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fbe:	f043 0210 	orr.w	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e007      	b.n	8005fe6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe0:	2b40      	cmp	r3, #64	@ 0x40
 8005fe2:	d0dc      	beq.n	8005f9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <__NVIC_SetPriorityGrouping>:
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <__NVIC_SetPriorityGrouping+0x44>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800601c:	4013      	ands	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800602c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006032:	4a04      	ldr	r2, [pc, #16]	@ (8006044 <__NVIC_SetPriorityGrouping+0x44>)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	60d3      	str	r3, [r2, #12]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	e000ed00 	.word	0xe000ed00

08006048 <__NVIC_GetPriorityGrouping>:
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800604c:	4b04      	ldr	r3, [pc, #16]	@ (8006060 <__NVIC_GetPriorityGrouping+0x18>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	0a1b      	lsrs	r3, r3, #8
 8006052:	f003 0307 	and.w	r3, r3, #7
}
 8006056:	4618      	mov	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	e000ed00 	.word	0xe000ed00

08006064 <__NVIC_EnableIRQ>:
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800606e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006072:	2b00      	cmp	r3, #0
 8006074:	db0b      	blt.n	800608e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	f003 021f 	and.w	r2, r3, #31
 800607c:	4906      	ldr	r1, [pc, #24]	@ (8006098 <__NVIC_EnableIRQ+0x34>)
 800607e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	2001      	movs	r0, #1
 8006086:	fa00 f202 	lsl.w	r2, r0, r2
 800608a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	e000e100 	.word	0xe000e100

0800609c <__NVIC_DisableIRQ>:
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db12      	blt.n	80060d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	f003 021f 	and.w	r2, r3, #31
 80060b4:	490a      	ldr	r1, [pc, #40]	@ (80060e0 <__NVIC_DisableIRQ+0x44>)
 80060b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2001      	movs	r0, #1
 80060be:	fa00 f202 	lsl.w	r2, r0, r2
 80060c2:	3320      	adds	r3, #32
 80060c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80060c8:	f3bf 8f4f 	dsb	sy
}
 80060cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060ce:	f3bf 8f6f 	isb	sy
}
 80060d2:	bf00      	nop
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e100 	.word	0xe000e100

080060e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	6039      	str	r1, [r7, #0]
 80060ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db0a      	blt.n	800610e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	490c      	ldr	r1, [pc, #48]	@ (8006130 <__NVIC_SetPriority+0x4c>)
 80060fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006102:	0112      	lsls	r2, r2, #4
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	440b      	add	r3, r1
 8006108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800610c:	e00a      	b.n	8006124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	4908      	ldr	r1, [pc, #32]	@ (8006134 <__NVIC_SetPriority+0x50>)
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	3b04      	subs	r3, #4
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	440b      	add	r3, r1
 8006122:	761a      	strb	r2, [r3, #24]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e100 	.word	0xe000e100
 8006134:	e000ed00 	.word	0xe000ed00

08006138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	@ 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f1c3 0307 	rsb	r3, r3, #7
 8006152:	2b04      	cmp	r3, #4
 8006154:	bf28      	it	cs
 8006156:	2304      	movcs	r3, #4
 8006158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3304      	adds	r3, #4
 800615e:	2b06      	cmp	r3, #6
 8006160:	d902      	bls.n	8006168 <NVIC_EncodePriority+0x30>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3b03      	subs	r3, #3
 8006166:	e000      	b.n	800616a <NVIC_EncodePriority+0x32>
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43da      	mvns	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	401a      	ands	r2, r3
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006180:	f04f 31ff 	mov.w	r1, #4294967295
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	43d9      	mvns	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006190:	4313      	orrs	r3, r2
         );
}
 8006192:	4618      	mov	r0, r3
 8006194:	3724      	adds	r7, #36	@ 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061ac:	d301      	bcc.n	80061b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ae:	2301      	movs	r3, #1
 80061b0:	e00f      	b.n	80061d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061b2:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <SysTick_Config+0x40>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ba:	210f      	movs	r1, #15
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	f7ff ff90 	bl	80060e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <SysTick_Config+0x40>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ca:	4b04      	ldr	r3, [pc, #16]	@ (80061dc <SysTick_Config+0x40>)
 80061cc:	2207      	movs	r2, #7
 80061ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	e000e010 	.word	0xe000e010

080061e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff09 	bl	8006000 <__NVIC_SetPriorityGrouping>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	4603      	mov	r3, r0
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006208:	f7ff ff1e 	bl	8006048 <__NVIC_GetPriorityGrouping>
 800620c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f7ff ff90 	bl	8006138 <NVIC_EncodePriority>
 8006218:	4602      	mov	r2, r0
 800621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ff5f 	bl	80060e4 <__NVIC_SetPriority>
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff11 	bl	8006064 <__NVIC_EnableIRQ>
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	4603      	mov	r3, r0
 8006252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff1f 	bl	800609c <__NVIC_DisableIRQ>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff ff94 	bl	800619c <SysTick_Config>
 8006274:	4603      	mov	r3, r0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d005      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2204      	movs	r2, #4
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e029      	b.n	80062f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 020e 	bic.w	r2, r2, #14
 80062b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f003 021c 	and.w	r2, r3, #28
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	2101      	movs	r1, #1
 80062d0:	fa01 f202 	lsl.w	r2, r1, r2
 80062d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
    }
  }
  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800630e:	b2db      	uxtb	r3, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
	...

0800631c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006324:	f7fe ffd4 	bl	80052d0 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800632a:	e010      	b.n	800634e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d00c      	beq.n	800634e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <FLASH_WaitForLastOperation+0x2e>
 800633a:	f7fe ffc9 	bl	80052d0 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d201      	bcs.n	800634e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e02f      	b.n	80063ae <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d0e8      	beq.n	800632c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800635a:	4b17      	ldr	r3, [pc, #92]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d102      	bne.n	800636c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 8006368:	2202      	movs	r2, #2
 800636a:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800636c:	4b12      	ldr	r3, [pc, #72]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006378:	d014      	beq.n	80063a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800637a:	4b0f      	ldr	r3, [pc, #60]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006386:	d00d      	beq.n	80063a4 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8006388:	4b0b      	ldr	r3, [pc, #44]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006394:	d006      	beq.n	80063a4 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8006396:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <FLASH_WaitForLastOperation+0x9c>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800639e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a2:	d103      	bne.n	80063ac <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80063a4:	f000 f80a 	bl	80063bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40023c00 	.word	0x40023c00

080063bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80063c6:	4b26      	ldr	r3, [pc, #152]	@ (8006460 <FLASH_SetErrorCode+0xa4>)
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d2:	d109      	bne.n	80063e8 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80063d4:	4b23      	ldr	r3, [pc, #140]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	4a21      	ldr	r2, [pc, #132]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 80063de:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80063e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006460 <FLASH_SetErrorCode+0xa4>)
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f4:	d109      	bne.n	800640a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80063f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 8006400:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006408:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800640a:	4b15      	ldr	r3, [pc, #84]	@ (8006460 <FLASH_SetErrorCode+0xa4>)
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006416:	d109      	bne.n	800642c <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	4a10      	ldr	r2, [pc, #64]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 8006422:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800642a:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800642c:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <FLASH_SetErrorCode+0xa4>)
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006438:	d109      	bne.n	800644e <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800643a:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f043 0308 	orr.w	r3, r3, #8
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <FLASH_SetErrorCode+0xa8>)
 8006444:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800644c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800644e:	4a04      	ldr	r2, [pc, #16]	@ (8006460 <FLASH_SetErrorCode+0xa4>)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6193      	str	r3, [r2, #24]
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40023c00 	.word	0x40023c00
 8006464:	20000550 	.word	0x20000550

08006468 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800646c:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 800647a:	4a07      	ldr	r2, [pc, #28]	@ (8006498 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 800647c:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800647e:	4b05      	ldr	r3, [pc, #20]	@ (8006494 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8006480:	4a06      	ldr	r2, [pc, #24]	@ (800649c <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8006482:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40023c00 	.word	0x40023c00
 8006498:	89abcdef 	.word	0x89abcdef
 800649c:	02030405 	.word	0x02030405

080064a0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4a04      	ldr	r2, [pc, #16]	@ (80064bc <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40023c00 	.word	0x40023c00

080064c0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80064d2:	f7ff ff23 	bl	800631c <FLASH_WaitForLastOperation>
 80064d6:	4603      	mov	r3, r0
 80064d8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11a      	bne.n	8006516 <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006520 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d102      	bne.n	80064f2 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d102      	bne.n	80064fe <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800650a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800650e:	f7ff ff05 	bl	800631c <FLASH_WaitForLastOperation>
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000550 	.word	0x20000550

08006524 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006530:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 8006532:	7c1b      	ldrb	r3, [r3, #16]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_FLASHEx_DATAEEPROM_Program+0x18>
 8006538:	2302      	movs	r3, #2
 800653a:	e058      	b.n	80065ee <HAL_FLASHEx_DATAEEPROM_Program+0xca>
 800653c:	4b2e      	ldr	r3, [pc, #184]	@ (80065f8 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 800653e:	2201      	movs	r2, #1
 8006540:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006542:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006546:	f7ff fee9 	bl	800631c <FLASH_WaitForLastOperation>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d148      	bne.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006554:	4b28      	ldr	r3, [pc, #160]	@ (80065f8 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 8006556:	2200      	movs	r2, #0
 8006558:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d106      	bne.n	800656e <HAL_FLASHEx_DATAEEPROM_Program+0x4a>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	68b8      	ldr	r0, [r7, #8]
 8006564:	f000 fa18 	bl	8006998 <FLASH_DATAEEPROM_ProgramWord>
 8006568:	4603      	mov	r3, r0
 800656a:	75fb      	strb	r3, [r7, #23]
 800656c:	e03b      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d108      	bne.n	8006586 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	b29b      	uxth	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f000 f99c 	bl	80068b8 <FLASH_DATAEEPROM_ProgramHalfWord>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]
 8006584:	e02f      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d108      	bne.n	800659e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	b2db      	uxtb	r3, r3
 8006590:	4619      	mov	r1, r3
 8006592:	68b8      	ldr	r0, [r7, #8]
 8006594:	f000 f934 	bl	8006800 <FLASH_DATAEEPROM_ProgramByte>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]
 800659c:	e023      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d108      	bne.n	80065b6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	68b8      	ldr	r0, [r7, #8]
 80065ac:	f000 f826 	bl	80065fc <FLASH_DATAEEPROM_FastProgramByte>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	e017      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d108      	bne.n	80065ce <HAL_FLASHEx_DATAEEPROM_Program+0xaa>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f000 f87e 	bl	80066c4 <FLASH_DATAEEPROM_FastProgramHalfWord>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]
 80065cc:	e00b      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d106      	bne.n	80065e2 <HAL_FLASHEx_DATAEEPROM_Program+0xbe>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f000 f8ec 	bl	80067b4 <FLASH_DATAEEPROM_FastProgramWord>
 80065dc:	4603      	mov	r3, r0
 80065de:	75fb      	strb	r3, [r7, #23]
 80065e0:	e001      	b.n	80065e6 <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else
    {
      status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065e6:	4b04      	ldr	r3, [pc, #16]	@ (80065f8 <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	741a      	strb	r2, [r3, #16]

  return status;
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000550 	.word	0x20000550

080065fc <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006614:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006618:	f7ff fe80 	bl	800631c <FLASH_WaitForLastOperation>
 800661c:	4603      	mov	r3, r0
 800661e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d145      	bne.n	80066b2 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8006626:	4b25      	ldr	r3, [pc, #148]	@ (80066bc <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4a24      	ldr	r2, [pc, #144]	@ (80066bc <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800663e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006642:	f7ff fe6b 	bl	800631c <FLASH_WaitForLastOperation>
 8006646:	4603      	mov	r3, r0
 8006648:	75fb      	strb	r3, [r7, #23]
 800664a:	e032      	b.n	80066b2 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	22ff      	movs	r2, #255	@ 0xff
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	43db      	mvns	r3, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4013      	ands	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	4619      	mov	r1, r3
 800667c:	2002      	movs	r0, #2
 800667e:	f7ff ff1f 	bl	80064c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8006686:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8006688:	2200      	movs	r2, #0
 800668a:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4619      	mov	r1, r3
 8006696:	2010      	movs	r0, #16
 8006698:	f7ff ff44 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
 800669c:	4603      	mov	r3, r0
 800669e:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80066a0:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80066a2:	7c1b      	ldrb	r3, [r3, #16]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e003      	b.n	80066b4 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40023c00 	.word	0x40023c00
 80066c0:	20000550 	.word	0x20000550

080066c4 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80066dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80066e0:	f7ff fe1c 	bl	800631c <FLASH_WaitForLastOperation>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d158      	bne.n	80067a0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80066ee:	4b2f      	ldr	r3, [pc, #188]	@ (80067ac <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4a2e      	ldr	r2, [pc, #184]	@ (80067ac <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 80066f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f8:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006706:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800670a:	f7ff fe07 	bl	800631c <FLASH_WaitForLastOperation>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]
 8006712:	e045      	b.n	80067a0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8006714:	4b26      	ldr	r3, [pc, #152]	@ (80067b0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8006716:	2200      	movs	r2, #0
 8006718:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d028      	beq.n	8006776 <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	43db      	mvns	r3, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4013      	ands	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	4619      	mov	r1, r3
 8006756:	2002      	movs	r0, #2
 8006758:	f7ff feb2 	bl	80064c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f023 0303 	bic.w	r3, r3, #3
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4619      	mov	r1, r3
 800676a:	2010      	movs	r0, #16
 800676c:	f7ff feda 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
 8006770:	4603      	mov	r3, r0
 8006772:	75fb      	strb	r3, [r7, #23]
 8006774:	e00b      	b.n	800678e <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 8006776:	2200      	movs	r2, #0
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	2004      	movs	r0, #4
 800677c:	f7ff fed2 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	2200      	movs	r2, #0
 8006786:	4619      	mov	r1, r3
 8006788:	2004      	movs	r0, #4
 800678a:	f7ff fecb 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800678e:	4b08      	ldr	r3, [pc, #32]	@ (80067b0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8006790:	7c1b      	ldrb	r3, [r3, #16]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 8006796:	2302      	movs	r3, #2
 8006798:	e003      	b.n	80067a2 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 800679a:	4b05      	ldr	r3, [pc, #20]	@ (80067b0 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 800679c:	2201      	movs	r2, #1
 800679e:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40023c00 	.word	0x40023c00
 80067b0:	20000550 	.word	0x20000550

080067b4 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067c6:	f7ff fda9 	bl	800631c <FLASH_WaitForLastOperation>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10e      	bne.n	80067f2 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80067d4:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 80067da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067de:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80067e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80067ea:	f7ff fd97 	bl	800631c <FLASH_WaitForLastOperation>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40023c00 	.word	0x40023c00

08006800 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006818:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800681c:	f7ff fd7e 	bl	800631c <FLASH_WaitForLastOperation>
 8006820:	4603      	mov	r3, r0
 8006822:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d13f      	bne.n	80068aa <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006836:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800683a:	f7ff fd6f 	bl	800631c <FLASH_WaitForLastOperation>
 800683e:	4603      	mov	r3, r0
 8006840:	75fb      	strb	r3, [r7, #23]
 8006842:	e032      	b.n	80068aa <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	22ff      	movs	r2, #255	@ 0xff
 800685c:	fa02 f303 	lsl.w	r3, r2, r3
 8006860:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	43db      	mvns	r3, r3
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4013      	ands	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	4619      	mov	r1, r3
 8006874:	2002      	movs	r0, #2
 8006876:	f7ff fe23 	bl	80064c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8006880:	2200      	movs	r2, #0
 8006882:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4619      	mov	r1, r3
 800688e:	2010      	movs	r0, #16
 8006890:	f7ff fe48 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8006898:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800689a:	7c1b      	ldrb	r3, [r3, #16]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e003      	b.n	80068ac <FLASH_DATAEEPROM_ProgramByte+0xac>
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000550 	.word	0x20000550

080068b8 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068d4:	f7ff fd22 	bl	800631c <FLASH_WaitForLastOperation>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d152      	bne.n	8006988 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 80068e2:	887b      	ldrh	r3, [r7, #2]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068f2:	f7ff fd13 	bl	800631c <FLASH_WaitForLastOperation>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]
 80068fa:	e045      	b.n	8006988 <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80068fc:	4b25      	ldr	r3, [pc, #148]	@ (8006994 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80068fe:	2200      	movs	r2, #0
 8006900:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d028      	beq.n	800695e <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	43db      	mvns	r3, r3
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4013      	ands	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	4619      	mov	r1, r3
 800693e:	2002      	movs	r0, #2
 8006940:	f7ff fdbe 	bl	80064c0 <HAL_FLASHEx_DATAEEPROM_Erase>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4619      	mov	r1, r3
 8006952:	2010      	movs	r0, #16
 8006954:	f7ff fde6 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]
 800695c:	e00b      	b.n	8006976 <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800695e:	2200      	movs	r2, #0
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	2004      	movs	r0, #4
 8006964:	f7ff fdde 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3301      	adds	r3, #1
 800696c:	2200      	movs	r2, #0
 800696e:	4619      	mov	r1, r3
 8006970:	2004      	movs	r0, #4
 8006972:	f7ff fdd7 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8006976:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8006978:	7c1b      	ldrb	r3, [r3, #16]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 800697e:	2302      	movs	r3, #2
 8006980:	e003      	b.n	800698a <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8006982:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8006984:	2201      	movs	r2, #1
 8006986:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000550 	.word	0x20000550

08006998 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80069a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80069aa:	f7ff fcb7 	bl	800631c <FLASH_WaitForLastOperation>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d108      	bne.n	80069ca <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80069be:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80069c2:	f7ff fcab 	bl	800631c <FLASH_WaitForLastOperation>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80069ea:	e154      	b.n	8006c96 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	2101      	movs	r1, #1
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	4013      	ands	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8146 	beq.w	8006c90 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d005      	beq.n	8006a1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d130      	bne.n	8006a7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	2203      	movs	r2, #3
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4013      	ands	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006a52:	2201      	movs	r2, #1
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	f003 0201 	and.w	r2, r3, #1
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d017      	beq.n	8006aba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	2203      	movs	r2, #3
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d123      	bne.n	8006b0e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	08da      	lsrs	r2, r3, #3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3208      	adds	r2, #8
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	220f      	movs	r2, #15
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43db      	mvns	r3, r3
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	08da      	lsrs	r2, r3, #3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3208      	adds	r2, #8
 8006b08:	6939      	ldr	r1, [r7, #16]
 8006b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	2203      	movs	r2, #3
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4013      	ands	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f003 0203 	and.w	r2, r3, #3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80a0 	beq.w	8006c90 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b50:	4b58      	ldr	r3, [pc, #352]	@ (8006cb4 <HAL_GPIO_Init+0x2e0>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4a57      	ldr	r2, [pc, #348]	@ (8006cb4 <HAL_GPIO_Init+0x2e0>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6213      	str	r3, [r2, #32]
 8006b5c:	4b55      	ldr	r3, [pc, #340]	@ (8006cb4 <HAL_GPIO_Init+0x2e0>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b68:	4a53      	ldr	r2, [pc, #332]	@ (8006cb8 <HAL_GPIO_Init+0x2e4>)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	220f      	movs	r2, #15
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	43db      	mvns	r3, r3
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a4b      	ldr	r2, [pc, #300]	@ (8006cbc <HAL_GPIO_Init+0x2e8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d019      	beq.n	8006bc8 <HAL_GPIO_Init+0x1f4>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a4a      	ldr	r2, [pc, #296]	@ (8006cc0 <HAL_GPIO_Init+0x2ec>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d013      	beq.n	8006bc4 <HAL_GPIO_Init+0x1f0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a49      	ldr	r2, [pc, #292]	@ (8006cc4 <HAL_GPIO_Init+0x2f0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00d      	beq.n	8006bc0 <HAL_GPIO_Init+0x1ec>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a48      	ldr	r2, [pc, #288]	@ (8006cc8 <HAL_GPIO_Init+0x2f4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <HAL_GPIO_Init+0x1e8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a47      	ldr	r2, [pc, #284]	@ (8006ccc <HAL_GPIO_Init+0x2f8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <HAL_GPIO_Init+0x1e4>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	e008      	b.n	8006bca <HAL_GPIO_Init+0x1f6>
 8006bb8:	2305      	movs	r3, #5
 8006bba:	e006      	b.n	8006bca <HAL_GPIO_Init+0x1f6>
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e004      	b.n	8006bca <HAL_GPIO_Init+0x1f6>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e002      	b.n	8006bca <HAL_GPIO_Init+0x1f6>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <HAL_GPIO_Init+0x1f6>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	f002 0203 	and.w	r2, r2, #3
 8006bd0:	0092      	lsls	r2, r2, #2
 8006bd2:	4093      	lsls	r3, r2
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006bda:	4937      	ldr	r1, [pc, #220]	@ (8006cb8 <HAL_GPIO_Init+0x2e4>)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	089b      	lsrs	r3, r3, #2
 8006be0:	3302      	adds	r3, #2
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006be8:	4b39      	ldr	r3, [pc, #228]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006c0c:	4a30      	ldr	r2, [pc, #192]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c12:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006c36:	4a26      	ldr	r2, [pc, #152]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c3c:	4b24      	ldr	r3, [pc, #144]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006c60:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c66:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	4013      	ands	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006c8a:	4a11      	ldr	r2, [pc, #68]	@ (8006cd0 <HAL_GPIO_Init+0x2fc>)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	3301      	adds	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f aea3 	bne.w	80069ec <HAL_GPIO_Init+0x18>
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40020000 	.word	0x40020000
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40020800 	.word	0x40020800
 8006cc8:	40020c00 	.word	0x40020c00
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8006cea:	e0b8      	b.n	8006e5e <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8006cec:	2201      	movs	r2, #1
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80ab 	beq.w	8006e58 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8006d02:	4a5d      	ldr	r2, [pc, #372]	@ (8006e78 <HAL_GPIO_DeInit+0x1a4>)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	089b      	lsrs	r3, r3, #2
 8006d08:	3302      	adds	r3, #2
 8006d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0e:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	220f      	movs	r2, #15
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a55      	ldr	r2, [pc, #340]	@ (8006e7c <HAL_GPIO_DeInit+0x1a8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d019      	beq.n	8006d60 <HAL_GPIO_DeInit+0x8c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a54      	ldr	r2, [pc, #336]	@ (8006e80 <HAL_GPIO_DeInit+0x1ac>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_GPIO_DeInit+0x88>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a53      	ldr	r2, [pc, #332]	@ (8006e84 <HAL_GPIO_DeInit+0x1b0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00d      	beq.n	8006d58 <HAL_GPIO_DeInit+0x84>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a52      	ldr	r2, [pc, #328]	@ (8006e88 <HAL_GPIO_DeInit+0x1b4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <HAL_GPIO_DeInit+0x80>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a51      	ldr	r2, [pc, #324]	@ (8006e8c <HAL_GPIO_DeInit+0x1b8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <HAL_GPIO_DeInit+0x7c>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	e008      	b.n	8006d62 <HAL_GPIO_DeInit+0x8e>
 8006d50:	2305      	movs	r3, #5
 8006d52:	e006      	b.n	8006d62 <HAL_GPIO_DeInit+0x8e>
 8006d54:	2303      	movs	r3, #3
 8006d56:	e004      	b.n	8006d62 <HAL_GPIO_DeInit+0x8e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e002      	b.n	8006d62 <HAL_GPIO_DeInit+0x8e>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <HAL_GPIO_DeInit+0x8e>
 8006d60:	2300      	movs	r3, #0
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f002 0203 	and.w	r2, r2, #3
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4093      	lsls	r3, r2
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d132      	bne.n	8006dd8 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006d72:	4b47      	ldr	r3, [pc, #284]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	4945      	ldr	r1, [pc, #276]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006d80:	4b43      	ldr	r3, [pc, #268]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	4941      	ldr	r1, [pc, #260]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006d8e:	4b40      	ldr	r3, [pc, #256]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	493e      	ldr	r1, [pc, #248]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	493a      	ldr	r1, [pc, #232]	@ (8006e90 <HAL_GPIO_DeInit+0x1bc>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	220f      	movs	r2, #15
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8006dba:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <HAL_GPIO_DeInit+0x1a4>)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	43da      	mvns	r2, r3
 8006dca:	482b      	ldr	r0, [pc, #172]	@ (8006e78 <HAL_GPIO_DeInit+0x1a4>)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	089b      	lsrs	r3, r3, #2
 8006dd0:	400a      	ands	r2, r1
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	2103      	movs	r1, #3
 8006de2:	fa01 f303 	lsl.w	r3, r1, r3
 8006de6:	43db      	mvns	r3, r3
 8006de8:	401a      	ands	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	08da      	lsrs	r2, r3, #3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3208      	adds	r2, #8
 8006df6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	220f      	movs	r2, #15
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	08d2      	lsrs	r2, r2, #3
 8006e0e:	4019      	ands	r1, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3208      	adds	r2, #8
 8006e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	2103      	movs	r1, #3
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	43db      	mvns	r3, r3
 8006e28:	401a      	ands	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	2101      	movs	r1, #1
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	401a      	ands	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	2103      	movs	r1, #3
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f47f af40 	bne.w	8006cec <HAL_GPIO_DeInit+0x18>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr
 8006e78:	40010000 	.word	0x40010000
 8006e7c:	40020000 	.word	0x40020000
 8006e80:	40020400 	.word	0x40020400
 8006e84:	40020800 	.word	0x40020800
 8006e88:	40020c00 	.word	0x40020c00
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40010400 	.word	0x40010400

08006e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ea4:	787b      	ldrb	r3, [r7, #1]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006eb0:	e003      	b.n	8006eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006eb2:	887b      	ldrh	r3, [r7, #2]
 8006eb4:	041a      	lsls	r2, r3, #16
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	619a      	str	r2, [r3, #24]
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d006      	beq.n	8006ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eda:	4a05      	ldr	r2, [pc, #20]	@ (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fc fa5c 	bl	80033a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40010400 	.word	0x40010400

08006ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e12b      	b.n	800715e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fd fea8 	bl	8004c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2224      	movs	r2, #36	@ 0x24
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f58:	f003 fa9c 	bl	800a494 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4a81      	ldr	r2, [pc, #516]	@ (8007168 <HAL_I2C_Init+0x274>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d807      	bhi.n	8006f78 <HAL_I2C_Init+0x84>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a80      	ldr	r2, [pc, #512]	@ (800716c <HAL_I2C_Init+0x278>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	bf94      	ite	ls
 8006f70:	2301      	movls	r3, #1
 8006f72:	2300      	movhi	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e006      	b.n	8006f86 <HAL_I2C_Init+0x92>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a7d      	ldr	r2, [pc, #500]	@ (8007170 <HAL_I2C_Init+0x27c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	bf94      	ite	ls
 8006f80:	2301      	movls	r3, #1
 8006f82:	2300      	movhi	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0e7      	b.n	800715e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a78      	ldr	r2, [pc, #480]	@ (8007174 <HAL_I2C_Init+0x280>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	0c9b      	lsrs	r3, r3, #18
 8006f98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8007168 <HAL_I2C_Init+0x274>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d802      	bhi.n	8006fc8 <HAL_I2C_Init+0xd4>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	e009      	b.n	8006fdc <HAL_I2C_Init+0xe8>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	4a69      	ldr	r2, [pc, #420]	@ (8007178 <HAL_I2C_Init+0x284>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	3301      	adds	r3, #1
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006fee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	495c      	ldr	r1, [pc, #368]	@ (8007168 <HAL_I2C_Init+0x274>)
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	d819      	bhi.n	8007030 <HAL_I2C_Init+0x13c>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	1e59      	subs	r1, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	fbb1 f3f3 	udiv	r3, r1, r3
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007010:	400b      	ands	r3, r1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_I2C_Init+0x138>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1e59      	subs	r1, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	fbb1 f3f3 	udiv	r3, r1, r3
 8007024:	3301      	adds	r3, #1
 8007026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702a:	e051      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 800702c:	2304      	movs	r3, #4
 800702e:	e04f      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d111      	bne.n	800705c <HAL_I2C_Init+0x168>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1e58      	subs	r0, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	440b      	add	r3, r1
 8007046:	fbb0 f3f3 	udiv	r3, r0, r3
 800704a:	3301      	adds	r3, #1
 800704c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf0c      	ite	eq
 8007054:	2301      	moveq	r3, #1
 8007056:	2300      	movne	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e012      	b.n	8007082 <HAL_I2C_Init+0x18e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1e58      	subs	r0, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6859      	ldr	r1, [r3, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	0099      	lsls	r1, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007072:	3301      	adds	r3, #1
 8007074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_I2C_Init+0x196>
 8007086:	2301      	movs	r3, #1
 8007088:	e022      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10e      	bne.n	80070b0 <HAL_I2C_Init+0x1bc>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1e58      	subs	r0, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	440b      	add	r3, r1
 80070a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ae:	e00f      	b.n	80070d0 <HAL_I2C_Init+0x1dc>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	1e58      	subs	r0, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	0099      	lsls	r1, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	6809      	ldr	r1, [r1, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69da      	ldr	r2, [r3, #28]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80070fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6911      	ldr	r1, [r2, #16]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68d2      	ldr	r2, [r2, #12]
 800710a:	4311      	orrs	r1, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	430b      	orrs	r3, r1
 8007112:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	000186a0 	.word	0x000186a0
 800716c:	001e847f 	.word	0x001e847f
 8007170:	003d08ff 	.word	0x003d08ff
 8007174:	431bde83 	.word	0x431bde83
 8007178:	10624dd3 	.word	0x10624dd3

0800717c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800718e:	2b80      	cmp	r3, #128	@ 0x80
 8007190:	d103      	bne.n	800719a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	611a      	str	r2, [r3, #16]
  }
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	817b      	strh	r3, [r7, #10]
 80071b6:	460b      	mov	r3, r1
 80071b8:	813b      	strh	r3, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071be:	f7fe f887 	bl	80052d0 <HAL_GetTick>
 80071c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	f040 80d9 	bne.w	8007384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2319      	movs	r3, #25
 80071d8:	2201      	movs	r2, #1
 80071da:	496d      	ldr	r1, [pc, #436]	@ (8007390 <HAL_I2C_Mem_Write+0x1ec>)
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f002 f927 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071e8:	2302      	movs	r3, #2
 80071ea:	e0cc      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_I2C_Mem_Write+0x56>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e0c5      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d007      	beq.n	8007220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800722e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2221      	movs	r2, #33	@ 0x21
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2240      	movs	r2, #64	@ 0x40
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a3a      	ldr	r2, [r7, #32]
 800724a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4a4d      	ldr	r2, [pc, #308]	@ (8007394 <HAL_I2C_Mem_Write+0x1f0>)
 8007260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007262:	88f8      	ldrh	r0, [r7, #6]
 8007264:	893a      	ldrh	r2, [r7, #8]
 8007266:	8979      	ldrh	r1, [r7, #10]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4603      	mov	r3, r0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f001 feb6 	bl	8008fe4 <I2C_RequestMemoryWrite>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d052      	beq.n	8007324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e081      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f002 f9ec 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007296:	2b04      	cmp	r3, #4
 8007298:	d107      	bne.n	80072aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e06b      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d11b      	bne.n	8007324 <HAL_I2C_Mem_Write+0x180>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1aa      	bne.n	8007282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f002 f9df 	bl	80096f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00d      	beq.n	8007358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007340:	2b04      	cmp	r3, #4
 8007342:	d107      	bne.n	8007354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e016      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e000      	b.n	8007386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007384:	2302      	movs	r3, #2
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	00100002 	.word	0x00100002
 8007394:	ffff0000 	.word	0xffff0000

08007398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08c      	sub	sp, #48	@ 0x30
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	461a      	mov	r2, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	817b      	strh	r3, [r7, #10]
 80073aa:	460b      	mov	r3, r1
 80073ac:	813b      	strh	r3, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073b2:	f7fd ff8d 	bl	80052d0 <HAL_GetTick>
 80073b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	f040 8214 	bne.w	80077ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2319      	movs	r3, #25
 80073cc:	2201      	movs	r2, #1
 80073ce:	497b      	ldr	r1, [pc, #492]	@ (80075bc <HAL_I2C_Mem_Read+0x224>)
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f002 f82d 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
 80073de:	e207      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_I2C_Mem_Read+0x56>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e200      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d007      	beq.n	8007414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2222      	movs	r2, #34	@ 0x22
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2240      	movs	r2, #64	@ 0x40
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a5b      	ldr	r2, [pc, #364]	@ (80075c0 <HAL_I2C_Mem_Read+0x228>)
 8007454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007456:	88f8      	ldrh	r0, [r7, #6]
 8007458:	893a      	ldrh	r2, [r7, #8]
 800745a:	8979      	ldrh	r1, [r7, #10]
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4603      	mov	r3, r0
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f001 fe52 	bl	8009110 <I2C_RequestMemoryRead>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e1bc      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d113      	bne.n	80074a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800747e:	2300      	movs	r3, #0
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	e190      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d11b      	bne.n	80074e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e170      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d11b      	bne.n	8007526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800750c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750e:	2300      	movs	r3, #0
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	e150      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800753c:	e144      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007542:	2b03      	cmp	r3, #3
 8007544:	f200 80f1 	bhi.w	800772a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754c:	2b01      	cmp	r3, #1
 800754e:	d123      	bne.n	8007598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f002 f947 	bl	80097e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e145      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007596:	e117      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759c:	2b02      	cmp	r3, #2
 800759e:	d14e      	bne.n	800763e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	2200      	movs	r2, #0
 80075a8:	4906      	ldr	r1, [pc, #24]	@ (80075c4 <HAL_I2C_Mem_Read+0x22c>)
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 ff40 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d008      	beq.n	80075c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e11a      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
 80075ba:	bf00      	nop
 80075bc:	00100002 	.word	0x00100002
 80075c0:	ffff0000 	.word	0xffff0000
 80075c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800763c:	e0c4      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007644:	2200      	movs	r2, #0
 8007646:	496c      	ldr	r1, [pc, #432]	@ (80077f8 <HAL_I2C_Mem_Read+0x460>)
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f001 fef1 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e0cb      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800769a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	2200      	movs	r2, #0
 80076a2:	4955      	ldr	r1, [pc, #340]	@ (80077f8 <HAL_I2C_Mem_Read+0x460>)
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f001 fec3 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e09d      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007728:	e04e      	b.n	80077c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800772a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f002 f85a 	bl	80097e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e058      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	b2d2      	uxtb	r2, r2
 800774a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d124      	bne.n	80077c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007782:	2b03      	cmp	r3, #3
 8007784:	d107      	bne.n	8007796 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007794:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f47f aeb6 	bne.w	800753e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e000      	b.n	80077f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80077ee:	2302      	movs	r3, #2
  }
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3728      	adds	r7, #40	@ 0x28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	00010004 	.word	0x00010004

080077fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800781c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007824:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b10      	cmp	r3, #16
 800782a:	d003      	beq.n	8007834 <HAL_I2C_EV_IRQHandler+0x38>
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b40      	cmp	r3, #64	@ 0x40
 8007830:	f040 80c1 	bne.w	80079b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10d      	bne.n	800786a <HAL_I2C_EV_IRQHandler+0x6e>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007854:	d003      	beq.n	800785e <HAL_I2C_EV_IRQHandler+0x62>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800785c:	d101      	bne.n	8007862 <HAL_I2C_EV_IRQHandler+0x66>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <HAL_I2C_EV_IRQHandler+0x68>
 8007862:	2300      	movs	r3, #0
 8007864:	2b01      	cmp	r3, #1
 8007866:	f000 8132 	beq.w	8007ace <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0x92>
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	0a5b      	lsrs	r3, r3, #9
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 f83c 	bl	80098fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fd91 	bl	80083ae <I2C_Master_SB>
 800788c:	e092      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	08db      	lsrs	r3, r3, #3
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <HAL_I2C_EV_IRQHandler+0xb2>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	0a5b      	lsrs	r3, r3, #9
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fe06 	bl	80084b8 <I2C_Master_ADD10>
 80078ac:	e082      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <HAL_I2C_EV_IRQHandler+0xd2>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	0a5b      	lsrs	r3, r3, #9
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fe1f 	bl	800850a <I2C_Master_ADDR>
 80078cc:	e072      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	089b      	lsrs	r3, r3, #2
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d03b      	beq.n	8007952 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078e8:	f000 80f3 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	09db      	lsrs	r3, r3, #7
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00f      	beq.n	8007918 <HAL_I2C_EV_IRQHandler+0x11c>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	0a9b      	lsrs	r3, r3, #10
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <HAL_I2C_EV_IRQHandler+0x11c>
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9e9 	bl	8007ce8 <I2C_MasterTransmit_TXE>
 8007916:	e04d      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	089b      	lsrs	r3, r3, #2
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80d6 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	0a5b      	lsrs	r3, r3, #9
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80cf 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b21      	cmp	r3, #33	@ 0x21
 8007938:	d103      	bne.n	8007942 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa70 	bl	8007e20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007940:	e0c7      	b.n	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b40      	cmp	r3, #64	@ 0x40
 8007946:	f040 80c4 	bne.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fade 	bl	8007f0c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007950:	e0bf      	b.n	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800795c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007960:	f000 80b7 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00f      	beq.n	8007990 <HAL_I2C_EV_IRQHandler+0x194>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	0a9b      	lsrs	r3, r3, #10
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <HAL_I2C_EV_IRQHandler+0x194>
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	089b      	lsrs	r3, r3, #2
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d103      	bne.n	8007990 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fb57 	bl	800803c <I2C_MasterReceive_RXNE>
 800798e:	e011      	b.n	80079b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	089b      	lsrs	r3, r3, #2
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 809a 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	0a5b      	lsrs	r3, r3, #9
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8093 	beq.w	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc0d 	bl	80081cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079b2:	e08e      	b.n	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80079b4:	e08d      	b.n	8007ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	e007      	b.n	80079d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	085b      	lsrs	r3, r3, #1
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d012      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x20e>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	0a5b      	lsrs	r3, r3, #9
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007a00:	69b9      	ldr	r1, [r7, #24]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 ffcd 	bl	80089a2 <I2C_Slave_ADDR>
 8007a08:	e066      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x22e>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	0a5b      	lsrs	r3, r3, #9
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 f808 	bl	8008a38 <I2C_Slave_STOPF>
 8007a28:	e056      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b21      	cmp	r3, #33	@ 0x21
 8007a2e:	d002      	beq.n	8007a36 <HAL_I2C_EV_IRQHandler+0x23a>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b29      	cmp	r3, #41	@ 0x29
 8007a34:	d125      	bne.n	8007a82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	09db      	lsrs	r3, r3, #7
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00f      	beq.n	8007a62 <HAL_I2C_EV_IRQHandler+0x266>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	0a9b      	lsrs	r3, r3, #10
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_I2C_EV_IRQHandler+0x266>
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	089b      	lsrs	r3, r3, #2
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d103      	bne.n	8007a62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fee5 	bl	800882a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a60:	e039      	b.n	8007ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	089b      	lsrs	r3, r3, #2
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d033      	beq.n	8007ad6 <HAL_I2C_EV_IRQHandler+0x2da>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	0a5b      	lsrs	r3, r3, #9
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d02d      	beq.n	8007ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 ff12 	bl	80088a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a80:	e029      	b.n	8007ad6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	099b      	lsrs	r3, r3, #6
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00f      	beq.n	8007aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	0a9b      	lsrs	r3, r3, #10
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	089b      	lsrs	r3, r3, #2
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 ff1c 	bl	80088e4 <I2C_SlaveReceive_RXNE>
 8007aac:	e014      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	089b      	lsrs	r3, r3, #2
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00e      	beq.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	0a5b      	lsrs	r3, r3, #9
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d008      	beq.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 ff4a 	bl	8008960 <I2C_SlaveReceive_BTF>
 8007acc:	e004      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007ace:	bf00      	nop
 8007ad0:	e002      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ad2:	bf00      	nop
 8007ad4:	e000      	b.n	8007ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ad6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b08a      	sub	sp, #40	@ 0x28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	0a1b      	lsrs	r3, r3, #8
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00e      	beq.n	8007b2c <HAL_I2C_ER_IRQHandler+0x4e>
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d008      	beq.n	8007b2c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	f043 0301 	orr.w	r3, r3, #1
 8007b20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	0a5b      	lsrs	r3, r3, #9
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <HAL_I2C_ER_IRQHandler+0x78>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007b54:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	0a9b      	lsrs	r3, r3, #10
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d03f      	beq.n	8007be2 <HAL_I2C_ER_IRQHandler+0x104>
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d039      	beq.n	8007be2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007b6e:	7efb      	ldrb	r3, [r7, #27]
 8007b70:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b80:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b86:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007b88:	7ebb      	ldrb	r3, [r7, #26]
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d112      	bne.n	8007bb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8007b94:	7cfb      	ldrb	r3, [r7, #19]
 8007b96:	2b21      	cmp	r3, #33	@ 0x21
 8007b98:	d008      	beq.n	8007bac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b9a:	7cfb      	ldrb	r3, [r7, #19]
 8007b9c:	2b29      	cmp	r3, #41	@ 0x29
 8007b9e:	d005      	beq.n	8007bac <HAL_I2C_ER_IRQHandler+0xce>
 8007ba0:	7cfb      	ldrb	r3, [r7, #19]
 8007ba2:	2b28      	cmp	r3, #40	@ 0x28
 8007ba4:	d106      	bne.n	8007bb4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b21      	cmp	r3, #33	@ 0x21
 8007baa:	d103      	bne.n	8007bb4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f873 	bl	8008c98 <I2C_Slave_AF>
 8007bb2:	e016      	b.n	8007be2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bbc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	f043 0304 	orr.w	r3, r3, #4
 8007bc4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007bc6:	7efb      	ldrb	r3, [r7, #27]
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d002      	beq.n	8007bd2 <HAL_I2C_ER_IRQHandler+0xf4>
 8007bcc:	7efb      	ldrb	r3, [r7, #27]
 8007bce:	2b40      	cmp	r3, #64	@ 0x40
 8007bd0:	d107      	bne.n	8007be2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007be0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	0adb      	lsrs	r3, r3, #11
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <HAL_I2C_ER_IRQHandler+0x12e>
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	0a1b      	lsrs	r3, r3, #8
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007c0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f8ae 	bl	8008d80 <I2C_ITError>
  }
}
 8007c24:	bf00      	nop
 8007c26:	3728      	adds	r7, #40	@ 0x28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr

08007c3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bc80      	pop	{r7}
 8007c72:	4770      	bx	lr

08007c74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
 8007c80:	4613      	mov	r3, r2
 8007c82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr

08007ce8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cf6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d150      	bne.n	8007db0 <I2C_MasterTransmit_TXE+0xc8>
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b21      	cmp	r3, #33	@ 0x21
 8007d12:	d14d      	bne.n	8007db0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d01d      	beq.n	8007d56 <I2C_MasterTransmit_TXE+0x6e>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d01a      	beq.n	8007d56 <I2C_MasterTransmit_TXE+0x6e>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d26:	d016      	beq.n	8007d56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2211      	movs	r2, #17
 8007d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ff6c 	bl	8007c2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d54:	e060      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b40      	cmp	r3, #64	@ 0x40
 8007d8e:	d107      	bne.n	8007da0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff81 	bl	8007ca0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d9e:	e03b      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ff3f 	bl	8007c2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007dae:	e033      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	2b21      	cmp	r3, #33	@ 0x21
 8007db4:	d005      	beq.n	8007dc2 <I2C_MasterTransmit_TXE+0xda>
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b40      	cmp	r3, #64	@ 0x40
 8007dba:	d12d      	bne.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b22      	cmp	r3, #34	@ 0x22
 8007dc0:	d12a      	bne.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d108      	bne.n	8007dde <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007ddc:	e01c      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d103      	bne.n	8007df2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f88e 	bl	8007f0c <I2C_MemoryTransmit_TXE_BTF>
}
 8007df0:	e012      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007e16:	e7ff      	b.n	8007e18 <I2C_MasterTransmit_TXE+0x130>
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b21      	cmp	r3, #33	@ 0x21
 8007e38:	d164      	bne.n	8007f04 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007e68:	e04c      	b.n	8007f04 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d01d      	beq.n	8007eac <I2C_MasterTransmit_BTF+0x8c>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d01a      	beq.n	8007eac <I2C_MasterTransmit_BTF+0x8c>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e7c:	d016      	beq.n	8007eac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2211      	movs	r2, #17
 8007e92:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fec1 	bl	8007c2c <HAL_I2C_MasterTxCpltCallback>
}
 8007eaa:	e02b      	b.n	8007f04 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007eba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	d107      	bne.n	8007ef6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fed6 	bl	8007ca0 <HAL_I2C_MemTxCpltCallback>
}
 8007ef4:	e006      	b.n	8007f04 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fe94 	bl	8007c2c <HAL_I2C_MasterTxCpltCallback>
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11d      	bne.n	8007f60 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d10b      	bne.n	8007f44 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	1c9a      	adds	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007f42:	e077      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	121b      	asrs	r3, r3, #8
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007f5e:	e069      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d10b      	bne.n	8007f80 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007f7e:	e059      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d152      	bne.n	800802e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b22      	cmp	r3, #34	@ 0x22
 8007f8c:	d10d      	bne.n	8007faa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fa8:	e044      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d015      	beq.n	8007fe0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b21      	cmp	r3, #33	@ 0x21
 8007fb8:	d112      	bne.n	8007fe0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	781a      	ldrb	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007fde:	e029      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d124      	bne.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	2b21      	cmp	r3, #33	@ 0x21
 8007fee:	d121      	bne.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ffe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800800e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fe3a 	bl	8007ca0 <HAL_I2C_MemTxCpltCallback>
}
 800802c:	e002      	b.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff f8a4 	bl	800717c <I2C_Flush_DR>
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b22      	cmp	r3, #34	@ 0x22
 800804e:	f040 80b9 	bne.w	80081c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008056:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805c:	b29b      	uxth	r3, r3
 800805e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b03      	cmp	r3, #3
 8008064:	d921      	bls.n	80080aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b03      	cmp	r3, #3
 8008094:	f040 8096 	bne.w	80081c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80080a8:	e08c      	b.n	80081c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d07f      	beq.n	80081b2 <I2C_MasterReceive_RXNE+0x176>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d002      	beq.n	80080be <I2C_MasterReceive_RXNE+0x82>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d179      	bne.n	80081b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f001 fb60 	bl	8009784 <I2C_WaitOnSTOPRequestThroughIT>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d14c      	bne.n	8008164 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80080e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b40      	cmp	r3, #64	@ 0x40
 8008122:	d10a      	bne.n	800813a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fdbd 	bl	8007cb2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008138:	e044      	b.n	80081c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b08      	cmp	r3, #8
 8008146:	d002      	beq.n	800814e <I2C_MasterReceive_RXNE+0x112>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b20      	cmp	r3, #32
 800814c:	d103      	bne.n	8008156 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
 8008154:	e002      	b.n	800815c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2212      	movs	r2, #18
 800815a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff fd6e 	bl	8007c3e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008162:	e02f      	b.n	80081c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008172:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff fd8a 	bl	8007cc4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80081b0:	e008      	b.n	80081c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081c0:	605a      	str	r2, [r3, #4]
}
 80081c2:	e7ff      	b.n	80081c4 <I2C_MasterReceive_RXNE+0x188>
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d11b      	bne.n	800821c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800821a:	e0c4      	b.n	80083a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b03      	cmp	r3, #3
 8008224:	d129      	bne.n	800827a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008234:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d00a      	beq.n	8008252 <I2C_MasterReceive_BTF+0x86>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d007      	beq.n	8008252 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008250:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008278:	e095      	b.n	80083a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827e:	b29b      	uxth	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d17d      	bne.n	8008380 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d002      	beq.n	8008290 <I2C_MasterReceive_BTF+0xc4>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b10      	cmp	r3, #16
 800828e:	d108      	bne.n	80082a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e016      	b.n	80082d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d002      	beq.n	80082ae <I2C_MasterReceive_BTF+0xe2>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d108      	bne.n	80082c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e007      	b.n	80082d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800832a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d10a      	bne.n	8008356 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fcaf 	bl	8007cb2 <HAL_I2C_MemRxCpltCallback>
}
 8008354:	e027      	b.n	80083a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d002      	beq.n	800836a <I2C_MasterReceive_BTF+0x19e>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b20      	cmp	r3, #32
 8008368:	d103      	bne.n	8008372 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008370:	e002      	b.n	8008378 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2212      	movs	r2, #18
 8008376:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fc60 	bl	8007c3e <HAL_I2C_MasterRxCpltCallback>
}
 800837e:	e012      	b.n	80083a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b40      	cmp	r3, #64	@ 0x40
 80083c0:	d117      	bne.n	80083f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d109      	bne.n	80083de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80083dc:	e067      	b.n	80084ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	611a      	str	r2, [r3, #16]
}
 80083f0:	e05d      	b.n	80084ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083fa:	d133      	bne.n	8008464 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b21      	cmp	r3, #33	@ 0x21
 8008406:	d109      	bne.n	800841c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840c:	b2db      	uxtb	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008418:	611a      	str	r2, [r3, #16]
 800841a:	e008      	b.n	800842e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	b2da      	uxtb	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <I2C_Master_SB+0x92>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d108      	bne.n	8008452 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	d032      	beq.n	80084ae <I2C_Master_SB+0x100>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844e:	2b00      	cmp	r3, #0
 8008450:	d02d      	beq.n	80084ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008460:	605a      	str	r2, [r3, #4]
}
 8008462:	e024      	b.n	80084ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10e      	bne.n	800848a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008470:	b29b      	uxth	r3, r3
 8008472:	11db      	asrs	r3, r3, #7
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0306 	and.w	r3, r3, #6
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f063 030f 	orn	r3, r3, #15
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	611a      	str	r2, [r3, #16]
}
 8008488:	e011      	b.n	80084ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800848e:	2b01      	cmp	r3, #1
 8008490:	d10d      	bne.n	80084ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008496:	b29b      	uxth	r3, r3
 8008498:	11db      	asrs	r3, r3, #7
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0306 	and.w	r3, r3, #6
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f063 030e 	orn	r3, r3, #14
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	611a      	str	r2, [r3, #16]
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <I2C_Master_ADD10+0x26>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d108      	bne.n	80084f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00c      	beq.n	8008500 <I2C_Master_ADD10+0x48>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084fe:	605a      	str	r2, [r3, #4]
  }
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800850a:	b480      	push	{r7}
 800850c:	b091      	sub	sp, #68	@ 0x44
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008518:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b22      	cmp	r3, #34	@ 0x22
 8008532:	f040 8169 	bne.w	8008808 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10f      	bne.n	800855e <I2C_Master_ADDR+0x54>
 800853e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008542:	2b40      	cmp	r3, #64	@ 0x40
 8008544:	d10b      	bne.n	800855e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008546:	2300      	movs	r3, #0
 8008548:	633b      	str	r3, [r7, #48]	@ 0x30
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	633b      	str	r3, [r7, #48]	@ 0x30
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	633b      	str	r3, [r7, #48]	@ 0x30
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	e160      	b.n	8008820 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11d      	bne.n	80085a2 <I2C_Master_ADDR+0x98>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800856e:	d118      	bne.n	80085a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008570:	2300      	movs	r3, #0
 8008572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008594:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	651a      	str	r2, [r3, #80]	@ 0x50
 80085a0:	e13e      	b.n	8008820 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d113      	bne.n	80085d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ac:	2300      	movs	r3, #0
 80085ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e115      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b01      	cmp	r3, #1
 80085dc:	f040 808a 	bne.w	80086f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085e6:	d137      	bne.n	8008658 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008606:	d113      	bne.n	8008630 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008616:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	627b      	str	r3, [r7, #36]	@ 0x24
 800862c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862e:	e0e7      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008630:	2300      	movs	r3, #0
 8008632:	623b      	str	r3, [r7, #32]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	623b      	str	r3, [r7, #32]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	623b      	str	r3, [r7, #32]
 8008644:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e0d3      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	2b08      	cmp	r3, #8
 800865c:	d02e      	beq.n	80086bc <I2C_Master_ADDR+0x1b2>
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	2b20      	cmp	r3, #32
 8008662:	d02b      	beq.n	80086bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	2b12      	cmp	r3, #18
 8008668:	d102      	bne.n	8008670 <I2C_Master_ADDR+0x166>
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	2b01      	cmp	r3, #1
 800866e:	d125      	bne.n	80086bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	2b04      	cmp	r3, #4
 8008674:	d00e      	beq.n	8008694 <I2C_Master_ADDR+0x18a>
 8008676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008678:	2b02      	cmp	r3, #2
 800867a:	d00b      	beq.n	8008694 <I2C_Master_ADDR+0x18a>
 800867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867e:	2b10      	cmp	r3, #16
 8008680:	d008      	beq.n	8008694 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e007      	b.n	80086a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a4:	2300      	movs	r3, #0
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	61fb      	str	r3, [r7, #28]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	e0a1      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086cc:	2300      	movs	r3, #0
 80086ce:	61bb      	str	r3, [r7, #24]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	e085      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d14d      	bne.n	800879a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008700:	2b04      	cmp	r3, #4
 8008702:	d016      	beq.n	8008732 <I2C_Master_ADDR+0x228>
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	2b02      	cmp	r3, #2
 8008708:	d013      	beq.n	8008732 <I2C_Master_ADDR+0x228>
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	2b10      	cmp	r3, #16
 800870e:	d010      	beq.n	8008732 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800871e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e007      	b.n	8008742 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008740:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800874c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008750:	d117      	bne.n	8008782 <I2C_Master_ADDR+0x278>
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008758:	d00b      	beq.n	8008772 <I2C_Master_ADDR+0x268>
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	2b01      	cmp	r3, #1
 800875e:	d008      	beq.n	8008772 <I2C_Master_ADDR+0x268>
 8008760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008762:	2b08      	cmp	r3, #8
 8008764:	d005      	beq.n	8008772 <I2C_Master_ADDR+0x268>
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	2b10      	cmp	r3, #16
 800876a:	d002      	beq.n	8008772 <I2C_Master_ADDR+0x268>
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	2b20      	cmp	r3, #32
 8008770:	d107      	bne.n	8008782 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008780:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	e032      	b.n	8008800 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b8:	d117      	bne.n	80087ea <I2C_Master_ADDR+0x2e0>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087c0:	d00b      	beq.n	80087da <I2C_Master_ADDR+0x2d0>
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d008      	beq.n	80087da <I2C_Master_ADDR+0x2d0>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d005      	beq.n	80087da <I2C_Master_ADDR+0x2d0>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	2b10      	cmp	r3, #16
 80087d2:	d002      	beq.n	80087da <I2C_Master_ADDR+0x2d0>
 80087d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d107      	bne.n	80087ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008806:	e00b      	b.n	8008820 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
}
 800881e:	e7ff      	b.n	8008820 <I2C_Master_ADDR+0x316>
 8008820:	bf00      	nop
 8008822:	3744      	adds	r7, #68	@ 0x44
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008838:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d02b      	beq.n	800889c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d114      	bne.n	800889c <I2C_SlaveTransmit_TXE+0x72>
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	2b29      	cmp	r3, #41	@ 0x29
 8008876:	d111      	bne.n	800889c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008886:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2221      	movs	r2, #33	@ 0x21
 800888c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2228      	movs	r2, #40	@ 0x28
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff f9da 	bl	8007c50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800889c:	bf00      	nop
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr

080088e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d02c      	beq.n	8008958 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d114      	bne.n	8008958 <I2C_SlaveReceive_RXNE+0x74>
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d111      	bne.n	8008958 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008942:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2222      	movs	r2, #34	@ 0x22
 8008948:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2228      	movs	r2, #40	@ 0x28
 800894e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff f985 	bl	8007c62 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d012      	beq.n	8008998 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	1c5a      	adds	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr

080089a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089bc:	2b28      	cmp	r3, #40	@ 0x28
 80089be:	d127      	bne.n	8008a10 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	09db      	lsrs	r3, r3, #7
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	81bb      	strh	r3, [r7, #12]
 80089f2:	e002      	b.n	80089fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008a02:	89ba      	ldrh	r2, [r7, #12]
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff f933 	bl	8007c74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a0e:	e00e      	b.n	8008a2e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a10:	2300      	movs	r3, #0
 8008a12:	60bb      	str	r3, [r7, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	60bb      	str	r3, [r7, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008a56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	60bb      	str	r3, [r7, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0201 	orr.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a94:	d172      	bne.n	8008b7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	2b22      	cmp	r3, #34	@ 0x22
 8008a9a:	d002      	beq.n	8008aa2 <I2C_Slave_STOPF+0x6a>
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa0:	d135      	bne.n	8008b0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	f043 0204 	orr.w	r2, r3, #4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ad4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fd fc10 	bl	8006300 <HAL_DMA_GetState>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d049      	beq.n	8008b7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aea:	4a69      	ldr	r2, [pc, #420]	@ (8008c90 <I2C_Slave_STOPF+0x258>)
 8008aec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fd fbc3 	bl	800627e <HAL_DMA_Abort_IT>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d03d      	beq.n	8008b7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b0c:	e035      	b.n	8008b7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	f043 0204 	orr.w	r2, r3, #4
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fd fbda 	bl	8006300 <HAL_DMA_GetState>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d014      	beq.n	8008b7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b56:	4a4e      	ldr	r2, [pc, #312]	@ (8008c90 <I2C_Slave_STOPF+0x258>)
 8008b58:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fd fb8d 	bl	800627e <HAL_DMA_Abort_IT>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d008      	beq.n	8008b7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	e000      	b.n	8008b7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d03e      	beq.n	8008c04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d112      	bne.n	8008bba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691a      	ldr	r2, [r3, #16]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc4:	2b40      	cmp	r3, #64	@ 0x40
 8008bc6:	d112      	bne.n	8008bee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfc:	f043 0204 	orr.w	r2, r3, #4
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f8b7 	bl	8008d80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008c12:	e039      	b.n	8008c88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c18:	d109      	bne.n	8008c2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2228      	movs	r2, #40	@ 0x28
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff f81a 	bl	8007c62 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b28      	cmp	r3, #40	@ 0x28
 8008c38:	d111      	bne.n	8008c5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a15      	ldr	r2, [pc, #84]	@ (8008c94 <I2C_Slave_STOPF+0x25c>)
 8008c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff f819 	bl	8007c8e <HAL_I2C_ListenCpltCallback>
}
 8008c5c:	e014      	b.n	8008c88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c62:	2b22      	cmp	r3, #34	@ 0x22
 8008c64:	d002      	beq.n	8008c6c <I2C_Slave_STOPF+0x234>
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b22      	cmp	r3, #34	@ 0x22
 8008c6a:	d10d      	bne.n	8008c88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fe ffed 	bl	8007c62 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	080092e1 	.word	0x080092e1
 8008c94:	ffff0000 	.word	0xffff0000

08008c98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b08      	cmp	r3, #8
 8008cb2:	d002      	beq.n	8008cba <I2C_Slave_AF+0x22>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d129      	bne.n	8008d0e <I2C_Slave_AF+0x76>
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b28      	cmp	r3, #40	@ 0x28
 8008cbe:	d126      	bne.n	8008d0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8008d7c <I2C_Slave_AF+0xe4>)
 8008cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cd4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008cde:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe ffc1 	bl	8007c8e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008d0c:	e031      	b.n	8008d72 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b21      	cmp	r3, #33	@ 0x21
 8008d12:	d129      	bne.n	8008d68 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a19      	ldr	r2, [pc, #100]	@ (8008d7c <I2C_Slave_AF+0xe4>)
 8008d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2221      	movs	r2, #33	@ 0x21
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d58:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fe fa0e 	bl	800717c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7fe ff75 	bl	8007c50 <HAL_I2C_SlaveTxCpltCallback>
}
 8008d66:	e004      	b.n	8008d72 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d70:	615a      	str	r2, [r3, #20]
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	ffff0000 	.word	0xffff0000

08008d80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d002      	beq.n	8008da4 <I2C_ITError+0x24>
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b40      	cmp	r3, #64	@ 0x40
 8008da2:	d10a      	bne.n	8008dba <I2C_ITError+0x3a>
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	2b22      	cmp	r3, #34	@ 0x22
 8008da8:	d107      	bne.n	8008dba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008db8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008dc0:	2b28      	cmp	r3, #40	@ 0x28
 8008dc2:	d107      	bne.n	8008dd4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2228      	movs	r2, #40	@ 0x28
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008dd2:	e015      	b.n	8008e00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008de2:	d00a      	beq.n	8008dfa <I2C_ITError+0x7a>
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	2b60      	cmp	r3, #96	@ 0x60
 8008de8:	d007      	beq.n	8008dfa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0e:	d162      	bne.n	8008ed6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d020      	beq.n	8008e70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e32:	4a6a      	ldr	r2, [pc, #424]	@ (8008fdc <I2C_ITError+0x25c>)
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fd fa1f 	bl	800627e <HAL_DMA_Abort_IT>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8089 	beq.w	8008f5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0201 	bic.w	r2, r2, #1
 8008e56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	4798      	blx	r3
 8008e6e:	e074      	b.n	8008f5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e74:	4a59      	ldr	r2, [pc, #356]	@ (8008fdc <I2C_ITError+0x25c>)
 8008e76:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fd f9fe 	bl	800627e <HAL_DMA_Abort_IT>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d068      	beq.n	8008f5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d10b      	bne.n	8008eae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0201 	bic.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	e041      	b.n	8008f5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b60      	cmp	r3, #96	@ 0x60
 8008ee0:	d125      	bne.n	8008f2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efa:	2b40      	cmp	r3, #64	@ 0x40
 8008efc:	d10b      	bne.n	8008f16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	b2d2      	uxtb	r2, r2
 8008f0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0201 	bic.w	r2, r2, #1
 8008f24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7fe fed5 	bl	8007cd6 <HAL_I2C_AbortCpltCallback>
 8008f2c:	e015      	b.n	8008f5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f38:	2b40      	cmp	r3, #64	@ 0x40
 8008f3a:	d10b      	bne.n	8008f54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fe feb5 	bl	8007cc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10e      	bne.n	8008f88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d104      	bne.n	8008f88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d007      	beq.n	8008f98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d113      	bne.n	8008fd4 <I2C_ITError+0x254>
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b28      	cmp	r3, #40	@ 0x28
 8008fb0:	d110      	bne.n	8008fd4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe0 <I2C_ITError+0x260>)
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7fe fe5d 	bl	8007c8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	080092e1 	.word	0x080092e1
 8008fe0:	ffff0000 	.word	0xffff0000

08008fe4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	817b      	strh	r3, [r7, #10]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	813b      	strh	r3, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800900c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	2200      	movs	r2, #0
 8009016:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fa08 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009034:	d103      	bne.n	800903e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800903c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e05f      	b.n	8009102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009042:	897b      	ldrh	r3, [r7, #10]
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009050:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	492d      	ldr	r1, [pc, #180]	@ (800910c <I2C_RequestMemoryWrite+0x128>)
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 fa63 	bl	8009524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e04c      	b.n	8009102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800907e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009080:	6a39      	ldr	r1, [r7, #32]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 faee 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00d      	beq.n	80090aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009092:	2b04      	cmp	r3, #4
 8009094:	d107      	bne.n	80090a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e02b      	b.n	8009102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d105      	bne.n	80090bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090b0:	893b      	ldrh	r3, [r7, #8]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	611a      	str	r2, [r3, #16]
 80090ba:	e021      	b.n	8009100 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80090bc:	893b      	ldrh	r3, [r7, #8]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090cc:	6a39      	ldr	r1, [r7, #32]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fac8 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00d      	beq.n	80090f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d107      	bne.n	80090f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e005      	b.n	8009102 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090f6:	893b      	ldrh	r3, [r7, #8]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	00010002 	.word	0x00010002

08009110 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	461a      	mov	r2, r3
 800911e:	4603      	mov	r3, r0
 8009120:	817b      	strh	r3, [r7, #10]
 8009122:	460b      	mov	r3, r1
 8009124:	813b      	strh	r3, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009138:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	2200      	movs	r2, #0
 8009152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f96a 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00d      	beq.n	800917e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009170:	d103      	bne.n	800917a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e0aa      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800917e:	897b      	ldrh	r3, [r7, #10]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800918c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	6a3a      	ldr	r2, [r7, #32]
 8009192:	4952      	ldr	r1, [pc, #328]	@ (80092dc <I2C_RequestMemoryRead+0x1cc>)
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f9c5 	bl	8009524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e097      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091bc:	6a39      	ldr	r1, [r7, #32]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fa50 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d107      	bne.n	80091e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e076      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d105      	bne.n	80091f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80091ec:	893b      	ldrh	r3, [r7, #8]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	611a      	str	r2, [r3, #16]
 80091f6:	e021      	b.n	800923c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80091f8:	893b      	ldrh	r3, [r7, #8]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009208:	6a39      	ldr	r1, [r7, #32]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fa2a 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921a:	2b04      	cmp	r3, #4
 800921c:	d107      	bne.n	800922e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800922c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e050      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009232:	893b      	ldrh	r3, [r7, #8]
 8009234:	b2da      	uxtb	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800923c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800923e:	6a39      	ldr	r1, [r7, #32]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 fa0f 	bl	8009664 <I2C_WaitOnTXEFlagUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00d      	beq.n	8009268 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009250:	2b04      	cmp	r3, #4
 8009252:	d107      	bne.n	8009264 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009262:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e035      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009276:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	2200      	movs	r2, #0
 8009280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f8d3 	bl	8009430 <I2C_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00d      	beq.n	80092ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800929a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800929e:	d103      	bne.n	80092a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e013      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092ac:	897b      	ldrh	r3, [r7, #10]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f043 0301 	orr.w	r3, r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092be:	6a3a      	ldr	r2, [r7, #32]
 80092c0:	4906      	ldr	r1, [pc, #24]	@ (80092dc <I2C_RequestMemoryRead+0x1cc>)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f92e 	bl	8009524 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	00010002 	.word	0x00010002

080092e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80092fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009428 <I2C_DMAAbort+0x148>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	08db      	lsrs	r3, r3, #3
 8009300:	4a4a      	ldr	r2, [pc, #296]	@ (800942c <I2C_DMAAbort+0x14c>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	0a1a      	lsrs	r2, r3, #8
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	00da      	lsls	r2, r3, #3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931e:	f043 0220 	orr.w	r2, r3, #32
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009326:	e00a      	b.n	800933e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b01      	subs	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800933c:	d0ea      	beq.n	8009314 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800934a:	2200      	movs	r2, #0
 800934c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935a:	2200      	movs	r2, #0
 800935c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800936c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2200      	movs	r2, #0
 8009372:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009380:	2200      	movs	r2, #0
 8009382:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	2200      	movs	r2, #0
 8009392:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0201 	bic.w	r2, r2, #1
 80093a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b60      	cmp	r3, #96	@ 0x60
 80093ae:	d10e      	bne.n	80093ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	2200      	movs	r2, #0
 80093c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093c6:	6978      	ldr	r0, [r7, #20]
 80093c8:	f7fe fc85 	bl	8007cd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093cc:	e027      	b.n	800941e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80093ce:	7cfb      	ldrb	r3, [r7, #19]
 80093d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093d4:	2b28      	cmp	r3, #40	@ 0x28
 80093d6:	d117      	bne.n	8009408 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0201 	orr.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2200      	movs	r2, #0
 80093fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2228      	movs	r2, #40	@ 0x28
 8009402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009406:	e007      	b.n	8009418 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009418:	6978      	ldr	r0, [r7, #20]
 800941a:	f7fe fc53 	bl	8007cc4 <HAL_I2C_ErrorCallback>
}
 800941e:	bf00      	nop
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000004 	.word	0x20000004
 800942c:	14f8b589 	.word	0x14f8b589

08009430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	4613      	mov	r3, r2
 800943e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009440:	e048      	b.n	80094d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009448:	d044      	beq.n	80094d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944a:	f7fb ff41 	bl	80052d0 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d302      	bcc.n	8009460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d139      	bne.n	80094d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	0c1b      	lsrs	r3, r3, #16
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10d      	bne.n	8009486 <I2C_WaitOnFlagUntilTimeout+0x56>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	43da      	mvns	r2, r3
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4013      	ands	r3, r2
 8009476:	b29b      	uxth	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	461a      	mov	r2, r3
 8009484:	e00c      	b.n	80094a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	43da      	mvns	r2, r3
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4013      	ands	r3, r2
 8009492:	b29b      	uxth	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	bf0c      	ite	eq
 8009498:	2301      	moveq	r3, #1
 800949a:	2300      	movne	r3, #0
 800949c:	b2db      	uxtb	r3, r3
 800949e:	461a      	mov	r2, r3
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d116      	bne.n	80094d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c0:	f043 0220 	orr.w	r2, r3, #32
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e023      	b.n	800951c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d10d      	bne.n	80094fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	43da      	mvns	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4013      	ands	r3, r2
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bf0c      	ite	eq
 80094f0:	2301      	moveq	r3, #1
 80094f2:	2300      	movne	r3, #0
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	e00c      	b.n	8009514 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	43da      	mvns	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4013      	ands	r3, r2
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	bf0c      	ite	eq
 800950c:	2301      	moveq	r3, #1
 800950e:	2300      	movne	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	429a      	cmp	r2, r3
 8009518:	d093      	beq.n	8009442 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009532:	e071      	b.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800953e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009542:	d123      	bne.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009552:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800955c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009578:	f043 0204 	orr.w	r2, r3, #4
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e067      	b.n	800965c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d041      	beq.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009594:	f7fb fe9c 	bl	80052d0 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d136      	bne.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	0c1b      	lsrs	r3, r3, #16
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d10c      	bne.n	80095ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	43da      	mvns	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	4013      	ands	r3, r2
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bf14      	ite	ne
 80095c6:	2301      	movne	r3, #1
 80095c8:	2300      	moveq	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	e00b      	b.n	80095e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	43da      	mvns	r2, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4013      	ands	r3, r2
 80095da:	b29b      	uxth	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bf14      	ite	ne
 80095e0:	2301      	movne	r3, #1
 80095e2:	2300      	moveq	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d016      	beq.n	8009618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009604:	f043 0220 	orr.w	r2, r3, #32
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e021      	b.n	800965c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	0c1b      	lsrs	r3, r3, #16
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b01      	cmp	r3, #1
 8009620:	d10c      	bne.n	800963c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	43da      	mvns	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4013      	ands	r3, r2
 800962e:	b29b      	uxth	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	bf14      	ite	ne
 8009634:	2301      	movne	r3, #1
 8009636:	2300      	moveq	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	e00b      	b.n	8009654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	43da      	mvns	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4013      	ands	r3, r2
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf14      	ite	ne
 800964e:	2301      	movne	r3, #1
 8009650:	2300      	moveq	r3, #0
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	f47f af6d 	bne.w	8009534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009670:	e034      	b.n	80096dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f915 	bl	80098a2 <I2C_IsAcknowledgeFailed>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e034      	b.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d028      	beq.n	80096dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968a:	f7fb fe21 	bl	80052d0 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	429a      	cmp	r2, r3
 8009698:	d302      	bcc.n	80096a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11d      	bne.n	80096dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096aa:	2b80      	cmp	r3, #128	@ 0x80
 80096ac:	d016      	beq.n	80096dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c8:	f043 0220 	orr.w	r2, r3, #32
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e007      	b.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e6:	2b80      	cmp	r3, #128	@ 0x80
 80096e8:	d1c3      	bne.n	8009672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009700:	e034      	b.n	800976c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f8cd 	bl	80098a2 <I2C_IsAcknowledgeFailed>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e034      	b.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d028      	beq.n	800976c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7fb fdd9 	bl	80052d0 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11d      	bne.n	800976c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b04      	cmp	r3, #4
 800973c:	d016      	beq.n	800976c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009758:	f043 0220 	orr.w	r2, r3, #32
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e007      	b.n	800977c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	f003 0304 	and.w	r3, r3, #4
 8009776:	2b04      	cmp	r3, #4
 8009778:	d1c3      	bne.n	8009702 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009790:	4b13      	ldr	r3, [pc, #76]	@ (80097e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	4a13      	ldr	r2, [pc, #76]	@ (80097e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009798:	fba2 2303 	umull	r2, r3, r2, r3
 800979c:	0a1a      	lsrs	r2, r3, #8
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d107      	bne.n	80097c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	f043 0220 	orr.w	r2, r3, #32
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e008      	b.n	80097d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d0:	d0e9      	beq.n	80097a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	20000004 	.word	0x20000004
 80097e4:	14f8b589 	.word	0x14f8b589

080097e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f4:	e049      	b.n	800988a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	f003 0310 	and.w	r3, r3, #16
 8009800:	2b10      	cmp	r3, #16
 8009802:	d119      	bne.n	8009838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f06f 0210 	mvn.w	r2, #16
 800980c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e030      	b.n	800989a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009838:	f7fb fd4a 	bl	80052d0 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d11d      	bne.n	800988a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009858:	2b40      	cmp	r3, #64	@ 0x40
 800985a:	d016      	beq.n	800988a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009876:	f043 0220 	orr.w	r2, r3, #32
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e007      	b.n	800989a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009894:	2b40      	cmp	r3, #64	@ 0x40
 8009896:	d1ae      	bne.n	80097f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098b8:	d11b      	bne.n	80098f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	f043 0204 	orr.w	r2, r3, #4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bc80      	pop	{r7}
 80098fc:	4770      	bx	lr

080098fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800990e:	d103      	bne.n	8009918 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009916:	e007      	b.n	8009928 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009920:	d102      	bne.n	8009928 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2208      	movs	r2, #8
 8009926:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	2310      	movs	r3, #16
 800993a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	fa93 f3a3 	rbit	r3, r3
 8009942:	603b      	str	r3, [r7, #0]
  return result;
 8009944:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8009946:	fab3 f383 	clz	r3, r3
 800994a:	b2db      	uxtb	r3, r3
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8009952:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8009956:	461a      	mov	r2, r3
 8009958:	2300      	movs	r3, #0
 800995a:	6013      	str	r3, [r2, #0]
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr
	...

08009968 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	fa93 f3a3 	rbit	r3, r3
 800997a:	60bb      	str	r3, [r7, #8]
  return result;
 800997c:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 800997e:	fab3 f383 	clz	r3, r3
 8009982:	b2db      	uxtb	r3, r3
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	461a      	mov	r2, r3
 8009988:	4b04      	ldr	r3, [pc, #16]	@ (800999c <HAL_PWR_DisableWakeUpPin+0x34>)
 800998a:	4413      	add	r3, r2
 800998c:	461a      	mov	r2, r3
 800998e:	2300      	movs	r3, #0
 8009990:	6013      	str	r3, [r2, #0]
}
 8009992:	bf00      	nop
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr
 800999c:	420e0080 	.word	0x420e0080

080099a0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 2 (PC13) if enabled.
  *          - WKUP pin 3 (PE6) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80099a4:	4b08      	ldr	r3, [pc, #32]	@ (80099c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a07      	ldr	r2, [pc, #28]	@ (80099c8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80099aa:	f043 0302 	orr.w	r3, r3, #2
 80099ae:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	4a05      	ldr	r2, [pc, #20]	@ (80099cc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80099b6:	f043 0304 	orr.w	r3, r3, #4
 80099ba:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80099bc:	bf30      	wfi
}
 80099be:	bf00      	nop
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	40007000 	.word	0x40007000
 80099cc:	e000ed00 	.word	0xe000ed00

080099d0 <HAL_PWREx_DisableFastWakeUp>:
/**
  * @brief  Disables the Fast WakeUp from Ultra Low Power mode.
  * @retval None
  */
void HAL_PWREx_DisableFastWakeUp(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099da:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	fa93 f3a3 	rbit	r3, r3
 80099e2:	603b      	str	r3, [r7, #0]
  return result;
 80099e4:	683b      	ldr	r3, [r7, #0]
  /* Disable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)DISABLE;
 80099e6:	fab3 f383 	clz	r3, r3
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80099f2:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 80099f6:	461a      	mov	r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	6013      	str	r3, [r2, #0]
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr

08009a06 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a10:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	fa93 f3a3 	rbit	r3, r3
 8009a18:	603b      	str	r3, [r7, #0]
  return result;
 8009a1a:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 8009a1c:	fab3 f383 	clz	r3, r3
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8009a28:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2301      	movs	r3, #1
 8009a30:	6013      	str	r3, [r2, #0]
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr

08009a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e31d      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a4e:	4b94      	ldr	r3, [pc, #592]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 030c 	and.w	r3, r3, #12
 8009a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a58:	4b91      	ldr	r3, [pc, #580]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a60:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d07b      	beq.n	8009b66 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d006      	beq.n	8009a82 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b0c      	cmp	r3, #12
 8009a78:	d10f      	bne.n	8009a9a <HAL_RCC_OscConfig+0x5e>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a80:	d10b      	bne.n	8009a9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a82:	4b87      	ldr	r3, [pc, #540]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d06a      	beq.n	8009b64 <HAL_RCC_OscConfig+0x128>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d166      	bne.n	8009b64 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e2f7      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d106      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x74>
 8009aa2:	4b7f      	ldr	r3, [pc, #508]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	e02d      	b.n	8009b0c <HAL_RCC_OscConfig+0xd0>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10c      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x96>
 8009ab8:	4b79      	ldr	r3, [pc, #484]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a78      	ldr	r2, [pc, #480]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b76      	ldr	r3, [pc, #472]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a75      	ldr	r2, [pc, #468]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e01c      	b.n	8009b0c <HAL_RCC_OscConfig+0xd0>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d10c      	bne.n	8009af4 <HAL_RCC_OscConfig+0xb8>
 8009ada:	4b71      	ldr	r3, [pc, #452]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a70      	ldr	r2, [pc, #448]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a6d      	ldr	r2, [pc, #436]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e00b      	b.n	8009b0c <HAL_RCC_OscConfig+0xd0>
 8009af4:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a69      	ldr	r2, [pc, #420]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	4b67      	ldr	r3, [pc, #412]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a66      	ldr	r2, [pc, #408]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d013      	beq.n	8009b3c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b14:	f7fb fbdc 	bl	80052d0 <HAL_GetTick>
 8009b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b1a:	e008      	b.n	8009b2e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b1c:	f7fb fbd8 	bl	80052d0 <HAL_GetTick>
 8009b20:	4602      	mov	r2, r0
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	2b64      	cmp	r3, #100	@ 0x64
 8009b28:	d901      	bls.n	8009b2e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e2ad      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0f0      	beq.n	8009b1c <HAL_RCC_OscConfig+0xe0>
 8009b3a:	e014      	b.n	8009b66 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3c:	f7fb fbc8 	bl	80052d0 <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b44:	f7fb fbc4 	bl	80052d0 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b64      	cmp	r3, #100	@ 0x64
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e299      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b56:	4b52      	ldr	r3, [pc, #328]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x108>
 8009b62:	e000      	b.n	8009b66 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d05a      	beq.n	8009c28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d005      	beq.n	8009b84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b0c      	cmp	r3, #12
 8009b7c:	d119      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x176>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d116      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b84:	4b46      	ldr	r3, [pc, #280]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <HAL_RCC_OscConfig+0x160>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d001      	beq.n	8009b9c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e276      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9c:	4b40      	ldr	r3, [pc, #256]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	493d      	ldr	r1, [pc, #244]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bb0:	e03a      	b.n	8009c28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d020      	beq.n	8009bfc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bba:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca4 <HAL_RCC_OscConfig+0x268>)
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc0:	f7fb fb86 	bl	80052d0 <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bc8:	f7fb fb82 	bl	80052d0 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e257      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bda:	4b31      	ldr	r3, [pc, #196]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0f0      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be6:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	492a      	ldr	r1, [pc, #168]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	604b      	str	r3, [r1, #4]
 8009bfa:	e015      	b.n	8009c28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bfc:	4b29      	ldr	r3, [pc, #164]	@ (8009ca4 <HAL_RCC_OscConfig+0x268>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c02:	f7fb fb65 	bl	80052d0 <HAL_GetTick>
 8009c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c08:	e008      	b.n	8009c1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c0a:	f7fb fb61 	bl	80052d0 <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d901      	bls.n	8009c1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e236      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c1c:	4b20      	ldr	r3, [pc, #128]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1f0      	bne.n	8009c0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 80b8 	beq.w	8009da6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d170      	bne.n	8009d1e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c3c:	4b18      	ldr	r3, [pc, #96]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <HAL_RCC_OscConfig+0x218>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e21a      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1a      	ldr	r2, [r3, #32]
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d921      	bls.n	8009ca8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fc27 	bl	800a4bc <RCC_SetFlashLatencyFromMSIRange>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e208      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c78:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	4906      	ldr	r1, [pc, #24]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c8a:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	061b      	lsls	r3, r3, #24
 8009c98:	4901      	ldr	r1, [pc, #4]	@ (8009ca0 <HAL_RCC_OscConfig+0x264>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	604b      	str	r3, [r1, #4]
 8009c9e:	e020      	b.n	8009ce2 <HAL_RCC_OscConfig+0x2a6>
 8009ca0:	40023800 	.word	0x40023800
 8009ca4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ca8:	4b99      	ldr	r3, [pc, #612]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	4996      	ldr	r1, [pc, #600]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cba:	4b95      	ldr	r3, [pc, #596]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	061b      	lsls	r3, r3, #24
 8009cc8:	4991      	ldr	r1, [pc, #580]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fbf2 	bl	800a4bc <RCC_SetFlashLatencyFromMSIRange>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e1d3      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	0b5b      	lsrs	r3, r3, #13
 8009ce8:	3301      	adds	r3, #1
 8009cea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009cee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009cf2:	4a87      	ldr	r2, [pc, #540]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009cf4:	6892      	ldr	r2, [r2, #8]
 8009cf6:	0912      	lsrs	r2, r2, #4
 8009cf8:	f002 020f 	and.w	r2, r2, #15
 8009cfc:	4985      	ldr	r1, [pc, #532]	@ (8009f14 <HAL_RCC_OscConfig+0x4d8>)
 8009cfe:	5c8a      	ldrb	r2, [r1, r2]
 8009d00:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009d02:	4a85      	ldr	r2, [pc, #532]	@ (8009f18 <HAL_RCC_OscConfig+0x4dc>)
 8009d04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d06:	4b85      	ldr	r3, [pc, #532]	@ (8009f1c <HAL_RCC_OscConfig+0x4e0>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fb fa94 	bl	8005238 <HAL_InitTick>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d045      	beq.n	8009da6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	e1b5      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d029      	beq.n	8009d7a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d26:	4b7e      	ldr	r3, [pc, #504]	@ (8009f20 <HAL_RCC_OscConfig+0x4e4>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d2c:	f7fb fad0 	bl	80052d0 <HAL_GetTick>
 8009d30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d34:	f7fb facc 	bl	80052d0 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e1a1      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009d46:	4b72      	ldr	r3, [pc, #456]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d52:	4b6f      	ldr	r3, [pc, #444]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	496c      	ldr	r1, [pc, #432]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d64:	4b6a      	ldr	r3, [pc, #424]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	061b      	lsls	r3, r3, #24
 8009d72:	4967      	ldr	r1, [pc, #412]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	604b      	str	r3, [r1, #4]
 8009d78:	e015      	b.n	8009da6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009d7a:	4b69      	ldr	r3, [pc, #420]	@ (8009f20 <HAL_RCC_OscConfig+0x4e4>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d80:	f7fb faa6 	bl	80052d0 <HAL_GetTick>
 8009d84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009d86:	e008      	b.n	8009d9a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d88:	f7fb faa2 	bl	80052d0 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d901      	bls.n	8009d9a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e177      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1f0      	bne.n	8009d88 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d030      	beq.n	8009e14 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d016      	beq.n	8009de8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dba:	4b5a      	ldr	r3, [pc, #360]	@ (8009f24 <HAL_RCC_OscConfig+0x4e8>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dc0:	f7fb fa86 	bl	80052d0 <HAL_GetTick>
 8009dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009dc8:	f7fb fa82 	bl	80052d0 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e157      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dda:	4b4d      	ldr	r3, [pc, #308]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0f0      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x38c>
 8009de6:	e015      	b.n	8009e14 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009de8:	4b4e      	ldr	r3, [pc, #312]	@ (8009f24 <HAL_RCC_OscConfig+0x4e8>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dee:	f7fb fa6f 	bl	80052d0 <HAL_GetTick>
 8009df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009df4:	e008      	b.n	8009e08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009df6:	f7fb fa6b 	bl	80052d0 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d901      	bls.n	8009e08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e140      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e08:	4b41      	ldr	r3, [pc, #260]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1f0      	bne.n	8009df6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80b5 	beq.w	8009f8c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e22:	2300      	movs	r3, #0
 8009e24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e26:	4b3a      	ldr	r3, [pc, #232]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10d      	bne.n	8009e4e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e32:	4b37      	ldr	r3, [pc, #220]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e36:	4a36      	ldr	r2, [pc, #216]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e3c:	6253      	str	r3, [r2, #36]	@ 0x24
 8009e3e:	4b34      	ldr	r3, [pc, #208]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e46:	60bb      	str	r3, [r7, #8]
 8009e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e4e:	4b36      	ldr	r3, [pc, #216]	@ (8009f28 <HAL_RCC_OscConfig+0x4ec>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d118      	bne.n	8009e8c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e5a:	4b33      	ldr	r3, [pc, #204]	@ (8009f28 <HAL_RCC_OscConfig+0x4ec>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a32      	ldr	r2, [pc, #200]	@ (8009f28 <HAL_RCC_OscConfig+0x4ec>)
 8009e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e66:	f7fb fa33 	bl	80052d0 <HAL_GetTick>
 8009e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e6c:	e008      	b.n	8009e80 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e6e:	f7fb fa2f 	bl	80052d0 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	2b64      	cmp	r3, #100	@ 0x64
 8009e7a:	d901      	bls.n	8009e80 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e104      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e80:	4b29      	ldr	r3, [pc, #164]	@ (8009f28 <HAL_RCC_OscConfig+0x4ec>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0f0      	beq.n	8009e6e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d106      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x466>
 8009e94:	4b1e      	ldr	r3, [pc, #120]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e98:	4a1d      	ldr	r2, [pc, #116]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ea0:	e02d      	b.n	8009efe <HAL_RCC_OscConfig+0x4c2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10c      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x488>
 8009eaa:	4b19      	ldr	r3, [pc, #100]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eae:	4a18      	ldr	r2, [pc, #96]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eb4:	6353      	str	r3, [r2, #52]	@ 0x34
 8009eb6:	4b16      	ldr	r3, [pc, #88]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eba:	4a15      	ldr	r2, [pc, #84]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ec0:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ec2:	e01c      	b.n	8009efe <HAL_RCC_OscConfig+0x4c2>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	2b05      	cmp	r3, #5
 8009eca:	d10c      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x4aa>
 8009ecc:	4b10      	ldr	r3, [pc, #64]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009ed6:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009edc:	4a0c      	ldr	r2, [pc, #48]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ee2:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ee4:	e00b      	b.n	8009efe <HAL_RCC_OscConfig+0x4c2>
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eea:	4a09      	ldr	r2, [pc, #36]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ef0:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ef2:	4b07      	ldr	r3, [pc, #28]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef6:	4a06      	ldr	r2, [pc, #24]	@ (8009f10 <HAL_RCC_OscConfig+0x4d4>)
 8009ef8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009efc:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d024      	beq.n	8009f50 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f06:	f7fb f9e3 	bl	80052d0 <HAL_GetTick>
 8009f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f0c:	e019      	b.n	8009f42 <HAL_RCC_OscConfig+0x506>
 8009f0e:	bf00      	nop
 8009f10:	40023800 	.word	0x40023800
 8009f14:	0800e1a8 	.word	0x0800e1a8
 8009f18:	20000004 	.word	0x20000004
 8009f1c:	20000008 	.word	0x20000008
 8009f20:	42470020 	.word	0x42470020
 8009f24:	42470680 	.word	0x42470680
 8009f28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f2c:	f7fb f9d0 	bl	80052d0 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e0a3      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f42:	4b54      	ldr	r3, [pc, #336]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ee      	beq.n	8009f2c <HAL_RCC_OscConfig+0x4f0>
 8009f4e:	e014      	b.n	8009f7a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f50:	f7fb f9be 	bl	80052d0 <HAL_GetTick>
 8009f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f56:	e00a      	b.n	8009f6e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f58:	f7fb f9ba 	bl	80052d0 <HAL_GetTick>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e08d      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f6e:	4b49      	ldr	r3, [pc, #292]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1ee      	bne.n	8009f58 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009f7a:	7ffb      	ldrb	r3, [r7, #31]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d105      	bne.n	8009f8c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f80:	4b44      	ldr	r3, [pc, #272]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	4a43      	ldr	r2, [pc, #268]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d079      	beq.n	800a088 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	2b0c      	cmp	r3, #12
 8009f98:	d056      	beq.n	800a048 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d13b      	bne.n	800a01a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa2:	4b3d      	ldr	r3, [pc, #244]	@ (800a098 <HAL_RCC_OscConfig+0x65c>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fa8:	f7fb f992 	bl	80052d0 <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fb0:	f7fb f98e 	bl	80052d0 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e063      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fc2:	4b34      	ldr	r3, [pc, #208]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fce:	4b31      	ldr	r3, [pc, #196]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fde:	4319      	orrs	r1, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	492b      	ldr	r1, [pc, #172]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fec:	4b2a      	ldr	r3, [pc, #168]	@ (800a098 <HAL_RCC_OscConfig+0x65c>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ff2:	f7fb f96d 	bl	80052d0 <HAL_GetTick>
 8009ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ff8:	e008      	b.n	800a00c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ffa:	f7fb f969 	bl	80052d0 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e03e      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a00c:	4b21      	ldr	r3, [pc, #132]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d0f0      	beq.n	8009ffa <HAL_RCC_OscConfig+0x5be>
 800a018:	e036      	b.n	800a088 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a01a:	4b1f      	ldr	r3, [pc, #124]	@ (800a098 <HAL_RCC_OscConfig+0x65c>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a020:	f7fb f956 	bl	80052d0 <HAL_GetTick>
 800a024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a028:	f7fb f952 	bl	80052d0 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e027      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a03a:	4b16      	ldr	r3, [pc, #88]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f0      	bne.n	800a028 <HAL_RCC_OscConfig+0x5ec>
 800a046:	e01f      	b.n	800a088 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e01a      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a054:	4b0f      	ldr	r3, [pc, #60]	@ (800a094 <HAL_RCC_OscConfig+0x658>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a064:	429a      	cmp	r2, r3
 800a066:	d10d      	bne.n	800a084 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a072:	429a      	cmp	r2, r3
 800a074:	d106      	bne.n	800a084 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a080:	429a      	cmp	r2, r3
 800a082:	d001      	beq.n	800a088 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e000      	b.n	800a08a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	40023800 	.word	0x40023800
 800a098:	42470060 	.word	0x42470060

0800a09c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e11a      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a0b0:	4b8f      	ldr	r3, [pc, #572]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d919      	bls.n	800a0f2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d105      	bne.n	800a0d0 <HAL_RCC_ClockConfig+0x34>
 800a0c4:	4b8a      	ldr	r3, [pc, #552]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a89      	ldr	r2, [pc, #548]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0ca:	f043 0304 	orr.w	r3, r3, #4
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	4b87      	ldr	r3, [pc, #540]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f023 0201 	bic.w	r2, r3, #1
 800a0d8:	4985      	ldr	r1, [pc, #532]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e0:	4b83      	ldr	r3, [pc, #524]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d001      	beq.n	800a0f2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e0f9      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0fe:	4b7d      	ldr	r3, [pc, #500]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	497a      	ldr	r1, [pc, #488]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 808e 	beq.w	800a23a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	2b02      	cmp	r3, #2
 800a124:	d107      	bne.n	800a136 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a126:	4b73      	ldr	r3, [pc, #460]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d121      	bne.n	800a176 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e0d7      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d107      	bne.n	800a14e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a13e:	4b6d      	ldr	r3, [pc, #436]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d115      	bne.n	800a176 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e0cb      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d107      	bne.n	800a166 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a156:	4b67      	ldr	r3, [pc, #412]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e0bf      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a166:	4b63      	ldr	r3, [pc, #396]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e0b7      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a176:	4b5f      	ldr	r3, [pc, #380]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f023 0203 	bic.w	r2, r3, #3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	495c      	ldr	r1, [pc, #368]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a184:	4313      	orrs	r3, r2
 800a186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a188:	f7fb f8a2 	bl	80052d0 <HAL_GetTick>
 800a18c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d112      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a196:	e00a      	b.n	800a1ae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a198:	f7fb f89a 	bl	80052d0 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e09b      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a1ae:	4b51      	ldr	r3, [pc, #324]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d1ee      	bne.n	800a198 <HAL_RCC_ClockConfig+0xfc>
 800a1ba:	e03e      	b.n	800a23a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d112      	bne.n	800a1ea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1c4:	e00a      	b.n	800a1dc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1c6:	f7fb f883 	bl	80052d0 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d901      	bls.n	800a1dc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e084      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1dc:	4b45      	ldr	r3, [pc, #276]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f003 030c 	and.w	r3, r3, #12
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d1ee      	bne.n	800a1c6 <HAL_RCC_ClockConfig+0x12a>
 800a1e8:	e027      	b.n	800a23a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d11d      	bne.n	800a22e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1f2:	e00a      	b.n	800a20a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1f4:	f7fb f86c 	bl	80052d0 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a202:	4293      	cmp	r3, r2
 800a204:	d901      	bls.n	800a20a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e06d      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a20a:	4b3a      	ldr	r3, [pc, #232]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 030c 	and.w	r3, r3, #12
 800a212:	2b04      	cmp	r3, #4
 800a214:	d1ee      	bne.n	800a1f4 <HAL_RCC_ClockConfig+0x158>
 800a216:	e010      	b.n	800a23a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a218:	f7fb f85a 	bl	80052d0 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a226:	4293      	cmp	r3, r2
 800a228:	d901      	bls.n	800a22e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e05b      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a22e:	4b31      	ldr	r3, [pc, #196]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 030c 	and.w	r3, r3, #12
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1ee      	bne.n	800a218 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a23a:	4b2d      	ldr	r3, [pc, #180]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d219      	bcs.n	800a27c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d105      	bne.n	800a25a <HAL_RCC_ClockConfig+0x1be>
 800a24e:	4b28      	ldr	r3, [pc, #160]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a27      	ldr	r2, [pc, #156]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a254:	f043 0304 	orr.w	r3, r3, #4
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	4b25      	ldr	r3, [pc, #148]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f023 0201 	bic.w	r2, r3, #1
 800a262:	4923      	ldr	r1, [pc, #140]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	4313      	orrs	r3, r2
 800a268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a26a:	4b21      	ldr	r3, [pc, #132]	@ (800a2f0 <HAL_RCC_ClockConfig+0x254>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d001      	beq.n	800a27c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e034      	b.n	800a2e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0304 	and.w	r3, r3, #4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d008      	beq.n	800a29a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a288:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	4917      	ldr	r1, [pc, #92]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a296:	4313      	orrs	r3, r2
 800a298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0308 	and.w	r3, r3, #8
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2a6:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	490f      	ldr	r1, [pc, #60]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a2ba:	f000 f823 	bl	800a304 <HAL_RCC_GetSysClockFreq>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f4 <HAL_RCC_ClockConfig+0x258>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	091b      	lsrs	r3, r3, #4
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	490b      	ldr	r1, [pc, #44]	@ (800a2f8 <HAL_RCC_ClockConfig+0x25c>)
 800a2cc:	5ccb      	ldrb	r3, [r1, r3]
 800a2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a2fc <HAL_RCC_ClockConfig+0x260>)
 800a2d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a300 <HAL_RCC_ClockConfig+0x264>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fa ffac 	bl	8005238 <HAL_InitTick>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	72fb      	strb	r3, [r7, #11]

  return status;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	40023c00 	.word	0x40023c00
 800a2f4:	40023800 	.word	0x40023800
 800a2f8:	0800e1a8 	.word	0x0800e1a8
 800a2fc:	20000004 	.word	0x20000004
 800a300:	20000008 	.word	0x20000008

0800a304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a308:	b08e      	sub	sp, #56	@ 0x38
 800a30a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800a30c:	4b58      	ldr	r3, [pc, #352]	@ (800a470 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a314:	f003 030c 	and.w	r3, r3, #12
 800a318:	2b0c      	cmp	r3, #12
 800a31a:	d00d      	beq.n	800a338 <HAL_RCC_GetSysClockFreq+0x34>
 800a31c:	2b0c      	cmp	r3, #12
 800a31e:	f200 8092 	bhi.w	800a446 <HAL_RCC_GetSysClockFreq+0x142>
 800a322:	2b04      	cmp	r3, #4
 800a324:	d002      	beq.n	800a32c <HAL_RCC_GetSysClockFreq+0x28>
 800a326:	2b08      	cmp	r3, #8
 800a328:	d003      	beq.n	800a332 <HAL_RCC_GetSysClockFreq+0x2e>
 800a32a:	e08c      	b.n	800a446 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a32c:	4b51      	ldr	r3, [pc, #324]	@ (800a474 <HAL_RCC_GetSysClockFreq+0x170>)
 800a32e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a330:	e097      	b.n	800a462 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a332:	4b51      	ldr	r3, [pc, #324]	@ (800a478 <HAL_RCC_GetSysClockFreq+0x174>)
 800a334:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a336:	e094      	b.n	800a462 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33a:	0c9b      	lsrs	r3, r3, #18
 800a33c:	f003 020f 	and.w	r2, r3, #15
 800a340:	4b4e      	ldr	r3, [pc, #312]	@ (800a47c <HAL_RCC_GetSysClockFreq+0x178>)
 800a342:	5c9b      	ldrb	r3, [r3, r2]
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a348:	0d9b      	lsrs	r3, r3, #22
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	3301      	adds	r3, #1
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a352:	4b47      	ldr	r3, [pc, #284]	@ (800a470 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d021      	beq.n	800a3a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	2200      	movs	r2, #0
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	61fa      	str	r2, [r7, #28]
 800a366:	4b44      	ldr	r3, [pc, #272]	@ (800a478 <HAL_RCC_GetSysClockFreq+0x174>)
 800a368:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a36c:	464a      	mov	r2, r9
 800a36e:	fb03 f202 	mul.w	r2, r3, r2
 800a372:	2300      	movs	r3, #0
 800a374:	4644      	mov	r4, r8
 800a376:	fb04 f303 	mul.w	r3, r4, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	4a3e      	ldr	r2, [pc, #248]	@ (800a478 <HAL_RCC_GetSysClockFreq+0x174>)
 800a37e:	4644      	mov	r4, r8
 800a380:	fba4 0102 	umull	r0, r1, r4, r2
 800a384:	440b      	add	r3, r1
 800a386:	4619      	mov	r1, r3
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	2200      	movs	r2, #0
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	617a      	str	r2, [r7, #20]
 800a390:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a394:	f7f6 fe16 	bl	8000fc4 <__aeabi_uldivmod>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4613      	mov	r3, r2
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a0:	e04e      	b.n	800a440 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	469a      	mov	sl, r3
 800a3a8:	4693      	mov	fp, r2
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	f04f 0000 	mov.w	r0, #0
 800a3b2:	f04f 0100 	mov.w	r1, #0
 800a3b6:	0159      	lsls	r1, r3, #5
 800a3b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3bc:	0150      	lsls	r0, r2, #5
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	ebb2 080a 	subs.w	r8, r2, sl
 800a3c6:	eb63 090b 	sbc.w	r9, r3, fp
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a3d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a3da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a3de:	ebb2 0408 	subs.w	r4, r2, r8
 800a3e2:	eb63 0509 	sbc.w	r5, r3, r9
 800a3e6:	f04f 0200 	mov.w	r2, #0
 800a3ea:	f04f 0300 	mov.w	r3, #0
 800a3ee:	00eb      	lsls	r3, r5, #3
 800a3f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3f4:	00e2      	lsls	r2, r4, #3
 800a3f6:	4614      	mov	r4, r2
 800a3f8:	461d      	mov	r5, r3
 800a3fa:	eb14 030a 	adds.w	r3, r4, sl
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	eb45 030b 	adc.w	r3, r5, fp
 800a404:	607b      	str	r3, [r7, #4]
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a412:	4629      	mov	r1, r5
 800a414:	028b      	lsls	r3, r1, #10
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	4604      	mov	r4, r0
 800a41c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a420:	4601      	mov	r1, r0
 800a422:	028a      	lsls	r2, r1, #10
 800a424:	4610      	mov	r0, r2
 800a426:	4619      	mov	r1, r3
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	60bb      	str	r3, [r7, #8]
 800a42e:	60fa      	str	r2, [r7, #12]
 800a430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a434:	f7f6 fdc6 	bl	8000fc4 <__aeabi_uldivmod>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4613      	mov	r3, r2
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 800a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a442:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a444:	e00d      	b.n	800a462 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a446:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	0b5b      	lsrs	r3, r3, #13
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	3301      	adds	r3, #1
 800a456:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a45a:	fa02 f303 	lsl.w	r3, r2, r3
 800a45e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a460:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a464:	4618      	mov	r0, r3
 800a466:	3738      	adds	r7, #56	@ 0x38
 800a468:	46bd      	mov	sp, r7
 800a46a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a46e:	bf00      	nop
 800a470:	40023800 	.word	0x40023800
 800a474:	00f42400 	.word	0x00f42400
 800a478:	00b71b00 	.word	0x00b71b00
 800a47c:	0800e19c 	.word	0x0800e19c

0800a480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a484:	4b02      	ldr	r3, [pc, #8]	@ (800a490 <HAL_RCC_GetHCLKFreq+0x10>)
 800a486:	681b      	ldr	r3, [r3, #0]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr
 800a490:	20000004 	.word	0x20000004

0800a494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a498:	f7ff fff2 	bl	800a480 <HAL_RCC_GetHCLKFreq>
 800a49c:	4602      	mov	r2, r0
 800a49e:	4b05      	ldr	r3, [pc, #20]	@ (800a4b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	4903      	ldr	r1, [pc, #12]	@ (800a4b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4aa:	5ccb      	ldrb	r3, [r1, r3]
 800a4ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40023800 	.word	0x40023800
 800a4b8:	0800e1b8 	.word	0x0800e1b8

0800a4bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a4c8:	4b29      	ldr	r3, [pc, #164]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d12c      	bne.n	800a52e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a4d4:	4b26      	ldr	r3, [pc, #152]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a4e0:	4b24      	ldr	r3, [pc, #144]	@ (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	e016      	b.n	800a51a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4ec:	4b20      	ldr	r3, [pc, #128]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a4f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4f6:	6253      	str	r3, [r2, #36]	@ 0x24
 800a4f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a504:	4b1b      	ldr	r3, [pc, #108]	@ (800a574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a50c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a50e:	4b18      	ldr	r3, [pc, #96]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a512:	4a17      	ldr	r2, [pc, #92]	@ (800a570 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a518:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800a520:	d105      	bne.n	800a52e <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a528:	d101      	bne.n	800a52e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a52a:	2301      	movs	r3, #1
 800a52c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d105      	bne.n	800a540 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a534:	4b10      	ldr	r3, [pc, #64]	@ (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a0f      	ldr	r2, [pc, #60]	@ (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a53a:	f043 0304 	orr.w	r3, r3, #4
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f023 0201 	bic.w	r2, r3, #1
 800a548:	490b      	ldr	r1, [pc, #44]	@ (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a550:	4b09      	ldr	r3, [pc, #36]	@ (800a578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d001      	beq.n	800a562 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	40023800 	.word	0x40023800
 800a574:	40007000 	.word	0x40007000
 800a578:	40023c00 	.word	0x40023c00

0800a57c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 80b8 	beq.w	800a702 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a596:	4b5d      	ldr	r3, [pc, #372]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a59a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10d      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5a2:	4b5a      	ldr	r3, [pc, #360]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a6:	4a59      	ldr	r2, [pc, #356]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a5a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5ac:	6253      	str	r3, [r2, #36]	@ 0x24
 800a5ae:	4b57      	ldr	r3, [pc, #348]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5b6:	60bb      	str	r3, [r7, #8]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5be:	4b54      	ldr	r3, [pc, #336]	@ (800a710 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d118      	bne.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a5ca:	4b51      	ldr	r3, [pc, #324]	@ (800a710 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a50      	ldr	r2, [pc, #320]	@ (800a710 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a5d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5d6:	f7fa fe7b 	bl	80052d0 <HAL_GetTick>
 800a5da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5dc:	e008      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5de:	f7fa fe77 	bl	80052d0 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b64      	cmp	r3, #100	@ 0x64
 800a5ea:	d901      	bls.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e089      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5f0:	4b47      	ldr	r3, [pc, #284]	@ (800a710 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0f0      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a5fc:	4b43      	ldr	r3, [pc, #268]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a604:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	429a      	cmp	r2, r3
 800a612:	d00f      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a61c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a620:	d108      	bne.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a622:	4b3a      	ldr	r3, [pc, #232]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a62e:	d101      	bne.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e067      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a634:	4b35      	ldr	r3, [pc, #212]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a63c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d034      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x132>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d02d      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d027      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a65e:	4b2b      	ldr	r3, [pc, #172]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a662:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a666:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a668:	4b2a      	ldr	r3, [pc, #168]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a66e:	4b29      	ldr	r3, [pc, #164]	@ (800a714 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a674:	4a25      	ldr	r2, [pc, #148]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6353      	str	r3, [r2, #52]	@ 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a680:	2b00      	cmp	r3, #0
 800a682:	d014      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a684:	f7fa fe24 	bl	80052d0 <HAL_GetTick>
 800a688:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a68a:	e00a      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a68c:	f7fa fe20 	bl	80052d0 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e030      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0ee      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01a      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6c6:	d10a      	bne.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x162>
 800a6c8:	4b10      	ldr	r3, [pc, #64]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a6d8:	490c      	ldr	r1, [pc, #48]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	600b      	str	r3, [r1, #0]
 800a6de:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6ea:	4908      	ldr	r1, [pc, #32]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a6f0:	7dfb      	ldrb	r3, [r7, #23]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d105      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6f6:	4b05      	ldr	r3, [pc, #20]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fa:	4a04      	ldr	r2, [pc, #16]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a700:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	40023800 	.word	0x40023800
 800a710:	40007000 	.word	0x40007000
 800a714:	424706dc 	.word	0x424706dc

0800a718 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e073      	b.n	800a812 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	7f5b      	ldrb	r3, [r3, #29]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d105      	bne.n	800a740 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7fa fb24 	bl	8004d88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b10      	cmp	r3, #16
 800a752:	d055      	beq.n	800a800 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	22ca      	movs	r2, #202	@ 0xca
 800a75a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2253      	movs	r2, #83	@ 0x53
 800a762:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fc42 	bl	800afee <RTC_EnterInitMode>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d12c      	bne.n	800a7ce <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6812      	ldr	r2, [r2, #0]
 800a77e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a786:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6899      	ldr	r1, [r3, #8]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	431a      	orrs	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68d2      	ldr	r2, [r2, #12]
 800a7ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6919      	ldr	r1, [r3, #16]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	041a      	lsls	r2, r3, #16
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	430a      	orrs	r2, r1
 800a7c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc49 	bl	800b05c <RTC_ExitInitMode>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d110      	bne.n	800a7f6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a7e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699a      	ldr	r2, [r3, #24]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	22ff      	movs	r2, #255	@ 0xff
 800a7fc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7fe:	e001      	b.n	800a804 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a810:	7bfb      	ldrb	r3, [r7, #15]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a81a:	b590      	push	{r4, r7, lr}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	7f1b      	ldrb	r3, [r3, #28]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d101      	bne.n	800a836 <HAL_RTC_SetTime+0x1c>
 800a832:	2302      	movs	r3, #2
 800a834:	e087      	b.n	800a946 <HAL_RTC_SetTime+0x12c>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2202      	movs	r2, #2
 800a840:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d126      	bne.n	800a896 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2200      	movs	r2, #0
 800a85a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fc19 	bl	800b098 <RTC_ByteToBcd2>
 800a866:	4603      	mov	r3, r0
 800a868:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	785b      	ldrb	r3, [r3, #1]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 fc12 	bl	800b098 <RTC_ByteToBcd2>
 800a874:	4603      	mov	r3, r0
 800a876:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a878:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	789b      	ldrb	r3, [r3, #2]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fc0a 	bl	800b098 <RTC_ByteToBcd2>
 800a884:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a886:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	78db      	ldrb	r3, [r3, #3]
 800a88e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a890:	4313      	orrs	r3, r2
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	e018      	b.n	800a8c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	785b      	ldrb	r3, [r3, #1]
 800a8b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a8b6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a8bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	78db      	ldrb	r3, [r3, #3]
 800a8c2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	22ca      	movs	r2, #202	@ 0xca
 800a8ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2253      	movs	r2, #83	@ 0x53
 800a8d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 fb88 	bl	800afee <RTC_EnterInitMode>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a8e2:	7cfb      	ldrb	r3, [r7, #19]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d120      	bne.n	800a92a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a8f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a8f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689a      	ldr	r2, [r3, #8]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a906:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6899      	ldr	r1, [r3, #8]
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	431a      	orrs	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 fb9b 	bl	800b05c <RTC_ExitInitMode>
 800a926:	4603      	mov	r3, r0
 800a928:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a92a:	7cfb      	ldrb	r3, [r7, #19]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	22ff      	movs	r2, #255	@ 0xff
 800a93c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	771a      	strb	r2, [r3, #28]

  return status;
 800a944:	7cfb      	ldrb	r3, [r7, #19]
}
 800a946:	4618      	mov	r0, r3
 800a948:	371c      	adds	r7, #28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd90      	pop	{r4, r7, pc}

0800a94e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a968:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a96c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	0c1b      	lsrs	r3, r3, #16
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	0a1b      	lsrs	r3, r3, #8
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a996:	b2da      	uxtb	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	0d9b      	lsrs	r3, r3, #22
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d11a      	bne.n	800a9e8 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fb8b 	bl	800b0d2 <RTC_Bcd2ToByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fb82 	bl	800b0d2 <RTC_Bcd2ToByte>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	789b      	ldrb	r3, [r3, #2]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fb79 	bl	800b0d2 <RTC_Bcd2ToByte>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3718      	adds	r7, #24
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a9f2:	b590      	push	{r4, r7, lr}
 800a9f4:	b087      	sub	sp, #28
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	7f1b      	ldrb	r3, [r3, #28]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d101      	bne.n	800aa0e <HAL_RTC_SetDate+0x1c>
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	e071      	b.n	800aaf2 <HAL_RTC_SetDate+0x100>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2201      	movs	r2, #1
 800aa12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2202      	movs	r2, #2
 800aa18:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10e      	bne.n	800aa3e <HAL_RTC_SetDate+0x4c>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	785b      	ldrb	r3, [r3, #1]
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d008      	beq.n	800aa3e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	f023 0310 	bic.w	r3, r3, #16
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	330a      	adds	r3, #10
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d11c      	bne.n	800aa7e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	78db      	ldrb	r3, [r3, #3]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 fb25 	bl	800b098 <RTC_ByteToBcd2>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 fb1e 	bl	800b098 <RTC_ByteToBcd2>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fb16 	bl	800b098 <RTC_ByteToBcd2>
 800aa6c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aa6e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	e00e      	b.n	800aa9c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	78db      	ldrb	r3, [r3, #3]
 800aa82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	785b      	ldrb	r3, [r3, #1]
 800aa88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa8a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800aa90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	22ca      	movs	r2, #202	@ 0xca
 800aaa2:	625a      	str	r2, [r3, #36]	@ 0x24
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2253      	movs	r2, #83	@ 0x53
 800aaaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fa9e 	bl	800afee <RTC_EnterInitMode>
 800aab2:	4603      	mov	r3, r0
 800aab4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800aab6:	7cfb      	ldrb	r3, [r7, #19]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10c      	bne.n	800aad6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800aac6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aaca:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 fac5 	bl	800b05c <RTC_ExitInitMode>
 800aad2:	4603      	mov	r3, r0
 800aad4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800aad6:	7cfb      	ldrb	r3, [r7, #19]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	22ff      	movs	r2, #255	@ 0xff
 800aae8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	771a      	strb	r2, [r3, #28]

  return status;
 800aaf0:	7cfb      	ldrb	r3, [r7, #19]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd90      	pop	{r4, r7, pc}

0800aafa <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b086      	sub	sp, #24
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ab14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab18:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	0c1b      	lsrs	r3, r3, #16
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	0b5b      	lsrs	r3, r3, #13
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d11a      	bne.n	800ab8e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	78db      	ldrb	r3, [r3, #3]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 fab8 	bl	800b0d2 <RTC_Bcd2ToByte>
 800ab62:	4603      	mov	r3, r0
 800ab64:	461a      	mov	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 faaf 	bl	800b0d2 <RTC_Bcd2ToByte>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	789b      	ldrb	r3, [r3, #2]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 faa6 	bl	800b0d2 <RTC_Bcd2ToByte>
 800ab86:	4603      	mov	r3, r0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ab98:	b590      	push	{r4, r7, lr}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800aba4:	4b92      	ldr	r3, [pc, #584]	@ (800adf0 <HAL_RTC_SetAlarm_IT+0x258>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a92      	ldr	r2, [pc, #584]	@ (800adf4 <HAL_RTC_SetAlarm_IT+0x25c>)
 800abaa:	fba2 2303 	umull	r2, r3, r2, r3
 800abae:	0adb      	lsrs	r3, r3, #11
 800abb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800abb4:	fb02 f303 	mul.w	r3, r2, r3
 800abb8:	613b      	str	r3, [r7, #16]
       uint32_t tmpreg = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	7f1b      	ldrb	r3, [r3, #28]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d101      	bne.n	800abca <HAL_RTC_SetAlarm_IT+0x32>
 800abc6:	2302      	movs	r3, #2
 800abc8:	e10e      	b.n	800ade8 <HAL_RTC_SetAlarm_IT+0x250>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2202      	movs	r2, #2
 800abd4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d136      	bne.n	800ac4a <HAL_RTC_SetAlarm_IT+0xb2>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <HAL_RTC_SetAlarm_IT+0x58>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2200      	movs	r2, #0
 800abee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fa4f 	bl	800b098 <RTC_ByteToBcd2>
 800abfa:	4603      	mov	r3, r0
 800abfc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fa48 	bl	800b098 <RTC_ByteToBcd2>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ac0c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	789b      	ldrb	r3, [r3, #2]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fa40 	bl	800b098 <RTC_ByteToBcd2>
 800ac18:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	78db      	ldrb	r3, [r3, #3]
 800ac22:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ac24:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	7d1b      	ldrb	r3, [r3, #20]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fa33 	bl	800b098 <RTC_ByteToBcd2>
 800ac32:	4603      	mov	r3, r0
 800ac34:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800ac36:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ac3e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	e022      	b.n	800ac90 <HAL_RTC_SetAlarm_IT+0xf8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <HAL_RTC_SetAlarm_IT+0xc6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ac6a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ac70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	78db      	ldrb	r3, [r3, #3]
 800ac76:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ac78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	7d1b      	ldrb	r3, [r3, #20]
 800ac7e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800ac80:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ac86:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	22ca      	movs	r2, #202	@ 0xca
 800ac96:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2253      	movs	r2, #83	@ 0x53
 800ac9e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aca8:	d13e      	bne.n	800ad28 <HAL_RTC_SetAlarm_IT+0x190>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	689a      	ldr	r2, [r3, #8]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800acb8:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800acca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	3b01      	subs	r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <HAL_RTC_SetAlarm_IT+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	22ff      	movs	r2, #255	@ 0xff
 800acde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2203      	movs	r2, #3
 800ace4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e07b      	b.n	800ade8 <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0e6      	beq.n	800accc <HAL_RTC_SetAlarm_IT+0x134>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	61da      	str	r2, [r3, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad14:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689a      	ldr	r2, [r3, #8]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ad24:	609a      	str	r2, [r3, #8]
 800ad26:	e048      	b.n	800adba <HAL_RTC_SetAlarm_IT+0x222>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ad36:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ad48:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ad4a:	4b29      	ldr	r3, [pc, #164]	@ (800adf0 <HAL_RTC_SetAlarm_IT+0x258>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a29      	ldr	r2, [pc, #164]	@ (800adf4 <HAL_RTC_SetAlarm_IT+0x25c>)
 800ad50:	fba2 2303 	umull	r2, r3, r2, r3
 800ad54:	0adb      	lsrs	r3, r3, #11
 800ad56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad5a:	fb02 f303 	mul.w	r3, r2, r3
 800ad5e:	613b      	str	r3, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10b      	bne.n	800ad84 <HAL_RTC_SetAlarm_IT+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	22ff      	movs	r2, #255	@ 0xff
 800ad72:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2203      	movs	r2, #3
 800ad78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e031      	b.n	800ade8 <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0e6      	beq.n	800ad60 <HAL_RTC_SetAlarm_IT+0x1c8>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	621a      	str	r2, [r3, #32]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ada8:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800adb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800adba:	4b0f      	ldr	r3, [pc, #60]	@ (800adf8 <HAL_RTC_SetAlarm_IT+0x260>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a0e      	ldr	r2, [pc, #56]	@ (800adf8 <HAL_RTC_SetAlarm_IT+0x260>)
 800adc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adc4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800adc6:	4b0c      	ldr	r3, [pc, #48]	@ (800adf8 <HAL_RTC_SetAlarm_IT+0x260>)
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	4a0b      	ldr	r2, [pc, #44]	@ (800adf8 <HAL_RTC_SetAlarm_IT+0x260>)
 800adcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800add0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	22ff      	movs	r2, #255	@ 0xff
 800add8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	bd90      	pop	{r4, r7, pc}
 800adf0:	20000004 	.word	0x20000004
 800adf4:	10624dd3 	.word	0x10624dd3
 800adf8:	40010400 	.word	0x40010400

0800adfc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	7f1b      	ldrb	r3, [r3, #28]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d101      	bne.n	800ae16 <HAL_RTC_DeactivateAlarm+0x1a>
 800ae12:	2302      	movs	r3, #2
 800ae14:	e07b      	b.n	800af0e <HAL_RTC_DeactivateAlarm+0x112>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	22ca      	movs	r2, #202	@ 0xca
 800ae28:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2253      	movs	r2, #83	@ 0x53
 800ae30:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae38:	d12f      	bne.n	800ae9a <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae48:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ae58:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae5a:	f7fa fa39 	bl	80052d0 <HAL_GetTick>
 800ae5e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ae60:	e013      	b.n	800ae8a <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae62:	f7fa fa35 	bl	80052d0 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae70:	d90b      	bls.n	800ae8a <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	22ff      	movs	r2, #255	@ 0xff
 800ae78:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2203      	movs	r2, #3
 800ae7e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e041      	b.n	800af0e <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0e4      	beq.n	800ae62 <HAL_RTC_DeactivateAlarm+0x66>
 800ae98:	e02e      	b.n	800aef8 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800aea8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aeb8:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aeba:	f7fa fa09 	bl	80052d0 <HAL_GetTick>
 800aebe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800aec0:	e013      	b.n	800aeea <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aec2:	f7fa fa05 	bl	80052d0 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aed0:	d90b      	bls.n	800aeea <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	22ff      	movs	r2, #255	@ 0xff
 800aed8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2203      	movs	r2, #3
 800aede:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e011      	b.n	800af0e <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0e4      	beq.n	800aec2 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	22ff      	movs	r2, #255	@ 0xff
 800aefe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800af20:	4b1f      	ldr	r3, [pc, #124]	@ (800afa0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800af22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800af26:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d012      	beq.n	800af5c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800af54:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7f8 f91a 	bl	8003190 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d012      	beq.n	800af90 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00b      	beq.n	800af90 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800af88:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f8be 	bl	800b10c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	775a      	strb	r2, [r3, #29]
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	40010400 	.word	0x40010400

0800afa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800afb8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800afba:	f7fa f989 	bl	80052d0 <HAL_GetTick>
 800afbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afc0:	e009      	b.n	800afd6 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afc2:	f7fa f985 	bl	80052d0 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afd0:	d901      	bls.n	800afd6 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e007      	b.n	800afe6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f003 0320 	and.w	r3, r3, #32
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0ee      	beq.n	800afc2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d122      	bne.n	800b052 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b01a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b01c:	f7fa f958 	bl	80052d0 <HAL_GetTick>
 800b020:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b022:	e00c      	b.n	800b03e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b024:	f7fa f954 	bl	80052d0 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b032:	d904      	bls.n	800b03e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2204      	movs	r2, #4
 800b038:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <RTC_EnterInitMode+0x64>
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d1e8      	bne.n	800b024 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b076:	60da      	str	r2, [r3, #12]
      hrtc->State = HAL_RTC_STATE_ERROR;
      status = HAL_ERROR;
    }
  }
#else /* RTC_CR_BYPSHAD */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff93 	bl	800afa4 <HAL_RTC_WaitForSynchro>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2204      	movs	r2, #4
 800b088:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b0a6:	e005      	b.n	800b0b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	3b0a      	subs	r3, #10
 800b0b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d8f6      	bhi.n	800b0a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	011b      	lsls	r3, r3, #4
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	b2db      	uxtb	r3, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bc80      	pop	{r7}
 800b0d0:	4770      	bx	lr

0800b0d2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	4603      	mov	r3, r0
 800b0da:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	091b      	lsrs	r3, r3, #4
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	f003 030f 	and.w	r3, r3, #15
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	4413      	add	r3, r2
 800b100:	b2db      	uxtb	r3, r3
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	bc80      	pop	{r7}
 800b10a:	4770      	bx	lr

0800b10c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	bc80      	pop	{r7}
 800b11c:	4770      	bx	lr

0800b11e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e06e      	b.n	800b20e <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	d108      	bne.n	800b14a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b140:	d009      	beq.n	800b156 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	61da      	str	r2, [r3, #28]
 800b148:	e005      	b.n	800b156 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7f9 fe25 	bl	8004dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b18c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	f003 0301 	and.w	r3, r3, #1
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1da:	ea42 0103 	orr.w	r1, r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	0c1a      	lsrs	r2, r3, #16
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f002 0204 	and.w	r2, r2, #4
 800b1fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b088      	sub	sp, #32
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b226:	f7fa f853 	bl	80052d0 <HAL_GetTick>
 800b22a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b22c:	88fb      	ldrh	r3, [r7, #6]
 800b22e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d001      	beq.n	800b240 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b23c:	2302      	movs	r3, #2
 800b23e:	e12a      	b.n	800b496 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <HAL_SPI_Transmit+0x36>
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e122      	b.n	800b496 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <HAL_SPI_Transmit+0x48>
 800b25a:	2302      	movs	r3, #2
 800b25c:	e11b      	b.n	800b496 <HAL_SPI_Transmit+0x280>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2203      	movs	r2, #3
 800b26a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	88fa      	ldrh	r2, [r7, #6]
 800b27e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	88fa      	ldrh	r2, [r7, #6]
 800b284:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2ac:	d10f      	bne.n	800b2ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d8:	2b40      	cmp	r3, #64	@ 0x40
 800b2da:	d007      	beq.n	800b2ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2f4:	d152      	bne.n	800b39c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <HAL_SPI_Transmit+0xee>
 800b2fe:	8b7b      	ldrh	r3, [r7, #26]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d145      	bne.n	800b390 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b308:	881a      	ldrh	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b314:	1c9a      	adds	r2, r3, #2
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b31e:	b29b      	uxth	r3, r3
 800b320:	3b01      	subs	r3, #1
 800b322:	b29a      	uxth	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b328:	e032      	b.n	800b390 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f003 0302 	and.w	r3, r3, #2
 800b334:	2b02      	cmp	r3, #2
 800b336:	d112      	bne.n	800b35e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b33c:	881a      	ldrh	r2, [r3, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b348:	1c9a      	adds	r2, r3, #2
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b01      	subs	r3, #1
 800b356:	b29a      	uxth	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b35c:	e018      	b.n	800b390 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b35e:	f7f9 ffb7 	bl	80052d0 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d803      	bhi.n	800b376 <HAL_SPI_Transmit+0x160>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d102      	bne.n	800b37c <HAL_SPI_Transmit+0x166>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d109      	bne.n	800b390 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e082      	b.n	800b496 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b394:	b29b      	uxth	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1c7      	bne.n	800b32a <HAL_SPI_Transmit+0x114>
 800b39a:	e053      	b.n	800b444 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <HAL_SPI_Transmit+0x194>
 800b3a4:	8b7b      	ldrh	r3, [r7, #26]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d147      	bne.n	800b43a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	330c      	adds	r3, #12
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b3d0:	e033      	b.n	800b43a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f003 0302 	and.w	r3, r3, #2
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d113      	bne.n	800b408 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b406:	e018      	b.n	800b43a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b408:	f7f9 ff62 	bl	80052d0 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d803      	bhi.n	800b420 <HAL_SPI_Transmit+0x20a>
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41e:	d102      	bne.n	800b426 <HAL_SPI_Transmit+0x210>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e02d      	b.n	800b496 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b43e:	b29b      	uxth	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1c6      	bne.n	800b3d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b444:	69fa      	ldr	r2, [r7, #28]
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 fbd9 	bl	800bc00 <SPI_EndRxTxTransaction>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2220      	movs	r2, #32
 800b458:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10a      	bne.n	800b478 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b494:	2300      	movs	r3, #0
  }
}
 800b496:	4618      	mov	r0, r3
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES 
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b088      	sub	sp, #32
 800b4a2:	af02      	add	r7, sp, #8
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d001      	beq.n	800b4be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	e104      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_SPI_Receive+0x2c>
 800b4c4:	88fb      	ldrh	r3, [r7, #6]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e0fc      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b4d6:	d112      	bne.n	800b4fe <HAL_SPI_Receive+0x60>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10e      	bne.n	800b4fe <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2204      	movs	r2, #4
 800b4e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4e8:	88fa      	ldrh	r2, [r7, #6]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f000 f8eb 	bl	800b6d0 <HAL_SPI_TransmitReceive>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	e0e4      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4fe:	f7f9 fee7 	bl	80052d0 <HAL_GetTick>
 800b502:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d101      	bne.n	800b512 <HAL_SPI_Receive+0x74>
 800b50e:	2302      	movs	r3, #2
 800b510:	e0da      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2204      	movs	r2, #4
 800b51e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	88fa      	ldrh	r2, [r7, #6]
 800b532:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88fa      	ldrh	r2, [r7, #6]
 800b538:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b560:	d10f      	bne.n	800b582 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b580:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b58c:	2b40      	cmp	r3, #64	@ 0x40
 800b58e:	d007      	beq.n	800b5a0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b59e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d170      	bne.n	800b68a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5a8:	e035      	b.n	800b616 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d115      	bne.n	800b5e4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f103 020c 	add.w	r2, r3, #12
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c4:	7812      	ldrb	r2, [r2, #0]
 800b5c6:	b2d2      	uxtb	r2, r2
 800b5c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b5e2:	e018      	b.n	800b616 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5e4:	f7f9 fe74 	bl	80052d0 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d803      	bhi.n	800b5fc <HAL_SPI_Receive+0x15e>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fa:	d102      	bne.n	800b602 <HAL_SPI_Receive+0x164>
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e058      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1c4      	bne.n	800b5aa <HAL_SPI_Receive+0x10c>
 800b620:	e038      	b.n	800b694 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d113      	bne.n	800b658 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	b292      	uxth	r2, r2
 800b63c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b642:	1c9a      	adds	r2, r3, #2
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b656:	e018      	b.n	800b68a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b658:	f7f9 fe3a 	bl	80052d0 <HAL_GetTick>
 800b65c:	4602      	mov	r2, r0
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d803      	bhi.n	800b670 <HAL_SPI_Receive+0x1d2>
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66e:	d102      	bne.n	800b676 <HAL_SPI_Receive+0x1d8>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d109      	bne.n	800b68a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e01e      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b68e:	b29b      	uxth	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1c6      	bne.n	800b622 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 fa4b 	bl	800bb34 <SPI_EndRxTransaction>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e000      	b.n	800b6c8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
  }
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08a      	sub	sp, #40	@ 0x28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6e2:	f7f9 fdf5 	bl	80052d0 <HAL_GetTick>
 800b6e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b6f6:	887b      	ldrh	r3, [r7, #2]
 800b6f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b6fa:	7ffb      	ldrb	r3, [r7, #31]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d00c      	beq.n	800b71a <HAL_SPI_TransmitReceive+0x4a>
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b706:	d106      	bne.n	800b716 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d102      	bne.n	800b716 <HAL_SPI_TransmitReceive+0x46>
 800b710:	7ffb      	ldrb	r3, [r7, #31]
 800b712:	2b04      	cmp	r3, #4
 800b714:	d001      	beq.n	800b71a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b716:	2302      	movs	r3, #2
 800b718:	e17f      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d005      	beq.n	800b72c <HAL_SPI_TransmitReceive+0x5c>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <HAL_SPI_TransmitReceive+0x5c>
 800b726:	887b      	ldrh	r3, [r7, #2]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e174      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b736:	2b01      	cmp	r3, #1
 800b738:	d101      	bne.n	800b73e <HAL_SPI_TransmitReceive+0x6e>
 800b73a:	2302      	movs	r3, #2
 800b73c:	e16d      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2201      	movs	r2, #1
 800b742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d003      	beq.n	800b75a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2205      	movs	r2, #5
 800b756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	887a      	ldrh	r2, [r7, #2]
 800b76a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	887a      	ldrh	r2, [r7, #2]
 800b770:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	887a      	ldrh	r2, [r7, #2]
 800b782:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b79a:	2b40      	cmp	r3, #64	@ 0x40
 800b79c:	d007      	beq.n	800b7ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7b6:	d17e      	bne.n	800b8b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <HAL_SPI_TransmitReceive+0xf6>
 800b7c0:	8afb      	ldrh	r3, [r7, #22]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d16c      	bne.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ca:	881a      	ldrh	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d6:	1c9a      	adds	r2, r3, #2
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7ea:	e059      	b.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d11b      	bne.n	800b832 <HAL_SPI_TransmitReceive+0x162>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d016      	beq.n	800b832 <HAL_SPI_TransmitReceive+0x162>
 800b804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b806:	2b01      	cmp	r3, #1
 800b808:	d113      	bne.n	800b832 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b80e:	881a      	ldrh	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b81a:	1c9a      	adds	r2, r3, #2
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d119      	bne.n	800b874 <HAL_SPI_TransmitReceive+0x1a4>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b844:	b29b      	uxth	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d014      	beq.n	800b874 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68da      	ldr	r2, [r3, #12]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b854:	b292      	uxth	r2, r2
 800b856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85c:	1c9a      	adds	r2, r3, #2
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b870:	2301      	movs	r3, #1
 800b872:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b874:	f7f9 fd2c 	bl	80052d0 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b880:	429a      	cmp	r2, r3
 800b882:	d80d      	bhi.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d0>
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88a:	d009      	beq.n	800b8a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b89c:	2303      	movs	r3, #3
 800b89e:	e0bc      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1a0      	bne.n	800b7ec <HAL_SPI_TransmitReceive+0x11c>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d19b      	bne.n	800b7ec <HAL_SPI_TransmitReceive+0x11c>
 800b8b4:	e082      	b.n	800b9bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <HAL_SPI_TransmitReceive+0x1f4>
 800b8be:	8afb      	ldrh	r3, [r7, #22]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d171      	bne.n	800b9a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	7812      	ldrb	r2, [r2, #0]
 800b8d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8ea:	e05d      	b.n	800b9a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d11c      	bne.n	800b934 <HAL_SPI_TransmitReceive+0x264>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d017      	beq.n	800b934 <HAL_SPI_TransmitReceive+0x264>
 800b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b906:	2b01      	cmp	r3, #1
 800b908:	d114      	bne.n	800b934 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	330c      	adds	r3, #12
 800b914:	7812      	ldrb	r2, [r2, #0]
 800b916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b926:	b29b      	uxth	r3, r3
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b930:	2300      	movs	r3, #0
 800b932:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d119      	bne.n	800b976 <HAL_SPI_TransmitReceive+0x2a6>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b946:	b29b      	uxth	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d014      	beq.n	800b976 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b972:	2301      	movs	r3, #1
 800b974:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b976:	f7f9 fcab 	bl	80052d0 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b982:	429a      	cmp	r2, r3
 800b984:	d803      	bhi.n	800b98e <HAL_SPI_TransmitReceive+0x2be>
 800b986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98c:	d102      	bne.n	800b994 <HAL_SPI_TransmitReceive+0x2c4>
 800b98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b990:	2b00      	cmp	r3, #0
 800b992:	d109      	bne.n	800b9a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e038      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d19c      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x21c>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d197      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9bc:	6a3a      	ldr	r2, [r7, #32]
 800b9be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 f91d 	bl	800bc00 <SPI_EndRxTxTransaction>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d008      	beq.n	800b9de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e01d      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	613b      	str	r3, [r7, #16]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	613b      	str	r3, [r7, #16]
 800b9fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e000      	b.n	800ba1a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ba18:	2300      	movs	r3, #0
  }
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3728      	adds	r7, #40	@ 0x28
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	603b      	str	r3, [r7, #0]
 800ba30:	4613      	mov	r3, r2
 800ba32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ba34:	f7f9 fc4c 	bl	80052d0 <HAL_GetTick>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3c:	1a9b      	subs	r3, r3, r2
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4413      	add	r3, r2
 800ba42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba44:	f7f9 fc44 	bl	80052d0 <HAL_GetTick>
 800ba48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba4a:	4b39      	ldr	r3, [pc, #228]	@ (800bb30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	015b      	lsls	r3, r3, #5
 800ba50:	0d1b      	lsrs	r3, r3, #20
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	fb02 f303 	mul.w	r3, r2, r3
 800ba58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba5a:	e054      	b.n	800bb06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba62:	d050      	beq.n	800bb06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba64:	f7f9 fc34 	bl	80052d0 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d902      	bls.n	800ba7a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d13d      	bne.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ba88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ba92:	d111      	bne.n	800bab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba9c:	d004      	beq.n	800baa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baa6:	d107      	bne.n	800bab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bac0:	d10f      	bne.n	800bae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e017      	b.n	800bb26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	bf0c      	ite	eq
 800bb16:	2301      	moveq	r3, #1
 800bb18:	2300      	movne	r3, #0
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d19b      	bne.n	800ba5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3720      	adds	r7, #32
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20000004 	.word	0x20000004

0800bb34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb48:	d111      	bne.n	800bb6e <SPI_EndRxTransaction+0x3a>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb52:	d004      	beq.n	800bb5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb5c:	d107      	bne.n	800bb6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb76:	d12a      	bne.n	800bbce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb80:	d012      	beq.n	800bba8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2180      	movs	r1, #128	@ 0x80
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff ff49 	bl	800ba24 <SPI_WaitFlagStateUntilTimeout>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d02d      	beq.n	800bbf4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb9c:	f043 0220 	orr.w	r2, r3, #32
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e026      	b.n	800bbf6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff ff36 	bl	800ba24 <SPI_WaitFlagStateUntilTimeout>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d01a      	beq.n	800bbf4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc2:	f043 0220 	orr.w	r2, r3, #32
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e013      	b.n	800bbf6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff ff23 	bl	800ba24 <SPI_WaitFlagStateUntilTimeout>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe8:	f043 0220 	orr.w	r2, r3, #32
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e000      	b.n	800bbf6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2201      	movs	r2, #1
 800bc14:	2102      	movs	r1, #2
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff ff04 	bl	800ba24 <SPI_WaitFlagStateUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d007      	beq.n	800bc32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc26:	f043 0220 	orr.w	r2, r3, #32
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e032      	b.n	800bc98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bc32:	4b1b      	ldr	r3, [pc, #108]	@ (800bca0 <SPI_EndRxTxTransaction+0xa0>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a1b      	ldr	r2, [pc, #108]	@ (800bca4 <SPI_EndRxTxTransaction+0xa4>)
 800bc38:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3c:	0d5b      	lsrs	r3, r3, #21
 800bc3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bc42:	fb02 f303 	mul.w	r3, r2, r3
 800bc46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bc50:	d112      	bne.n	800bc78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff fee1 	bl	800ba24 <SPI_WaitFlagStateUntilTimeout>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d016      	beq.n	800bc96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc6c:	f043 0220 	orr.w	r2, r3, #32
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e00f      	b.n	800bc98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00a      	beq.n	800bc94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc8e:	2b80      	cmp	r3, #128	@ 0x80
 800bc90:	d0f2      	beq.n	800bc78 <SPI_EndRxTxTransaction+0x78>
 800bc92:	e000      	b.n	800bc96 <SPI_EndRxTxTransaction+0x96>
        break;
 800bc94:	bf00      	nop
  }

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20000004 	.word	0x20000004
 800bca4:	165e9f81 	.word	0x165e9f81

0800bca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e031      	b.n	800bd1e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d106      	bne.n	800bcd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f9 f8ec 	bl	8004eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4619      	mov	r1, r3
 800bce6:	4610      	mov	r0, r2
 800bce8:	f000 fa4e 	bl	800c188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d001      	beq.n	800bd40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e03a      	b.n	800bdb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68da      	ldr	r2, [r3, #12]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd60:	d00e      	beq.n	800bd80 <HAL_TIM_Base_Start_IT+0x58>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a16      	ldr	r2, [pc, #88]	@ (800bdc0 <HAL_TIM_Base_Start_IT+0x98>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d009      	beq.n	800bd80 <HAL_TIM_Base_Start_IT+0x58>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a14      	ldr	r2, [pc, #80]	@ (800bdc4 <HAL_TIM_Base_Start_IT+0x9c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d004      	beq.n	800bd80 <HAL_TIM_Base_Start_IT+0x58>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a13      	ldr	r2, [pc, #76]	@ (800bdc8 <HAL_TIM_Base_Start_IT+0xa0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d111      	bne.n	800bda4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f003 0307 	and.w	r3, r3, #7
 800bd8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b06      	cmp	r3, #6
 800bd90:	d010      	beq.n	800bdb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f042 0201 	orr.w	r2, r2, #1
 800bda0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda2:	e007      	b.n	800bdb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f042 0201 	orr.w	r2, r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bc80      	pop	{r7}
 800bdbe:	4770      	bx	lr
 800bdc0:	40000400 	.word	0x40000400
 800bdc4:	40000800 	.word	0x40000800
 800bdc8:	40010800 	.word	0x40010800

0800bdcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f022 0201 	bic.w	r2, r2, #1
 800bde2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6a1a      	ldr	r2, [r3, #32]
 800bdea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bdee:	4013      	ands	r3, r2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d107      	bne.n	800be04 <HAL_TIM_Base_Stop_IT+0x38>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0201 	bic.w	r2, r2, #1
 800be02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	bc80      	pop	{r7}
 800be16:	4770      	bx	lr

0800be18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f003 0302 	and.w	r3, r3, #2
 800be36:	2b00      	cmp	r3, #0
 800be38:	d020      	beq.n	800be7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f003 0302 	and.w	r3, r3, #2
 800be40:	2b00      	cmp	r3, #0
 800be42:	d01b      	beq.n	800be7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f06f 0202 	mvn.w	r2, #2
 800be4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f974 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800be68:	e005      	b.n	800be76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f967 	bl	800c13e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f976 	bl	800c162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	d020      	beq.n	800bec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01b      	beq.n	800bec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f06f 0204 	mvn.w	r2, #4
 800be98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2202      	movs	r2, #2
 800be9e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f94e 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800beb4:	e005      	b.n	800bec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f941 	bl	800c13e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f950 	bl	800c162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f003 0308 	and.w	r3, r3, #8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d020      	beq.n	800bf14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d01b      	beq.n	800bf14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f06f 0208 	mvn.w	r2, #8
 800bee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2204      	movs	r2, #4
 800beea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f928 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800bf00:	e005      	b.n	800bf0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f91b 	bl	800c13e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f92a 	bl	800c162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f003 0310 	and.w	r3, r3, #16
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d020      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f003 0310 	and.w	r3, r3, #16
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01b      	beq.n	800bf60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f06f 0210 	mvn.w	r2, #16
 800bf30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2208      	movs	r2, #8
 800bf36:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f902 	bl	800c150 <HAL_TIM_IC_CaptureCallback>
 800bf4c:	e005      	b.n	800bf5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f8f5 	bl	800c13e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 f904 	bl	800c162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00c      	beq.n	800bf84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d007      	beq.n	800bf84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f06f 0201 	mvn.w	r2, #1
 800bf7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f7 f91e 	bl	80031c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00c      	beq.n	800bfa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bfa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f8e6 	bl	800c174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d101      	bne.n	800bfcc <HAL_TIM_ConfigClockSource+0x1c>
 800bfc8:	2302      	movs	r3, #2
 800bfca:	e0b4      	b.n	800c136 <HAL_TIM_ConfigClockSource+0x186>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bfea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c004:	d03e      	beq.n	800c084 <HAL_TIM_ConfigClockSource+0xd4>
 800c006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c00a:	f200 8087 	bhi.w	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c00e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c012:	f000 8086 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x172>
 800c016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c01a:	d87f      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c01c:	2b70      	cmp	r3, #112	@ 0x70
 800c01e:	d01a      	beq.n	800c056 <HAL_TIM_ConfigClockSource+0xa6>
 800c020:	2b70      	cmp	r3, #112	@ 0x70
 800c022:	d87b      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c024:	2b60      	cmp	r3, #96	@ 0x60
 800c026:	d050      	beq.n	800c0ca <HAL_TIM_ConfigClockSource+0x11a>
 800c028:	2b60      	cmp	r3, #96	@ 0x60
 800c02a:	d877      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c02c:	2b50      	cmp	r3, #80	@ 0x50
 800c02e:	d03c      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0xfa>
 800c030:	2b50      	cmp	r3, #80	@ 0x50
 800c032:	d873      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c034:	2b40      	cmp	r3, #64	@ 0x40
 800c036:	d058      	beq.n	800c0ea <HAL_TIM_ConfigClockSource+0x13a>
 800c038:	2b40      	cmp	r3, #64	@ 0x40
 800c03a:	d86f      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c03c:	2b30      	cmp	r3, #48	@ 0x30
 800c03e:	d064      	beq.n	800c10a <HAL_TIM_ConfigClockSource+0x15a>
 800c040:	2b30      	cmp	r3, #48	@ 0x30
 800c042:	d86b      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c044:	2b20      	cmp	r3, #32
 800c046:	d060      	beq.n	800c10a <HAL_TIM_ConfigClockSource+0x15a>
 800c048:	2b20      	cmp	r3, #32
 800c04a:	d867      	bhi.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d05c      	beq.n	800c10a <HAL_TIM_ConfigClockSource+0x15a>
 800c050:	2b10      	cmp	r3, #16
 800c052:	d05a      	beq.n	800c10a <HAL_TIM_ConfigClockSource+0x15a>
 800c054:	e062      	b.n	800c11c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c066:	f000 f96e 	bl	800c346 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	609a      	str	r2, [r3, #8]
      break;
 800c082:	e04f      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c094:	f000 f957 	bl	800c346 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0a6:	609a      	str	r2, [r3, #8]
      break;
 800c0a8:	e03c      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f000 f8ce 	bl	800c258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2150      	movs	r1, #80	@ 0x50
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f925 	bl	800c312 <TIM_ITRx_SetConfig>
      break;
 800c0c8:	e02c      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	f000 f8ec 	bl	800c2b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2160      	movs	r1, #96	@ 0x60
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 f915 	bl	800c312 <TIM_ITRx_SetConfig>
      break;
 800c0e8:	e01c      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f000 f8ae 	bl	800c258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2140      	movs	r1, #64	@ 0x40
 800c102:	4618      	mov	r0, r3
 800c104:	f000 f905 	bl	800c312 <TIM_ITRx_SetConfig>
      break;
 800c108:	e00c      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4619      	mov	r1, r3
 800c114:	4610      	mov	r0, r2
 800c116:	f000 f8fc 	bl	800c312 <TIM_ITRx_SetConfig>
      break;
 800c11a:	e003      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	73fb      	strb	r3, [r7, #15]
      break;
 800c120:	e000      	b.n	800c124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bc80      	pop	{r7}
 800c14e:	4770      	bx	lr

0800c150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bc80      	pop	{r7}
 800c160:	4770      	bx	lr

0800c162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	bc80      	pop	{r7}
 800c184:	4770      	bx	lr
	...

0800c188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c19e:	d007      	beq.n	800c1b0 <TIM_Base_SetConfig+0x28>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a28      	ldr	r2, [pc, #160]	@ (800c244 <TIM_Base_SetConfig+0xbc>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_Base_SetConfig+0x28>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a27      	ldr	r2, [pc, #156]	@ (800c248 <TIM_Base_SetConfig+0xc0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d108      	bne.n	800c1c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1c8:	d013      	beq.n	800c1f2 <TIM_Base_SetConfig+0x6a>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c244 <TIM_Base_SetConfig+0xbc>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d00f      	beq.n	800c1f2 <TIM_Base_SetConfig+0x6a>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c248 <TIM_Base_SetConfig+0xc0>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d00b      	beq.n	800c1f2 <TIM_Base_SetConfig+0x6a>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c24c <TIM_Base_SetConfig+0xc4>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d007      	beq.n	800c1f2 <TIM_Base_SetConfig+0x6a>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a1a      	ldr	r2, [pc, #104]	@ (800c250 <TIM_Base_SetConfig+0xc8>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d003      	beq.n	800c1f2 <TIM_Base_SetConfig+0x6a>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a19      	ldr	r2, [pc, #100]	@ (800c254 <TIM_Base_SetConfig+0xcc>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d108      	bne.n	800c204 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	4313      	orrs	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f043 0204 	orr.w	r2, r3, #4
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	601a      	str	r2, [r3, #0]
}
 800c23a:	bf00      	nop
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	bc80      	pop	{r7}
 800c242:	4770      	bx	lr
 800c244:	40000400 	.word	0x40000400
 800c248:	40000800 	.word	0x40000800
 800c24c:	40010800 	.word	0x40010800
 800c250:	40010c00 	.word	0x40010c00
 800c254:	40011000 	.word	0x40011000

0800c258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	f023 0201 	bic.w	r2, r3, #1
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f023 030a 	bic.w	r3, r3, #10
 800c294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	621a      	str	r2, [r3, #32]
}
 800c2aa:	bf00      	nop
 800c2ac:	371c      	adds	r7, #28
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bc80      	pop	{r7}
 800c2b2:	4770      	bx	lr

0800c2b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	f023 0210 	bic.w	r2, r3, #16
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	031b      	lsls	r3, r3, #12
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	011b      	lsls	r3, r3, #4
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	621a      	str	r2, [r3, #32]
}
 800c308:	bf00      	nop
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bc80      	pop	{r7}
 800c310:	4770      	bx	lr

0800c312 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	4313      	orrs	r3, r2
 800c330:	f043 0307 	orr.w	r3, r3, #7
 800c334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	609a      	str	r2, [r3, #8]
}
 800c33c:	bf00      	nop
 800c33e:	3714      	adds	r7, #20
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr

0800c346 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c346:	b480      	push	{r7}
 800c348:	b087      	sub	sp, #28
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	60b9      	str	r1, [r7, #8]
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c360:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	021a      	lsls	r2, r3, #8
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	431a      	orrs	r2, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	4313      	orrs	r3, r2
 800c372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	609a      	str	r2, [r3, #8]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	bc80      	pop	{r7}
 800c382:	4770      	bx	lr

0800c384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c394:	2b01      	cmp	r3, #1
 800c396:	d101      	bne.n	800c39c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c398:	2302      	movs	r3, #2
 800c39a:	e046      	b.n	800c42a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3de:	d00e      	beq.n	800c3fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a13      	ldr	r2, [pc, #76]	@ (800c434 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d009      	beq.n	800c3fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a12      	ldr	r2, [pc, #72]	@ (800c438 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d004      	beq.n	800c3fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a10      	ldr	r2, [pc, #64]	@ (800c43c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d10c      	bne.n	800c418 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	bc80      	pop	{r7}
 800c432:	4770      	bx	lr
 800c434:	40000400 	.word	0x40000400
 800c438:	40000800 	.word	0x40000800
 800c43c:	40010800 	.word	0x40010800

0800c440 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800c440:	b5b0      	push	{r4, r5, r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800c44a:	2300      	movs	r3, #0
 800c44c:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800c44e:	2300      	movs	r3, #0
 800c450:	777b      	strb	r3, [r7, #29]
 800c452:	e01b      	b.n	800c48c <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800c454:	2300      	movs	r3, #0
 800c456:	77bb      	strb	r3, [r7, #30]
 800c458:	e012      	b.n	800c480 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800c45a:	7fba      	ldrb	r2, [r7, #30]
 800c45c:	7f7b      	ldrb	r3, [r7, #29]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	461a      	mov	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	1899      	adds	r1, r3, r2
 800c468:	7fba      	ldrb	r2, [r7, #30]
 800c46a:	7f7b      	ldrb	r3, [r7, #29]
 800c46c:	7808      	ldrb	r0, [r1, #0]
 800c46e:	4961      	ldr	r1, [pc, #388]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c470:	0092      	lsls	r2, r2, #2
 800c472:	440a      	add	r2, r1
 800c474:	4413      	add	r3, r2
 800c476:	4602      	mov	r2, r0
 800c478:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c47a:	7fbb      	ldrb	r3, [r7, #30]
 800c47c:	3301      	adds	r3, #1
 800c47e:	77bb      	strb	r3, [r7, #30]
 800c480:	7fbb      	ldrb	r3, [r7, #30]
 800c482:	2b03      	cmp	r3, #3
 800c484:	d9e9      	bls.n	800c45a <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800c486:	7f7b      	ldrb	r3, [r7, #29]
 800c488:	3301      	adds	r3, #1
 800c48a:	777b      	strb	r3, [r7, #29]
 800c48c:	7f7b      	ldrb	r3, [r7, #29]
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d9e0      	bls.n	800c454 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800c492:	2300      	movs	r3, #0
 800c494:	77fb      	strb	r3, [r7, #31]
 800c496:	e00b      	b.n	800c4b0 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800c498:	7ffb      	ldrb	r3, [r7, #31]
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	441a      	add	r2, r3
 800c49e:	7ffb      	ldrb	r3, [r7, #31]
 800c4a0:	7812      	ldrb	r2, [r2, #0]
 800c4a2:	3320      	adds	r3, #32
 800c4a4:	443b      	add	r3, r7
 800c4a6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800c4aa:	7ffb      	ldrb	r3, [r7, #31]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	77fb      	strb	r3, [r7, #31]
 800c4b0:	7ffb      	ldrb	r3, [r7, #31]
 800c4b2:	2b0f      	cmp	r3, #15
 800c4b4:	d9f0      	bls.n	800c498 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800c4b6:	f107 030c 	add.w	r3, r7, #12
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 f89c 	bl	800c5f8 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	773b      	strb	r3, [r7, #28]
 800c4c4:	e038      	b.n	800c538 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	777b      	strb	r3, [r7, #29]
 800c4ca:	e01f      	b.n	800c50c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	77bb      	strb	r3, [r7, #30]
 800c4d0:	e016      	b.n	800c500 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c4d2:	7fba      	ldrb	r2, [r7, #30]
 800c4d4:	7f7b      	ldrb	r3, [r7, #29]
 800c4d6:	4947      	ldr	r1, [pc, #284]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c4d8:	0092      	lsls	r2, r2, #2
 800c4da:	440a      	add	r2, r1
 800c4dc:	4413      	add	r3, r2
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	7fbd      	ldrb	r5, [r7, #30]
 800c4e2:	7f7c      	ldrb	r4, [r7, #29]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 f8bf 	bl	800c668 <AES_Sub_Byte>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4a41      	ldr	r2, [pc, #260]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c4f0:	00ab      	lsls	r3, r5, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	4423      	add	r3, r4
 800c4f6:	460a      	mov	r2, r1
 800c4f8:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800c4fa:	7fbb      	ldrb	r3, [r7, #30]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	77bb      	strb	r3, [r7, #30]
 800c500:	7fbb      	ldrb	r3, [r7, #30]
 800c502:	2b03      	cmp	r3, #3
 800c504:	d9e5      	bls.n	800c4d2 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800c506:	7f7b      	ldrb	r3, [r7, #29]
 800c508:	3301      	adds	r3, #1
 800c50a:	777b      	strb	r3, [r7, #29]
 800c50c:	7f7b      	ldrb	r3, [r7, #29]
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d9dc      	bls.n	800c4cc <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800c512:	f000 f8c5 	bl	800c6a0 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800c516:	f000 f905 	bl	800c724 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800c51a:	f107 020c 	add.w	r2, r7, #12
 800c51e:	7f3b      	ldrb	r3, [r7, #28]
 800c520:	4611      	mov	r1, r2
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f994 	bl	800c850 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800c528:	f107 030c 	add.w	r3, r7, #12
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 f863 	bl	800c5f8 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800c532:	7f3b      	ldrb	r3, [r7, #28]
 800c534:	3301      	adds	r3, #1
 800c536:	773b      	strb	r3, [r7, #28]
 800c538:	7f3b      	ldrb	r3, [r7, #28]
 800c53a:	2b09      	cmp	r3, #9
 800c53c:	d9c3      	bls.n	800c4c6 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800c53e:	2300      	movs	r3, #0
 800c540:	777b      	strb	r3, [r7, #29]
 800c542:	e01f      	b.n	800c584 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800c544:	2300      	movs	r3, #0
 800c546:	77bb      	strb	r3, [r7, #30]
 800c548:	e016      	b.n	800c578 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c54a:	7fba      	ldrb	r2, [r7, #30]
 800c54c:	7f7b      	ldrb	r3, [r7, #29]
 800c54e:	4929      	ldr	r1, [pc, #164]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c550:	0092      	lsls	r2, r2, #2
 800c552:	440a      	add	r2, r1
 800c554:	4413      	add	r3, r2
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	7fbd      	ldrb	r5, [r7, #30]
 800c55a:	7f7c      	ldrb	r4, [r7, #29]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f883 	bl	800c668 <AES_Sub_Byte>
 800c562:	4603      	mov	r3, r0
 800c564:	4619      	mov	r1, r3
 800c566:	4a23      	ldr	r2, [pc, #140]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c568:	00ab      	lsls	r3, r5, #2
 800c56a:	4413      	add	r3, r2
 800c56c:	4423      	add	r3, r4
 800c56e:	460a      	mov	r2, r1
 800c570:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c572:	7fbb      	ldrb	r3, [r7, #30]
 800c574:	3301      	adds	r3, #1
 800c576:	77bb      	strb	r3, [r7, #30]
 800c578:	7fbb      	ldrb	r3, [r7, #30]
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d9e5      	bls.n	800c54a <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800c57e:	7f7b      	ldrb	r3, [r7, #29]
 800c580:	3301      	adds	r3, #1
 800c582:	777b      	strb	r3, [r7, #29]
 800c584:	7f7b      	ldrb	r3, [r7, #29]
 800c586:	2b03      	cmp	r3, #3
 800c588:	d9dc      	bls.n	800c544 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800c58a:	f000 f889 	bl	800c6a0 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800c58e:	f107 020c 	add.w	r2, r7, #12
 800c592:	7f3b      	ldrb	r3, [r7, #28]
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f000 f95a 	bl	800c850 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800c59c:	f107 030c 	add.w	r3, r7, #12
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 f829 	bl	800c5f8 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	777b      	strb	r3, [r7, #29]
 800c5aa:	e01a      	b.n	800c5e2 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	77bb      	strb	r3, [r7, #30]
 800c5b0:	e011      	b.n	800c5d6 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800c5b2:	7fb9      	ldrb	r1, [r7, #30]
 800c5b4:	7f7a      	ldrb	r2, [r7, #29]
 800c5b6:	7fb8      	ldrb	r0, [r7, #30]
 800c5b8:	7f7b      	ldrb	r3, [r7, #29]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4403      	add	r3, r0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4403      	add	r3, r0
 800c5c4:	480b      	ldr	r0, [pc, #44]	@ (800c5f4 <AES_Encrypt+0x1b4>)
 800c5c6:	0089      	lsls	r1, r1, #2
 800c5c8:	4401      	add	r1, r0
 800c5ca:	440a      	add	r2, r1
 800c5cc:	7812      	ldrb	r2, [r2, #0]
 800c5ce:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c5d0:	7fbb      	ldrb	r3, [r7, #30]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	77bb      	strb	r3, [r7, #30]
 800c5d6:	7fbb      	ldrb	r3, [r7, #30]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d9ea      	bls.n	800c5b2 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800c5dc:	7f7b      	ldrb	r3, [r7, #29]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	777b      	strb	r3, [r7, #29]
 800c5e2:	7f7b      	ldrb	r3, [r7, #29]
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d9e1      	bls.n	800c5ac <AES_Encrypt+0x16c>
		}
	}

}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000568 	.word	0x20000568

0800c5f8 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800c600:	2300      	movs	r3, #0
 800c602:	73bb      	strb	r3, [r7, #14]
 800c604:	e024      	b.n	800c650 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800c606:	2300      	movs	r3, #0
 800c608:	73fb      	strb	r3, [r7, #15]
 800c60a:	e01b      	b.n	800c644 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800c60c:	7bfa      	ldrb	r2, [r7, #15]
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	4914      	ldr	r1, [pc, #80]	@ (800c664 <AES_Add_Round_Key+0x6c>)
 800c612:	0092      	lsls	r2, r2, #2
 800c614:	440a      	add	r2, r1
 800c616:	4413      	add	r3, r2
 800c618:	7818      	ldrb	r0, [r3, #0]
 800c61a:	7bfa      	ldrb	r2, [r7, #15]
 800c61c:	7bbb      	ldrb	r3, [r7, #14]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	7819      	ldrb	r1, [r3, #0]
 800c62a:	7bfa      	ldrb	r2, [r7, #15]
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	4041      	eors	r1, r0
 800c630:	b2c8      	uxtb	r0, r1
 800c632:	490c      	ldr	r1, [pc, #48]	@ (800c664 <AES_Add_Round_Key+0x6c>)
 800c634:	0092      	lsls	r2, r2, #2
 800c636:	440a      	add	r2, r1
 800c638:	4413      	add	r3, r2
 800c63a:	4602      	mov	r2, r0
 800c63c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	3301      	adds	r3, #1
 800c642:	73fb      	strb	r3, [r7, #15]
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b03      	cmp	r3, #3
 800c648:	d9e0      	bls.n	800c60c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	3301      	adds	r3, #1
 800c64e:	73bb      	strb	r3, [r7, #14]
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b03      	cmp	r3, #3
 800c654:	d9d7      	bls.n	800c606 <AES_Add_Round_Key+0xe>
		}
	}
}
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	20000568 	.word	0x20000568

0800c668 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	091b      	lsrs	r3, r3, #4
 800c676:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800c680:	7bfa      	ldrb	r2, [r7, #15]
 800c682:	7bbb      	ldrb	r3, [r7, #14]
 800c684:	4905      	ldr	r1, [pc, #20]	@ (800c69c <AES_Sub_Byte+0x34>)
 800c686:	0112      	lsls	r2, r2, #4
 800c688:	440a      	add	r2, r1
 800c68a:	4413      	add	r3, r2
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800c690:	7b7b      	ldrb	r3, [r7, #13]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	bc80      	pop	{r7}
 800c69a:	4770      	bx	lr
 800c69c:	20000010 	.word	0x20000010

0800c6a0 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800c6a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6a8:	791b      	ldrb	r3, [r3, #4]
 800c6aa:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800c6ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6ae:	795a      	ldrb	r2, [r3, #5]
 800c6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6b2:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800c6b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6b6:	799a      	ldrb	r2, [r3, #6]
 800c6b8:	4b19      	ldr	r3, [pc, #100]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6ba:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800c6bc:	4b18      	ldr	r3, [pc, #96]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6be:	79da      	ldrb	r2, [r3, #7]
 800c6c0:	4b17      	ldr	r3, [pc, #92]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6c2:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800c6c4:	4a16      	ldr	r2, [pc, #88]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800c6ca:	4b15      	ldr	r3, [pc, #84]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6cc:	7a1b      	ldrb	r3, [r3, #8]
 800c6ce:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800c6d0:	4b13      	ldr	r3, [pc, #76]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6d2:	7a9a      	ldrb	r2, [r3, #10]
 800c6d4:	4b12      	ldr	r3, [pc, #72]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6d6:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800c6d8:	4a11      	ldr	r2, [pc, #68]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800c6de:	4b10      	ldr	r3, [pc, #64]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6e0:	7a5b      	ldrb	r3, [r3, #9]
 800c6e2:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6e6:	7ada      	ldrb	r2, [r3, #11]
 800c6e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6ea:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800c6ec:	4a0c      	ldr	r2, [pc, #48]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6ee:	79fb      	ldrb	r3, [r7, #7]
 800c6f0:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800c6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6f4:	7bdb      	ldrb	r3, [r3, #15]
 800c6f6:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800c6f8:	4b09      	ldr	r3, [pc, #36]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6fa:	7b9a      	ldrb	r2, [r3, #14]
 800c6fc:	4b08      	ldr	r3, [pc, #32]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c6fe:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800c700:	4b07      	ldr	r3, [pc, #28]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c702:	7b5a      	ldrb	r2, [r3, #13]
 800c704:	4b06      	ldr	r3, [pc, #24]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c706:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800c708:	4b05      	ldr	r3, [pc, #20]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c70a:	7b1a      	ldrb	r2, [r3, #12]
 800c70c:	4b04      	ldr	r3, [pc, #16]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c70e:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800c710:	4a03      	ldr	r2, [pc, #12]	@ (800c720 <AES_Shift_Rows+0x80>)
 800c712:	79fb      	ldrb	r3, [r7, #7]
 800c714:	7313      	strb	r3, [r2, #12]
}
 800c716:	bf00      	nop
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bc80      	pop	{r7}
 800c71e:	4770      	bx	lr
 800c720:	20000568 	.word	0x20000568

0800c724 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800c72a:	2300      	movs	r3, #0
 800c72c:	73bb      	strb	r3, [r7, #14]
 800c72e:	e082      	b.n	800c836 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800c730:	2300      	movs	r3, #0
 800c732:	73fb      	strb	r3, [r7, #15]
 800c734:	e033      	b.n	800c79e <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800c736:	7bf9      	ldrb	r1, [r7, #15]
 800c738:	7bba      	ldrb	r2, [r7, #14]
 800c73a:	7bfb      	ldrb	r3, [r7, #15]
 800c73c:	4843      	ldr	r0, [pc, #268]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c73e:	0089      	lsls	r1, r1, #2
 800c740:	4401      	add	r1, r0
 800c742:	440a      	add	r2, r1
 800c744:	7812      	ldrb	r2, [r2, #0]
 800c746:	3310      	adds	r3, #16
 800c748:	443b      	add	r3, r7
 800c74a:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800c74e:	7bfa      	ldrb	r2, [r7, #15]
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	493e      	ldr	r1, [pc, #248]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c754:	0092      	lsls	r2, r2, #2
 800c756:	440a      	add	r2, r1
 800c758:	4413      	add	r3, r2
 800c75a:	781a      	ldrb	r2, [r3, #0]
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	0052      	lsls	r2, r2, #1
 800c760:	b2d2      	uxtb	r2, r2
 800c762:	3310      	adds	r3, #16
 800c764:	443b      	add	r3, r7
 800c766:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800c76a:	7bfa      	ldrb	r2, [r7, #15]
 800c76c:	7bbb      	ldrb	r3, [r7, #14]
 800c76e:	4937      	ldr	r1, [pc, #220]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c770:	0092      	lsls	r2, r2, #2
 800c772:	440a      	add	r2, r1
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	b25b      	sxtb	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	da0c      	bge.n	800c798 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	3310      	adds	r3, #16
 800c782:	443b      	add	r3, r7
 800c784:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	f082 021b 	eor.w	r2, r2, #27
 800c78e:	b2d2      	uxtb	r2, r2
 800c790:	3310      	adds	r3, #16
 800c792:	443b      	add	r3, r7
 800c794:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	3301      	adds	r3, #1
 800c79c:	73fb      	strb	r3, [r7, #15]
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d9c8      	bls.n	800c736 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800c7a4:	793a      	ldrb	r2, [r7, #4]
 800c7a6:	7a7b      	ldrb	r3, [r7, #9]
 800c7a8:	4053      	eors	r3, r2
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	797b      	ldrb	r3, [r7, #5]
 800c7ae:	4053      	eors	r3, r2
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	7abb      	ldrb	r3, [r7, #10]
 800c7b4:	4053      	eors	r3, r2
 800c7b6:	b2d9      	uxtb	r1, r3
 800c7b8:	7afa      	ldrb	r2, [r7, #11]
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	404a      	eors	r2, r1
 800c7be:	b2d1      	uxtb	r1, r2
 800c7c0:	4a22      	ldr	r2, [pc, #136]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c7c2:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800c7c4:	7a3a      	ldrb	r2, [r7, #8]
 800c7c6:	797b      	ldrb	r3, [r7, #5]
 800c7c8:	4053      	eors	r3, r2
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	7abb      	ldrb	r3, [r7, #10]
 800c7ce:	4053      	eors	r3, r2
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	79bb      	ldrb	r3, [r7, #6]
 800c7d4:	4053      	eors	r3, r2
 800c7d6:	b2d9      	uxtb	r1, r3
 800c7d8:	7afa      	ldrb	r2, [r7, #11]
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	404a      	eors	r2, r1
 800c7de:	b2d1      	uxtb	r1, r2
 800c7e0:	4a1a      	ldr	r2, [pc, #104]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c7e2:	4413      	add	r3, r2
 800c7e4:	460a      	mov	r2, r1
 800c7e6:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800c7e8:	7a3a      	ldrb	r2, [r7, #8]
 800c7ea:	7a7b      	ldrb	r3, [r7, #9]
 800c7ec:	4053      	eors	r3, r2
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	79bb      	ldrb	r3, [r7, #6]
 800c7f2:	4053      	eors	r3, r2
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
 800c7f8:	4053      	eors	r3, r2
 800c7fa:	b2d9      	uxtb	r1, r3
 800c7fc:	79fa      	ldrb	r2, [r7, #7]
 800c7fe:	7bbb      	ldrb	r3, [r7, #14]
 800c800:	404a      	eors	r2, r1
 800c802:	b2d1      	uxtb	r1, r2
 800c804:	4a11      	ldr	r2, [pc, #68]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c806:	4413      	add	r3, r2
 800c808:	460a      	mov	r2, r1
 800c80a:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800c80c:	7a3a      	ldrb	r2, [r7, #8]
 800c80e:	793b      	ldrb	r3, [r7, #4]
 800c810:	4053      	eors	r3, r2
 800c812:	b2da      	uxtb	r2, r3
 800c814:	7a7b      	ldrb	r3, [r7, #9]
 800c816:	4053      	eors	r3, r2
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	7abb      	ldrb	r3, [r7, #10]
 800c81c:	4053      	eors	r3, r2
 800c81e:	b2d9      	uxtb	r1, r3
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	404a      	eors	r2, r1
 800c826:	b2d1      	uxtb	r1, r2
 800c828:	4a08      	ldr	r2, [pc, #32]	@ (800c84c <AES_Mix_Collums+0x128>)
 800c82a:	4413      	add	r3, r2
 800c82c:	460a      	mov	r2, r1
 800c82e:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800c830:	7bbb      	ldrb	r3, [r7, #14]
 800c832:	3301      	adds	r3, #1
 800c834:	73bb      	strb	r3, [r7, #14]
 800c836:	7bbb      	ldrb	r3, [r7, #14]
 800c838:	2b03      	cmp	r3, #3
 800c83a:	f67f af79 	bls.w	800c730 <AES_Mix_Collums+0xc>
	}
}
 800c83e:	bf00      	nop
 800c840:	bf00      	nop
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	bc80      	pop	{r7}
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	20000568 	.word	0x20000568

0800c850 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800c850:	b590      	push	{r4, r7, lr}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800c85c:	2300      	movs	r3, #0
 800c85e:	75fb      	strb	r3, [r7, #23]
 800c860:	e00c      	b.n	800c87c <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800c862:	7dfb      	ldrb	r3, [r7, #23]
 800c864:	330c      	adds	r3, #12
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	441a      	add	r2, r3
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	7812      	ldrb	r2, [r2, #0]
 800c86e:	3318      	adds	r3, #24
 800c870:	443b      	add	r3, r7
 800c872:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	3301      	adds	r3, #1
 800c87a:	75fb      	strb	r3, [r7, #23]
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d9ef      	bls.n	800c862 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800c882:	7b3b      	ldrb	r3, [r7, #12]
 800c884:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800c886:	7b7b      	ldrb	r3, [r7, #13]
 800c888:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
 800c88c:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800c892:	7d3b      	ldrb	r3, [r7, #20]
 800c894:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
 800c89a:	e012      	b.n	800c8c2 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	3318      	adds	r3, #24
 800c8a0:	443b      	add	r3, r7
 800c8a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c8a6:	7dfc      	ldrb	r4, [r7, #23]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7ff fedd 	bl	800c668 <AES_Sub_Byte>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	f104 0318 	add.w	r3, r4, #24
 800c8b6:	443b      	add	r3, r7
 800c8b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c8bc:	7dfb      	ldrb	r3, [r7, #23]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	75fb      	strb	r3, [r7, #23]
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d9e9      	bls.n	800c89c <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800c8cc:	e010      	b.n	800c8f0 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800c8ce:	7d7b      	ldrb	r3, [r7, #21]
 800c8d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c8d4:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800c8d6:	7d7b      	ldrb	r3, [r7, #21]
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800c8dc:	7cfb      	ldrb	r3, [r7, #19]
 800c8de:	2b80      	cmp	r3, #128	@ 0x80
 800c8e0:	d103      	bne.n	800c8ea <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800c8e2:	7d7b      	ldrb	r3, [r7, #21]
 800c8e4:	f083 031b 	eor.w	r3, r3, #27
 800c8e8:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d1eb      	bne.n	800c8ce <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800c8f6:	7b3a      	ldrb	r2, [r7, #12]
 800c8f8:	7d7b      	ldrb	r3, [r7, #21]
 800c8fa:	4053      	eors	r3, r2
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800c900:	2300      	movs	r3, #0
 800c902:	75fb      	strb	r3, [r7, #23]
 800c904:	e02f      	b.n	800c966 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800c906:	2300      	movs	r3, #0
 800c908:	75bb      	strb	r3, [r7, #22]
 800c90a:	e026      	b.n	800c95a <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800c90c:	7dba      	ldrb	r2, [r7, #22]
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	461a      	mov	r2, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	4413      	add	r3, r2
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	7dbb      	ldrb	r3, [r7, #22]
 800c91e:	3318      	adds	r3, #24
 800c920:	443b      	add	r3, r7
 800c922:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c926:	7db8      	ldrb	r0, [r7, #22]
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4403      	add	r3, r0
 800c92e:	4618      	mov	r0, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	4403      	add	r3, r0
 800c934:	404a      	eors	r2, r1
 800c936:	b2d2      	uxtb	r2, r2
 800c938:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800c93a:	7dba      	ldrb	r2, [r7, #22]
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	461a      	mov	r2, r3
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	441a      	add	r2, r3
 800c948:	7dbb      	ldrb	r3, [r7, #22]
 800c94a:	7812      	ldrb	r2, [r2, #0]
 800c94c:	3318      	adds	r3, #24
 800c94e:	443b      	add	r3, r7
 800c950:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800c954:	7dbb      	ldrb	r3, [r7, #22]
 800c956:	3301      	adds	r3, #1
 800c958:	75bb      	strb	r3, [r7, #22]
 800c95a:	7dbb      	ldrb	r3, [r7, #22]
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d9d5      	bls.n	800c90c <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	3301      	adds	r3, #1
 800c964:	75fb      	strb	r3, [r7, #23]
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d9cc      	bls.n	800c906 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800c96c:	bf00      	nop
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	bd90      	pop	{r4, r7, pc}

0800c976 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b08a      	sub	sp, #40	@ 0x28
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	60f8      	str	r0, [r7, #12]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	461a      	mov	r2, r3
 800c982:	460b      	mov	r3, r1
 800c984:	72fb      	strb	r3, [r7, #11]
 800c986:	4613      	mov	r3, r2
 800c988:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800c98a:	2300      	movs	r3, #0
 800c98c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800c990:	2300      	movs	r3, #0
 800c992:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800c996:	2300      	movs	r3, #0
 800c998:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	091b      	lsrs	r3, r3, #4
 800c9a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	f003 030f 	and.w	r3, r3, #15
 800c9aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if(Incomplete_Block_Size != 0)
 800c9ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d004      	beq.n	800c9c0 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800c9b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9c6:	e07e      	b.n	800cac6 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800c9dc:	7abb      	ldrb	r3, [r7, #10]
 800c9de:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800c9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e2:	78db      	ldrb	r3, [r3, #3]
 800c9e4:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e8:	789b      	ldrb	r3, [r3, #2]
 800c9ea:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800c9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ee:	785b      	ldrb	r3, [r3, #1]
 800c9f0:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	0a1b      	lsrs	r3, r3, #8
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800ca06:	2300      	movs	r3, #0
 800ca08:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

		Block_A[14] = 0x00;
 800ca12:	2300      	movs	r3, #0
 800ca14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		Block_A[15] = i;
 800ca18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800ca20:	f107 0314 	add.w	r3, r7, #20
 800ca24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fd0a 	bl	800c440 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800ca2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ca30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d01c      	beq.n	800ca72 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca3e:	e013      	b.n	800ca68 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca48:	3328      	adds	r3, #40	@ 0x28
 800ca4a:	443b      	add	r3, r7
 800ca4c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800ca50:	4053      	eors	r3, r2
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	701a      	strb	r2, [r3, #0]
				Data++;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800ca5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca62:	3301      	adds	r3, #1
 800ca64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca6c:	2b0f      	cmp	r3, #15
 800ca6e:	d9e7      	bls.n	800ca40 <Encrypt_Payload+0xca>
 800ca70:	e024      	b.n	800cabc <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800ca72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800ca7a:	2310      	movs	r3, #16
 800ca7c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800ca80:	2300      	movs	r3, #0
 800ca82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca86:	e013      	b.n	800cab0 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca90:	3328      	adds	r3, #40	@ 0x28
 800ca92:	443b      	add	r3, r7
 800ca94:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800ca98:	4053      	eors	r3, r2
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	701a      	strb	r2, [r3, #0]
				Data++;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3301      	adds	r3, #1
 800caa4:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800caa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caaa:	3301      	adds	r3, #1
 800caac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cab0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cab4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cab8:	429a      	cmp	r2, r3
 800caba:	d3e5      	bcc.n	800ca88 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac0:	3301      	adds	r3, #1
 800cac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cac6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800caca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cace:	429a      	cmp	r2, r3
 800cad0:	f67f af7a 	bls.w	800c9c8 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800cad4:	bf00      	nop
 800cad6:	bf00      	nop
 800cad8:	3728      	adds	r7, #40	@ 0x28
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b09a      	sub	sp, #104	@ 0x68
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	603b      	str	r3, [r7, #0]
 800caea:	4613      	mov	r3, r2
 800caec:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800caee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	605a      	str	r2, [r3, #4]
 800caf8:	609a      	str	r2, [r3, #8]
 800cafa:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800cafc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	605a      	str	r2, [r3, #4]
 800cb06:	609a      	str	r2, [r3, #8]
 800cb08:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800cb0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	605a      	str	r2, [r3, #4]
 800cb14:	609a      	str	r2, [r3, #8]
 800cb16:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800cb18:	f107 0314 	add.w	r3, r7, #20
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	605a      	str	r2, [r3, #4]
 800cb22:	609a      	str	r2, [r3, #8]
 800cb24:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800cb26:	2300      	movs	r3, #0
 800cb28:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	unsigned char Block_Counter = 0x01;
 800cb32:	2301      	movs	r3, #1
 800cb34:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800cb38:	2349      	movs	r3, #73	@ 0x49
 800cb3a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	Block_B[1] = 0x00;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	Block_B[2] = 0x00;
 800cb44:	2300      	movs	r3, #0
 800cb46:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	Block_B[3] = 0x00;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Block_B[4] = 0x00;
 800cb50:	2300      	movs	r3, #0
 800cb52:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

	Block_B[5] = Direction;
 800cb56:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800cb5a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	Block_B[6] = DevAddr[3];
 800cb5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb60:	78db      	ldrb	r3, [r3, #3]
 800cb62:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	Block_B[7] = DevAddr[2];
 800cb66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb68:	789b      	ldrb	r3, [r3, #2]
 800cb6a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	Block_B[8] = DevAddr[1];
 800cb6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb70:	785b      	ldrb	r3, [r3, #1]
 800cb72:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Block_B[9] = DevAddr[0];
 800cb76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	0a1b      	lsrs	r3, r3, #8
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800cb90:	2300      	movs	r3, #0
 800cb92:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Block_B[13] = 0x00;
 800cb96:	2300      	movs	r3, #0
 800cb98:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

	Block_B[14] = 0x00;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	Block_B[15] = Data_Length;
 800cba2:	79fb      	ldrb	r3, [r7, #7]
 800cba4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	091b      	lsrs	r3, r3, #4
 800cbac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	f003 030f 	and.w	r3, r3, #15
 800cbb6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

	if(Incomplete_Block_Size != 0)
 800cbba:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800cbc2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800cbcc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800cbd0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cbd4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f8fe 	bl	800cdd8 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800cbdc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cbe0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7ff fc2c 	bl	800c440 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cbee:	e010      	b.n	800cc12 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800cbf0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cbf4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cbf8:	3268      	adds	r2, #104	@ 0x68
 800cbfa:	443a      	add	r2, r7
 800cbfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cc00:	3368      	adds	r3, #104	@ 0x68
 800cc02:	443b      	add	r3, r7
 800cc04:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800cc08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc16:	2b0f      	cmp	r3, #15
 800cc18:	d9ea      	bls.n	800cbf0 <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800cc1a:	e043      	b.n	800cca4 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc22:	e00f      	b.n	800cc44 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800cc24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	7812      	ldrb	r2, [r2, #0]
 800cc2c:	3368      	adds	r3, #104	@ 0x68
 800cc2e:	443b      	add	r3, r7
 800cc30:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3301      	adds	r3, #1
 800cc38:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800cc3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc3e:	3301      	adds	r3, #1
 800cc40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc48:	2b0f      	cmp	r3, #15
 800cc4a:	d9eb      	bls.n	800cc24 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800cc4c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cc50:	f107 0314 	add.w	r3, r7, #20
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f946 	bl	800cee8 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800cc5c:	f107 0314 	add.w	r3, r7, #20
 800cc60:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fbec 	bl	800c440 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc6e:	e010      	b.n	800cc92 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800cc70:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cc74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc78:	3268      	adds	r2, #104	@ 0x68
 800cc7a:	443a      	add	r2, r7
 800cc7c:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800cc80:	3368      	adds	r3, #104	@ 0x68
 800cc82:	443b      	add	r3, r7
 800cc84:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800cc88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc96:	2b0f      	cmp	r3, #15
 800cc98:	d9ea      	bls.n	800cc70 <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800cc9a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800cc9e:	3301      	adds	r3, #1
 800cca0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	while(Block_Counter < Number_of_Blocks)
 800cca4:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800cca8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d3b5      	bcc.n	800cc1c <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800ccb0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d12e      	bne.n	800cd16 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ccbe:	e00f      	b.n	800cce0 <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800ccc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	7812      	ldrb	r2, [r2, #0]
 800ccc8:	3368      	adds	r3, #104	@ 0x68
 800ccca:	443b      	add	r3, r7
 800cccc:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800ccd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccda:	3301      	adds	r3, #1
 800ccdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cce0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cce4:	2b0f      	cmp	r3, #15
 800cce6:	d9eb      	bls.n	800ccc0 <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800cce8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800ccec:	f107 0314 	add.w	r3, r7, #20
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f8f8 	bl	800cee8 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800ccf8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ccfc:	f107 0314 	add.w	r3, r7, #20
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f8f0 	bl	800cee8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7ff fb96 	bl	800c440 <AES_Encrypt>
 800cd14:	e04d      	b.n	800cdb2 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800cd16:	2300      	movs	r3, #0
 800cd18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd1c:	e02f      	b.n	800cd7e <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800cd1e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cd22:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d20a      	bcs.n	800cd40 <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800cd2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	7812      	ldrb	r2, [r2, #0]
 800cd32:	3368      	adds	r3, #104	@ 0x68
 800cd34:	443b      	add	r3, r7
 800cd36:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800cd40:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cd44:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d106      	bne.n	800cd5a <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800cd4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd50:	3368      	adds	r3, #104	@ 0x68
 800cd52:	443b      	add	r3, r7
 800cd54:	2280      	movs	r2, #128	@ 0x80
 800cd56:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800cd5a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cd5e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d906      	bls.n	800cd74 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800cd66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd6a:	3368      	adds	r3, #104	@ 0x68
 800cd6c:	443b      	add	r3, r7
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800cd74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd78:	3301      	adds	r3, #1
 800cd7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd82:	2b0f      	cmp	r3, #15
 800cd84:	d9cb      	bls.n	800cd1e <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800cd86:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800cd8a:	f107 0314 	add.w	r3, r7, #20
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 f8a9 	bl	800cee8 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800cd96:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cd9a:	f107 0314 	add.w	r3, r7, #20
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f8a1 	bl	800cee8 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800cda6:	f107 0314 	add.w	r3, r7, #20
 800cdaa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff fb47 	bl	800c440 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800cdb2:	7d3a      	ldrb	r2, [r7, #20]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	7d7a      	ldrb	r2, [r7, #21]
 800cdbe:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	3302      	adds	r3, #2
 800cdc4:	7dba      	ldrb	r2, [r7, #22]
 800cdc6:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	3303      	adds	r3, #3
 800cdcc:	7dfa      	ldrb	r2, [r7, #23]
 800cdce:	701a      	strb	r2, [r3, #0]
}
 800cdd0:	bf00      	nop
 800cdd2:	3768      	adds	r7, #104	@ 0x68
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800cde4:	6879      	ldr	r1, [r7, #4]
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fb2a 	bl	800c440 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	b25b      	sxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	da02      	bge.n	800cdfc <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	75bb      	strb	r3, [r7, #22]
 800cdfa:	e001      	b.n	800ce00 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f000 f83c 	bl	800ce7e <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800ce06:	7dbb      	ldrb	r3, [r7, #22]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d109      	bne.n	800ce20 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	330f      	adds	r3, #15
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	320f      	adds	r2, #15
 800ce16:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ce1a:	43db      	mvns	r3, r3
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800ce20:	2300      	movs	r3, #0
 800ce22:	75fb      	strb	r3, [r7, #23]
 800ce24:	e00a      	b.n	800ce3c <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	441a      	add	r2, r3
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	440b      	add	r3, r1
 800ce32:	7812      	ldrb	r2, [r2, #0]
 800ce34:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	75fb      	strb	r3, [r7, #23]
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	2b0f      	cmp	r3, #15
 800ce40:	d9f1      	bls.n	800ce26 <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	b25b      	sxtb	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da02      	bge.n	800ce52 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	75bb      	strb	r3, [r7, #22]
 800ce50:	e001      	b.n	800ce56 <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800ce56:	68b8      	ldr	r0, [r7, #8]
 800ce58:	f000 f811 	bl	800ce7e <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800ce5c:	7dbb      	ldrb	r3, [r7, #22]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d109      	bne.n	800ce76 <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	330f      	adds	r3, #15
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	320f      	adds	r2, #15
 800ce6c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ce70:	43db      	mvns	r3, r3
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	7013      	strb	r3, [r2, #0]
	}
}
 800ce76:	bf00      	nop
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800ce7e:	b480      	push	{r7}
 800ce80:	b085      	sub	sp, #20
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
 800ce8e:	e022      	b.n	800ced6 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b0e      	cmp	r3, #14
 800ce94:	d80d      	bhi.n	800ceb2 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	da02      	bge.n	800ceac <Shift_Left+0x2e>
			{
				Overflow = 1;
 800cea6:	2301      	movs	r3, #1
 800cea8:	73bb      	strb	r3, [r7, #14]
 800ceaa:	e004      	b.n	800ceb6 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73bb      	strb	r3, [r7, #14]
 800ceb0:	e001      	b.n	800ceb6 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	4413      	add	r3, r2
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	b2d9      	uxtb	r1, r3
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	4413      	add	r3, r2
 800cec8:	7bba      	ldrb	r2, [r7, #14]
 800ceca:	440a      	add	r2, r1
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	3301      	adds	r3, #1
 800ced4:	73fb      	strb	r3, [r7, #15]
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	2b0f      	cmp	r3, #15
 800ceda:	d9d9      	bls.n	800ce90 <Shift_Left+0x12>
	}
}
 800cedc:	bf00      	nop
 800cede:	bf00      	nop
 800cee0:	3714      	adds	r7, #20
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bc80      	pop	{r7}
 800cee6:	4770      	bx	lr

0800cee8 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]
 800cef6:	e010      	b.n	800cf1a <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	7819      	ldrb	r1, [r3, #0]
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	4413      	add	r3, r2
 800cf06:	781a      	ldrb	r2, [r3, #0]
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	4403      	add	r3, r0
 800cf0e:	404a      	eors	r2, r1
 800cf10:	b2d2      	uxtb	r2, r2
 800cf12:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	3301      	adds	r3, #1
 800cf18:	73fb      	strb	r3, [r7, #15]
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	2b0f      	cmp	r3, #15
 800cf1e:	d9eb      	bls.n	800cef8 <XOR+0x10>
	}
}
 800cf20:	bf00      	nop
 800cf22:	bf00      	nop
 800cf24:	3714      	adds	r7, #20
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bc80      	pop	{r7}
 800cf2a:	4770      	bx	lr

0800cf2c <__assert_func>:
 800cf2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf2e:	4614      	mov	r4, r2
 800cf30:	461a      	mov	r2, r3
 800cf32:	4b09      	ldr	r3, [pc, #36]	@ (800cf58 <__assert_func+0x2c>)
 800cf34:	4605      	mov	r5, r0
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68d8      	ldr	r0, [r3, #12]
 800cf3a:	b14c      	cbz	r4, 800cf50 <__assert_func+0x24>
 800cf3c:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <__assert_func+0x30>)
 800cf3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf42:	9100      	str	r1, [sp, #0]
 800cf44:	462b      	mov	r3, r5
 800cf46:	4906      	ldr	r1, [pc, #24]	@ (800cf60 <__assert_func+0x34>)
 800cf48:	f000 f8b2 	bl	800d0b0 <fiprintf>
 800cf4c:	f000 f9bd 	bl	800d2ca <abort>
 800cf50:	4b04      	ldr	r3, [pc, #16]	@ (800cf64 <__assert_func+0x38>)
 800cf52:	461c      	mov	r4, r3
 800cf54:	e7f3      	b.n	800cf3e <__assert_func+0x12>
 800cf56:	bf00      	nop
 800cf58:	2000011c 	.word	0x2000011c
 800cf5c:	0800e1c0 	.word	0x0800e1c0
 800cf60:	0800e1cd 	.word	0x0800e1cd
 800cf64:	0800e1fb 	.word	0x0800e1fb

0800cf68 <std>:
 800cf68:	2300      	movs	r3, #0
 800cf6a:	b510      	push	{r4, lr}
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf76:	6083      	str	r3, [r0, #8]
 800cf78:	8181      	strh	r1, [r0, #12]
 800cf7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf7c:	81c2      	strh	r2, [r0, #14]
 800cf7e:	6183      	str	r3, [r0, #24]
 800cf80:	4619      	mov	r1, r3
 800cf82:	2208      	movs	r2, #8
 800cf84:	305c      	adds	r0, #92	@ 0x5c
 800cf86:	f000 f916 	bl	800d1b6 <memset>
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfc0 <std+0x58>)
 800cf8c:	6224      	str	r4, [r4, #32]
 800cf8e:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf90:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc4 <std+0x5c>)
 800cf92:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf94:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc8 <std+0x60>)
 800cf96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf98:	4b0c      	ldr	r3, [pc, #48]	@ (800cfcc <std+0x64>)
 800cf9a:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd0 <std+0x68>)
 800cf9e:	429c      	cmp	r4, r3
 800cfa0:	d006      	beq.n	800cfb0 <std+0x48>
 800cfa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfa6:	4294      	cmp	r4, r2
 800cfa8:	d002      	beq.n	800cfb0 <std+0x48>
 800cfaa:	33d0      	adds	r3, #208	@ 0xd0
 800cfac:	429c      	cmp	r4, r3
 800cfae:	d105      	bne.n	800cfbc <std+0x54>
 800cfb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb8:	f000 b976 	b.w	800d2a8 <__retarget_lock_init_recursive>
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	bf00      	nop
 800cfc0:	0800d111 	.word	0x0800d111
 800cfc4:	0800d133 	.word	0x0800d133
 800cfc8:	0800d16b 	.word	0x0800d16b
 800cfcc:	0800d18f 	.word	0x0800d18f
 800cfd0:	20000578 	.word	0x20000578

0800cfd4 <stdio_exit_handler>:
 800cfd4:	4a02      	ldr	r2, [pc, #8]	@ (800cfe0 <stdio_exit_handler+0xc>)
 800cfd6:	4903      	ldr	r1, [pc, #12]	@ (800cfe4 <stdio_exit_handler+0x10>)
 800cfd8:	4803      	ldr	r0, [pc, #12]	@ (800cfe8 <stdio_exit_handler+0x14>)
 800cfda:	f000 b87b 	b.w	800d0d4 <_fwalk_sglue>
 800cfde:	bf00      	nop
 800cfe0:	20000110 	.word	0x20000110
 800cfe4:	0800db65 	.word	0x0800db65
 800cfe8:	20000120 	.word	0x20000120

0800cfec <cleanup_stdio>:
 800cfec:	6841      	ldr	r1, [r0, #4]
 800cfee:	4b0c      	ldr	r3, [pc, #48]	@ (800d020 <cleanup_stdio+0x34>)
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4299      	cmp	r1, r3
 800cff4:	4604      	mov	r4, r0
 800cff6:	d001      	beq.n	800cffc <cleanup_stdio+0x10>
 800cff8:	f000 fdb4 	bl	800db64 <_fflush_r>
 800cffc:	68a1      	ldr	r1, [r4, #8]
 800cffe:	4b09      	ldr	r3, [pc, #36]	@ (800d024 <cleanup_stdio+0x38>)
 800d000:	4299      	cmp	r1, r3
 800d002:	d002      	beq.n	800d00a <cleanup_stdio+0x1e>
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fdad 	bl	800db64 <_fflush_r>
 800d00a:	68e1      	ldr	r1, [r4, #12]
 800d00c:	4b06      	ldr	r3, [pc, #24]	@ (800d028 <cleanup_stdio+0x3c>)
 800d00e:	4299      	cmp	r1, r3
 800d010:	d004      	beq.n	800d01c <cleanup_stdio+0x30>
 800d012:	4620      	mov	r0, r4
 800d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d018:	f000 bda4 	b.w	800db64 <_fflush_r>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	bf00      	nop
 800d020:	20000578 	.word	0x20000578
 800d024:	200005e0 	.word	0x200005e0
 800d028:	20000648 	.word	0x20000648

0800d02c <global_stdio_init.part.0>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4b0b      	ldr	r3, [pc, #44]	@ (800d05c <global_stdio_init.part.0+0x30>)
 800d030:	4c0b      	ldr	r4, [pc, #44]	@ (800d060 <global_stdio_init.part.0+0x34>)
 800d032:	4a0c      	ldr	r2, [pc, #48]	@ (800d064 <global_stdio_init.part.0+0x38>)
 800d034:	4620      	mov	r0, r4
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	2104      	movs	r1, #4
 800d03a:	2200      	movs	r2, #0
 800d03c:	f7ff ff94 	bl	800cf68 <std>
 800d040:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d044:	2201      	movs	r2, #1
 800d046:	2109      	movs	r1, #9
 800d048:	f7ff ff8e 	bl	800cf68 <std>
 800d04c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d050:	2202      	movs	r2, #2
 800d052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d056:	2112      	movs	r1, #18
 800d058:	f7ff bf86 	b.w	800cf68 <std>
 800d05c:	200006b0 	.word	0x200006b0
 800d060:	20000578 	.word	0x20000578
 800d064:	0800cfd5 	.word	0x0800cfd5

0800d068 <__sfp_lock_acquire>:
 800d068:	4801      	ldr	r0, [pc, #4]	@ (800d070 <__sfp_lock_acquire+0x8>)
 800d06a:	f000 b91e 	b.w	800d2aa <__retarget_lock_acquire_recursive>
 800d06e:	bf00      	nop
 800d070:	200006b9 	.word	0x200006b9

0800d074 <__sfp_lock_release>:
 800d074:	4801      	ldr	r0, [pc, #4]	@ (800d07c <__sfp_lock_release+0x8>)
 800d076:	f000 b919 	b.w	800d2ac <__retarget_lock_release_recursive>
 800d07a:	bf00      	nop
 800d07c:	200006b9 	.word	0x200006b9

0800d080 <__sinit>:
 800d080:	b510      	push	{r4, lr}
 800d082:	4604      	mov	r4, r0
 800d084:	f7ff fff0 	bl	800d068 <__sfp_lock_acquire>
 800d088:	6a23      	ldr	r3, [r4, #32]
 800d08a:	b11b      	cbz	r3, 800d094 <__sinit+0x14>
 800d08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d090:	f7ff bff0 	b.w	800d074 <__sfp_lock_release>
 800d094:	4b04      	ldr	r3, [pc, #16]	@ (800d0a8 <__sinit+0x28>)
 800d096:	6223      	str	r3, [r4, #32]
 800d098:	4b04      	ldr	r3, [pc, #16]	@ (800d0ac <__sinit+0x2c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1f5      	bne.n	800d08c <__sinit+0xc>
 800d0a0:	f7ff ffc4 	bl	800d02c <global_stdio_init.part.0>
 800d0a4:	e7f2      	b.n	800d08c <__sinit+0xc>
 800d0a6:	bf00      	nop
 800d0a8:	0800cfed 	.word	0x0800cfed
 800d0ac:	200006b0 	.word	0x200006b0

0800d0b0 <fiprintf>:
 800d0b0:	b40e      	push	{r1, r2, r3}
 800d0b2:	b503      	push	{r0, r1, lr}
 800d0b4:	4601      	mov	r1, r0
 800d0b6:	ab03      	add	r3, sp, #12
 800d0b8:	4805      	ldr	r0, [pc, #20]	@ (800d0d0 <fiprintf+0x20>)
 800d0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0be:	6800      	ldr	r0, [r0, #0]
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	f000 fa27 	bl	800d514 <_vfiprintf_r>
 800d0c6:	b002      	add	sp, #8
 800d0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0cc:	b003      	add	sp, #12
 800d0ce:	4770      	bx	lr
 800d0d0:	2000011c 	.word	0x2000011c

0800d0d4 <_fwalk_sglue>:
 800d0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0d8:	4607      	mov	r7, r0
 800d0da:	4688      	mov	r8, r1
 800d0dc:	4614      	mov	r4, r2
 800d0de:	2600      	movs	r6, #0
 800d0e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0e4:	f1b9 0901 	subs.w	r9, r9, #1
 800d0e8:	d505      	bpl.n	800d0f6 <_fwalk_sglue+0x22>
 800d0ea:	6824      	ldr	r4, [r4, #0]
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	d1f7      	bne.n	800d0e0 <_fwalk_sglue+0xc>
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f6:	89ab      	ldrh	r3, [r5, #12]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d907      	bls.n	800d10c <_fwalk_sglue+0x38>
 800d0fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d100:	3301      	adds	r3, #1
 800d102:	d003      	beq.n	800d10c <_fwalk_sglue+0x38>
 800d104:	4629      	mov	r1, r5
 800d106:	4638      	mov	r0, r7
 800d108:	47c0      	blx	r8
 800d10a:	4306      	orrs	r6, r0
 800d10c:	3568      	adds	r5, #104	@ 0x68
 800d10e:	e7e9      	b.n	800d0e4 <_fwalk_sglue+0x10>

0800d110 <__sread>:
 800d110:	b510      	push	{r4, lr}
 800d112:	460c      	mov	r4, r1
 800d114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d118:	f000 f878 	bl	800d20c <_read_r>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	bfab      	itete	ge
 800d120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d122:	89a3      	ldrhlt	r3, [r4, #12]
 800d124:	181b      	addge	r3, r3, r0
 800d126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d12a:	bfac      	ite	ge
 800d12c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d12e:	81a3      	strhlt	r3, [r4, #12]
 800d130:	bd10      	pop	{r4, pc}

0800d132 <__swrite>:
 800d132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d136:	461f      	mov	r7, r3
 800d138:	898b      	ldrh	r3, [r1, #12]
 800d13a:	4605      	mov	r5, r0
 800d13c:	05db      	lsls	r3, r3, #23
 800d13e:	460c      	mov	r4, r1
 800d140:	4616      	mov	r6, r2
 800d142:	d505      	bpl.n	800d150 <__swrite+0x1e>
 800d144:	2302      	movs	r3, #2
 800d146:	2200      	movs	r2, #0
 800d148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14c:	f000 f84c 	bl	800d1e8 <_lseek_r>
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	4632      	mov	r2, r6
 800d154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	4628      	mov	r0, r5
 800d15c:	463b      	mov	r3, r7
 800d15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d166:	f000 b863 	b.w	800d230 <_write_r>

0800d16a <__sseek>:
 800d16a:	b510      	push	{r4, lr}
 800d16c:	460c      	mov	r4, r1
 800d16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d172:	f000 f839 	bl	800d1e8 <_lseek_r>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	bf15      	itete	ne
 800d17c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d17e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d186:	81a3      	strheq	r3, [r4, #12]
 800d188:	bf18      	it	ne
 800d18a:	81a3      	strhne	r3, [r4, #12]
 800d18c:	bd10      	pop	{r4, pc}

0800d18e <__sclose>:
 800d18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d192:	f000 b819 	b.w	800d1c8 <_close_r>

0800d196 <memcmp>:
 800d196:	b510      	push	{r4, lr}
 800d198:	3901      	subs	r1, #1
 800d19a:	4402      	add	r2, r0
 800d19c:	4290      	cmp	r0, r2
 800d19e:	d101      	bne.n	800d1a4 <memcmp+0xe>
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e005      	b.n	800d1b0 <memcmp+0x1a>
 800d1a4:	7803      	ldrb	r3, [r0, #0]
 800d1a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1aa:	42a3      	cmp	r3, r4
 800d1ac:	d001      	beq.n	800d1b2 <memcmp+0x1c>
 800d1ae:	1b18      	subs	r0, r3, r4
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	e7f2      	b.n	800d19c <memcmp+0x6>

0800d1b6 <memset>:
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	4402      	add	r2, r0
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d100      	bne.n	800d1c0 <memset+0xa>
 800d1be:	4770      	bx	lr
 800d1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800d1c4:	e7f9      	b.n	800d1ba <memset+0x4>
	...

0800d1c8 <_close_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4d05      	ldr	r5, [pc, #20]	@ (800d1e4 <_close_r+0x1c>)
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	f7f7 ff85 	bl	80050e2 <_close>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_close_r+0x1a>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_close_r+0x1a>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	200006b4 	.word	0x200006b4

0800d1e8 <_lseek_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	4d05      	ldr	r5, [pc, #20]	@ (800d208 <_lseek_r+0x20>)
 800d1f4:	602a      	str	r2, [r5, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f7f7 ff97 	bl	800512a <_lseek>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_lseek_r+0x1e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_lseek_r+0x1e>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	200006b4 	.word	0x200006b4

0800d20c <_read_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	4611      	mov	r1, r2
 800d214:	2200      	movs	r2, #0
 800d216:	4d05      	ldr	r5, [pc, #20]	@ (800d22c <_read_r+0x20>)
 800d218:	602a      	str	r2, [r5, #0]
 800d21a:	461a      	mov	r2, r3
 800d21c:	f7f7 ff28 	bl	8005070 <_read>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d102      	bne.n	800d22a <_read_r+0x1e>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	b103      	cbz	r3, 800d22a <_read_r+0x1e>
 800d228:	6023      	str	r3, [r4, #0]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	200006b4 	.word	0x200006b4

0800d230 <_write_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	4611      	mov	r1, r2
 800d238:	2200      	movs	r2, #0
 800d23a:	4d05      	ldr	r5, [pc, #20]	@ (800d250 <_write_r+0x20>)
 800d23c:	602a      	str	r2, [r5, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f7f7 ff33 	bl	80050aa <_write>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_write_r+0x1e>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_write_r+0x1e>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	200006b4 	.word	0x200006b4

0800d254 <__errno>:
 800d254:	4b01      	ldr	r3, [pc, #4]	@ (800d25c <__errno+0x8>)
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	2000011c 	.word	0x2000011c

0800d260 <__libc_init_array>:
 800d260:	b570      	push	{r4, r5, r6, lr}
 800d262:	2600      	movs	r6, #0
 800d264:	4d0c      	ldr	r5, [pc, #48]	@ (800d298 <__libc_init_array+0x38>)
 800d266:	4c0d      	ldr	r4, [pc, #52]	@ (800d29c <__libc_init_array+0x3c>)
 800d268:	1b64      	subs	r4, r4, r5
 800d26a:	10a4      	asrs	r4, r4, #2
 800d26c:	42a6      	cmp	r6, r4
 800d26e:	d109      	bne.n	800d284 <__libc_init_array+0x24>
 800d270:	f000 fe1a 	bl	800dea8 <_init>
 800d274:	2600      	movs	r6, #0
 800d276:	4d0a      	ldr	r5, [pc, #40]	@ (800d2a0 <__libc_init_array+0x40>)
 800d278:	4c0a      	ldr	r4, [pc, #40]	@ (800d2a4 <__libc_init_array+0x44>)
 800d27a:	1b64      	subs	r4, r4, r5
 800d27c:	10a4      	asrs	r4, r4, #2
 800d27e:	42a6      	cmp	r6, r4
 800d280:	d105      	bne.n	800d28e <__libc_init_array+0x2e>
 800d282:	bd70      	pop	{r4, r5, r6, pc}
 800d284:	f855 3b04 	ldr.w	r3, [r5], #4
 800d288:	4798      	blx	r3
 800d28a:	3601      	adds	r6, #1
 800d28c:	e7ee      	b.n	800d26c <__libc_init_array+0xc>
 800d28e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d292:	4798      	blx	r3
 800d294:	3601      	adds	r6, #1
 800d296:	e7f2      	b.n	800d27e <__libc_init_array+0x1e>
 800d298:	0800e238 	.word	0x0800e238
 800d29c:	0800e238 	.word	0x0800e238
 800d2a0:	0800e238 	.word	0x0800e238
 800d2a4:	0800e23c 	.word	0x0800e23c

0800d2a8 <__retarget_lock_init_recursive>:
 800d2a8:	4770      	bx	lr

0800d2aa <__retarget_lock_acquire_recursive>:
 800d2aa:	4770      	bx	lr

0800d2ac <__retarget_lock_release_recursive>:
 800d2ac:	4770      	bx	lr

0800d2ae <memcpy>:
 800d2ae:	440a      	add	r2, r1
 800d2b0:	4291      	cmp	r1, r2
 800d2b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2b6:	d100      	bne.n	800d2ba <memcpy+0xc>
 800d2b8:	4770      	bx	lr
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2c0:	4291      	cmp	r1, r2
 800d2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2c6:	d1f9      	bne.n	800d2bc <memcpy+0xe>
 800d2c8:	bd10      	pop	{r4, pc}

0800d2ca <abort>:
 800d2ca:	2006      	movs	r0, #6
 800d2cc:	b508      	push	{r3, lr}
 800d2ce:	f000 fd2d 	bl	800dd2c <raise>
 800d2d2:	2001      	movs	r0, #1
 800d2d4:	f7f7 fec1 	bl	800505a <_exit>

0800d2d8 <_free_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4605      	mov	r5, r0
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d040      	beq.n	800d362 <_free_r+0x8a>
 800d2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e4:	1f0c      	subs	r4, r1, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfb8      	it	lt
 800d2ea:	18e4      	addlt	r4, r4, r3
 800d2ec:	f000 f8de 	bl	800d4ac <__malloc_lock>
 800d2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800d364 <_free_r+0x8c>)
 800d2f2:	6813      	ldr	r3, [r2, #0]
 800d2f4:	b933      	cbnz	r3, 800d304 <_free_r+0x2c>
 800d2f6:	6063      	str	r3, [r4, #4]
 800d2f8:	6014      	str	r4, [r2, #0]
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d300:	f000 b8da 	b.w	800d4b8 <__malloc_unlock>
 800d304:	42a3      	cmp	r3, r4
 800d306:	d908      	bls.n	800d31a <_free_r+0x42>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	1821      	adds	r1, r4, r0
 800d30c:	428b      	cmp	r3, r1
 800d30e:	bf01      	itttt	eq
 800d310:	6819      	ldreq	r1, [r3, #0]
 800d312:	685b      	ldreq	r3, [r3, #4]
 800d314:	1809      	addeq	r1, r1, r0
 800d316:	6021      	streq	r1, [r4, #0]
 800d318:	e7ed      	b.n	800d2f6 <_free_r+0x1e>
 800d31a:	461a      	mov	r2, r3
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	b10b      	cbz	r3, 800d324 <_free_r+0x4c>
 800d320:	42a3      	cmp	r3, r4
 800d322:	d9fa      	bls.n	800d31a <_free_r+0x42>
 800d324:	6811      	ldr	r1, [r2, #0]
 800d326:	1850      	adds	r0, r2, r1
 800d328:	42a0      	cmp	r0, r4
 800d32a:	d10b      	bne.n	800d344 <_free_r+0x6c>
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	4401      	add	r1, r0
 800d330:	1850      	adds	r0, r2, r1
 800d332:	4283      	cmp	r3, r0
 800d334:	6011      	str	r1, [r2, #0]
 800d336:	d1e0      	bne.n	800d2fa <_free_r+0x22>
 800d338:	6818      	ldr	r0, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	4408      	add	r0, r1
 800d33e:	6010      	str	r0, [r2, #0]
 800d340:	6053      	str	r3, [r2, #4]
 800d342:	e7da      	b.n	800d2fa <_free_r+0x22>
 800d344:	d902      	bls.n	800d34c <_free_r+0x74>
 800d346:	230c      	movs	r3, #12
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	e7d6      	b.n	800d2fa <_free_r+0x22>
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	1821      	adds	r1, r4, r0
 800d350:	428b      	cmp	r3, r1
 800d352:	bf01      	itttt	eq
 800d354:	6819      	ldreq	r1, [r3, #0]
 800d356:	685b      	ldreq	r3, [r3, #4]
 800d358:	1809      	addeq	r1, r1, r0
 800d35a:	6021      	streq	r1, [r4, #0]
 800d35c:	6063      	str	r3, [r4, #4]
 800d35e:	6054      	str	r4, [r2, #4]
 800d360:	e7cb      	b.n	800d2fa <_free_r+0x22>
 800d362:	bd38      	pop	{r3, r4, r5, pc}
 800d364:	200006c0 	.word	0x200006c0

0800d368 <sbrk_aligned>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4e0f      	ldr	r6, [pc, #60]	@ (800d3a8 <sbrk_aligned+0x40>)
 800d36c:	460c      	mov	r4, r1
 800d36e:	6831      	ldr	r1, [r6, #0]
 800d370:	4605      	mov	r5, r0
 800d372:	b911      	cbnz	r1, 800d37a <sbrk_aligned+0x12>
 800d374:	f000 fcf6 	bl	800dd64 <_sbrk_r>
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4621      	mov	r1, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	f000 fcf1 	bl	800dd64 <_sbrk_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	d103      	bne.n	800d38e <sbrk_aligned+0x26>
 800d386:	f04f 34ff 	mov.w	r4, #4294967295
 800d38a:	4620      	mov	r0, r4
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	1cc4      	adds	r4, r0, #3
 800d390:	f024 0403 	bic.w	r4, r4, #3
 800d394:	42a0      	cmp	r0, r4
 800d396:	d0f8      	beq.n	800d38a <sbrk_aligned+0x22>
 800d398:	1a21      	subs	r1, r4, r0
 800d39a:	4628      	mov	r0, r5
 800d39c:	f000 fce2 	bl	800dd64 <_sbrk_r>
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d1f2      	bne.n	800d38a <sbrk_aligned+0x22>
 800d3a4:	e7ef      	b.n	800d386 <sbrk_aligned+0x1e>
 800d3a6:	bf00      	nop
 800d3a8:	200006bc 	.word	0x200006bc

0800d3ac <_malloc_r>:
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	1ccd      	adds	r5, r1, #3
 800d3b2:	f025 0503 	bic.w	r5, r5, #3
 800d3b6:	3508      	adds	r5, #8
 800d3b8:	2d0c      	cmp	r5, #12
 800d3ba:	bf38      	it	cc
 800d3bc:	250c      	movcc	r5, #12
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	db01      	blt.n	800d3c8 <_malloc_r+0x1c>
 800d3c4:	42a9      	cmp	r1, r5
 800d3c6:	d904      	bls.n	800d3d2 <_malloc_r+0x26>
 800d3c8:	230c      	movs	r3, #12
 800d3ca:	6033      	str	r3, [r6, #0]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4a8 <_malloc_r+0xfc>
 800d3d6:	f000 f869 	bl	800d4ac <__malloc_lock>
 800d3da:	f8d8 3000 	ldr.w	r3, [r8]
 800d3de:	461c      	mov	r4, r3
 800d3e0:	bb44      	cbnz	r4, 800d434 <_malloc_r+0x88>
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f7ff ffbf 	bl	800d368 <sbrk_aligned>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	d158      	bne.n	800d4a2 <_malloc_r+0xf6>
 800d3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d3f4:	4627      	mov	r7, r4
 800d3f6:	2f00      	cmp	r7, #0
 800d3f8:	d143      	bne.n	800d482 <_malloc_r+0xd6>
 800d3fa:	2c00      	cmp	r4, #0
 800d3fc:	d04b      	beq.n	800d496 <_malloc_r+0xea>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	4639      	mov	r1, r7
 800d402:	4630      	mov	r0, r6
 800d404:	eb04 0903 	add.w	r9, r4, r3
 800d408:	f000 fcac 	bl	800dd64 <_sbrk_r>
 800d40c:	4581      	cmp	r9, r0
 800d40e:	d142      	bne.n	800d496 <_malloc_r+0xea>
 800d410:	6821      	ldr	r1, [r4, #0]
 800d412:	4630      	mov	r0, r6
 800d414:	1a6d      	subs	r5, r5, r1
 800d416:	4629      	mov	r1, r5
 800d418:	f7ff ffa6 	bl	800d368 <sbrk_aligned>
 800d41c:	3001      	adds	r0, #1
 800d41e:	d03a      	beq.n	800d496 <_malloc_r+0xea>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	442b      	add	r3, r5
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	f8d8 3000 	ldr.w	r3, [r8]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	bb62      	cbnz	r2, 800d488 <_malloc_r+0xdc>
 800d42e:	f8c8 7000 	str.w	r7, [r8]
 800d432:	e00f      	b.n	800d454 <_malloc_r+0xa8>
 800d434:	6822      	ldr	r2, [r4, #0]
 800d436:	1b52      	subs	r2, r2, r5
 800d438:	d420      	bmi.n	800d47c <_malloc_r+0xd0>
 800d43a:	2a0b      	cmp	r2, #11
 800d43c:	d917      	bls.n	800d46e <_malloc_r+0xc2>
 800d43e:	1961      	adds	r1, r4, r5
 800d440:	42a3      	cmp	r3, r4
 800d442:	6025      	str	r5, [r4, #0]
 800d444:	bf18      	it	ne
 800d446:	6059      	strne	r1, [r3, #4]
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	bf08      	it	eq
 800d44c:	f8c8 1000 	streq.w	r1, [r8]
 800d450:	5162      	str	r2, [r4, r5]
 800d452:	604b      	str	r3, [r1, #4]
 800d454:	4630      	mov	r0, r6
 800d456:	f000 f82f 	bl	800d4b8 <__malloc_unlock>
 800d45a:	f104 000b 	add.w	r0, r4, #11
 800d45e:	1d23      	adds	r3, r4, #4
 800d460:	f020 0007 	bic.w	r0, r0, #7
 800d464:	1ac2      	subs	r2, r0, r3
 800d466:	bf1c      	itt	ne
 800d468:	1a1b      	subne	r3, r3, r0
 800d46a:	50a3      	strne	r3, [r4, r2]
 800d46c:	e7af      	b.n	800d3ce <_malloc_r+0x22>
 800d46e:	6862      	ldr	r2, [r4, #4]
 800d470:	42a3      	cmp	r3, r4
 800d472:	bf0c      	ite	eq
 800d474:	f8c8 2000 	streq.w	r2, [r8]
 800d478:	605a      	strne	r2, [r3, #4]
 800d47a:	e7eb      	b.n	800d454 <_malloc_r+0xa8>
 800d47c:	4623      	mov	r3, r4
 800d47e:	6864      	ldr	r4, [r4, #4]
 800d480:	e7ae      	b.n	800d3e0 <_malloc_r+0x34>
 800d482:	463c      	mov	r4, r7
 800d484:	687f      	ldr	r7, [r7, #4]
 800d486:	e7b6      	b.n	800d3f6 <_malloc_r+0x4a>
 800d488:	461a      	mov	r2, r3
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d1fb      	bne.n	800d488 <_malloc_r+0xdc>
 800d490:	2300      	movs	r3, #0
 800d492:	6053      	str	r3, [r2, #4]
 800d494:	e7de      	b.n	800d454 <_malloc_r+0xa8>
 800d496:	230c      	movs	r3, #12
 800d498:	4630      	mov	r0, r6
 800d49a:	6033      	str	r3, [r6, #0]
 800d49c:	f000 f80c 	bl	800d4b8 <__malloc_unlock>
 800d4a0:	e794      	b.n	800d3cc <_malloc_r+0x20>
 800d4a2:	6005      	str	r5, [r0, #0]
 800d4a4:	e7d6      	b.n	800d454 <_malloc_r+0xa8>
 800d4a6:	bf00      	nop
 800d4a8:	200006c0 	.word	0x200006c0

0800d4ac <__malloc_lock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__malloc_lock+0x8>)
 800d4ae:	f7ff befc 	b.w	800d2aa <__retarget_lock_acquire_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	200006b8 	.word	0x200006b8

0800d4b8 <__malloc_unlock>:
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <__malloc_unlock+0x8>)
 800d4ba:	f7ff bef7 	b.w	800d2ac <__retarget_lock_release_recursive>
 800d4be:	bf00      	nop
 800d4c0:	200006b8 	.word	0x200006b8

0800d4c4 <__sfputc_r>:
 800d4c4:	6893      	ldr	r3, [r2, #8]
 800d4c6:	b410      	push	{r4}
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	6093      	str	r3, [r2, #8]
 800d4ce:	da07      	bge.n	800d4e0 <__sfputc_r+0x1c>
 800d4d0:	6994      	ldr	r4, [r2, #24]
 800d4d2:	42a3      	cmp	r3, r4
 800d4d4:	db01      	blt.n	800d4da <__sfputc_r+0x16>
 800d4d6:	290a      	cmp	r1, #10
 800d4d8:	d102      	bne.n	800d4e0 <__sfputc_r+0x1c>
 800d4da:	bc10      	pop	{r4}
 800d4dc:	f000 bb6a 	b.w	800dbb4 <__swbuf_r>
 800d4e0:	6813      	ldr	r3, [r2, #0]
 800d4e2:	1c58      	adds	r0, r3, #1
 800d4e4:	6010      	str	r0, [r2, #0]
 800d4e6:	7019      	strb	r1, [r3, #0]
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	bc10      	pop	{r4}
 800d4ec:	4770      	bx	lr

0800d4ee <__sfputs_r>:
 800d4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f0:	4606      	mov	r6, r0
 800d4f2:	460f      	mov	r7, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	18d5      	adds	r5, r2, r3
 800d4f8:	42ac      	cmp	r4, r5
 800d4fa:	d101      	bne.n	800d500 <__sfputs_r+0x12>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e007      	b.n	800d510 <__sfputs_r+0x22>
 800d500:	463a      	mov	r2, r7
 800d502:	4630      	mov	r0, r6
 800d504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d508:	f7ff ffdc 	bl	800d4c4 <__sfputc_r>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d1f3      	bne.n	800d4f8 <__sfputs_r+0xa>
 800d510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d514 <_vfiprintf_r>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	460d      	mov	r5, r1
 800d51a:	4614      	mov	r4, r2
 800d51c:	4698      	mov	r8, r3
 800d51e:	4606      	mov	r6, r0
 800d520:	b09d      	sub	sp, #116	@ 0x74
 800d522:	b118      	cbz	r0, 800d52c <_vfiprintf_r+0x18>
 800d524:	6a03      	ldr	r3, [r0, #32]
 800d526:	b90b      	cbnz	r3, 800d52c <_vfiprintf_r+0x18>
 800d528:	f7ff fdaa 	bl	800d080 <__sinit>
 800d52c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d52e:	07d9      	lsls	r1, r3, #31
 800d530:	d405      	bmi.n	800d53e <_vfiprintf_r+0x2a>
 800d532:	89ab      	ldrh	r3, [r5, #12]
 800d534:	059a      	lsls	r2, r3, #22
 800d536:	d402      	bmi.n	800d53e <_vfiprintf_r+0x2a>
 800d538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d53a:	f7ff feb6 	bl	800d2aa <__retarget_lock_acquire_recursive>
 800d53e:	89ab      	ldrh	r3, [r5, #12]
 800d540:	071b      	lsls	r3, r3, #28
 800d542:	d501      	bpl.n	800d548 <_vfiprintf_r+0x34>
 800d544:	692b      	ldr	r3, [r5, #16]
 800d546:	b99b      	cbnz	r3, 800d570 <_vfiprintf_r+0x5c>
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f000 fb70 	bl	800dc30 <__swsetup_r>
 800d550:	b170      	cbz	r0, 800d570 <_vfiprintf_r+0x5c>
 800d552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d554:	07dc      	lsls	r4, r3, #31
 800d556:	d504      	bpl.n	800d562 <_vfiprintf_r+0x4e>
 800d558:	f04f 30ff 	mov.w	r0, #4294967295
 800d55c:	b01d      	add	sp, #116	@ 0x74
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	0598      	lsls	r0, r3, #22
 800d566:	d4f7      	bmi.n	800d558 <_vfiprintf_r+0x44>
 800d568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d56a:	f7ff fe9f 	bl	800d2ac <__retarget_lock_release_recursive>
 800d56e:	e7f3      	b.n	800d558 <_vfiprintf_r+0x44>
 800d570:	2300      	movs	r3, #0
 800d572:	9309      	str	r3, [sp, #36]	@ 0x24
 800d574:	2320      	movs	r3, #32
 800d576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d57a:	2330      	movs	r3, #48	@ 0x30
 800d57c:	f04f 0901 	mov.w	r9, #1
 800d580:	f8cd 800c 	str.w	r8, [sp, #12]
 800d584:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d730 <_vfiprintf_r+0x21c>
 800d588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d58c:	4623      	mov	r3, r4
 800d58e:	469a      	mov	sl, r3
 800d590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d594:	b10a      	cbz	r2, 800d59a <_vfiprintf_r+0x86>
 800d596:	2a25      	cmp	r2, #37	@ 0x25
 800d598:	d1f9      	bne.n	800d58e <_vfiprintf_r+0x7a>
 800d59a:	ebba 0b04 	subs.w	fp, sl, r4
 800d59e:	d00b      	beq.n	800d5b8 <_vfiprintf_r+0xa4>
 800d5a0:	465b      	mov	r3, fp
 800d5a2:	4622      	mov	r2, r4
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f7ff ffa1 	bl	800d4ee <__sfputs_r>
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	f000 80a7 	beq.w	800d700 <_vfiprintf_r+0x1ec>
 800d5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5b4:	445a      	add	r2, fp
 800d5b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 809f 	beq.w	800d700 <_vfiprintf_r+0x1ec>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5cc:	f10a 0a01 	add.w	sl, sl, #1
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	9307      	str	r3, [sp, #28]
 800d5d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5da:	4654      	mov	r4, sl
 800d5dc:	2205      	movs	r2, #5
 800d5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e2:	4853      	ldr	r0, [pc, #332]	@ (800d730 <_vfiprintf_r+0x21c>)
 800d5e4:	f000 fbce 	bl	800dd84 <memchr>
 800d5e8:	9a04      	ldr	r2, [sp, #16]
 800d5ea:	b9d8      	cbnz	r0, 800d624 <_vfiprintf_r+0x110>
 800d5ec:	06d1      	lsls	r1, r2, #27
 800d5ee:	bf44      	itt	mi
 800d5f0:	2320      	movmi	r3, #32
 800d5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5f6:	0713      	lsls	r3, r2, #28
 800d5f8:	bf44      	itt	mi
 800d5fa:	232b      	movmi	r3, #43	@ 0x2b
 800d5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d600:	f89a 3000 	ldrb.w	r3, [sl]
 800d604:	2b2a      	cmp	r3, #42	@ 0x2a
 800d606:	d015      	beq.n	800d634 <_vfiprintf_r+0x120>
 800d608:	4654      	mov	r4, sl
 800d60a:	2000      	movs	r0, #0
 800d60c:	f04f 0c0a 	mov.w	ip, #10
 800d610:	9a07      	ldr	r2, [sp, #28]
 800d612:	4621      	mov	r1, r4
 800d614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d618:	3b30      	subs	r3, #48	@ 0x30
 800d61a:	2b09      	cmp	r3, #9
 800d61c:	d94b      	bls.n	800d6b6 <_vfiprintf_r+0x1a2>
 800d61e:	b1b0      	cbz	r0, 800d64e <_vfiprintf_r+0x13a>
 800d620:	9207      	str	r2, [sp, #28]
 800d622:	e014      	b.n	800d64e <_vfiprintf_r+0x13a>
 800d624:	eba0 0308 	sub.w	r3, r0, r8
 800d628:	fa09 f303 	lsl.w	r3, r9, r3
 800d62c:	4313      	orrs	r3, r2
 800d62e:	46a2      	mov	sl, r4
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	e7d2      	b.n	800d5da <_vfiprintf_r+0xc6>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	1d19      	adds	r1, r3, #4
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	9103      	str	r1, [sp, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	bfbb      	ittet	lt
 800d640:	425b      	neglt	r3, r3
 800d642:	f042 0202 	orrlt.w	r2, r2, #2
 800d646:	9307      	strge	r3, [sp, #28]
 800d648:	9307      	strlt	r3, [sp, #28]
 800d64a:	bfb8      	it	lt
 800d64c:	9204      	strlt	r2, [sp, #16]
 800d64e:	7823      	ldrb	r3, [r4, #0]
 800d650:	2b2e      	cmp	r3, #46	@ 0x2e
 800d652:	d10a      	bne.n	800d66a <_vfiprintf_r+0x156>
 800d654:	7863      	ldrb	r3, [r4, #1]
 800d656:	2b2a      	cmp	r3, #42	@ 0x2a
 800d658:	d132      	bne.n	800d6c0 <_vfiprintf_r+0x1ac>
 800d65a:	9b03      	ldr	r3, [sp, #12]
 800d65c:	3402      	adds	r4, #2
 800d65e:	1d1a      	adds	r2, r3, #4
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	9203      	str	r2, [sp, #12]
 800d664:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d668:	9305      	str	r3, [sp, #20]
 800d66a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d734 <_vfiprintf_r+0x220>
 800d66e:	2203      	movs	r2, #3
 800d670:	4650      	mov	r0, sl
 800d672:	7821      	ldrb	r1, [r4, #0]
 800d674:	f000 fb86 	bl	800dd84 <memchr>
 800d678:	b138      	cbz	r0, 800d68a <_vfiprintf_r+0x176>
 800d67a:	2240      	movs	r2, #64	@ 0x40
 800d67c:	9b04      	ldr	r3, [sp, #16]
 800d67e:	eba0 000a 	sub.w	r0, r0, sl
 800d682:	4082      	lsls	r2, r0
 800d684:	4313      	orrs	r3, r2
 800d686:	3401      	adds	r4, #1
 800d688:	9304      	str	r3, [sp, #16]
 800d68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68e:	2206      	movs	r2, #6
 800d690:	4829      	ldr	r0, [pc, #164]	@ (800d738 <_vfiprintf_r+0x224>)
 800d692:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d696:	f000 fb75 	bl	800dd84 <memchr>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d03f      	beq.n	800d71e <_vfiprintf_r+0x20a>
 800d69e:	4b27      	ldr	r3, [pc, #156]	@ (800d73c <_vfiprintf_r+0x228>)
 800d6a0:	bb1b      	cbnz	r3, 800d6ea <_vfiprintf_r+0x1d6>
 800d6a2:	9b03      	ldr	r3, [sp, #12]
 800d6a4:	3307      	adds	r3, #7
 800d6a6:	f023 0307 	bic.w	r3, r3, #7
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	9303      	str	r3, [sp, #12]
 800d6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b0:	443b      	add	r3, r7
 800d6b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b4:	e76a      	b.n	800d58c <_vfiprintf_r+0x78>
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6be:	e7a8      	b.n	800d612 <_vfiprintf_r+0xfe>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f04f 0c0a 	mov.w	ip, #10
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	3401      	adds	r4, #1
 800d6ca:	9305      	str	r3, [sp, #20]
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6d2:	3a30      	subs	r2, #48	@ 0x30
 800d6d4:	2a09      	cmp	r2, #9
 800d6d6:	d903      	bls.n	800d6e0 <_vfiprintf_r+0x1cc>
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d0c6      	beq.n	800d66a <_vfiprintf_r+0x156>
 800d6dc:	9105      	str	r1, [sp, #20]
 800d6de:	e7c4      	b.n	800d66a <_vfiprintf_r+0x156>
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6e8:	e7f0      	b.n	800d6cc <_vfiprintf_r+0x1b8>
 800d6ea:	ab03      	add	r3, sp, #12
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	462a      	mov	r2, r5
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4b13      	ldr	r3, [pc, #76]	@ (800d740 <_vfiprintf_r+0x22c>)
 800d6f4:	a904      	add	r1, sp, #16
 800d6f6:	f3af 8000 	nop.w
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	1c78      	adds	r0, r7, #1
 800d6fe:	d1d6      	bne.n	800d6ae <_vfiprintf_r+0x19a>
 800d700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d702:	07d9      	lsls	r1, r3, #31
 800d704:	d405      	bmi.n	800d712 <_vfiprintf_r+0x1fe>
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	059a      	lsls	r2, r3, #22
 800d70a:	d402      	bmi.n	800d712 <_vfiprintf_r+0x1fe>
 800d70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d70e:	f7ff fdcd 	bl	800d2ac <__retarget_lock_release_recursive>
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	065b      	lsls	r3, r3, #25
 800d716:	f53f af1f 	bmi.w	800d558 <_vfiprintf_r+0x44>
 800d71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d71c:	e71e      	b.n	800d55c <_vfiprintf_r+0x48>
 800d71e:	ab03      	add	r3, sp, #12
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	462a      	mov	r2, r5
 800d724:	4630      	mov	r0, r6
 800d726:	4b06      	ldr	r3, [pc, #24]	@ (800d740 <_vfiprintf_r+0x22c>)
 800d728:	a904      	add	r1, sp, #16
 800d72a:	f000 f87d 	bl	800d828 <_printf_i>
 800d72e:	e7e4      	b.n	800d6fa <_vfiprintf_r+0x1e6>
 800d730:	0800e1fc 	.word	0x0800e1fc
 800d734:	0800e202 	.word	0x0800e202
 800d738:	0800e206 	.word	0x0800e206
 800d73c:	00000000 	.word	0x00000000
 800d740:	0800d4ef 	.word	0x0800d4ef

0800d744 <_printf_common>:
 800d744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d748:	4616      	mov	r6, r2
 800d74a:	4698      	mov	r8, r3
 800d74c:	688a      	ldr	r2, [r1, #8]
 800d74e:	690b      	ldr	r3, [r1, #16]
 800d750:	4607      	mov	r7, r0
 800d752:	4293      	cmp	r3, r2
 800d754:	bfb8      	it	lt
 800d756:	4613      	movlt	r3, r2
 800d758:	6033      	str	r3, [r6, #0]
 800d75a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d75e:	460c      	mov	r4, r1
 800d760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d764:	b10a      	cbz	r2, 800d76a <_printf_common+0x26>
 800d766:	3301      	adds	r3, #1
 800d768:	6033      	str	r3, [r6, #0]
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	0699      	lsls	r1, r3, #26
 800d76e:	bf42      	ittt	mi
 800d770:	6833      	ldrmi	r3, [r6, #0]
 800d772:	3302      	addmi	r3, #2
 800d774:	6033      	strmi	r3, [r6, #0]
 800d776:	6825      	ldr	r5, [r4, #0]
 800d778:	f015 0506 	ands.w	r5, r5, #6
 800d77c:	d106      	bne.n	800d78c <_printf_common+0x48>
 800d77e:	f104 0a19 	add.w	sl, r4, #25
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	6832      	ldr	r2, [r6, #0]
 800d786:	1a9b      	subs	r3, r3, r2
 800d788:	42ab      	cmp	r3, r5
 800d78a:	dc2b      	bgt.n	800d7e4 <_printf_common+0xa0>
 800d78c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d790:	6822      	ldr	r2, [r4, #0]
 800d792:	3b00      	subs	r3, #0
 800d794:	bf18      	it	ne
 800d796:	2301      	movne	r3, #1
 800d798:	0692      	lsls	r2, r2, #26
 800d79a:	d430      	bmi.n	800d7fe <_printf_common+0xba>
 800d79c:	4641      	mov	r1, r8
 800d79e:	4638      	mov	r0, r7
 800d7a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7a4:	47c8      	blx	r9
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d023      	beq.n	800d7f2 <_printf_common+0xae>
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	6922      	ldr	r2, [r4, #16]
 800d7ae:	f003 0306 	and.w	r3, r3, #6
 800d7b2:	2b04      	cmp	r3, #4
 800d7b4:	bf14      	ite	ne
 800d7b6:	2500      	movne	r5, #0
 800d7b8:	6833      	ldreq	r3, [r6, #0]
 800d7ba:	f04f 0600 	mov.w	r6, #0
 800d7be:	bf08      	it	eq
 800d7c0:	68e5      	ldreq	r5, [r4, #12]
 800d7c2:	f104 041a 	add.w	r4, r4, #26
 800d7c6:	bf08      	it	eq
 800d7c8:	1aed      	subeq	r5, r5, r3
 800d7ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d7ce:	bf08      	it	eq
 800d7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	bfc4      	itt	gt
 800d7d8:	1a9b      	subgt	r3, r3, r2
 800d7da:	18ed      	addgt	r5, r5, r3
 800d7dc:	42b5      	cmp	r5, r6
 800d7de:	d11a      	bne.n	800d816 <_printf_common+0xd2>
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	e008      	b.n	800d7f6 <_printf_common+0xb2>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	4652      	mov	r2, sl
 800d7e8:	4641      	mov	r1, r8
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	47c8      	blx	r9
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	d103      	bne.n	800d7fa <_printf_common+0xb6>
 800d7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fa:	3501      	adds	r5, #1
 800d7fc:	e7c1      	b.n	800d782 <_printf_common+0x3e>
 800d7fe:	2030      	movs	r0, #48	@ 0x30
 800d800:	18e1      	adds	r1, r4, r3
 800d802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d80c:	4422      	add	r2, r4
 800d80e:	3302      	adds	r3, #2
 800d810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d814:	e7c2      	b.n	800d79c <_printf_common+0x58>
 800d816:	2301      	movs	r3, #1
 800d818:	4622      	mov	r2, r4
 800d81a:	4641      	mov	r1, r8
 800d81c:	4638      	mov	r0, r7
 800d81e:	47c8      	blx	r9
 800d820:	3001      	adds	r0, #1
 800d822:	d0e6      	beq.n	800d7f2 <_printf_common+0xae>
 800d824:	3601      	adds	r6, #1
 800d826:	e7d9      	b.n	800d7dc <_printf_common+0x98>

0800d828 <_printf_i>:
 800d828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d82c:	7e0f      	ldrb	r7, [r1, #24]
 800d82e:	4691      	mov	r9, r2
 800d830:	2f78      	cmp	r7, #120	@ 0x78
 800d832:	4680      	mov	r8, r0
 800d834:	460c      	mov	r4, r1
 800d836:	469a      	mov	sl, r3
 800d838:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d83a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d83e:	d807      	bhi.n	800d850 <_printf_i+0x28>
 800d840:	2f62      	cmp	r7, #98	@ 0x62
 800d842:	d80a      	bhi.n	800d85a <_printf_i+0x32>
 800d844:	2f00      	cmp	r7, #0
 800d846:	f000 80d1 	beq.w	800d9ec <_printf_i+0x1c4>
 800d84a:	2f58      	cmp	r7, #88	@ 0x58
 800d84c:	f000 80b8 	beq.w	800d9c0 <_printf_i+0x198>
 800d850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d858:	e03a      	b.n	800d8d0 <_printf_i+0xa8>
 800d85a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d85e:	2b15      	cmp	r3, #21
 800d860:	d8f6      	bhi.n	800d850 <_printf_i+0x28>
 800d862:	a101      	add	r1, pc, #4	@ (adr r1, 800d868 <_printf_i+0x40>)
 800d864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d868:	0800d8c1 	.word	0x0800d8c1
 800d86c:	0800d8d5 	.word	0x0800d8d5
 800d870:	0800d851 	.word	0x0800d851
 800d874:	0800d851 	.word	0x0800d851
 800d878:	0800d851 	.word	0x0800d851
 800d87c:	0800d851 	.word	0x0800d851
 800d880:	0800d8d5 	.word	0x0800d8d5
 800d884:	0800d851 	.word	0x0800d851
 800d888:	0800d851 	.word	0x0800d851
 800d88c:	0800d851 	.word	0x0800d851
 800d890:	0800d851 	.word	0x0800d851
 800d894:	0800d9d3 	.word	0x0800d9d3
 800d898:	0800d8ff 	.word	0x0800d8ff
 800d89c:	0800d98d 	.word	0x0800d98d
 800d8a0:	0800d851 	.word	0x0800d851
 800d8a4:	0800d851 	.word	0x0800d851
 800d8a8:	0800d9f5 	.word	0x0800d9f5
 800d8ac:	0800d851 	.word	0x0800d851
 800d8b0:	0800d8ff 	.word	0x0800d8ff
 800d8b4:	0800d851 	.word	0x0800d851
 800d8b8:	0800d851 	.word	0x0800d851
 800d8bc:	0800d995 	.word	0x0800d995
 800d8c0:	6833      	ldr	r3, [r6, #0]
 800d8c2:	1d1a      	adds	r2, r3, #4
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6032      	str	r2, [r6, #0]
 800d8c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e09c      	b.n	800da0e <_printf_i+0x1e6>
 800d8d4:	6833      	ldr	r3, [r6, #0]
 800d8d6:	6820      	ldr	r0, [r4, #0]
 800d8d8:	1d19      	adds	r1, r3, #4
 800d8da:	6031      	str	r1, [r6, #0]
 800d8dc:	0606      	lsls	r6, r0, #24
 800d8de:	d501      	bpl.n	800d8e4 <_printf_i+0xbc>
 800d8e0:	681d      	ldr	r5, [r3, #0]
 800d8e2:	e003      	b.n	800d8ec <_printf_i+0xc4>
 800d8e4:	0645      	lsls	r5, r0, #25
 800d8e6:	d5fb      	bpl.n	800d8e0 <_printf_i+0xb8>
 800d8e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8ec:	2d00      	cmp	r5, #0
 800d8ee:	da03      	bge.n	800d8f8 <_printf_i+0xd0>
 800d8f0:	232d      	movs	r3, #45	@ 0x2d
 800d8f2:	426d      	negs	r5, r5
 800d8f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8f8:	230a      	movs	r3, #10
 800d8fa:	4858      	ldr	r0, [pc, #352]	@ (800da5c <_printf_i+0x234>)
 800d8fc:	e011      	b.n	800d922 <_printf_i+0xfa>
 800d8fe:	6821      	ldr	r1, [r4, #0]
 800d900:	6833      	ldr	r3, [r6, #0]
 800d902:	0608      	lsls	r0, r1, #24
 800d904:	f853 5b04 	ldr.w	r5, [r3], #4
 800d908:	d402      	bmi.n	800d910 <_printf_i+0xe8>
 800d90a:	0649      	lsls	r1, r1, #25
 800d90c:	bf48      	it	mi
 800d90e:	b2ad      	uxthmi	r5, r5
 800d910:	2f6f      	cmp	r7, #111	@ 0x6f
 800d912:	6033      	str	r3, [r6, #0]
 800d914:	bf14      	ite	ne
 800d916:	230a      	movne	r3, #10
 800d918:	2308      	moveq	r3, #8
 800d91a:	4850      	ldr	r0, [pc, #320]	@ (800da5c <_printf_i+0x234>)
 800d91c:	2100      	movs	r1, #0
 800d91e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d922:	6866      	ldr	r6, [r4, #4]
 800d924:	2e00      	cmp	r6, #0
 800d926:	60a6      	str	r6, [r4, #8]
 800d928:	db05      	blt.n	800d936 <_printf_i+0x10e>
 800d92a:	6821      	ldr	r1, [r4, #0]
 800d92c:	432e      	orrs	r6, r5
 800d92e:	f021 0104 	bic.w	r1, r1, #4
 800d932:	6021      	str	r1, [r4, #0]
 800d934:	d04b      	beq.n	800d9ce <_printf_i+0x1a6>
 800d936:	4616      	mov	r6, r2
 800d938:	fbb5 f1f3 	udiv	r1, r5, r3
 800d93c:	fb03 5711 	mls	r7, r3, r1, r5
 800d940:	5dc7      	ldrb	r7, [r0, r7]
 800d942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d946:	462f      	mov	r7, r5
 800d948:	42bb      	cmp	r3, r7
 800d94a:	460d      	mov	r5, r1
 800d94c:	d9f4      	bls.n	800d938 <_printf_i+0x110>
 800d94e:	2b08      	cmp	r3, #8
 800d950:	d10b      	bne.n	800d96a <_printf_i+0x142>
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	07df      	lsls	r7, r3, #31
 800d956:	d508      	bpl.n	800d96a <_printf_i+0x142>
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	6861      	ldr	r1, [r4, #4]
 800d95c:	4299      	cmp	r1, r3
 800d95e:	bfde      	ittt	le
 800d960:	2330      	movle	r3, #48	@ 0x30
 800d962:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d96a:	1b92      	subs	r2, r2, r6
 800d96c:	6122      	str	r2, [r4, #16]
 800d96e:	464b      	mov	r3, r9
 800d970:	4621      	mov	r1, r4
 800d972:	4640      	mov	r0, r8
 800d974:	f8cd a000 	str.w	sl, [sp]
 800d978:	aa03      	add	r2, sp, #12
 800d97a:	f7ff fee3 	bl	800d744 <_printf_common>
 800d97e:	3001      	adds	r0, #1
 800d980:	d14a      	bne.n	800da18 <_printf_i+0x1f0>
 800d982:	f04f 30ff 	mov.w	r0, #4294967295
 800d986:	b004      	add	sp, #16
 800d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	f043 0320 	orr.w	r3, r3, #32
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	2778      	movs	r7, #120	@ 0x78
 800d996:	4832      	ldr	r0, [pc, #200]	@ (800da60 <_printf_i+0x238>)
 800d998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	6831      	ldr	r1, [r6, #0]
 800d9a0:	061f      	lsls	r7, r3, #24
 800d9a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9a6:	d402      	bmi.n	800d9ae <_printf_i+0x186>
 800d9a8:	065f      	lsls	r7, r3, #25
 800d9aa:	bf48      	it	mi
 800d9ac:	b2ad      	uxthmi	r5, r5
 800d9ae:	6031      	str	r1, [r6, #0]
 800d9b0:	07d9      	lsls	r1, r3, #31
 800d9b2:	bf44      	itt	mi
 800d9b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d9b8:	6023      	strmi	r3, [r4, #0]
 800d9ba:	b11d      	cbz	r5, 800d9c4 <_printf_i+0x19c>
 800d9bc:	2310      	movs	r3, #16
 800d9be:	e7ad      	b.n	800d91c <_printf_i+0xf4>
 800d9c0:	4826      	ldr	r0, [pc, #152]	@ (800da5c <_printf_i+0x234>)
 800d9c2:	e7e9      	b.n	800d998 <_printf_i+0x170>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	f023 0320 	bic.w	r3, r3, #32
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	e7f6      	b.n	800d9bc <_printf_i+0x194>
 800d9ce:	4616      	mov	r6, r2
 800d9d0:	e7bd      	b.n	800d94e <_printf_i+0x126>
 800d9d2:	6833      	ldr	r3, [r6, #0]
 800d9d4:	6825      	ldr	r5, [r4, #0]
 800d9d6:	1d18      	adds	r0, r3, #4
 800d9d8:	6961      	ldr	r1, [r4, #20]
 800d9da:	6030      	str	r0, [r6, #0]
 800d9dc:	062e      	lsls	r6, r5, #24
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	d501      	bpl.n	800d9e6 <_printf_i+0x1be>
 800d9e2:	6019      	str	r1, [r3, #0]
 800d9e4:	e002      	b.n	800d9ec <_printf_i+0x1c4>
 800d9e6:	0668      	lsls	r0, r5, #25
 800d9e8:	d5fb      	bpl.n	800d9e2 <_printf_i+0x1ba>
 800d9ea:	8019      	strh	r1, [r3, #0]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	4616      	mov	r6, r2
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	e7bc      	b.n	800d96e <_printf_i+0x146>
 800d9f4:	6833      	ldr	r3, [r6, #0]
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	1d1a      	adds	r2, r3, #4
 800d9fa:	6032      	str	r2, [r6, #0]
 800d9fc:	681e      	ldr	r6, [r3, #0]
 800d9fe:	6862      	ldr	r2, [r4, #4]
 800da00:	4630      	mov	r0, r6
 800da02:	f000 f9bf 	bl	800dd84 <memchr>
 800da06:	b108      	cbz	r0, 800da0c <_printf_i+0x1e4>
 800da08:	1b80      	subs	r0, r0, r6
 800da0a:	6060      	str	r0, [r4, #4]
 800da0c:	6863      	ldr	r3, [r4, #4]
 800da0e:	6123      	str	r3, [r4, #16]
 800da10:	2300      	movs	r3, #0
 800da12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da16:	e7aa      	b.n	800d96e <_printf_i+0x146>
 800da18:	4632      	mov	r2, r6
 800da1a:	4649      	mov	r1, r9
 800da1c:	4640      	mov	r0, r8
 800da1e:	6923      	ldr	r3, [r4, #16]
 800da20:	47d0      	blx	sl
 800da22:	3001      	adds	r0, #1
 800da24:	d0ad      	beq.n	800d982 <_printf_i+0x15a>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	079b      	lsls	r3, r3, #30
 800da2a:	d413      	bmi.n	800da54 <_printf_i+0x22c>
 800da2c:	68e0      	ldr	r0, [r4, #12]
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	4298      	cmp	r0, r3
 800da32:	bfb8      	it	lt
 800da34:	4618      	movlt	r0, r3
 800da36:	e7a6      	b.n	800d986 <_printf_i+0x15e>
 800da38:	2301      	movs	r3, #1
 800da3a:	4632      	mov	r2, r6
 800da3c:	4649      	mov	r1, r9
 800da3e:	4640      	mov	r0, r8
 800da40:	47d0      	blx	sl
 800da42:	3001      	adds	r0, #1
 800da44:	d09d      	beq.n	800d982 <_printf_i+0x15a>
 800da46:	3501      	adds	r5, #1
 800da48:	68e3      	ldr	r3, [r4, #12]
 800da4a:	9903      	ldr	r1, [sp, #12]
 800da4c:	1a5b      	subs	r3, r3, r1
 800da4e:	42ab      	cmp	r3, r5
 800da50:	dcf2      	bgt.n	800da38 <_printf_i+0x210>
 800da52:	e7eb      	b.n	800da2c <_printf_i+0x204>
 800da54:	2500      	movs	r5, #0
 800da56:	f104 0619 	add.w	r6, r4, #25
 800da5a:	e7f5      	b.n	800da48 <_printf_i+0x220>
 800da5c:	0800e20d 	.word	0x0800e20d
 800da60:	0800e21e 	.word	0x0800e21e

0800da64 <__sflush_r>:
 800da64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	0716      	lsls	r6, r2, #28
 800da6c:	4605      	mov	r5, r0
 800da6e:	460c      	mov	r4, r1
 800da70:	d454      	bmi.n	800db1c <__sflush_r+0xb8>
 800da72:	684b      	ldr	r3, [r1, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	dc02      	bgt.n	800da7e <__sflush_r+0x1a>
 800da78:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	dd48      	ble.n	800db10 <__sflush_r+0xac>
 800da7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da80:	2e00      	cmp	r6, #0
 800da82:	d045      	beq.n	800db10 <__sflush_r+0xac>
 800da84:	2300      	movs	r3, #0
 800da86:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da8a:	682f      	ldr	r7, [r5, #0]
 800da8c:	6a21      	ldr	r1, [r4, #32]
 800da8e:	602b      	str	r3, [r5, #0]
 800da90:	d030      	beq.n	800daf4 <__sflush_r+0x90>
 800da92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	0759      	lsls	r1, r3, #29
 800da98:	d505      	bpl.n	800daa6 <__sflush_r+0x42>
 800da9a:	6863      	ldr	r3, [r4, #4]
 800da9c:	1ad2      	subs	r2, r2, r3
 800da9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daa0:	b10b      	cbz	r3, 800daa6 <__sflush_r+0x42>
 800daa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800daa4:	1ad2      	subs	r2, r2, r3
 800daa6:	2300      	movs	r3, #0
 800daa8:	4628      	mov	r0, r5
 800daaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daac:	6a21      	ldr	r1, [r4, #32]
 800daae:	47b0      	blx	r6
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	d106      	bne.n	800dac4 <__sflush_r+0x60>
 800dab6:	6829      	ldr	r1, [r5, #0]
 800dab8:	291d      	cmp	r1, #29
 800daba:	d82b      	bhi.n	800db14 <__sflush_r+0xb0>
 800dabc:	4a28      	ldr	r2, [pc, #160]	@ (800db60 <__sflush_r+0xfc>)
 800dabe:	40ca      	lsrs	r2, r1
 800dac0:	07d6      	lsls	r6, r2, #31
 800dac2:	d527      	bpl.n	800db14 <__sflush_r+0xb0>
 800dac4:	2200      	movs	r2, #0
 800dac6:	6062      	str	r2, [r4, #4]
 800dac8:	6922      	ldr	r2, [r4, #16]
 800daca:	04d9      	lsls	r1, r3, #19
 800dacc:	6022      	str	r2, [r4, #0]
 800dace:	d504      	bpl.n	800dada <__sflush_r+0x76>
 800dad0:	1c42      	adds	r2, r0, #1
 800dad2:	d101      	bne.n	800dad8 <__sflush_r+0x74>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b903      	cbnz	r3, 800dada <__sflush_r+0x76>
 800dad8:	6560      	str	r0, [r4, #84]	@ 0x54
 800dada:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dadc:	602f      	str	r7, [r5, #0]
 800dade:	b1b9      	cbz	r1, 800db10 <__sflush_r+0xac>
 800dae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dae4:	4299      	cmp	r1, r3
 800dae6:	d002      	beq.n	800daee <__sflush_r+0x8a>
 800dae8:	4628      	mov	r0, r5
 800daea:	f7ff fbf5 	bl	800d2d8 <_free_r>
 800daee:	2300      	movs	r3, #0
 800daf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800daf2:	e00d      	b.n	800db10 <__sflush_r+0xac>
 800daf4:	2301      	movs	r3, #1
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b0      	blx	r6
 800dafa:	4602      	mov	r2, r0
 800dafc:	1c50      	adds	r0, r2, #1
 800dafe:	d1c9      	bne.n	800da94 <__sflush_r+0x30>
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0c6      	beq.n	800da94 <__sflush_r+0x30>
 800db06:	2b1d      	cmp	r3, #29
 800db08:	d001      	beq.n	800db0e <__sflush_r+0xaa>
 800db0a:	2b16      	cmp	r3, #22
 800db0c:	d11d      	bne.n	800db4a <__sflush_r+0xe6>
 800db0e:	602f      	str	r7, [r5, #0]
 800db10:	2000      	movs	r0, #0
 800db12:	e021      	b.n	800db58 <__sflush_r+0xf4>
 800db14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db18:	b21b      	sxth	r3, r3
 800db1a:	e01a      	b.n	800db52 <__sflush_r+0xee>
 800db1c:	690f      	ldr	r7, [r1, #16]
 800db1e:	2f00      	cmp	r7, #0
 800db20:	d0f6      	beq.n	800db10 <__sflush_r+0xac>
 800db22:	0793      	lsls	r3, r2, #30
 800db24:	bf18      	it	ne
 800db26:	2300      	movne	r3, #0
 800db28:	680e      	ldr	r6, [r1, #0]
 800db2a:	bf08      	it	eq
 800db2c:	694b      	ldreq	r3, [r1, #20]
 800db2e:	1bf6      	subs	r6, r6, r7
 800db30:	600f      	str	r7, [r1, #0]
 800db32:	608b      	str	r3, [r1, #8]
 800db34:	2e00      	cmp	r6, #0
 800db36:	ddeb      	ble.n	800db10 <__sflush_r+0xac>
 800db38:	4633      	mov	r3, r6
 800db3a:	463a      	mov	r2, r7
 800db3c:	4628      	mov	r0, r5
 800db3e:	6a21      	ldr	r1, [r4, #32]
 800db40:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800db44:	47e0      	blx	ip
 800db46:	2800      	cmp	r0, #0
 800db48:	dc07      	bgt.n	800db5a <__sflush_r+0xf6>
 800db4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db52:	f04f 30ff 	mov.w	r0, #4294967295
 800db56:	81a3      	strh	r3, [r4, #12]
 800db58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db5a:	4407      	add	r7, r0
 800db5c:	1a36      	subs	r6, r6, r0
 800db5e:	e7e9      	b.n	800db34 <__sflush_r+0xd0>
 800db60:	20400001 	.word	0x20400001

0800db64 <_fflush_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	690b      	ldr	r3, [r1, #16]
 800db68:	4605      	mov	r5, r0
 800db6a:	460c      	mov	r4, r1
 800db6c:	b913      	cbnz	r3, 800db74 <_fflush_r+0x10>
 800db6e:	2500      	movs	r5, #0
 800db70:	4628      	mov	r0, r5
 800db72:	bd38      	pop	{r3, r4, r5, pc}
 800db74:	b118      	cbz	r0, 800db7e <_fflush_r+0x1a>
 800db76:	6a03      	ldr	r3, [r0, #32]
 800db78:	b90b      	cbnz	r3, 800db7e <_fflush_r+0x1a>
 800db7a:	f7ff fa81 	bl	800d080 <__sinit>
 800db7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0f3      	beq.n	800db6e <_fflush_r+0xa>
 800db86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db88:	07d0      	lsls	r0, r2, #31
 800db8a:	d404      	bmi.n	800db96 <_fflush_r+0x32>
 800db8c:	0599      	lsls	r1, r3, #22
 800db8e:	d402      	bmi.n	800db96 <_fflush_r+0x32>
 800db90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db92:	f7ff fb8a 	bl	800d2aa <__retarget_lock_acquire_recursive>
 800db96:	4628      	mov	r0, r5
 800db98:	4621      	mov	r1, r4
 800db9a:	f7ff ff63 	bl	800da64 <__sflush_r>
 800db9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dba0:	4605      	mov	r5, r0
 800dba2:	07da      	lsls	r2, r3, #31
 800dba4:	d4e4      	bmi.n	800db70 <_fflush_r+0xc>
 800dba6:	89a3      	ldrh	r3, [r4, #12]
 800dba8:	059b      	lsls	r3, r3, #22
 800dbaa:	d4e1      	bmi.n	800db70 <_fflush_r+0xc>
 800dbac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbae:	f7ff fb7d 	bl	800d2ac <__retarget_lock_release_recursive>
 800dbb2:	e7dd      	b.n	800db70 <_fflush_r+0xc>

0800dbb4 <__swbuf_r>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	460e      	mov	r6, r1
 800dbb8:	4614      	mov	r4, r2
 800dbba:	4605      	mov	r5, r0
 800dbbc:	b118      	cbz	r0, 800dbc6 <__swbuf_r+0x12>
 800dbbe:	6a03      	ldr	r3, [r0, #32]
 800dbc0:	b90b      	cbnz	r3, 800dbc6 <__swbuf_r+0x12>
 800dbc2:	f7ff fa5d 	bl	800d080 <__sinit>
 800dbc6:	69a3      	ldr	r3, [r4, #24]
 800dbc8:	60a3      	str	r3, [r4, #8]
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	071a      	lsls	r2, r3, #28
 800dbce:	d501      	bpl.n	800dbd4 <__swbuf_r+0x20>
 800dbd0:	6923      	ldr	r3, [r4, #16]
 800dbd2:	b943      	cbnz	r3, 800dbe6 <__swbuf_r+0x32>
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	f000 f82a 	bl	800dc30 <__swsetup_r>
 800dbdc:	b118      	cbz	r0, 800dbe6 <__swbuf_r+0x32>
 800dbde:	f04f 37ff 	mov.w	r7, #4294967295
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	6922      	ldr	r2, [r4, #16]
 800dbea:	b2f6      	uxtb	r6, r6
 800dbec:	1a98      	subs	r0, r3, r2
 800dbee:	6963      	ldr	r3, [r4, #20]
 800dbf0:	4637      	mov	r7, r6
 800dbf2:	4283      	cmp	r3, r0
 800dbf4:	dc05      	bgt.n	800dc02 <__swbuf_r+0x4e>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f7ff ffb3 	bl	800db64 <_fflush_r>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	d1ed      	bne.n	800dbde <__swbuf_r+0x2a>
 800dc02:	68a3      	ldr	r3, [r4, #8]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	60a3      	str	r3, [r4, #8]
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	6022      	str	r2, [r4, #0]
 800dc0e:	701e      	strb	r6, [r3, #0]
 800dc10:	6962      	ldr	r2, [r4, #20]
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d004      	beq.n	800dc22 <__swbuf_r+0x6e>
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	07db      	lsls	r3, r3, #31
 800dc1c:	d5e1      	bpl.n	800dbe2 <__swbuf_r+0x2e>
 800dc1e:	2e0a      	cmp	r6, #10
 800dc20:	d1df      	bne.n	800dbe2 <__swbuf_r+0x2e>
 800dc22:	4621      	mov	r1, r4
 800dc24:	4628      	mov	r0, r5
 800dc26:	f7ff ff9d 	bl	800db64 <_fflush_r>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d0d9      	beq.n	800dbe2 <__swbuf_r+0x2e>
 800dc2e:	e7d6      	b.n	800dbde <__swbuf_r+0x2a>

0800dc30 <__swsetup_r>:
 800dc30:	b538      	push	{r3, r4, r5, lr}
 800dc32:	4b29      	ldr	r3, [pc, #164]	@ (800dcd8 <__swsetup_r+0xa8>)
 800dc34:	4605      	mov	r5, r0
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	460c      	mov	r4, r1
 800dc3a:	b118      	cbz	r0, 800dc44 <__swsetup_r+0x14>
 800dc3c:	6a03      	ldr	r3, [r0, #32]
 800dc3e:	b90b      	cbnz	r3, 800dc44 <__swsetup_r+0x14>
 800dc40:	f7ff fa1e 	bl	800d080 <__sinit>
 800dc44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc48:	0719      	lsls	r1, r3, #28
 800dc4a:	d422      	bmi.n	800dc92 <__swsetup_r+0x62>
 800dc4c:	06da      	lsls	r2, r3, #27
 800dc4e:	d407      	bmi.n	800dc60 <__swsetup_r+0x30>
 800dc50:	2209      	movs	r2, #9
 800dc52:	602a      	str	r2, [r5, #0]
 800dc54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	e033      	b.n	800dcc8 <__swsetup_r+0x98>
 800dc60:	0758      	lsls	r0, r3, #29
 800dc62:	d512      	bpl.n	800dc8a <__swsetup_r+0x5a>
 800dc64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc66:	b141      	cbz	r1, 800dc7a <__swsetup_r+0x4a>
 800dc68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc6c:	4299      	cmp	r1, r3
 800dc6e:	d002      	beq.n	800dc76 <__swsetup_r+0x46>
 800dc70:	4628      	mov	r0, r5
 800dc72:	f7ff fb31 	bl	800d2d8 <_free_r>
 800dc76:	2300      	movs	r3, #0
 800dc78:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc7a:	89a3      	ldrh	r3, [r4, #12]
 800dc7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc80:	81a3      	strh	r3, [r4, #12]
 800dc82:	2300      	movs	r3, #0
 800dc84:	6063      	str	r3, [r4, #4]
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	f043 0308 	orr.w	r3, r3, #8
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	6923      	ldr	r3, [r4, #16]
 800dc94:	b94b      	cbnz	r3, 800dcaa <__swsetup_r+0x7a>
 800dc96:	89a3      	ldrh	r3, [r4, #12]
 800dc98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dca0:	d003      	beq.n	800dcaa <__swsetup_r+0x7a>
 800dca2:	4621      	mov	r1, r4
 800dca4:	4628      	mov	r0, r5
 800dca6:	f000 f8a0 	bl	800ddea <__smakebuf_r>
 800dcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcae:	f013 0201 	ands.w	r2, r3, #1
 800dcb2:	d00a      	beq.n	800dcca <__swsetup_r+0x9a>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	60a2      	str	r2, [r4, #8]
 800dcb8:	6962      	ldr	r2, [r4, #20]
 800dcba:	4252      	negs	r2, r2
 800dcbc:	61a2      	str	r2, [r4, #24]
 800dcbe:	6922      	ldr	r2, [r4, #16]
 800dcc0:	b942      	cbnz	r2, 800dcd4 <__swsetup_r+0xa4>
 800dcc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcc6:	d1c5      	bne.n	800dc54 <__swsetup_r+0x24>
 800dcc8:	bd38      	pop	{r3, r4, r5, pc}
 800dcca:	0799      	lsls	r1, r3, #30
 800dccc:	bf58      	it	pl
 800dcce:	6962      	ldrpl	r2, [r4, #20]
 800dcd0:	60a2      	str	r2, [r4, #8]
 800dcd2:	e7f4      	b.n	800dcbe <__swsetup_r+0x8e>
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	e7f7      	b.n	800dcc8 <__swsetup_r+0x98>
 800dcd8:	2000011c 	.word	0x2000011c

0800dcdc <_raise_r>:
 800dcdc:	291f      	cmp	r1, #31
 800dcde:	b538      	push	{r3, r4, r5, lr}
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	d904      	bls.n	800dcf0 <_raise_r+0x14>
 800dce6:	2316      	movs	r3, #22
 800dce8:	6003      	str	r3, [r0, #0]
 800dcea:	f04f 30ff 	mov.w	r0, #4294967295
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcf2:	b112      	cbz	r2, 800dcfa <_raise_r+0x1e>
 800dcf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcf8:	b94b      	cbnz	r3, 800dd0e <_raise_r+0x32>
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f000 f830 	bl	800dd60 <_getpid_r>
 800dd00:	4622      	mov	r2, r4
 800dd02:	4601      	mov	r1, r0
 800dd04:	4628      	mov	r0, r5
 800dd06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd0a:	f000 b817 	b.w	800dd3c <_kill_r>
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d00a      	beq.n	800dd28 <_raise_r+0x4c>
 800dd12:	1c59      	adds	r1, r3, #1
 800dd14:	d103      	bne.n	800dd1e <_raise_r+0x42>
 800dd16:	2316      	movs	r3, #22
 800dd18:	6003      	str	r3, [r0, #0]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	e7e7      	b.n	800dcee <_raise_r+0x12>
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4620      	mov	r0, r4
 800dd22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd26:	4798      	blx	r3
 800dd28:	2000      	movs	r0, #0
 800dd2a:	e7e0      	b.n	800dcee <_raise_r+0x12>

0800dd2c <raise>:
 800dd2c:	4b02      	ldr	r3, [pc, #8]	@ (800dd38 <raise+0xc>)
 800dd2e:	4601      	mov	r1, r0
 800dd30:	6818      	ldr	r0, [r3, #0]
 800dd32:	f7ff bfd3 	b.w	800dcdc <_raise_r>
 800dd36:	bf00      	nop
 800dd38:	2000011c 	.word	0x2000011c

0800dd3c <_kill_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4d06      	ldr	r5, [pc, #24]	@ (800dd5c <_kill_r+0x20>)
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	4611      	mov	r1, r2
 800dd48:	602b      	str	r3, [r5, #0]
 800dd4a:	f7f7 f976 	bl	800503a <_kill>
 800dd4e:	1c43      	adds	r3, r0, #1
 800dd50:	d102      	bne.n	800dd58 <_kill_r+0x1c>
 800dd52:	682b      	ldr	r3, [r5, #0]
 800dd54:	b103      	cbz	r3, 800dd58 <_kill_r+0x1c>
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	bd38      	pop	{r3, r4, r5, pc}
 800dd5a:	bf00      	nop
 800dd5c:	200006b4 	.word	0x200006b4

0800dd60 <_getpid_r>:
 800dd60:	f7f7 b964 	b.w	800502c <_getpid>

0800dd64 <_sbrk_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	2300      	movs	r3, #0
 800dd68:	4d05      	ldr	r5, [pc, #20]	@ (800dd80 <_sbrk_r+0x1c>)
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	f7f7 f9e8 	bl	8005144 <_sbrk>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d102      	bne.n	800dd7e <_sbrk_r+0x1a>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	b103      	cbz	r3, 800dd7e <_sbrk_r+0x1a>
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	200006b4 	.word	0x200006b4

0800dd84 <memchr>:
 800dd84:	4603      	mov	r3, r0
 800dd86:	b510      	push	{r4, lr}
 800dd88:	b2c9      	uxtb	r1, r1
 800dd8a:	4402      	add	r2, r0
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	d101      	bne.n	800dd96 <memchr+0x12>
 800dd92:	2000      	movs	r0, #0
 800dd94:	e003      	b.n	800dd9e <memchr+0x1a>
 800dd96:	7804      	ldrb	r4, [r0, #0]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	428c      	cmp	r4, r1
 800dd9c:	d1f6      	bne.n	800dd8c <memchr+0x8>
 800dd9e:	bd10      	pop	{r4, pc}

0800dda0 <__swhatbuf_r>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	460c      	mov	r4, r1
 800dda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda8:	4615      	mov	r5, r2
 800ddaa:	2900      	cmp	r1, #0
 800ddac:	461e      	mov	r6, r3
 800ddae:	b096      	sub	sp, #88	@ 0x58
 800ddb0:	da0c      	bge.n	800ddcc <__swhatbuf_r+0x2c>
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddba:	bf14      	ite	ne
 800ddbc:	2340      	movne	r3, #64	@ 0x40
 800ddbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	6031      	str	r1, [r6, #0]
 800ddc6:	602b      	str	r3, [r5, #0]
 800ddc8:	b016      	add	sp, #88	@ 0x58
 800ddca:	bd70      	pop	{r4, r5, r6, pc}
 800ddcc:	466a      	mov	r2, sp
 800ddce:	f000 f849 	bl	800de64 <_fstat_r>
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	dbed      	blt.n	800ddb2 <__swhatbuf_r+0x12>
 800ddd6:	9901      	ldr	r1, [sp, #4]
 800ddd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dddc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dde0:	4259      	negs	r1, r3
 800dde2:	4159      	adcs	r1, r3
 800dde4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dde8:	e7eb      	b.n	800ddc2 <__swhatbuf_r+0x22>

0800ddea <__smakebuf_r>:
 800ddea:	898b      	ldrh	r3, [r1, #12]
 800ddec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddee:	079d      	lsls	r5, r3, #30
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	d507      	bpl.n	800de06 <__smakebuf_r+0x1c>
 800ddf6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddfa:	6023      	str	r3, [r4, #0]
 800ddfc:	6123      	str	r3, [r4, #16]
 800ddfe:	2301      	movs	r3, #1
 800de00:	6163      	str	r3, [r4, #20]
 800de02:	b003      	add	sp, #12
 800de04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de06:	466a      	mov	r2, sp
 800de08:	ab01      	add	r3, sp, #4
 800de0a:	f7ff ffc9 	bl	800dda0 <__swhatbuf_r>
 800de0e:	9f00      	ldr	r7, [sp, #0]
 800de10:	4605      	mov	r5, r0
 800de12:	4639      	mov	r1, r7
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff fac9 	bl	800d3ac <_malloc_r>
 800de1a:	b948      	cbnz	r0, 800de30 <__smakebuf_r+0x46>
 800de1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de20:	059a      	lsls	r2, r3, #22
 800de22:	d4ee      	bmi.n	800de02 <__smakebuf_r+0x18>
 800de24:	f023 0303 	bic.w	r3, r3, #3
 800de28:	f043 0302 	orr.w	r3, r3, #2
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	e7e2      	b.n	800ddf6 <__smakebuf_r+0xc>
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de3a:	81a3      	strh	r3, [r4, #12]
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	6020      	str	r0, [r4, #0]
 800de40:	b15b      	cbz	r3, 800de5a <__smakebuf_r+0x70>
 800de42:	4630      	mov	r0, r6
 800de44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de48:	f000 f81e 	bl	800de88 <_isatty_r>
 800de4c:	b128      	cbz	r0, 800de5a <__smakebuf_r+0x70>
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	f043 0301 	orr.w	r3, r3, #1
 800de58:	81a3      	strh	r3, [r4, #12]
 800de5a:	89a3      	ldrh	r3, [r4, #12]
 800de5c:	431d      	orrs	r5, r3
 800de5e:	81a5      	strh	r5, [r4, #12]
 800de60:	e7cf      	b.n	800de02 <__smakebuf_r+0x18>
	...

0800de64 <_fstat_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	2300      	movs	r3, #0
 800de68:	4d06      	ldr	r5, [pc, #24]	@ (800de84 <_fstat_r+0x20>)
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	4611      	mov	r1, r2
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f7f7 f941 	bl	80050f8 <_fstat>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d102      	bne.n	800de80 <_fstat_r+0x1c>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	b103      	cbz	r3, 800de80 <_fstat_r+0x1c>
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	bf00      	nop
 800de84:	200006b4 	.word	0x200006b4

0800de88 <_isatty_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	2300      	movs	r3, #0
 800de8c:	4d05      	ldr	r5, [pc, #20]	@ (800dea4 <_isatty_r+0x1c>)
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	f7f7 f93f 	bl	8005116 <_isatty>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d102      	bne.n	800dea2 <_isatty_r+0x1a>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	b103      	cbz	r3, 800dea2 <_isatty_r+0x1a>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	200006b4 	.word	0x200006b4

0800dea8 <_init>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr

0800deb4 <_fini>:
 800deb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb6:	bf00      	nop
 800deb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deba:	bc08      	pop	{r3}
 800debc:	469e      	mov	lr, r3
 800debe:	4770      	bx	lr
