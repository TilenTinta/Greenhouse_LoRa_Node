
LoRa_Node_GHv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de90  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800dfd0  0800dfd0  0000efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e340  0800e340  0001016c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e340  0800e340  0000f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e348  0800e348  0001016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e348  0800e348  0000f348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e34c  0800e34c  0000f34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800e350  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  2000016c  0800e4bc  0001016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800e4bc  000106c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001671a  00000000  00000000  00010195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d21  00000000  00000000  000268af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001179  00000000  00000000  0002bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181f6  00000000  00000000  0002ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd5c  00000000  00000000  00044fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e972  00000000  00000000  00060d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef6cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bdc  00000000  00000000  000ef710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f62ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dfb8 	.word	0x0800dfb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	0800dfb8 	.word	0x0800dfb8

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	@ 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__gedf2>:
 800074c:	f04f 3cff 	mov.w	ip, #4294967295
 8000750:	e006      	b.n	8000760 <__cmpdf2+0x4>
 8000752:	bf00      	nop

08000754 <__ledf2>:
 8000754:	f04f 0c01 	mov.w	ip, #1
 8000758:	e002      	b.n	8000760 <__cmpdf2+0x4>
 800075a:	bf00      	nop

0800075c <__cmpdf2>:
 800075c:	f04f 0c01 	mov.w	ip, #1
 8000760:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000764:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000768:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800076c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000776:	d01b      	beq.n	80007b0 <__cmpdf2+0x54>
 8000778:	b001      	add	sp, #4
 800077a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800077e:	bf0c      	ite	eq
 8000780:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000784:	ea91 0f03 	teqne	r1, r3
 8000788:	bf02      	ittt	eq
 800078a:	ea90 0f02 	teqeq	r0, r2
 800078e:	2000      	moveq	r0, #0
 8000790:	4770      	bxeq	lr
 8000792:	f110 0f00 	cmn.w	r0, #0
 8000796:	ea91 0f03 	teq	r1, r3
 800079a:	bf58      	it	pl
 800079c:	4299      	cmppl	r1, r3
 800079e:	bf08      	it	eq
 80007a0:	4290      	cmpeq	r0, r2
 80007a2:	bf2c      	ite	cs
 80007a4:	17d8      	asrcs	r0, r3, #31
 80007a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007aa:	f040 0001 	orr.w	r0, r0, #1
 80007ae:	4770      	bx	lr
 80007b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b8:	d102      	bne.n	80007c0 <__cmpdf2+0x64>
 80007ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007be:	d107      	bne.n	80007d0 <__cmpdf2+0x74>
 80007c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c8:	d1d6      	bne.n	8000778 <__cmpdf2+0x1c>
 80007ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ce:	d0d3      	beq.n	8000778 <__cmpdf2+0x1c>
 80007d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_cdrcmple>:
 80007d8:	4684      	mov	ip, r0
 80007da:	4610      	mov	r0, r2
 80007dc:	4662      	mov	r2, ip
 80007de:	468c      	mov	ip, r1
 80007e0:	4619      	mov	r1, r3
 80007e2:	4663      	mov	r3, ip
 80007e4:	e000      	b.n	80007e8 <__aeabi_cdcmpeq>
 80007e6:	bf00      	nop

080007e8 <__aeabi_cdcmpeq>:
 80007e8:	b501      	push	{r0, lr}
 80007ea:	f7ff ffb7 	bl	800075c <__cmpdf2>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	bf48      	it	mi
 80007f2:	f110 0f00 	cmnmi.w	r0, #0
 80007f6:	bd01      	pop	{r0, pc}

080007f8 <__aeabi_dcmpeq>:
 80007f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007fc:	f7ff fff4 	bl	80007e8 <__aeabi_cdcmpeq>
 8000800:	bf0c      	ite	eq
 8000802:	2001      	moveq	r0, #1
 8000804:	2000      	movne	r0, #0
 8000806:	f85d fb08 	ldr.w	pc, [sp], #8
 800080a:	bf00      	nop

0800080c <__aeabi_dcmplt>:
 800080c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000810:	f7ff ffea 	bl	80007e8 <__aeabi_cdcmpeq>
 8000814:	bf34      	ite	cc
 8000816:	2001      	movcc	r0, #1
 8000818:	2000      	movcs	r0, #0
 800081a:	f85d fb08 	ldr.w	pc, [sp], #8
 800081e:	bf00      	nop

08000820 <__aeabi_dcmple>:
 8000820:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000824:	f7ff ffe0 	bl	80007e8 <__aeabi_cdcmpeq>
 8000828:	bf94      	ite	ls
 800082a:	2001      	movls	r0, #1
 800082c:	2000      	movhi	r0, #0
 800082e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000832:	bf00      	nop

08000834 <__aeabi_dcmpge>:
 8000834:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000838:	f7ff ffce 	bl	80007d8 <__aeabi_cdrcmple>
 800083c:	bf94      	ite	ls
 800083e:	2001      	movls	r0, #1
 8000840:	2000      	movhi	r0, #0
 8000842:	f85d fb08 	ldr.w	pc, [sp], #8
 8000846:	bf00      	nop

08000848 <__aeabi_dcmpgt>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff ffc4 	bl	80007d8 <__aeabi_cdrcmple>
 8000850:	bf34      	ite	cc
 8000852:	2001      	movcc	r0, #1
 8000854:	2000      	movcs	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	@ 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000baa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	@ 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	@ 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_ldivmod>:
 8000f24:	b97b      	cbnz	r3, 8000f46 <__aeabi_ldivmod+0x22>
 8000f26:	b972      	cbnz	r2, 8000f46 <__aeabi_ldivmod+0x22>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	bfbe      	ittt	lt
 8000f2c:	2000      	movlt	r0, #0
 8000f2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000f32:	e006      	blt.n	8000f42 <__aeabi_ldivmod+0x1e>
 8000f34:	bf08      	it	eq
 8000f36:	2800      	cmpeq	r0, #0
 8000f38:	bf1c      	itt	ne
 8000f3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000f3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f42:	f000 b9d7 	b.w	80012f4 <__aeabi_idiv0>
 8000f46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f4e:	2900      	cmp	r1, #0
 8000f50:	db09      	blt.n	8000f66 <__aeabi_ldivmod+0x42>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db1a      	blt.n	8000f8c <__aeabi_ldivmod+0x68>
 8000f56:	f000 f84d 	bl	8000ff4 <__udivmoddi4>
 8000f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f62:	b004      	add	sp, #16
 8000f64:	4770      	bx	lr
 8000f66:	4240      	negs	r0, r0
 8000f68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db1b      	blt.n	8000fa8 <__aeabi_ldivmod+0x84>
 8000f70:	f000 f840 	bl	8000ff4 <__udivmoddi4>
 8000f74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4240      	negs	r0, r0
 8000f80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f84:	4252      	negs	r2, r2
 8000f86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f8a:	4770      	bx	lr
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f92:	f000 f82f 	bl	8000ff4 <__udivmoddi4>
 8000f96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f9e:	b004      	add	sp, #16
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa6:	4770      	bx	lr
 8000fa8:	4252      	negs	r2, r2
 8000faa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fae:	f000 f821 	bl	8000ff4 <__udivmoddi4>
 8000fb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fba:	b004      	add	sp, #16
 8000fbc:	4252      	negs	r2, r2
 8000fbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_uldivmod>:
 8000fc4:	b953      	cbnz	r3, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc6:	b94a      	cbnz	r2, 8000fdc <__aeabi_uldivmod+0x18>
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2800      	cmpeq	r0, #0
 8000fce:	bf1c      	itt	ne
 8000fd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000fd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000fd8:	f000 b98c 	b.w	80012f4 <__aeabi_idiv0>
 8000fdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fe4:	f000 f806 	bl	8000ff4 <__udivmoddi4>
 8000fe8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	468e      	mov	lr, r1
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	4688      	mov	r8, r1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d14a      	bne.n	800109a <__udivmoddi4+0xa6>
 8001004:	428a      	cmp	r2, r1
 8001006:	4617      	mov	r7, r2
 8001008:	d962      	bls.n	80010d0 <__udivmoddi4+0xdc>
 800100a:	fab2 f682 	clz	r6, r2
 800100e:	b14e      	cbz	r6, 8001024 <__udivmoddi4+0x30>
 8001010:	f1c6 0320 	rsb	r3, r6, #32
 8001014:	fa01 f806 	lsl.w	r8, r1, r6
 8001018:	fa20 f303 	lsr.w	r3, r0, r3
 800101c:	40b7      	lsls	r7, r6
 800101e:	ea43 0808 	orr.w	r8, r3, r8
 8001022:	40b4      	lsls	r4, r6
 8001024:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001028:	fbb8 f1fe 	udiv	r1, r8, lr
 800102c:	fa1f fc87 	uxth.w	ip, r7
 8001030:	fb0e 8811 	mls	r8, lr, r1, r8
 8001034:	fb01 f20c 	mul.w	r2, r1, ip
 8001038:	0c23      	lsrs	r3, r4, #16
 800103a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800103e:	429a      	cmp	r2, r3
 8001040:	d909      	bls.n	8001056 <__udivmoddi4+0x62>
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	f101 30ff 	add.w	r0, r1, #4294967295
 8001048:	f080 80eb 	bcs.w	8001222 <__udivmoddi4+0x22e>
 800104c:	429a      	cmp	r2, r3
 800104e:	f240 80e8 	bls.w	8001222 <__udivmoddi4+0x22e>
 8001052:	3902      	subs	r1, #2
 8001054:	443b      	add	r3, r7
 8001056:	1a9a      	subs	r2, r3, r2
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 fc0c 	mul.w	ip, r0, ip
 8001064:	b2a3      	uxth	r3, r4
 8001066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800106a:	459c      	cmp	ip, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x8e>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	f080 80d7 	bcs.w	8001226 <__udivmoddi4+0x232>
 8001078:	459c      	cmp	ip, r3
 800107a:	f240 80d4 	bls.w	8001226 <__udivmoddi4+0x232>
 800107e:	443b      	add	r3, r7
 8001080:	3802      	subs	r0, #2
 8001082:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001086:	2100      	movs	r1, #0
 8001088:	eba3 030c 	sub.w	r3, r3, ip
 800108c:	b11d      	cbz	r5, 8001096 <__udivmoddi4+0xa2>
 800108e:	2200      	movs	r2, #0
 8001090:	40f3      	lsrs	r3, r6
 8001092:	e9c5 3200 	strd	r3, r2, [r5]
 8001096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109a:	428b      	cmp	r3, r1
 800109c:	d905      	bls.n	80010aa <__udivmoddi4+0xb6>
 800109e:	b10d      	cbz	r5, 80010a4 <__udivmoddi4+0xb0>
 80010a0:	e9c5 0100 	strd	r0, r1, [r5]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4608      	mov	r0, r1
 80010a8:	e7f5      	b.n	8001096 <__udivmoddi4+0xa2>
 80010aa:	fab3 f183 	clz	r1, r3
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d146      	bne.n	8001140 <__udivmoddi4+0x14c>
 80010b2:	4573      	cmp	r3, lr
 80010b4:	d302      	bcc.n	80010bc <__udivmoddi4+0xc8>
 80010b6:	4282      	cmp	r2, r0
 80010b8:	f200 8108 	bhi.w	80012cc <__udivmoddi4+0x2d8>
 80010bc:	1a84      	subs	r4, r0, r2
 80010be:	eb6e 0203 	sbc.w	r2, lr, r3
 80010c2:	2001      	movs	r0, #1
 80010c4:	4690      	mov	r8, r2
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d0e5      	beq.n	8001096 <__udivmoddi4+0xa2>
 80010ca:	e9c5 4800 	strd	r4, r8, [r5]
 80010ce:	e7e2      	b.n	8001096 <__udivmoddi4+0xa2>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f000 8091 	beq.w	80011f8 <__udivmoddi4+0x204>
 80010d6:	fab2 f682 	clz	r6, r2
 80010da:	2e00      	cmp	r6, #0
 80010dc:	f040 80a5 	bne.w	800122a <__udivmoddi4+0x236>
 80010e0:	1a8a      	subs	r2, r1, r2
 80010e2:	2101      	movs	r1, #1
 80010e4:	0c03      	lsrs	r3, r0, #16
 80010e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010ea:	b280      	uxth	r0, r0
 80010ec:	b2bc      	uxth	r4, r7
 80010ee:	fbb2 fcfe 	udiv	ip, r2, lr
 80010f2:	fb0e 221c 	mls	r2, lr, ip, r2
 80010f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010fa:	fb04 f20c 	mul.w	r2, r4, ip
 80010fe:	429a      	cmp	r2, r3
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x11e>
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001108:	d202      	bcs.n	8001110 <__udivmoddi4+0x11c>
 800110a:	429a      	cmp	r2, r3
 800110c:	f200 80e3 	bhi.w	80012d6 <__udivmoddi4+0x2e2>
 8001110:	46c4      	mov	ip, r8
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	fbb3 f2fe 	udiv	r2, r3, lr
 8001118:	fb0e 3312 	mls	r3, lr, r2, r3
 800111c:	fb02 f404 	mul.w	r4, r2, r4
 8001120:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001124:	429c      	cmp	r4, r3
 8001126:	d907      	bls.n	8001138 <__udivmoddi4+0x144>
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	f102 30ff 	add.w	r0, r2, #4294967295
 800112e:	d202      	bcs.n	8001136 <__udivmoddi4+0x142>
 8001130:	429c      	cmp	r4, r3
 8001132:	f200 80cd 	bhi.w	80012d0 <__udivmoddi4+0x2dc>
 8001136:	4602      	mov	r2, r0
 8001138:	1b1b      	subs	r3, r3, r4
 800113a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800113e:	e7a5      	b.n	800108c <__udivmoddi4+0x98>
 8001140:	f1c1 0620 	rsb	r6, r1, #32
 8001144:	408b      	lsls	r3, r1
 8001146:	fa22 f706 	lsr.w	r7, r2, r6
 800114a:	431f      	orrs	r7, r3
 800114c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001150:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001154:	fbba f8f9 	udiv	r8, sl, r9
 8001158:	fa0e fe01 	lsl.w	lr, lr, r1
 800115c:	fa20 f306 	lsr.w	r3, r0, r6
 8001160:	fb09 aa18 	mls	sl, r9, r8, sl
 8001164:	fa1f fc87 	uxth.w	ip, r7
 8001168:	ea43 030e 	orr.w	r3, r3, lr
 800116c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001170:	fb08 f00c 	mul.w	r0, r8, ip
 8001174:	0c1c      	lsrs	r4, r3, #16
 8001176:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800117a:	42a0      	cmp	r0, r4
 800117c:	fa02 f201 	lsl.w	r2, r2, r1
 8001180:	d90a      	bls.n	8001198 <__udivmoddi4+0x1a4>
 8001182:	193c      	adds	r4, r7, r4
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 809e 	bcs.w	80012c8 <__udivmoddi4+0x2d4>
 800118c:	42a0      	cmp	r0, r4
 800118e:	f240 809b 	bls.w	80012c8 <__udivmoddi4+0x2d4>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	443c      	add	r4, r7
 8001198:	1a24      	subs	r4, r4, r0
 800119a:	b298      	uxth	r0, r3
 800119c:	fbb4 f3f9 	udiv	r3, r4, r9
 80011a0:	fb09 4413 	mls	r4, r9, r3, r4
 80011a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011a8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80011ac:	45a4      	cmp	ip, r4
 80011ae:	d909      	bls.n	80011c4 <__udivmoddi4+0x1d0>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f103 30ff 	add.w	r0, r3, #4294967295
 80011b6:	f080 8085 	bcs.w	80012c4 <__udivmoddi4+0x2d0>
 80011ba:	45a4      	cmp	ip, r4
 80011bc:	f240 8082 	bls.w	80012c4 <__udivmoddi4+0x2d0>
 80011c0:	3b02      	subs	r3, #2
 80011c2:	443c      	add	r4, r7
 80011c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011c8:	eba4 040c 	sub.w	r4, r4, ip
 80011cc:	fba0 8c02 	umull	r8, ip, r0, r2
 80011d0:	4564      	cmp	r4, ip
 80011d2:	4643      	mov	r3, r8
 80011d4:	46e1      	mov	r9, ip
 80011d6:	d364      	bcc.n	80012a2 <__udivmoddi4+0x2ae>
 80011d8:	d061      	beq.n	800129e <__udivmoddi4+0x2aa>
 80011da:	b15d      	cbz	r5, 80011f4 <__udivmoddi4+0x200>
 80011dc:	ebbe 0203 	subs.w	r2, lr, r3
 80011e0:	eb64 0409 	sbc.w	r4, r4, r9
 80011e4:	fa04 f606 	lsl.w	r6, r4, r6
 80011e8:	fa22 f301 	lsr.w	r3, r2, r1
 80011ec:	431e      	orrs	r6, r3
 80011ee:	40cc      	lsrs	r4, r1
 80011f0:	e9c5 6400 	strd	r6, r4, [r5]
 80011f4:	2100      	movs	r1, #0
 80011f6:	e74e      	b.n	8001096 <__udivmoddi4+0xa2>
 80011f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80011fc:	0c01      	lsrs	r1, r0, #16
 80011fe:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001202:	b280      	uxth	r0, r0
 8001204:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001208:	463b      	mov	r3, r7
 800120a:	fbb1 f1f7 	udiv	r1, r1, r7
 800120e:	4638      	mov	r0, r7
 8001210:	463c      	mov	r4, r7
 8001212:	46b8      	mov	r8, r7
 8001214:	46be      	mov	lr, r7
 8001216:	2620      	movs	r6, #32
 8001218:	eba2 0208 	sub.w	r2, r2, r8
 800121c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001220:	e765      	b.n	80010ee <__udivmoddi4+0xfa>
 8001222:	4601      	mov	r1, r0
 8001224:	e717      	b.n	8001056 <__udivmoddi4+0x62>
 8001226:	4610      	mov	r0, r2
 8001228:	e72b      	b.n	8001082 <__udivmoddi4+0x8e>
 800122a:	f1c6 0120 	rsb	r1, r6, #32
 800122e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001232:	40b7      	lsls	r7, r6
 8001234:	fa0e fe06 	lsl.w	lr, lr, r6
 8001238:	fa20 f101 	lsr.w	r1, r0, r1
 800123c:	ea41 010e 	orr.w	r1, r1, lr
 8001240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001244:	fbbc f8fe 	udiv	r8, ip, lr
 8001248:	b2bc      	uxth	r4, r7
 800124a:	fb0e cc18 	mls	ip, lr, r8, ip
 800124e:	fb08 f904 	mul.w	r9, r8, r4
 8001252:	0c0a      	lsrs	r2, r1, #16
 8001254:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001258:	40b0      	lsls	r0, r6
 800125a:	4591      	cmp	r9, r2
 800125c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001260:	b280      	uxth	r0, r0
 8001262:	d93e      	bls.n	80012e2 <__udivmoddi4+0x2ee>
 8001264:	18ba      	adds	r2, r7, r2
 8001266:	f108 3cff 	add.w	ip, r8, #4294967295
 800126a:	d201      	bcs.n	8001270 <__udivmoddi4+0x27c>
 800126c:	4591      	cmp	r9, r2
 800126e:	d81f      	bhi.n	80012b0 <__udivmoddi4+0x2bc>
 8001270:	eba2 0209 	sub.w	r2, r2, r9
 8001274:	fbb2 f9fe 	udiv	r9, r2, lr
 8001278:	fb09 f804 	mul.w	r8, r9, r4
 800127c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001280:	b28a      	uxth	r2, r1
 8001282:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001286:	4542      	cmp	r2, r8
 8001288:	d229      	bcs.n	80012de <__udivmoddi4+0x2ea>
 800128a:	18ba      	adds	r2, r7, r2
 800128c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001290:	d2c2      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001292:	4542      	cmp	r2, r8
 8001294:	d2c0      	bcs.n	8001218 <__udivmoddi4+0x224>
 8001296:	f1a9 0102 	sub.w	r1, r9, #2
 800129a:	443a      	add	r2, r7
 800129c:	e7bc      	b.n	8001218 <__udivmoddi4+0x224>
 800129e:	45c6      	cmp	lr, r8
 80012a0:	d29b      	bcs.n	80011da <__udivmoddi4+0x1e6>
 80012a2:	ebb8 0302 	subs.w	r3, r8, r2
 80012a6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012aa:	3801      	subs	r0, #1
 80012ac:	46e1      	mov	r9, ip
 80012ae:	e794      	b.n	80011da <__udivmoddi4+0x1e6>
 80012b0:	eba7 0909 	sub.w	r9, r7, r9
 80012b4:	444a      	add	r2, r9
 80012b6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ba:	f1a8 0c02 	sub.w	ip, r8, #2
 80012be:	fb09 f804 	mul.w	r8, r9, r4
 80012c2:	e7db      	b.n	800127c <__udivmoddi4+0x288>
 80012c4:	4603      	mov	r3, r0
 80012c6:	e77d      	b.n	80011c4 <__udivmoddi4+0x1d0>
 80012c8:	46d0      	mov	r8, sl
 80012ca:	e765      	b.n	8001198 <__udivmoddi4+0x1a4>
 80012cc:	4608      	mov	r0, r1
 80012ce:	e6fa      	b.n	80010c6 <__udivmoddi4+0xd2>
 80012d0:	443b      	add	r3, r7
 80012d2:	3a02      	subs	r2, #2
 80012d4:	e730      	b.n	8001138 <__udivmoddi4+0x144>
 80012d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80012da:	443b      	add	r3, r7
 80012dc:	e719      	b.n	8001112 <__udivmoddi4+0x11e>
 80012de:	4649      	mov	r1, r9
 80012e0:	e79a      	b.n	8001218 <__udivmoddi4+0x224>
 80012e2:	eba2 0209 	sub.w	r2, r2, r9
 80012e6:	fbb2 f9fe 	udiv	r9, r2, lr
 80012ea:	46c4      	mov	ip, r8
 80012ec:	fb09 f804 	mul.w	r8, r9, r4
 80012f0:	e7c4      	b.n	800127c <__udivmoddi4+0x288>
 80012f2:	bf00      	nop

080012f4 <__aeabi_idiv0>:
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <BME280_ReadDeviceID>:
uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHum);									// Compensate raw humidity value with compensation values from sensor

uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress);									// Compensate raw pressure value with compensation values from sensor


uint8_t BME280_ReadDeviceID(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t reg_data;

	status = BME280_ReadRegister(dev, ID_REG, &reg_data);
 8001308:	f107 030e 	add.w	r3, r7, #14
 800130c:	461a      	mov	r2, r3
 800130e:	21d0      	movs	r1, #208	@ 0xd0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fd89 	bl	8001e28 <BME280_ReadRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <BME280_ReadDeviceID+0x2c>
	{
		return 1;	// NOK
 8001320:	2301      	movs	r3, #1
 8001322:	e005      	b.n	8001330 <BME280_ReadDeviceID+0x38>
	}
	else
	{
		if (reg_data == 0x76){
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	2b76      	cmp	r3, #118	@ 0x76
 8001328:	d101      	bne.n	800132e <BME280_ReadDeviceID+0x36>
			return 2; // NOK
 800132a:	2302      	movs	r3, #2
 800132c:	e000      	b.n	8001330 <BME280_ReadDeviceID+0x38>
		}
		else
		{
			return 0; // OK
 800132e:	2300      	movs	r3, #0
		}
	}
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <BME280_Reset>:


uint8_t BME280_Reset(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

	// Set al to 0
	dev->Temp_C = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
	dev->Hum_Perc = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
	dev->Press_Pa = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
	dev->t_fine = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

	dev->dig_T1 = 0;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	829a      	strh	r2, [r3, #20]
	dev->dig_T2 = 0;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	82da      	strh	r2, [r3, #22]
	dev->dig_T3 = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	831a      	strh	r2, [r3, #24]

	dev->dig_H1 = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	dev->dig_H2 = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev->dig_H3 = 0;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev->dig_H4 = 0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev->dig_H5 = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev->dig_H6 = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	dev->dig_P1 = 0;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	835a      	strh	r2, [r3, #26]
	dev->dig_P2 = 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	839a      	strh	r2, [r3, #28]
	dev->dig_P3 = 0;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	83da      	strh	r2, [r3, #30]
	dev->dig_P4 = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	841a      	strh	r2, [r3, #32]
	dev->dig_P5 = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev->dig_P6 = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev->dig_P7 = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev->dig_P8 = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev->dig_P9 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

	status = BME280_WriteRegister(dev, RESET, RESET_VAL);
 80013d8:	22b6      	movs	r2, #182	@ 0xb6
 80013da:	21e0      	movs	r1, #224	@ 0xe0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fd5b 	bl	8001e98 <BME280_WriteRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <BME280_Reset+0xb8>
	{
		return 1;	// NOK
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <BME280_Reset+0xba>
	}
	else
	{
		return 0; // OK
 80013f0:	2300      	movs	r3, #0
	}
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <BME280_Init>:


uint8_t BME280_Init(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]

	/* Modified for weather monitoring, page: 19; Weather monitoring*/

	// Humidity; Set value: 001 = oversampling x1
	static const uint8_t ctrl_humData = 0x01;
	status = BME280_WriteRegister(dev, CTRL_HUM, ctrl_humData);
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <BME280_Init+0x70>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	21f2      	movs	r1, #242	@ 0xf2
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fd3f 	bl	8001e98 <BME280_WriteRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <BME280_Init+0x2c>
	{
		return 1;	// NOK
 8001424:	2301      	movs	r3, #1
 8001426:	e01c      	b.n	8001462 <BME280_Init+0x66>
	}

	// Temp | Press | Mode; Set value: 00100100 = oversampling x1, oversampling x1, sleep mode
	static const uint8_t scrl_meadData = 0x24;
	status = BME280_WriteRegister(dev, CTRL_MEAS, scrl_meadData);
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <BME280_Init+0x74>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	21f4      	movs	r1, #244	@ 0xf4
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fd31 	bl	8001e98 <BME280_WriteRegister>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <BME280_Init+0x48>
	{
		return 1;	// NOK
 8001440:	2301      	movs	r3, #1
 8001442:	e00e      	b.n	8001462 <BME280_Init+0x66>
	}

	// Standbay time | IIR filter | 3-wire SPI; Set value: 0000010 = standbay 0.5ms, IIR off, off SPI
	static const uint8_t confData = 0x02;
	status = BME280_WriteRegister(dev, CONFIG_BME280, confData);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <BME280_Init+0x78>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	21f5      	movs	r1, #245	@ 0xf5
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fd23 	bl	8001e98 <BME280_WriteRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <BME280_Init+0x64>
	{
		return 1;	// NOK
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <BME280_Init+0x66>
	}
	else
	{
		return 0; // OK
 8001460:	2300      	movs	r3, #0
	}
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0800e23f 	.word	0x0800e23f
 8001470:	0800e240 	.word	0x0800e240
 8001474:	0800e241 	.word	0x0800e241

08001478 <BME280_GoToFromSleep>:


uint8_t BME280_GoToFromSleep(BME280 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t sleep){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]

	// sleep value controls if the devide is put to sleep or wake up
	// 1 - wake up, 0 - go to sleep

	dev -> i2cHandle = i2cHandle;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	601a      	str	r2, [r3, #0]
	uint8_t reg_data;

	if (BME280_ReadRegister(dev, CTRL_MEAS, &reg_data) != HAL_OK) return 1; // Read register value
 800148c:	f107 0317 	add.w	r3, r7, #23
 8001490:	461a      	mov	r2, r3
 8001492:	21f4      	movs	r1, #244	@ 0xf4
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fcc7 	bl	8001e28 <BME280_ReadRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <BME280_GoToFromSleep+0x2c>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e01c      	b.n	80014de <BME280_GoToFromSleep+0x66>

	if (sleep == 0) reg_data = reg_data & 0xFC; // sleep mode
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <BME280_GoToFromSleep+0x3e>
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e007      	b.n	80014c6 <BME280_GoToFromSleep+0x4e>
	else if (sleep == 1) reg_data = (reg_data & 0xFC) | 0x03; // normal mode
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <BME280_GoToFromSleep+0x4e>
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	f043 0303 	orr.w	r3, r3, #3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75fb      	strb	r3, [r7, #23]

	if (BME280_WriteRegister(dev, CTRL_MEAS, reg_data) != HAL_OK) return 1;
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	461a      	mov	r2, r3
 80014ca:	21f4      	movs	r1, #244	@ 0xf4
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fce3 	bl	8001e98 <BME280_WriteRegister>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <BME280_GoToFromSleep+0x64>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <BME280_GoToFromSleep+0x66>

	return 0; // OK
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <BME280_ReadCalibData>:


uint8_t BME280_ReadCalibData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b08c      	sub	sp, #48	@ 0x30
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;
	uint8_t CalibData[25] = {};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	761a      	strb	r2, [r3, #24]

	status = BME280_ReadRegisters(dev, DIG_T1_1, CalibData, 25);
 800150a:	f107 0214 	add.w	r2, r7, #20
 800150e:	2319      	movs	r3, #25
 8001510:	2188      	movs	r1, #136	@ 0x88
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fca2 	bl	8001e5c <BME280_ReadRegisters>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 800151e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <BME280_ReadCalibData+0x44>
	{
		return 1;	// NOK
 8001526:	2301      	movs	r3, #1
 8001528:	e0b7      	b.n	800169a <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_T1 = (uint16_t)(CalibData[1] << 8) | (CalibData[0]);
 800152a:	7d7b      	ldrb	r3, [r7, #21]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	7d3a      	ldrb	r2, [r7, #20]
 8001532:	4313      	orrs	r3, r2
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	829a      	strh	r2, [r3, #20]
	dev -> dig_T2 = (uint16_t)(CalibData[3] << 8) | (CalibData[2]);
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	7dba      	ldrb	r2, [r7, #22]
 8001542:	4313      	orrs	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	b21a      	sxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	82da      	strh	r2, [r3, #22]
	dev -> dig_T3 = (uint16_t)(CalibData[5] << 8) | (CalibData[4]);
 800154c:	7e7b      	ldrb	r3, [r7, #25]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	b29b      	uxth	r3, r3
 8001552:	7e3a      	ldrb	r2, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	831a      	strh	r2, [r3, #24]
	dev -> dig_P1 = (uint16_t)(CalibData[7] << 8) | (CalibData[6]);
 800155e:	7efb      	ldrb	r3, [r7, #27]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	7eba      	ldrb	r2, [r7, #26]
 8001566:	4313      	orrs	r3, r2
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	835a      	strh	r2, [r3, #26]
	dev -> dig_P2 = (uint16_t)(CalibData[9] << 8) | (CalibData[8]);
 800156e:	7f7b      	ldrb	r3, [r7, #29]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	7f3a      	ldrb	r2, [r7, #28]
 8001576:	4313      	orrs	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	839a      	strh	r2, [r3, #28]
	dev -> dig_P3 = (uint16_t)(CalibData[11] << 8) | (CalibData[10]);
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29b      	uxth	r3, r3
 8001586:	7fba      	ldrb	r2, [r7, #30]
 8001588:	4313      	orrs	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	83da      	strh	r2, [r3, #30]
	dev -> dig_P4 = (uint16_t)(CalibData[13] << 8) | (CalibData[12]);
 8001592:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b29b      	uxth	r3, r3
 800159a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800159e:	4313      	orrs	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	841a      	strh	r2, [r3, #32]
	dev -> dig_P5 = (uint16_t)(CalibData[15] << 8) | (CalibData[14]);
 80015a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	845a      	strh	r2, [r3, #34]	@ 0x22
	dev -> dig_P6 = (uint16_t)(CalibData[17] << 8) | (CalibData[16]);
 80015be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	849a      	strh	r2, [r3, #36]	@ 0x24
	dev -> dig_P7 = (uint16_t)(CalibData[19] << 8) | (CalibData[18]);
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	84da      	strh	r2, [r3, #38]	@ 0x26
	dev -> dig_P8 = (uint16_t)(CalibData[21] << 8) | (CalibData[20]);
 80015ea:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28
	dev -> dig_P9 = (uint16_t)(CalibData[23] << 8) | (CalibData[22]);
 8001600:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800160c:	4313      	orrs	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	b21a      	sxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	855a      	strh	r2, [r3, #42]	@ 0x2a
	dev -> dig_H1 = CalibData[24];
 8001616:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c


	uint8_t CalibData2[7];
	status = BME280_ReadRegisters(dev, DIG_H2_1, CalibData2, 7);
 8001620:	f107 020c 	add.w	r2, r7, #12
 8001624:	2307      	movs	r3, #7
 8001626:	21e1      	movs	r1, #225	@ 0xe1
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fc17 	bl	8001e5c <BME280_ReadRegisters>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (status != HAL_OK)
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <BME280_ReadCalibData+0x15a>
	{
		return 1;	// NOK
 800163c:	2301      	movs	r3, #1
 800163e:	e02c      	b.n	800169a <BME280_ReadCalibData+0x1b4>
	}

	dev -> dig_H2 = ((uint16_t)CalibData2[1] << 8) | ((uint16_t)CalibData2[0]);
 8001640:	7b7b      	ldrb	r3, [r7, #13]
 8001642:	b21b      	sxth	r3, r3
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21a      	sxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	85da      	strh	r2, [r3, #46]	@ 0x2e
	dev -> dig_H3 = CalibData2[2];
 8001654:	7bba      	ldrb	r2, [r7, #14]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	dev -> dig_H4 = ((uint16_t)(CalibData2[3] * 16) | ((uint16_t)CalibData2[4] & 0x0F));
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	b29b      	uxth	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	7c3b      	ldrb	r3, [r7, #16]
 8001666:	b21b      	sxth	r3, r3
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	865a      	strh	r2, [r3, #50]	@ 0x32
	dev -> dig_H5 = ((uint16_t)CalibData2[5] * 16) | ((uint16_t)CalibData2[4] >> 4);
 8001676:	7c7b      	ldrb	r3, [r7, #17]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	b29b      	uxth	r3, r3
 800167c:	b21a      	sxth	r2, r3
 800167e:	7c3b      	ldrb	r3, [r7, #16]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	869a      	strh	r2, [r3, #52]	@ 0x34
	dev -> dig_H6 = CalibData2[6];
 800168e:	7cbb      	ldrb	r3, [r7, #18]
 8001690:	b25a      	sxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	return 0; // OK
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3730      	adds	r7, #48	@ 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <BME280_TemperatureCompesation>:

	return 0; // OK
}


int32_t BME280_TemperatureCompesation(BME280 *dev, int32_t RawTemp){
 80016a2:	b480      	push	{r7}
 80016a4:	b087      	sub	sp, #28
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]

	int32_t var1, var2, temperature;
	var1 = ((((RawTemp >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	10da      	asrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	8a9b      	ldrh	r3, [r3, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	12db      	asrs	r3, r3, #11
 80016c4:	617b      	str	r3, [r7, #20]
	var2 = (((((RawTemp >> 4) - ((int32_t)dev->dig_T1)) * ((RawTemp >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	111b      	asrs	r3, r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	8a92      	ldrh	r2, [r2, #20]
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	1112      	asrs	r2, r2, #4
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	8a89      	ldrh	r1, [r1, #20]
 80016d8:	1a52      	subs	r2, r2, r1
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	131b      	asrs	r3, r3, #12
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	139b      	asrs	r3, r3, #14
 80016ec:	613b      	str	r3, [r7, #16]

	dev->t_fine = var1 + var2;
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]

	temperature = (dev->t_fine * 5 + 128) >> 8;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3380      	adds	r3, #128	@ 0x80
 8001704:	121b      	asrs	r3, r3, #8
 8001706:	60fb      	str	r3, [r7, #12]

	return temperature; // OK
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <BME280_PressureCompesation>:

	return 0; // OK
}


uint32_t BME280_PressureCompesation(BME280 *dev, int32_t RawPress){
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b0ca      	sub	sp, #296	@ 0x128
 800171a:	af00      	add	r7, sp, #0
 800171c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8001720:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108

	int64_t var1, var2, pressure;
	var1 = ((int64_t)dev->t_fine) - 128000;
 8001724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	17da      	asrs	r2, r3, #31
 800172c:	461c      	mov	r4, r3
 800172e:	4615      	mov	r5, r2
 8001730:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001734:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001738:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dev->dig_P6;
 800173c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001740:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001744:	fb03 f102 	mul.w	r1, r3, r2
 8001748:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800174c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	18ca      	adds	r2, r1, r3
 8001756:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800175a:	fba3 8903 	umull	r8, r9, r3, r3
 800175e:	eb02 0309 	add.w	r3, r2, r9
 8001762:	4699      	mov	r9, r3
 8001764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001768:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800176c:	b21b      	sxth	r3, r3
 800176e:	17da      	asrs	r2, r3, #31
 8001770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001774:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001778:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800177c:	4603      	mov	r3, r0
 800177e:	fb03 f209 	mul.w	r2, r3, r9
 8001782:	460b      	mov	r3, r1
 8001784:	fb08 f303 	mul.w	r3, r8, r3
 8001788:	4413      	add	r3, r2
 800178a:	4602      	mov	r2, r0
 800178c:	fba8 2102 	umull	r2, r1, r8, r2
 8001790:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001794:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001798:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800179c:	4413      	add	r3, r2
 800179e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017a2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80017a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80017aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80017ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017b2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	17da      	asrs	r2, r3, #31
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017be:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017c6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80017ca:	462a      	mov	r2, r5
 80017cc:	fb02 f203 	mul.w	r2, r2, r3
 80017d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017d4:	4621      	mov	r1, r4
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	441a      	add	r2, r3
 80017dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017e0:	4621      	mov	r1, r4
 80017e2:	fba3 3101 	umull	r3, r1, r3, r1
 80017e6:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80017ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80017ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001804:	462b      	mov	r3, r5
 8001806:	0459      	lsls	r1, r3, #17
 8001808:	4622      	mov	r2, r4
 800180a:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800180e:	4623      	mov	r3, r4
 8001810:	0458      	lsls	r0, r3, #17
 8001812:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001816:	1814      	adds	r4, r2, r0
 8001818:	643c      	str	r4, [r7, #64]	@ 0x40
 800181a:	414b      	adcs	r3, r1
 800181c:	647b      	str	r3, [r7, #68]	@ 0x44
 800181e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001822:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800182a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800182e:	b21b      	sxth	r3, r3
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001836:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001846:	00d9      	lsls	r1, r3, #3
 8001848:	2000      	movs	r0, #0
 800184a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800184e:	1814      	adds	r4, r2, r0
 8001850:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001852:	414b      	adcs	r3, r1
 8001854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001856:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800185a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12);
 800185e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001862:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001866:	fb03 f102 	mul.w	r1, r3, r2
 800186a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800186e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	18ca      	adds	r2, r1, r3
 8001878:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800187c:	fba3 3103 	umull	r3, r1, r3, r3
 8001880:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001896:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80018a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80018a6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80018aa:	4622      	mov	r2, r4
 80018ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80018b0:	4641      	mov	r1, r8
 80018b2:	fb01 f202 	mul.w	r2, r1, r2
 80018b6:	464d      	mov	r5, r9
 80018b8:	4618      	mov	r0, r3
 80018ba:	4621      	mov	r1, r4
 80018bc:	4603      	mov	r3, r0
 80018be:	fb03 f305 	mul.w	r3, r3, r5
 80018c2:	4413      	add	r3, r2
 80018c4:	4602      	mov	r2, r0
 80018c6:	4641      	mov	r1, r8
 80018c8:	fba2 2101 	umull	r2, r1, r2, r1
 80018cc:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80018d0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018d4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018de:	f04f 0000 	mov.w	r0, #0
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018ea:	4623      	mov	r3, r4
 80018ec:	0a18      	lsrs	r0, r3, #8
 80018ee:	462a      	mov	r2, r5
 80018f0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80018f4:	462b      	mov	r3, r5
 80018f6:	1219      	asrs	r1, r3, #8
 80018f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018fc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001900:	b21b      	sxth	r3, r3
 8001902:	17da      	asrs	r2, r3, #31
 8001904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001908:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800190c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001910:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001914:	464a      	mov	r2, r9
 8001916:	fb02 f203 	mul.w	r2, r2, r3
 800191a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191e:	4644      	mov	r4, r8
 8001920:	fb04 f303 	mul.w	r3, r4, r3
 8001924:	441a      	add	r2, r3
 8001926:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800192a:	4644      	mov	r4, r8
 800192c:	fba3 3404 	umull	r3, r4, r3, r4
 8001930:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001934:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800194e:	464c      	mov	r4, r9
 8001950:	0323      	lsls	r3, r4, #12
 8001952:	46c4      	mov	ip, r8
 8001954:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001958:	4644      	mov	r4, r8
 800195a:	0322      	lsls	r2, r4, #12
 800195c:	1884      	adds	r4, r0, r2
 800195e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001960:	eb41 0303 	adc.w	r3, r1, r3
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
 8001966:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800196a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dev->dig_P1) >> 33;
 800196e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001972:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001976:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800197a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800197e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001982:	8b5b      	ldrh	r3, [r3, #26]
 8001984:	b29b      	uxth	r3, r3
 8001986:	2200      	movs	r2, #0
 8001988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800198c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001990:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001994:	4622      	mov	r2, r4
 8001996:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800199a:	4641      	mov	r1, r8
 800199c:	fb01 f202 	mul.w	r2, r1, r2
 80019a0:	464d      	mov	r5, r9
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	4603      	mov	r3, r0
 80019a8:	fb03 f305 	mul.w	r3, r3, r5
 80019ac:	4413      	add	r3, r2
 80019ae:	4602      	mov	r2, r0
 80019b0:	4641      	mov	r1, r8
 80019b2:	fba2 2101 	umull	r2, r1, r2, r1
 80019b6:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80019ba:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80019be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019c2:	4413      	add	r3, r2
 80019c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019d4:	4629      	mov	r1, r5
 80019d6:	104a      	asrs	r2, r1, #1
 80019d8:	4629      	mov	r1, r5
 80019da:	17cb      	asrs	r3, r1, #31
 80019dc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	if (var1 == 0)
 80019e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019e4:	4313      	orrs	r3, r2
 80019e6:	d101      	bne.n	80019ec <BME280_PressureCompesation+0x2d8>
	{
		return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e146      	b.n	8001c7a <BME280_PressureCompesation+0x566>
	}

	pressure = 1048576 - RawPress;
 80019ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80019f0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80019fe:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	pressure = (((pressure << 31) - var2) * 3125) / var1;
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	105b      	asrs	r3, r3, #1
 8001a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a10:	07db      	lsls	r3, r3, #31
 8001a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001a1e:	4604      	mov	r4, r0
 8001a20:	1aa4      	subs	r4, r4, r2
 8001a22:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001a24:	eb61 0303 	sbc.w	r3, r1, r3
 8001a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a2e:	4622      	mov	r2, r4
 8001a30:	462b      	mov	r3, r5
 8001a32:	1891      	adds	r1, r2, r2
 8001a34:	6239      	str	r1, [r7, #32]
 8001a36:	415b      	adcs	r3, r3
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3e:	4621      	mov	r1, r4
 8001a40:	1851      	adds	r1, r2, r1
 8001a42:	61b9      	str	r1, [r7, #24]
 8001a44:	4629      	mov	r1, r5
 8001a46:	414b      	adcs	r3, r1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a56:	4649      	mov	r1, r9
 8001a58:	018b      	lsls	r3, r1, #6
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a60:	4641      	mov	r1, r8
 8001a62:	018a      	lsls	r2, r1, #6
 8001a64:	4641      	mov	r1, r8
 8001a66:	1889      	adds	r1, r1, r2
 8001a68:	6139      	str	r1, [r7, #16]
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	eb43 0101 	adc.w	r1, r3, r1
 8001a70:	6179      	str	r1, [r7, #20]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a7e:	4649      	mov	r1, r9
 8001a80:	008b      	lsls	r3, r1, #2
 8001a82:	46c4      	mov	ip, r8
 8001a84:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001a88:	4641      	mov	r1, r8
 8001a8a:	008a      	lsls	r2, r1, #2
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	4622      	mov	r2, r4
 8001a94:	189b      	adds	r3, r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	eb42 0303 	adc.w	r3, r2, r3
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001aae:	4649      	mov	r1, r9
 8001ab0:	008b      	lsls	r3, r1, #2
 8001ab2:	46c4      	mov	ip, r8
 8001ab4:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ab8:	4641      	mov	r1, r8
 8001aba:	008a      	lsls	r2, r1, #2
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4622      	mov	r2, r4
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ac8:	462b      	mov	r3, r5
 8001aca:	460a      	mov	r2, r1
 8001acc:	eb42 0303 	adc.w	r3, r2, r3
 8001ad0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ad2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ad6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ada:	f7ff fa23 	bl	8000f24 <__aeabi_ldivmod>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dev->dig_P9) * (pressure >> 13) * (pressure >> 13)) >> 25;
 8001ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001aea:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001af4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001af6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0b50      	lsrs	r0, r2, #13
 8001b04:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b08:	1359      	asrs	r1, r3, #13
 8001b0a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b0e:	462b      	mov	r3, r5
 8001b10:	fb00 f203 	mul.w	r2, r0, r3
 8001b14:	4623      	mov	r3, r4
 8001b16:	fb03 f301 	mul.w	r3, r3, r1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	fba2 2100 	umull	r2, r1, r2, r0
 8001b22:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001b26:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001b2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b34:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	0b50      	lsrs	r0, r2, #13
 8001b42:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b46:	1359      	asrs	r1, r3, #13
 8001b48:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	fb00 f203 	mul.w	r2, r0, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	fb03 f301 	mul.w	r3, r3, r1
 8001b58:	4413      	add	r3, r2
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	fba2 2100 	umull	r2, r1, r2, r0
 8001b60:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001b64:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b7e:	4621      	mov	r1, r4
 8001b80:	0e4a      	lsrs	r2, r1, #25
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	460c      	mov	r4, r1
 8001b88:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001b8c:	164b      	asrs	r3, r1, #25
 8001b8e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dev->dig_P8) * pressure) >> 19;
 8001b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b96:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	17da      	asrs	r2, r3, #31
 8001b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ba0:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ba2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ba6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001baa:	462a      	mov	r2, r5
 8001bac:	fb02 f203 	mul.w	r2, r2, r3
 8001bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc6:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001bca:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001bce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001be4:	4621      	mov	r1, r4
 8001be6:	0cca      	lsrs	r2, r1, #19
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	460c      	mov	r4, r1
 8001bee:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001bf2:	14cb      	asrs	r3, r1, #19
 8001bf4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001bf8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001bfc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c00:	1884      	adds	r4, r0, r2
 8001c02:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001c04:	eb41 0303 	adc.w	r3, r1, r3
 8001c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c0e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001c12:	4621      	mov	r1, r4
 8001c14:	1889      	adds	r1, r1, r2
 8001c16:	6539      	str	r1, [r7, #80]	@ 0x50
 8001c18:	4629      	mov	r1, r5
 8001c1a:	eb43 0101 	adc.w	r1, r3, r1
 8001c1e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	0a18      	lsrs	r0, r3, #8
 8001c30:	462a      	mov	r2, r5
 8001c32:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001c36:	462b      	mov	r3, r5
 8001c38:	1219      	asrs	r1, r3, #8
 8001c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c3e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	17da      	asrs	r2, r3, #31
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c48:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c56:	464c      	mov	r4, r9
 8001c58:	0123      	lsls	r3, r4, #4
 8001c5a:	46c4      	mov	ip, r8
 8001c5c:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001c60:	4644      	mov	r4, r8
 8001c62:	0122      	lsls	r2, r4, #4
 8001c64:	1884      	adds	r4, r0, r2
 8001c66:	603c      	str	r4, [r7, #0]
 8001c68:	eb41 0303 	adc.w	r3, r1, r3
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c72:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)pressure;
 8001c76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c86 <BME280_HumidityCompesation>:

	return 0; // OK
}


uint32_t BME280_HumidityCompesation(BME280 *dev, int32_t RawHumidity){
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]

	int32_t humidity;
	humidity = ((dev->t_fine) - ((int32_t)76800));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c98:	60fb      	str	r3, [r7, #12]
	humidity = (((((RawHumidity << 14) - (((int32_t)dev->dig_H4) << 20) - (((int32_t)dev->dig_H5) * humidity)) + ((int32_t)16384)) >> 15) * (((((((humidity * ((int32_t)dev->dig_H6)) >> 10) * (((humidity * ((int32_t)dev->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dev->dig_H2) + 8192) >> 14));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	039a      	lsls	r2, r3, #14
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001ca4:	051b      	lsls	r3, r3, #20
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cbc:	13db      	asrs	r3, r3, #15
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	f992 2036 	ldrsb.w	r2, [r2, #54]	@ 0x36
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	fb01 f202 	mul.w	r2, r1, r2
 8001ccc:	1292      	asrs	r2, r2, #10
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f891 1030 	ldrb.w	r1, [r1, #48]	@ 0x30
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	fb00 f101 	mul.w	r1, r0, r1
 8001cdc:	12c9      	asrs	r1, r1, #11
 8001cde:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001ce2:	fb01 f202 	mul.w	r2, r1, r2
 8001ce6:	1292      	asrs	r2, r2, #10
 8001ce8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	f9b1 102e 	ldrsh.w	r1, [r1, #46]	@ 0x2e
 8001cf2:	fb01 f202 	mul.w	r2, r1, r2
 8001cf6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001cfa:	1392      	asrs	r2, r2, #14
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	60fb      	str	r3, [r7, #12]
	humidity = (humidity - (((((humidity >> 15) * (humidity >> 15)) >> 7) * ((int32_t)dev->dig_H1)) >> 4));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	13db      	asrs	r3, r3, #15
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	13d2      	asrs	r2, r2, #15
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	111b      	asrs	r3, r3, #4
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	60fb      	str	r3, [r7, #12]
	humidity = (humidity < 0 ? 0 : humidity);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d28:	60fb      	str	r3, [r7, #12]
	humidity = (humidity > 419430400 ? 419430400 : humidity);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001d30:	bfa8      	it	ge
 8001d32:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001d36:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(humidity >> 12);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	131b      	asrs	r3, r3, #12
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <BME280_ReadAllData>:


uint8_t BME280_ReadAllData(BME280 *dev, I2C_HandleTypeDef *i2cHandle){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08e      	sub	sp, #56	@ 0x38
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	dev -> i2cHandle = i2cHandle;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t Data[8] = {};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
	int32_t RawTemp = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t RawPressure = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t RawHumidity = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28

	status = BME280_ReadRegisters(dev, PRESS_MSB, Data, 8);
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	2308      	movs	r3, #8
 8001d78:	21f7      	movs	r1, #247	@ 0xf7
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f86e 	bl	8001e5c <BME280_ReadRegisters>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (status != HAL_OK)
 8001d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <BME280_ReadAllData+0x4c>
	{
		return 1;	// NOK
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e046      	b.n	8001e20 <BME280_ReadAllData+0xda>
	}

	// Save all data and combine
	uint32_t DataMSB = (uint32_t)Data[3] << 12;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	031b      	lsls	r3, r3, #12
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t DataLSB = (uint32_t)Data[4] << 4;
 8001d98:	7c3b      	ldrb	r3, [r7, #16]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	623b      	str	r3, [r7, #32]
	uint32_t DataXLSB = (uint32_t)Data[5] >> 4;
 8001d9e:	7c7b      	ldrb	r3, [r7, #17]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	61fb      	str	r3, [r7, #28]
	RawTemp = DataMSB | DataLSB | DataXLSB;
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	633b      	str	r3, [r7, #48]	@ 0x30


	DataMSB = (uint32_t)Data[0] << 12;
 8001db2:	7b3b      	ldrb	r3, [r7, #12]
 8001db4:	031b      	lsls	r3, r3, #12
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[1] << 4;
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	623b      	str	r3, [r7, #32]
	DataXLSB = (uint32_t)Data[2] >> 4;
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	61fb      	str	r3, [r7, #28]
	RawPressure = DataMSB | DataLSB | DataXLSB;
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c


	DataMSB = (uint32_t)Data[6] << 8;
 8001dd2:	7cbb      	ldrb	r3, [r7, #18]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
	DataLSB = (uint32_t)Data[7];
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	623b      	str	r3, [r7, #32]
	RawHumidity = DataMSB | DataLSB;
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28

	// compesate and save to struct
	dev -> Temp_C = BME280_TemperatureCompesation(&(*dev), RawTemp);
 8001de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fc5b 	bl	80016a2 <BME280_TemperatureCompesation>
 8001dec:	4602      	mov	r2, r0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]

	uint32_t press = BME280_PressureCompesation(&(*dev), RawPressure);
 8001df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fc8d 	bl	8001714 <BME280_PressureCompesation>
 8001dfa:	61b8      	str	r0, [r7, #24]
	dev -> Press_Pa = (press / 256);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fe51 	bl	8000aa8 <__aeabi_ui2f>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	60da      	str	r2, [r3, #12]

	uint32_t hum = BME280_HumidityCompesation(&(*dev), RawHumidity);
 8001e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ff39 	bl	8001c86 <BME280_HumidityCompesation>
 8001e14:	6178      	str	r0, [r7, #20]
	dev -> Hum_Perc = (hum / 1024);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	0a9a      	lsrs	r2, r3, #10
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

	return 0; // OK
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3738      	adds	r7, #56	@ 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <BME280_ReadRegister>:


/* LL Drivers */
HAL_StatusTypeDef BME280_ReadRegister(BME280 *dev, uint8_t reg, uint8_t *data){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	460b      	mov	r3, r1
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	2364      	movs	r3, #100	@ 0x64
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2301      	movs	r3, #1
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	21ec      	movs	r1, #236	@ 0xec
 8001e4e:	f005 fae5 	bl	800741c <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <BME280_ReadRegisters>:

HAL_StatusTypeDef BME280_ReadRegisters(BME280 *dev, uint8_t reg, uint8_t *data, uint8_t lenght){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, data, lenght, 100);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	7abb      	ldrb	r3, [r7, #10]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2164      	movs	r1, #100	@ 0x64
 8001e7e:	9102      	str	r1, [sp, #8]
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	21ec      	movs	r1, #236	@ 0xec
 8001e8a:	f005 fac7 	bl	800741c <HAL_I2C_Mem_Read>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <BME280_WriteRegister>:

HAL_StatusTypeDef BME280_WriteRegister(BME280 *dev, uint8_t reg, uint8_t data){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write (dev -> i2cHandle, BME280_ID, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2364      	movs	r3, #100	@ 0x64
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	1cbb      	adds	r3, r7, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	21ec      	movs	r1, #236	@ 0xec
 8001ec0:	f005 f9b2 	bl	8007228 <HAL_I2C_Mem_Write>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <EEPROM_Write_Data>:
}


// Write data to eeprom at specified address
HAL_StatusTypeDef EEPROM_Write_Data(uint32_t StartAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
	// Clear any sticky error flags from a previous cycle (survive reset)
	__HAL_FLASH_CLEAR_FLAG(
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <EEPROM_Write_Data+0x90>)
 8001ee0:	f640 7202 	movw	r2, #3842	@ 0xf02
 8001ee4:	619a      	str	r2, [r3, #24]
	    FLASH_FLAG_OPTVERR
	);


    // Check if the address range is valid for the EEPROM
    uint32_t endAddress = StartAddress + (numberofwords * 4) - 1;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	61bb      	str	r3, [r7, #24]
    if (StartAddress < FLASH_EEPROM_BASE || endAddress > FLASH_EEPROM_END) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <EEPROM_Write_Data+0x94>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d903      	bls.n	8001f04 <EEPROM_Write_Data+0x34>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4a1a      	ldr	r2, [pc, #104]	@ (8001f68 <EEPROM_Write_Data+0x98>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <EEPROM_Write_Data+0x38>
        return HAL_ERROR; // Address is out of the valid EEPROM range
 8001f04:	2301      	movs	r3, #1
 8001f06:	e026      	b.n	8001f56 <EEPROM_Write_Data+0x86>
    }

    HAL_FLASHEx_DATAEEPROM_Unlock();
 8001f08:	f004 faf0 	bl	80064ec <HAL_FLASHEx_DATAEEPROM_Unlock>

    for (uint16_t i = 0; i < numberofwords; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	83fb      	strh	r3, [r7, #30]
 8001f10:	e01a      	b.n	8001f48 <EEPROM_Write_Data+0x78>
    {
        uint32_t currentAddress = StartAddress + (i * 4);
 8001f12:	8bfb      	ldrh	r3, [r7, #30]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
        uint32_t currentData = Data[i];
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]

        // Program one word at a time
        if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, currentAddress, currentData) != HAL_OK)
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f004 fb3a 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <EEPROM_Write_Data+0x72>
        {
            HAL_FLASHEx_DATAEEPROM_Lock();
 8001f3a:	f004 faf3 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Lock>
            return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e009      	b.n	8001f56 <EEPROM_Write_Data+0x86>
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f42:	8bfb      	ldrh	r3, [r7, #30]
 8001f44:	3301      	adds	r3, #1
 8001f46:	83fb      	strh	r3, [r7, #30]
 8001f48:	8bfa      	ldrh	r2, [r7, #30]
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3e0      	bcc.n	8001f12 <EEPROM_Write_Data+0x42>
        }
    }

    HAL_FLASHEx_DATAEEPROM_Lock();
 8001f50:	f004 fae8 	bl	8006524 <HAL_FLASHEx_DATAEEPROM_Lock>
    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00
 8001f64:	0807ffff 	.word	0x0807ffff
 8001f68:	08080fff 	.word	0x08080fff

08001f6c <EEPROM_Read_Data>:


void EEPROM_Read_Data(uint32_t StartAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	82fb      	strh	r3, [r7, #22]
 8001f7e:	e00e      	b.n	8001f9e <EEPROM_Read_Data+0x32>
    {
        // Direct memory read from EEPROM
        RxBuf[i] = *(__IO uint32_t *)(StartAddress + (i * 4));
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	680a      	ldr	r2, [r1, #0]
 8001f96:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < numberofwords; i++)
 8001f98:	8afb      	ldrh	r3, [r7, #22]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	82fb      	strh	r3, [r7, #22]
 8001f9e:	8afa      	ldrh	r2, [r7, #22]
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3ec      	bcc.n	8001f80 <EEPROM_Read_Data+0x14>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0c      	blt.n	8001fe0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_ClearPendingIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	3360      	adds	r3, #96	@ 0x60
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b093      	sub	sp, #76	@ 0x4c
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f003 f948 	bl	800528a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 fd4d 	bl	8002a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffe:	f000 ffe7 	bl	8002fd0 <MX_GPIO_Init>
  MX_RTC_Init();
 8002002:	f000 fe63 	bl	8002ccc <MX_RTC_Init>
  MX_SPI2_Init();
 8002006:	f000 ff19 	bl	8002e3c <MX_SPI2_Init>
  MX_I2C1_Init();
 800200a:	f000 fe03 	bl	8002c14 <MX_I2C1_Init>
  MX_I2C2_Init();
 800200e:	f000 fe2f 	bl	8002c70 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002012:	f000 fee3 	bl	8002ddc <MX_SPI1_Init>
  MX_ADC_Init();
 8002016:	f000 fda5 	bl	8002b64 <MX_ADC_Init>
  MX_TIM2_Init();
 800201a:	f000 ff3f 	bl	8002e9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800201e:	f000 ff89 	bl	8002f34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  float delta = 100.0f / (EARTH_HUM_DRY_VAL -  EARTH_HUM_WET_VAL); // Precalculated value
 8002022:	4bb3      	ldr	r3, [pc, #716]	@ (80022f0 <main+0x300>)
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t status = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t tx_count = 0; // Read number of TX packets from flash
 800202c:	2300      	movs	r3, #0
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* MAIN STATE MACHINE */
	  switch(state)
 8002030:	4bb0      	ldr	r3, [pc, #704]	@ (80022f4 <main+0x304>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b05      	cmp	r3, #5
 8002036:	f200 8504 	bhi.w	8002a42 <main+0xa52>
 800203a:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <main+0x50>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002059 	.word	0x08002059
 8002044:	08002331 	.word	0x08002331
 8002048:	0800238d 	.word	0x0800238d
 800204c:	080026d1 	.word	0x080026d1
 8002050:	08002869 	.word	0x08002869
 8002054:	08002a43 	.word	0x08002a43


	  ////////* DEVICE BOOT *////////
	  case STATE_INIT:

		  if (measurements.ADC_read_cnt == 0 && measurements.init_end == 0)
 8002058:	4ba7      	ldr	r3, [pc, #668]	@ (80022f8 <main+0x308>)
 800205a:	78db      	ldrb	r3, [r3, #3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d161      	bne.n	8002124 <main+0x134>
 8002060:	4ba5      	ldr	r3, [pc, #660]	@ (80022f8 <main+0x308>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15d      	bne.n	8002124 <main+0x134>
		  {
			  /* BME280 */
			  status += BME280_Reset(&bme280, &hi2c2);
 8002068:	49a4      	ldr	r1, [pc, #656]	@ (80022fc <main+0x30c>)
 800206a:	48a5      	ldr	r0, [pc, #660]	@ (8002300 <main+0x310>)
 800206c:	f7ff f964 	bl	8001338 <BME280_Reset>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002078:	4413      	add	r3, r2
 800207a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  HAL_Delay(200);
 800207e:	20c8      	movs	r0, #200	@ 0xc8
 8002080:	f003 f972 	bl	8005368 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 8002084:	499d      	ldr	r1, [pc, #628]	@ (80022fc <main+0x30c>)
 8002086:	489e      	ldr	r0, [pc, #632]	@ (8002300 <main+0x310>)
 8002088:	f7ff f936 	bl	80012f8 <BME280_ReadDeviceID>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002094:	4413      	add	r3, r2
 8002096:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 800209a:	4998      	ldr	r1, [pc, #608]	@ (80022fc <main+0x30c>)
 800209c:	4898      	ldr	r0, [pc, #608]	@ (8002300 <main+0x310>)
 800209e:	f7ff fa22 	bl	80014e6 <BME280_ReadCalibData>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80020aa:	4413      	add	r3, r2
 80020ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_Init(&bme280, &hi2c2);
 80020b0:	4992      	ldr	r1, [pc, #584]	@ (80022fc <main+0x30c>)
 80020b2:	4893      	ldr	r0, [pc, #588]	@ (8002300 <main+0x310>)
 80020b4:	f7ff f9a2 	bl	80013fc <BME280_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80020c0:	4413      	add	r3, r2
 80020c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2108      	movs	r1, #8
 80020ca:	488e      	ldr	r0, [pc, #568]	@ (8002304 <main+0x314>)
 80020cc:	f004 ff24 	bl	8006f18 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2101      	movs	r1, #1
 80020d4:	488c      	ldr	r0, [pc, #560]	@ (8002308 <main+0x318>)
 80020d6:	f004 ff1f 	bl	8006f18 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 80020da:	2064      	movs	r0, #100	@ 0x64
 80020dc:	f003 f944 	bl	8005368 <HAL_Delay>

			  // Set some pins
			  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2110      	movs	r1, #16
 80020e4:	4887      	ldr	r0, [pc, #540]	@ (8002304 <main+0x314>)
 80020e6:	f004 ff17 	bl	8006f18 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020f0:	4885      	ldr	r0, [pc, #532]	@ (8002308 <main+0x318>)
 80020f2:	f004 ff11 	bl	8006f18 <HAL_GPIO_WritePin>

			  // Disable RTC alarm for init routine
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80020f6:	4b85      	ldr	r3, [pc, #532]	@ (800230c <main+0x31c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b83      	ldr	r3, [pc, #524]	@ (800230c <main+0x31c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002106:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002108:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210c:	487f      	ldr	r0, [pc, #508]	@ (800230c <main+0x31c>)
 800210e:	f008 feb7 	bl	800ae80 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Start_IT(&htim2);
 8002112:	487f      	ldr	r0, [pc, #508]	@ (8002310 <main+0x320>)
 8002114:	f009 fe4a 	bl	800bdac <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002118:	487e      	ldr	r0, [pc, #504]	@ (8002314 <main+0x324>)
 800211a:	f009 fe47 	bl	800bdac <HAL_TIM_Base_Start_IT>

			  measurements.init_end = 1;	// Signal init complete
 800211e:	4b76      	ldr	r3, [pc, #472]	@ (80022f8 <main+0x308>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002124:	4b74      	ldr	r3, [pc, #464]	@ (80022f8 <main+0x308>)
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	2b01      	cmp	r3, #1
 800212a:	f040 848d 	bne.w	8002a48 <main+0xa58>
 800212e:	4b72      	ldr	r3, [pc, #456]	@ (80022f8 <main+0x308>)
 8002130:	785b      	ldrb	r3, [r3, #1]
 8002132:	2b01      	cmp	r3, #1
 8002134:	f040 8488 	bne.w	8002a48 <main+0xa58>
		  {
			  // Read analog values
			  measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 8002138:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <main+0x308>)
 800213a:	78db      	ldrb	r3, [r3, #3]
 800213c:	461c      	mov	r4, r3
 800213e:	4876      	ldr	r0, [pc, #472]	@ (8002318 <main+0x328>)
 8002140:	f001 f8ca 	bl	80032d8 <ADC_Read_Battery>
 8002144:	4602      	mov	r2, r0
 8002146:	496c      	ldr	r1, [pc, #432]	@ (80022f8 <main+0x308>)
 8002148:	f104 030a 	add.w	r3, r4, #10
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 8002150:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002154:	4619      	mov	r1, r3
 8002156:	4871      	ldr	r0, [pc, #452]	@ (800231c <main+0x32c>)
 8002158:	f001 f9ac 	bl	80034b4 <ADC_Read_EHum>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	4b65      	ldr	r3, [pc, #404]	@ (80022f8 <main+0x308>)
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	461c      	mov	r4, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f7fe fc9e 	bl	8000aa8 <__aeabi_ui2f>
 800216c:	4602      	mov	r2, r0
 800216e:	4962      	ldr	r1, [pc, #392]	@ (80022f8 <main+0x308>)
 8002170:	1ca3      	adds	r3, r4, #2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 8002178:	4b5f      	ldr	r3, [pc, #380]	@ (80022f8 <main+0x308>)
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	3301      	adds	r3, #1
 800217e:	b2da      	uxtb	r2, r3
 8002180:	4b5d      	ldr	r3, [pc, #372]	@ (80022f8 <main+0x308>)
 8002182:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 	// reset ADC read flag
 8002184:	4b5c      	ldr	r3, [pc, #368]	@ (80022f8 <main+0x308>)
 8002186:	2200      	movs	r2, #0
 8002188:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 		// reset timer read flag
 800218a:	4b5b      	ldr	r3, [pc, #364]	@ (80022f8 <main+0x308>)
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 8002190:	485f      	ldr	r0, [pc, #380]	@ (8002310 <main+0x320>)
 8002192:	f009 fe0b 	bl	800bdac <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 8002196:	4b58      	ldr	r3, [pc, #352]	@ (80022f8 <main+0x308>)
 8002198:	78db      	ldrb	r3, [r3, #3]
 800219a:	2b05      	cmp	r3, #5
 800219c:	f040 8454 	bne.w	8002a48 <main+0xa58>
			  {
				  measurements.ADC_read_cnt = 0;
 80021a0:	4b55      	ldr	r3, [pc, #340]	@ (80022f8 <main+0x308>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 80021a6:	485a      	ldr	r0, [pc, #360]	@ (8002310 <main+0x320>)
 80021a8:	f009 fe52 	bl	800be50 <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2108      	movs	r1, #8
 80021b0:	4854      	ldr	r0, [pc, #336]	@ (8002304 <main+0x314>)
 80021b2:	f004 feb1 	bl	8006f18 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2101      	movs	r1, #1
 80021ba:	4853      	ldr	r0, [pc, #332]	@ (8002308 <main+0x318>)
 80021bc:	f004 feac 	bl	8006f18 <HAL_GPIO_WritePin>

				  // Calculate average battery voltage
				  measurements.battery_voltage = 0;
 80021c0:	4b4d      	ldr	r3, [pc, #308]	@ (80022f8 <main+0x308>)
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 80021c8:	4b4b      	ldr	r3, [pc, #300]	@ (80022f8 <main+0x308>)
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]

				  for (int i = 0; i < 5; i++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80021d4:	e021      	b.n	800221a <main+0x22a>
				  {
					  measurements.battery_voltage += measurements.bat_voltage[i];
 80021d6:	4b48      	ldr	r3, [pc, #288]	@ (80022f8 <main+0x308>)
 80021d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021da:	4947      	ldr	r1, [pc, #284]	@ (80022f8 <main+0x308>)
 80021dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021de:	330a      	adds	r3, #10
 80021e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7fe fbae 	bl	8000948 <__addsf3>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <main+0x308>)
 80021f2:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 80021f4:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <main+0x308>)
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	493f      	ldr	r1, [pc, #252]	@ (80022f8 <main+0x308>)
 80021fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021fc:	3302      	adds	r3, #2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7fe fb9e 	bl	8000948 <__addsf3>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <main+0x308>)
 8002212:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 8002214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002216:	3301      	adds	r3, #1
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
 800221a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221c:	2b04      	cmp	r3, #4
 800221e:	ddda      	ble.n	80021d6 <main+0x1e6>
				  }

				  measurements.battery_voltage /= 5;
 8002220:	4b35      	ldr	r3, [pc, #212]	@ (80022f8 <main+0x308>)
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	493e      	ldr	r1, [pc, #248]	@ (8002320 <main+0x330>)
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd4a 	bl	8000cc0 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <main+0x308>)
 8002232:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 8002234:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <main+0x308>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4939      	ldr	r1, [pc, #228]	@ (8002320 <main+0x330>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd40 	bl	8000cc0 <__aeabi_fdiv>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4b2c      	ldr	r3, [pc, #176]	@ (80022f8 <main+0x308>)
 8002246:	621a      	str	r2, [r3, #32]

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 8002248:	2201      	movs	r2, #1
 800224a:	492c      	ldr	r1, [pc, #176]	@ (80022fc <main+0x30c>)
 800224c:	482c      	ldr	r0, [pc, #176]	@ (8002300 <main+0x310>)
 800224e:	f7ff f913 	bl	8001478 <BME280_GoToFromSleep>
				  HAL_Delay(100);
 8002252:	2064      	movs	r0, #100	@ 0x64
 8002254:	f003 f888 	bl	8005368 <HAL_Delay>
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002258:	4928      	ldr	r1, [pc, #160]	@ (80022fc <main+0x30c>)
 800225a:	4829      	ldr	r0, [pc, #164]	@ (8002300 <main+0x310>)
 800225c:	f7ff fd73 	bl	8001d46 <BME280_ReadAllData>
				  //BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep

				  // LoRa module
				  RFM95W_Struct_Init(&rfm95_handle);
 8002260:	4830      	ldr	r0, [pc, #192]	@ (8002324 <main+0x334>)
 8002262:	f001 f86f 	bl	8003344 <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status++;
 8002266:	482f      	ldr	r0, [pc, #188]	@ (8002324 <main+0x334>)
 8002268:	f001 fbac 	bl	80039c4 <rfm95_init>
 800226c:	4603      	mov	r3, r0
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <main+0x292>
 8002278:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800227c:	3301      	adds	r3, #1
 800227e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); 		// Clear EXTI1 NVIC pending flag
 8002282:	2007      	movs	r0, #7
 8002284:	f7ff fe96 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); 		// Clear EXTI3 NVIC pending
 8002288:	2009      	movs	r0, #9
 800228a:	f7ff fe93 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); 	// Clear EXTI15_10 NVIC pending flag
 800228e:	2028      	movs	r0, #40	@ 0x28
 8002290:	f7ff fe90 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002294:	2009      	movs	r0, #9
 8002296:	f004 f80c 	bl	80062b2 <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800229a:	2007      	movs	r0, #7
 800229c:	f004 f809 	bl	80062b2 <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < 2.8f) status++; //Vbat NEEDS TO BE SET
 80022a0:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <main+0x308>)
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	4920      	ldr	r1, [pc, #128]	@ (8002328 <main+0x338>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fdf4 	bl	8000e94 <__aeabi_fcmplt>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <main+0x2cc>
 80022b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022b6:	3301      	adds	r3, #1
 80022b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  lora_data.errSendCnt += status;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <main+0x33c>)
 80022be:	785a      	ldrb	r2, [r3, #1]
 80022c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022c4:	4413      	add	r3, r2
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <main+0x33c>)
 80022ca:	705a      	strb	r2, [r3, #1]

				  if (status == 0)
 80022cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <main+0x2f8>
				  {
					  //state = STATE_FIRST_CONN;
					  state = STATE_SEND;
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <main+0x304>)
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
					  status = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					  lora_data.errSendCnt = 0;
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <main+0x33c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
					  state = STATE_GO_SLEEP;
				  }
			  }
		  }

		  break;
 80022e6:	e3af      	b.n	8002a48 <main+0xa58>
					  state = STATE_GO_SLEEP;
 80022e8:	4b02      	ldr	r3, [pc, #8]	@ (80022f4 <main+0x304>)
 80022ea:	2204      	movs	r2, #4
 80022ec:	701a      	strb	r2, [r3, #0]
		  break;
 80022ee:	e3ab      	b.n	8002a48 <main+0xa58>
 80022f0:	3dbadc7f 	.word	0x3dbadc7f
 80022f4:	20000540 	.word	0x20000540
 80022f8:	200001c0 	.word	0x200001c0
 80022fc:	2000039c 	.word	0x2000039c
 8002300:	20000188 	.word	0x20000188
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	200003f0 	.word	0x200003f0
 8002310:	200004c0 	.word	0x200004c0
 8002314:	20000500 	.word	0x20000500
 8002318:	200001c4 	.word	0x200001c4
 800231c:	200001c8 	.word	0x200001c8
 8002320:	40a00000 	.word	0x40a00000
 8002324:	20000210 	.word	0x20000210
 8002328:	40333333 	.word	0x40333333
 800232c:	20000200 	.word	0x20000200

	  ////////* FIRST LoRa/SIM CONNECTION TEST *////////
	  case STATE_FIRST_CONN:

		  // Create data packet that will be send - dummy
		  uint8_t test_data_packet[] = {0x01, 0x02, 0x03, 0x04};
 8002330:	4b85      	ldr	r3, [pc, #532]	@ (8002548 <main+0x558>)
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30

		#ifdef USE_EEPROM
		  EEPROM_Read_Data(FLASH_EEPROM_BASE, &tx_count, 1);
 8002334:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002338:	2201      	movs	r2, #1
 800233a:	4619      	mov	r1, r3
 800233c:	4883      	ldr	r0, [pc, #524]	@ (800254c <main+0x55c>)
 800233e:	f7ff fe15 	bl	8001f6c <EEPROM_Read_Data>
		#else
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // 1 = one word
		#endif

		  rfm95_handle.config.tx_frame_count = tx_count;
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b82      	ldr	r3, [pc, #520]	@ (8002550 <main+0x560>)
 8002348:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  if (!rfm95_send_receive_cycle(&rfm95_handle, test_data_packet, sizeof(test_data_packet)))
 800234c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002350:	2204      	movs	r2, #4
 8002352:	4619      	mov	r1, r3
 8002354:	487e      	ldr	r0, [pc, #504]	@ (8002550 <main+0x560>)
 8002356:	f002 fb38 	bl	80049ca <rfm95_send_receive_cycle>
 800235a:	4603      	mov	r3, r0
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <main+0x37e>
		  {
			  // Put device in error state
			  state = STATE_ERROR;
 8002366:	4b7b      	ldr	r3, [pc, #492]	@ (8002554 <main+0x564>)
 8002368:	2205      	movs	r2, #5
 800236a:	701a      	strb	r2, [r3, #0]

			  // Send data packet
			  //state = STATE_SEND;
		  }

		  break;
 800236c:	e370      	b.n	8002a50 <main+0xa60>
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 800236e:	4b78      	ldr	r3, [pc, #480]	@ (8002550 <main+0x560>)
 8002370:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002374:	60bb      	str	r3, [r7, #8]
			  EEPROM_Write_Data(FLASH_EEPROM_BASE, &temp_data, 1);
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	2201      	movs	r2, #1
 800237c:	4619      	mov	r1, r3
 800237e:	4873      	ldr	r0, [pc, #460]	@ (800254c <main+0x55c>)
 8002380:	f7ff fda6 	bl	8001ed0 <EEPROM_Write_Data>
			  state = STATE_GO_SLEEP;
 8002384:	4b73      	ldr	r3, [pc, #460]	@ (8002554 <main+0x564>)
 8002386:	2204      	movs	r2, #4
 8002388:	701a      	strb	r2, [r3, #0]
		  break;
 800238a:	e361      	b.n	8002a50 <main+0xa60>

	  ////////* DEVICE WAKEUP ROUTINE *////////
	  case STATE_RUN:

		  // Start all clocks
		  if (awake == 1)
 800238c:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <main+0x568>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d138      	bne.n	8002406 <main+0x416>
		  {
			  awake = 0;
 8002394:	4b70      	ldr	r3, [pc, #448]	@ (8002558 <main+0x568>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
			  SystemClock_Config();
 800239a:	f000 fb7d 	bl	8002a98 <SystemClock_Config>
			  HAL_ResumeTick();
 800239e:	f003 f805 	bl	80053ac <HAL_ResumeTick>

			  // Reset wake up flag
			  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80023a2:	4b6e      	ldr	r3, [pc, #440]	@ (800255c <main+0x56c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <main+0x56c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80023b2:	60da      	str	r2, [r3, #12]
			  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b8:	4868      	ldr	r0, [pc, #416]	@ (800255c <main+0x56c>)
 80023ba:	f008 fd61 	bl	800ae80 <HAL_RTC_DeactivateAlarm>

			  HAL_TIM_Base_Init(&htim2);
 80023be:	4868      	ldr	r0, [pc, #416]	@ (8002560 <main+0x570>)
 80023c0:	f009 fcb4 	bl	800bd2c <HAL_TIM_Base_Init>
			  HAL_TIM_Base_Init(&htim3);
 80023c4:	4867      	ldr	r0, [pc, #412]	@ (8002564 <main+0x574>)
 80023c6:	f009 fcb1 	bl	800bd2c <HAL_TIM_Base_Init>
			  HAL_NVIC_EnableIRQ(TIM2_IRQn); 	// Disable Timer 2 interrupt
 80023ca:	201c      	movs	r0, #28
 80023cc:	f003 ff71 	bl	80062b2 <HAL_NVIC_EnableIRQ>
			  HAL_NVIC_EnableIRQ(TIM3_IRQn); 	// Disable Timer 3 interrupt
 80023d0:	201d      	movs	r0, #29
 80023d2:	f003 ff6e 	bl	80062b2 <HAL_NVIC_EnableIRQ>

			  // Enable power to humidity probe and to voltage divider for battery measurement
			  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2108      	movs	r1, #8
 80023da:	4863      	ldr	r0, [pc, #396]	@ (8002568 <main+0x578>)
 80023dc:	f004 fd9c 	bl	8006f18 <HAL_GPIO_WritePin>
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 80023e0:	4b62      	ldr	r3, [pc, #392]	@ (800256c <main+0x57c>)
 80023e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e6:	2b17      	cmp	r3, #23
 80023e8:	d904      	bls.n	80023f4 <main+0x404>
 80023ea:	2201      	movs	r2, #1
 80023ec:	2101      	movs	r1, #1
 80023ee:	4860      	ldr	r0, [pc, #384]	@ (8002570 <main+0x580>)
 80023f0:	f004 fd92 	bl	8006f18 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 80023f4:	2064      	movs	r0, #100	@ 0x64
 80023f6:	f002 ffb7 	bl	8005368 <HAL_Delay>

			  HAL_ADC_Init(&hadc);
 80023fa:	485e      	ldr	r0, [pc, #376]	@ (8002574 <main+0x584>)
 80023fc:	f002 fff2 	bl	80053e4 <HAL_ADC_Init>
			  HAL_ADC_Start(&hadc);
 8002400:	485c      	ldr	r0, [pc, #368]	@ (8002574 <main+0x584>)
 8002402:	f003 fa09 	bl	8005818 <HAL_ADC_Start>

		  }

		  if (measurements.ADC_read_cnt == 0)
 8002406:	4b59      	ldr	r3, [pc, #356]	@ (800256c <main+0x57c>)
 8002408:	78db      	ldrb	r3, [r3, #3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d134      	bne.n	8002478 <main+0x488>
		  {
			  /* BME280 */
			#ifndef SLEEP_MODE_STOP
			  status += BME280_Reset(&bme280, &hi2c2);
 800240e:	495a      	ldr	r1, [pc, #360]	@ (8002578 <main+0x588>)
 8002410:	485a      	ldr	r0, [pc, #360]	@ (800257c <main+0x58c>)
 8002412:	f7fe ff91 	bl	8001338 <BME280_Reset>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800241e:	4413      	add	r3, r2
 8002420:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  HAL_Delay(200);
 8002424:	20c8      	movs	r0, #200	@ 0xc8
 8002426:	f002 ff9f 	bl	8005368 <HAL_Delay>
			  status += BME280_ReadDeviceID(&bme280, &hi2c2);
 800242a:	4953      	ldr	r1, [pc, #332]	@ (8002578 <main+0x588>)
 800242c:	4853      	ldr	r0, [pc, #332]	@ (800257c <main+0x58c>)
 800242e:	f7fe ff63 	bl	80012f8 <BME280_ReadDeviceID>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800243a:	4413      	add	r3, r2
 800243c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_ReadCalibData(&bme280, &hi2c2);
 8002440:	494d      	ldr	r1, [pc, #308]	@ (8002578 <main+0x588>)
 8002442:	484e      	ldr	r0, [pc, #312]	@ (800257c <main+0x58c>)
 8002444:	f7ff f84f 	bl	80014e6 <BME280_ReadCalibData>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002450:	4413      	add	r3, r2
 8002452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  status += BME280_Init(&bme280, &hi2c2);
 8002456:	4948      	ldr	r1, [pc, #288]	@ (8002578 <main+0x588>)
 8002458:	4848      	ldr	r0, [pc, #288]	@ (800257c <main+0x58c>)
 800245a:	f7fe ffcf 	bl	80013fc <BME280_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002466:	4413      	add	r3, r2
 8002468:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			#endif

			  HAL_TIM_Base_Start_IT(&htim2);
 800246c:	483c      	ldr	r0, [pc, #240]	@ (8002560 <main+0x570>)
 800246e:	f009 fc9d 	bl	800bdac <HAL_TIM_Base_Start_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 8002472:	483c      	ldr	r0, [pc, #240]	@ (8002564 <main+0x574>)
 8002474:	f009 fc9a 	bl	800bdac <HAL_TIM_Base_Start_IT>
		  }

		  if (measurements.ADC_read_end == 1 && measurements.ADC_read == 1)
 8002478:	4b3c      	ldr	r3, [pc, #240]	@ (800256c <main+0x57c>)
 800247a:	789b      	ldrb	r3, [r3, #2]
 800247c:	2b01      	cmp	r3, #1
 800247e:	f040 82e6 	bne.w	8002a4e <main+0xa5e>
 8002482:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <main+0x57c>)
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b01      	cmp	r3, #1
 8002488:	f040 82e1 	bne.w	8002a4e <main+0xa5e>
		  {
			  // Read analog values
			  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_voltage[measurements.ADC_read_cnt] = ADC_Read_Battery(&measurements.ADC_values[0]);
 800248c:	4b37      	ldr	r3, [pc, #220]	@ (800256c <main+0x57c>)
 800248e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002492:	2b17      	cmp	r3, #23
 8002494:	d90b      	bls.n	80024ae <main+0x4be>
 8002496:	4b35      	ldr	r3, [pc, #212]	@ (800256c <main+0x57c>)
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	461c      	mov	r4, r3
 800249c:	4838      	ldr	r0, [pc, #224]	@ (8002580 <main+0x590>)
 800249e:	f000 ff1b 	bl	80032d8 <ADC_Read_Battery>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4931      	ldr	r1, [pc, #196]	@ (800256c <main+0x57c>)
 80024a6:	f104 030a 	add.w	r3, r4, #10
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  measurements.earth_hum[measurements.ADC_read_cnt] = ADC_Read_EHum(&measurements.ADC_values[1], &delta);
 80024ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024b2:	4619      	mov	r1, r3
 80024b4:	4833      	ldr	r0, [pc, #204]	@ (8002584 <main+0x594>)
 80024b6:	f000 fffd 	bl	80034b4 <ADC_Read_EHum>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <main+0x57c>)
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	461c      	mov	r4, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f7fe faef 	bl	8000aa8 <__aeabi_ui2f>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4927      	ldr	r1, [pc, #156]	@ (800256c <main+0x57c>)
 80024ce:	1ca3      	adds	r3, r4, #2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	605a      	str	r2, [r3, #4]
			  measurements.ADC_read_cnt ++;
 80024d6:	4b25      	ldr	r3, [pc, #148]	@ (800256c <main+0x57c>)
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <main+0x57c>)
 80024e0:	70da      	strb	r2, [r3, #3]

			  measurements.ADC_read_end = 0; 		// reset ADC read flag
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <main+0x57c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	709a      	strb	r2, [r3, #2]
			  measurements.ADC_read = 0; 			// reset timer read flag
 80024e8:	4b20      	ldr	r3, [pc, #128]	@ (800256c <main+0x57c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	705a      	strb	r2, [r3, #1]
			  HAL_TIM_Base_Start_IT(&htim2);
 80024ee:	481c      	ldr	r0, [pc, #112]	@ (8002560 <main+0x570>)
 80024f0:	f009 fc5c 	bl	800bdac <HAL_TIM_Base_Start_IT>

			  // Calculate average values
			  if (measurements.ADC_read_cnt == 5)
 80024f4:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <main+0x57c>)
 80024f6:	78db      	ldrb	r3, [r3, #3]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	f040 82a8 	bne.w	8002a4e <main+0xa5e>
			  {
				  measurements.ADC_read_cnt = 0;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <main+0x57c>)
 8002500:	2200      	movs	r2, #0
 8002502:	70da      	strb	r2, [r3, #3]
				  HAL_TIM_Base_Stop_IT(&htim2);
 8002504:	4816      	ldr	r0, [pc, #88]	@ (8002560 <main+0x570>)
 8002506:	f009 fca3 	bl	800be50 <HAL_TIM_Base_Stop_IT>

				  // Disable power to humidity probe and to voltage divider for battery measurement
				  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2108      	movs	r1, #8
 800250e:	4816      	ldr	r0, [pc, #88]	@ (8002568 <main+0x578>)
 8002510:	f004 fd02 	bl	8006f18 <HAL_GPIO_WritePin>
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_RESET);
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <main+0x57c>)
 8002516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800251a:	2b17      	cmp	r3, #23
 800251c:	d904      	bls.n	8002528 <main+0x538>
 800251e:	2200      	movs	r2, #0
 8002520:	2101      	movs	r1, #1
 8002522:	4813      	ldr	r0, [pc, #76]	@ (8002570 <main+0x580>)
 8002524:	f004 fcf8 	bl	8006f18 <HAL_GPIO_WritePin>

				  /* Calculate average battery voltage */

				  // Reset values
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage = 0; // Between reads keep the same voltage
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <main+0x57c>)
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800252e:	2b17      	cmp	r3, #23
 8002530:	d903      	bls.n	800253a <main+0x54a>
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <main+0x57c>)
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity = 0;
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <main+0x57c>)
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	621a      	str	r2, [r3, #32]

				  // Sum the measured values
				  for (int i = 0; i < 5; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002546:	e046      	b.n	80025d6 <main+0x5e6>
 8002548:	04030201 	.word	0x04030201
 800254c:	08080000 	.word	0x08080000
 8002550:	20000210 	.word	0x20000210
 8002554:	20000540 	.word	0x20000540
 8002558:	20000000 	.word	0x20000000
 800255c:	200003f0 	.word	0x200003f0
 8002560:	200004c0 	.word	0x200004c0
 8002564:	20000500 	.word	0x20000500
 8002568:	40020000 	.word	0x40020000
 800256c:	200001c0 	.word	0x200001c0
 8002570:	40020400 	.word	0x40020400
 8002574:	200002f4 	.word	0x200002f4
 8002578:	2000039c 	.word	0x2000039c
 800257c:	20000188 	.word	0x20000188
 8002580:	200001c4 	.word	0x200001c4
 8002584:	200001c8 	.word	0x200001c8
				  {
					  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage += measurements.bat_voltage[i];
 8002588:	4ba3      	ldr	r3, [pc, #652]	@ (8002818 <main+0x828>)
 800258a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800258e:	2b17      	cmp	r3, #23
 8002590:	d90e      	bls.n	80025b0 <main+0x5c0>
 8002592:	4ba1      	ldr	r3, [pc, #644]	@ (8002818 <main+0x828>)
 8002594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002596:	49a0      	ldr	r1, [pc, #640]	@ (8002818 <main+0x828>)
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	330a      	adds	r3, #10
 800259c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f7fe f9d0 	bl	8000948 <__addsf3>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b9a      	ldr	r3, [pc, #616]	@ (8002818 <main+0x828>)
 80025ae:	63da      	str	r2, [r3, #60]	@ 0x3c
					  measurements.earth_humidity += measurements.earth_hum[i];
 80025b0:	4b99      	ldr	r3, [pc, #612]	@ (8002818 <main+0x828>)
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	4998      	ldr	r1, [pc, #608]	@ (8002818 <main+0x828>)
 80025b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b8:	3302      	adds	r3, #2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe f9c0 	bl	8000948 <__addsf3>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b92      	ldr	r3, [pc, #584]	@ (8002818 <main+0x828>)
 80025ce:	621a      	str	r2, [r3, #32]
				  for (int i = 0; i < 5; i++)
 80025d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d2:	3301      	adds	r3, #1
 80025d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d8:	2b04      	cmp	r3, #4
 80025da:	ddd5      	ble.n	8002588 <main+0x598>
				  }

				  // Calculate average value
				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.battery_voltage /= 5;
 80025dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002818 <main+0x828>)
 80025de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e2:	2b17      	cmp	r3, #23
 80025e4:	d909      	bls.n	80025fa <main+0x60a>
 80025e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002818 <main+0x828>)
 80025e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ea:	498c      	ldr	r1, [pc, #560]	@ (800281c <main+0x82c>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fb67 	bl	8000cc0 <__aeabi_fdiv>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <main+0x828>)
 80025f8:	63da      	str	r2, [r3, #60]	@ 0x3c
				  measurements.earth_humidity /= 5;
 80025fa:	4b87      	ldr	r3, [pc, #540]	@ (8002818 <main+0x828>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4987      	ldr	r1, [pc, #540]	@ (800281c <main+0x82c>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fb5d 	bl	8000cc0 <__aeabi_fdiv>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	4b83      	ldr	r3, [pc, #524]	@ (8002818 <main+0x828>)
 800260c:	621a      	str	r2, [r3, #32]

				  if (measurements.bat_period_counter >= READ_VBAT_PERIOD) measurements.bat_period_counter = 0; // Reset hour counter for battery measurement
 800260e:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <main+0x828>)
 8002610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002614:	2b17      	cmp	r3, #23
 8002616:	d903      	bls.n	8002620 <main+0x630>
 8002618:	4b7f      	ldr	r3, [pc, #508]	@ (8002818 <main+0x828>)
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

				  // Read all data from BME280 sensor
				  BME280_GoToFromSleep(&bme280, &hi2c2, 1); // wake-up
 8002620:	2201      	movs	r2, #1
 8002622:	497f      	ldr	r1, [pc, #508]	@ (8002820 <main+0x830>)
 8002624:	487f      	ldr	r0, [pc, #508]	@ (8002824 <main+0x834>)
 8002626:	f7fe ff27 	bl	8001478 <BME280_GoToFromSleep>
				  HAL_Delay(100);
 800262a:	2064      	movs	r0, #100	@ 0x64
 800262c:	f002 fe9c 	bl	8005368 <HAL_Delay>
				  BME280_ReadAllData(&bme280, &hi2c2);
 8002630:	497b      	ldr	r1, [pc, #492]	@ (8002820 <main+0x830>)
 8002632:	487c      	ldr	r0, [pc, #496]	@ (8002824 <main+0x834>)
 8002634:	f7ff fb87 	bl	8001d46 <BME280_ReadAllData>
				  //BME280_GoToFromSleep(&bme280, &hi2c2, 0); // sleep

				  // LoRa module
				#ifndef SLEEP_MODE_STOP
				  RFM95W_Struct_Init(&rfm95_handle);
 8002638:	487b      	ldr	r0, [pc, #492]	@ (8002828 <main+0x838>)
 800263a:	f000 fe83 	bl	8003344 <RFM95W_Struct_Init>

				  // Initialise RFM95 module.
				  if (!rfm95_init(&rfm95_handle)) status += 10; // Increase error counter for 10 to detect LoRa error (data can't be send)
 800263e:	487a      	ldr	r0, [pc, #488]	@ (8002828 <main+0x838>)
 8002640:	f001 f9c0 	bl	80039c4 <rfm95_init>
 8002644:	4603      	mov	r3, r0
 8002646:	f083 0301 	eor.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <main+0x66a>
 8002650:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002654:	330a      	adds	r3, #10
 8002656:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  // All that flags must be cleard to get stable boot
				  NVIC_ClearPendingIRQ(EXTI1_IRQn); 		// Clear EXTI1 NVIC pending flag
 800265a:	2007      	movs	r0, #7
 800265c:	f7ff fcaa 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI3_IRQn); 		// Clear EXTI3 NVIC pending
 8002660:	2009      	movs	r0, #9
 8002662:	f7ff fca7 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); 	// Clear EXTI15_10 NVIC pending flag
 8002666:	2028      	movs	r0, #40	@ 0x28
 8002668:	f7ff fca4 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
				  __HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 800266c:	4b6f      	ldr	r3, [pc, #444]	@ (800282c <main+0x83c>)
 800266e:	2208      	movs	r2, #8
 8002670:	615a      	str	r2, [r3, #20]
				  __HAL_GPIO_EXTI_CLEAR_IT(DIO5_Pin);
 8002672:	4b6e      	ldr	r3, [pc, #440]	@ (800282c <main+0x83c>)
 8002674:	2202      	movs	r2, #2
 8002676:	615a      	str	r2, [r3, #20]
				  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002678:	2009      	movs	r0, #9
 800267a:	f003 fe1a 	bl	80062b2 <HAL_NVIC_EnableIRQ>
				  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800267e:	2007      	movs	r0, #7
 8002680:	f003 fe17 	bl	80062b2 <HAL_NVIC_EnableIRQ>
				  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 	// Bricks the program, inturrupt is not needed -> only for RX
				#endif

				  // Check if everthing is OK (voltage and sensors)
				  if (measurements.battery_voltage < VBAT_CRYTHICAL) status++; // TODO Vbat NEED TO BE SET
 8002684:	4b64      	ldr	r3, [pc, #400]	@ (8002818 <main+0x828>)
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe f807 	bl	800069c <__aeabi_f2d>
 800268e:	a360      	add	r3, pc, #384	@ (adr r3, 8002810 <main+0x820>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fe f8ba 	bl	800080c <__aeabi_dcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <main+0x6b8>
 800269e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026a2:	3301      	adds	r3, #1
 80026a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

				  lora_data.errSendCnt += status;
 80026a8:	4b61      	ldr	r3, [pc, #388]	@ (8002830 <main+0x840>)
 80026aa:	785a      	ldrb	r2, [r3, #1]
 80026ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026b0:	4413      	add	r3, r2
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <main+0x840>)
 80026b6:	705a      	strb	r2, [r3, #1]

				  if (status < 10)
 80026b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d803      	bhi.n	80026c8 <main+0x6d8>
				  {
					  state = STATE_SEND;
 80026c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002834 <main+0x844>)
 80026c2:	2203      	movs	r2, #3
 80026c4:	701a      	strb	r2, [r3, #0]
					  state = STATE_ERROR;
				  }
			  }
		  }

		  break;
 80026c6:	e1c2      	b.n	8002a4e <main+0xa5e>
					  state = STATE_ERROR;
 80026c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002834 <main+0x844>)
 80026ca:	2205      	movs	r2, #5
 80026cc:	701a      	strb	r2, [r3, #0]
		  break;
 80026ce:	e1be      	b.n	8002a4e <main+0xa5e>

	  ////////* SEND DATA *////////
	  case STATE_SEND:

		  // Collect and change data for sending
		  if (lora_data.errSendCnt > 0) lora_data.error = 1;					// Flag if device is in error
 80026d0:	4b57      	ldr	r3, [pc, #348]	@ (8002830 <main+0x840>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <main+0x6ee>
 80026d8:	4b55      	ldr	r3, [pc, #340]	@ (8002830 <main+0x840>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
		  lora_data.battery = (uint8_t)(measurements.battery_voltage * 10);		// Battery voltage [3.5V -> 35V, no float]
 80026de:	4b4e      	ldr	r3, [pc, #312]	@ (8002818 <main+0x828>)
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	4955      	ldr	r1, [pc, #340]	@ (8002838 <main+0x848>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fa37 	bl	8000b58 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fbf9 	bl	8000ee4 <__aeabi_f2uiz>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <main+0x840>)
 80026f8:	709a      	strb	r2, [r3, #2]
		  lora_data.air_temperature = (int32_t)(bme280.Temp_C);					// Air temperature [test for negative value]
 80026fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002824 <main+0x834>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	b21a      	sxth	r2, r3
 8002700:	4b4b      	ldr	r3, [pc, #300]	@ (8002830 <main+0x840>)
 8002702:	809a      	strh	r2, [r3, #4]
		  lora_data.air_humidity = (uint8_t)(bme280.Hum_Perc);					// Air humidity in percents [0-100%]
 8002704:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <main+0x834>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <main+0x840>)
 800270c:	719a      	strb	r2, [r3, #6]
		  lora_data.air_pressure = (uint32_t)(bme280.Press_Pa);					// Air pressure [saved in two uint8_t]
 800270e:	4b45      	ldr	r3, [pc, #276]	@ (8002824 <main+0x834>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fbe6 	bl	8000ee4 <__aeabi_f2uiz>
 8002718:	4603      	mov	r3, r0
 800271a:	4a45      	ldr	r2, [pc, #276]	@ (8002830 <main+0x840>)
 800271c:	6093      	str	r3, [r2, #8]
		  lora_data.earth_humudity = (uint8_t)(measurements.earth_humidity);	// Humidity value of earth in percents [0-100%]
 800271e:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <main+0x828>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fbde 	bl	8000ee4 <__aeabi_f2uiz>
 8002728:	4603      	mov	r3, r0
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <main+0x840>)
 800272e:	731a      	strb	r2, [r3, #12]

		  // Data packet that will be send (modify if needed)
		  uint8_t data_packet[14];

		  data_packet[0] = DEVICE_ID;                              // Device ID number
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3020 	strb.w	r3, [r7, #32]
		  data_packet[1] = lora_data.error;                        // Error flag
 8002736:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <main+0x840>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		  data_packet[2] = lora_data.errSendCnt;                   // No. of errors
 800273e:	4b3c      	ldr	r3, [pc, #240]	@ (8002830 <main+0x840>)
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		  data_packet[3] = lora_data.battery;                      // battery voltage
 8002746:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <main+0x840>)
 8002748:	789b      	ldrb	r3, [r3, #2]
 800274a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		  // Encode air_temperature (int32_t -> 4 bytes)
		  data_packet[4] = (uint8_t)(lora_data.air_temperature & 0xFF);
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <main+0x840>)
 8002750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		  data_packet[5] = (uint8_t)((lora_data.air_temperature >> 8) & 0xFF);
 800275a:	4b35      	ldr	r3, [pc, #212]	@ (8002830 <main+0x840>)
 800275c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002760:	121b      	asrs	r3, r3, #8
 8002762:	b21b      	sxth	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		  data_packet[6] = (uint8_t)((lora_data.air_temperature >> 16) & 0xFF);
 800276a:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <main+0x840>)
 800276c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002770:	141b      	asrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		  data_packet[7] = (uint8_t)((lora_data.air_temperature >> 24) & 0xFF);
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <main+0x840>)
 800277a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800277e:	161b      	asrs	r3, r3, #24
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		  // Encode air_humidity
		  data_packet[8] = lora_data.air_humidity;
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <main+0x840>)
 8002788:	799b      	ldrb	r3, [r3, #6]
 800278a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		  // Encode air_pressure (uint32_t -> 4 bytes)
		  data_packet[9] = (uint8_t)(lora_data.air_pressure & 0xFF);
 800278e:	4b28      	ldr	r3, [pc, #160]	@ (8002830 <main+0x840>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		  data_packet[10] = (uint8_t)((lora_data.air_pressure >> 8) & 0xFF);
 8002798:	4b25      	ldr	r3, [pc, #148]	@ (8002830 <main+0x840>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		  data_packet[11] = (uint8_t)((lora_data.air_pressure >> 16) & 0xFF);
 80027a4:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <main+0x840>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	0c1b      	lsrs	r3, r3, #16
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  data_packet[12] = (uint8_t)((lora_data.air_pressure >> 24) & 0xFF);
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <main+0x840>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	0e1b      	lsrs	r3, r3, #24
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

		  // Encode earth_humidity
		  data_packet[13] = lora_data.earth_humudity;
 80027bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <main+0x840>)
 80027be:	7b1b      	ldrb	r3, [r3, #12]
 80027c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		  // Read number of TX packets from flash
		#ifdef USE_EEPROM
		  EEPROM_Read_Data(FLASH_EEPROM_BASE, &tx_count, 1); // Read from eeprom
 80027c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027c8:	2201      	movs	r2, #1
 80027ca:	4619      	mov	r1, r3
 80027cc:	481b      	ldr	r0, [pc, #108]	@ (800283c <main+0x84c>)
 80027ce:	f7ff fbcd 	bl	8001f6c <EEPROM_Read_Data>
		#else
		  Flash_Read_Data(FLASH_START_ADDR, &tx_count, 1); // Read from flash 1 = one word
		#endif

		  rfm95_handle.config.tx_frame_count = tx_count;
 80027d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <main+0x838>)
 80027d8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

		  status = rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet));
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	220e      	movs	r2, #14
 80027e2:	4619      	mov	r1, r3
 80027e4:	4810      	ldr	r0, [pc, #64]	@ (8002828 <main+0x838>)
 80027e6:	f002 f8f0 	bl	80049ca <rfm95_send_receive_cycle>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		  if (!status) // test_data_packet
 80027f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d123      	bne.n	8002840 <main+0x850>
		  {
			  lora_data.errSendCnt++; // Not used
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <main+0x840>)
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <main+0x840>)
 8002802:	705a      	strb	r2, [r3, #1]
			  state = STATE_GO_SLEEP;
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <main+0x844>)
 8002806:	2204      	movs	r2, #4
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e026      	b.n	800285a <main+0x86a>
 800280c:	f3af 8000 	nop.w
 8002810:	33333333 	.word	0x33333333
 8002814:	40033333 	.word	0x40033333
 8002818:	200001c0 	.word	0x200001c0
 800281c:	40a00000 	.word	0x40a00000
 8002820:	2000039c 	.word	0x2000039c
 8002824:	20000188 	.word	0x20000188
 8002828:	20000210 	.word	0x20000210
 800282c:	40010400 	.word	0x40010400
 8002830:	20000200 	.word	0x20000200
 8002834:	20000540 	.word	0x20000540
 8002838:	41200000 	.word	0x41200000
 800283c:	08080000 	.word	0x08080000
		  }
		  else
		  {
			  // Write number of TX packets to flash
			  uint32_t temp_data = (uint32_t)rfm95_handle.config.tx_frame_count;
 8002840:	4b84      	ldr	r3, [pc, #528]	@ (8002a54 <main+0xa64>)
 8002842:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002846:	607b      	str	r3, [r7, #4]

			#ifdef USE_EEPROM
			  EEPROM_Write_Data(FLASH_EEPROM_BASE, &temp_data, 1);	// Write to eeprom
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2201      	movs	r2, #1
 800284c:	4619      	mov	r1, r3
 800284e:	4882      	ldr	r0, [pc, #520]	@ (8002a58 <main+0xa68>)
 8002850:	f7ff fb3e 	bl	8001ed0 <EEPROM_Write_Data>
			#else
			  Flash_Write_Data(FLASH_START_ADDR, &temp_data, 1); 	// Write to flash 1 = one word
			#endif

			  state = STATE_GO_SLEEP;
 8002854:	4b81      	ldr	r3, [pc, #516]	@ (8002a5c <main+0xa6c>)
 8002856:	2204      	movs	r2, #4
 8002858:	701a      	strb	r2, [r3, #0]
		  }



		  // Reset error counter
		  status = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		  lora_data.errSendCnt = 0;
 8002860:	4b7f      	ldr	r3, [pc, #508]	@ (8002a60 <main+0xa70>)
 8002862:	2200      	movs	r2, #0
 8002864:	705a      	strb	r2, [r3, #1]

		  break;
 8002866:	e0f3      	b.n	8002a50 <main+0xa60>


	  ////////* PUT DEVICE TO SLEEP *////////
	  case STATE_GO_SLEEP:

		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002868:	2200      	movs	r2, #0
 800286a:	497e      	ldr	r1, [pc, #504]	@ (8002a64 <main+0xa74>)
 800286c:	487e      	ldr	r0, [pc, #504]	@ (8002a68 <main+0xa78>)
 800286e:	f008 f8b0 	bl	800a9d2 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002872:	2200      	movs	r2, #0
 8002874:	497d      	ldr	r1, [pc, #500]	@ (8002a6c <main+0xa7c>)
 8002876:	487c      	ldr	r0, [pc, #496]	@ (8002a68 <main+0xa78>)
 8002878:	f008 f981 	bl	800ab7e <HAL_RTC_GetDate>
		#ifdef SLEEP_PERIOD_15_MINUTES
		  time.Minutes += 15;
		#endif

		#ifdef SLEEP_PERIOD_HALF_HOUR
		  time.Minutes += 30;
 800287c:	4b79      	ldr	r3, [pc, #484]	@ (8002a64 <main+0xa74>)
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	331e      	adds	r3, #30
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b77      	ldr	r3, [pc, #476]	@ (8002a64 <main+0xa74>)
 8002886:	705a      	strb	r2, [r3, #1]
		#ifdef SLEEP_PERIOD_CUSTOM
		  time.Minutes += SLEEP_PERIOD_CUSTOM;
		#endif


		  if(time.Seconds >= 60)
 8002888:	4b76      	ldr	r3, [pc, #472]	@ (8002a64 <main+0xa74>)
 800288a:	789b      	ldrb	r3, [r3, #2]
 800288c:	2b3b      	cmp	r3, #59	@ 0x3b
 800288e:	d908      	bls.n	80028a2 <main+0x8b2>
		  {
			  time.Minutes ++;
 8002890:	4b74      	ldr	r3, [pc, #464]	@ (8002a64 <main+0xa74>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <main+0xa74>)
 800289a:	705a      	strb	r2, [r3, #1]
			  time.Seconds = 0;
 800289c:	4b71      	ldr	r3, [pc, #452]	@ (8002a64 <main+0xa74>)
 800289e:	2200      	movs	r2, #0
 80028a0:	709a      	strb	r2, [r3, #2]
		  }

		  if(time.Minutes >= 60)
 80028a2:	4b70      	ldr	r3, [pc, #448]	@ (8002a64 <main+0xa74>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80028a8:	d908      	bls.n	80028bc <main+0x8cc>
		  {
			  time.Hours++;
 80028aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002a64 <main+0xa74>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <main+0xa74>)
 80028b4:	701a      	strb	r2, [r3, #0]
			  time.Minutes = 0;
 80028b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <main+0xa74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	705a      	strb	r2, [r3, #1]
		  }

		  if(time.Hours > 23)
 80028bc:	4b69      	ldr	r3, [pc, #420]	@ (8002a64 <main+0xa74>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b17      	cmp	r3, #23
 80028c2:	d902      	bls.n	80028ca <main+0x8da>
		  {
			  time.Hours = 0;
 80028c4:	4b67      	ldr	r3, [pc, #412]	@ (8002a64 <main+0xa74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
		  }

		  sAlarm.Alarm 					= RTC_ALARM_A;
 80028ca:	4b69      	ldr	r3, [pc, #420]	@ (8002a70 <main+0xa80>)
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d0:	619a      	str	r2, [r3, #24]
		  sAlarm.AlarmTime.Hours 		= time.Hours;
 80028d2:	4b64      	ldr	r3, [pc, #400]	@ (8002a64 <main+0xa74>)
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <main+0xa80>)
 80028d8:	701a      	strb	r2, [r3, #0]
		  sAlarm.AlarmTime.Minutes 		= time.Minutes;
 80028da:	4b62      	ldr	r3, [pc, #392]	@ (8002a64 <main+0xa74>)
 80028dc:	785a      	ldrb	r2, [r3, #1]
 80028de:	4b64      	ldr	r3, [pc, #400]	@ (8002a70 <main+0xa80>)
 80028e0:	705a      	strb	r2, [r3, #1]
		  sAlarm.AlarmTime.Seconds 		= time.Seconds;
 80028e2:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <main+0xa74>)
 80028e4:	789a      	ldrb	r2, [r3, #2]
 80028e6:	4b62      	ldr	r3, [pc, #392]	@ (8002a70 <main+0xa80>)
 80028e8:	709a      	strb	r2, [r3, #2]
		  sAlarm.AlarmMask            	= RTC_ALARMMASK_DATEWEEKDAY; 	// ignore date
 80028ea:	4b61      	ldr	r3, [pc, #388]	@ (8002a70 <main+0xa80>)
 80028ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028f0:	60da      	str	r2, [r3, #12]
		  sAlarm.AlarmDateWeekDaySel  	= RTC_ALARMDATEWEEKDAYSEL_DATE;
 80028f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002a70 <main+0xa80>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
		  sAlarm.AlarmDateWeekDay     	= 1;                           	// don’t care
 80028f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002a70 <main+0xa80>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	751a      	strb	r2, [r3, #20]
		  sAlarm.Alarm                	= RTC_ALARM_A;
 80028fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002a70 <main+0xa80>)
 8002900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002904:	619a      	str	r2, [r3, #24]

		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800290a:	4857      	ldr	r0, [pc, #348]	@ (8002a68 <main+0xa78>)
 800290c:	f008 fab8 	bl	800ae80 <HAL_RTC_DeactivateAlarm>

		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002910:	4b58      	ldr	r3, [pc, #352]	@ (8002a74 <main+0xa84>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <main+0xa84>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6013      	str	r3, [r2, #0]
		  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800291c:	4b52      	ldr	r3, [pc, #328]	@ (8002a68 <main+0xa78>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <main+0xa78>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800292c:	60da      	str	r2, [r3, #12]
		  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 800292e:	2200      	movs	r2, #0
 8002930:	494f      	ldr	r1, [pc, #316]	@ (8002a70 <main+0xa80>)
 8002932:	484d      	ldr	r0, [pc, #308]	@ (8002a68 <main+0xa78>)
 8002934:	f008 f972 	bl	800ac1c <HAL_RTC_SetAlarm_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <main+0x952>
 800293e:	f000 fdf0 	bl	8003522 <Error_Handler>

		  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2029      	movs	r0, #41	@ 0x29
 8002948:	f003 fc97 	bl	800627a <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800294c:	2029      	movs	r0, #41	@ 0x29
 800294e:	f003 fcb0 	bl	80062b2 <HAL_NVIC_EnableIRQ>


		  // Put devices and sensors to sleep
		  rfm95_goto_sleep(&rfm95_handle); // If the module is not in sleep mode (it should be)
 8002952:	4840      	ldr	r0, [pc, #256]	@ (8002a54 <main+0xa64>)
 8002954:	f001 f97e 	bl	8003c54 <rfm95_goto_sleep>
		  BME280_GoToFromSleep(&bme280, &hi2c2, 0); // If the sensor is not in sleep mode (it should be)
 8002958:	2200      	movs	r2, #0
 800295a:	4947      	ldr	r1, [pc, #284]	@ (8002a78 <main+0xa88>)
 800295c:	4847      	ldr	r0, [pc, #284]	@ (8002a7c <main+0xa8c>)
 800295e:	f7fe fd8b 	bl	8001478 <BME280_GoToFromSleep>

		  // Disable power to humidity probe and to voltage divider for battery measurement
		  HAL_GPIO_WritePin(EHUM_PWR_GPIO_Port, EHUM_PWR_Pin, GPIO_PIN_RESET);
 8002962:	2200      	movs	r2, #0
 8002964:	2108      	movs	r1, #8
 8002966:	4846      	ldr	r0, [pc, #280]	@ (8002a80 <main+0xa90>)
 8002968:	f004 fad6 	bl	8006f18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(D_VBAT_EN_GPIO_Port, D_VBAT_EN_Pin, GPIO_PIN_SET);
 800296c:	2201      	movs	r2, #1
 800296e:	2101      	movs	r1, #1
 8002970:	4844      	ldr	r0, [pc, #272]	@ (8002a84 <main+0xa94>)
 8002972:	f004 fad1 	bl	8006f18 <HAL_GPIO_WritePin>

		  // Set SPI CS pins
		  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	2110      	movs	r1, #16
 800297a:	4841      	ldr	r0, [pc, #260]	@ (8002a80 <main+0xa90>)
 800297c:	f004 facc 	bl	8006f18 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002986:	483f      	ldr	r0, [pc, #252]	@ (8002a84 <main+0xa94>)
 8002988:	f004 fac6 	bl	8006f18 <HAL_GPIO_WritePin>

		  // Stop Timers if they running and disable their interrupts
		  HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer 2
 800298c:	483e      	ldr	r0, [pc, #248]	@ (8002a88 <main+0xa98>)
 800298e:	f009 fa5f 	bl	800be50 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer 3
 8002992:	483e      	ldr	r0, [pc, #248]	@ (8002a8c <main+0xa9c>)
 8002994:	f009 fa5c 	bl	800be50 <HAL_TIM_Base_Stop_IT>
		  HAL_NVIC_DisableIRQ(TIM2_IRQn); // Disable Timer 2 interrupt
 8002998:	201c      	movs	r0, #28
 800299a:	f003 fc98 	bl	80062ce <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(TIM3_IRQn); // Disable Timer 3 interrupt
 800299e:	201d      	movs	r0, #29
 80029a0:	f003 fc95 	bl	80062ce <HAL_NVIC_DisableIRQ>

		  HAL_ADC_Stop(&hadc);
 80029a4:	483a      	ldr	r0, [pc, #232]	@ (8002a90 <main+0xaa0>)
 80029a6:	f002 ff97 	bl	80058d8 <HAL_ADC_Stop>
		  HAL_ADC_DeInit(&hadc);
 80029aa:	4839      	ldr	r0, [pc, #228]	@ (8002a90 <main+0xaa0>)
 80029ac:	f002 fe60 	bl	8005670 <HAL_ADC_DeInit>

		  // Disable IRQs from LoRa module
		  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80029b0:	2007      	movs	r0, #7
 80029b2:	f003 fc8c 	bl	80062ce <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80029b6:	2009      	movs	r0, #9
 80029b8:	f003 fc89 	bl	80062ce <HAL_NVIC_DisableIRQ>
		  NVIC_ClearPendingIRQ(EXTI1_IRQn);
 80029bc:	2007      	movs	r0, #7
 80029be:	f7ff faf9 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
		  NVIC_ClearPendingIRQ(EXTI3_IRQn);
 80029c2:	2009      	movs	r0, #9
 80029c4:	f7ff faf6 	bl	8001fb4 <__NVIC_ClearPendingIRQ>
		  __HAL_GPIO_EXTI_CLEAR_IT(DIO0_Pin);
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <main+0xaa4>)
 80029ca:	2208      	movs	r2, #8
 80029cc:	615a      	str	r2, [r3, #20]
		  __HAL_GPIO_EXTI_CLEAR_IT(DIO5_Pin);
 80029ce:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <main+0xaa4>)
 80029d0:	2202      	movs	r2, #2
 80029d2:	615a      	str	r2, [r3, #20]

		  // Reconfigure to analog (or input with pull-down) for sleep
		  GPIO_InitTypeDef g = {0};
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
		  g.Mode = GPIO_MODE_ANALOG;
 80029e4:	2303      	movs	r3, #3
 80029e6:	613b      	str	r3, [r7, #16]
		  g.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
		  g.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
		  g.Pin = DIO0_Pin | DIO5_Pin;
 80029f0:	230a      	movs	r3, #10
 80029f2:	60fb      	str	r3, [r7, #12]
		  HAL_GPIO_Init(GPIOB, &g);
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	4822      	ldr	r0, [pc, #136]	@ (8002a84 <main+0xa94>)
 80029fc:	f004 f82c 	bl	8006a58 <HAL_GPIO_Init>
		  //HAL_I2C_DeInit(&hi2c1);
		  //HAL_I2C_DeInit(&hi2c2);
		  //HAL_UART_DeInit(&huart1);


		  HAL_PWREx_EnableUltraLowPower();
 8002a00:	f007 f843 	bl	8009a8a <HAL_PWREx_EnableUltraLowPower>
		  HAL_PWREx_DisableFastWakeUp();
 8002a04:	f007 f826 	bl	8009a54 <HAL_PWREx_DisableFastWakeUp>
		  HAL_PWR_DisablePVD();
 8002a08:	f006 ffd5 	bl	80099b6 <HAL_PWR_DisablePVD>
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8002a0c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a10:	f006 ffec 	bl	80099ec <HAL_PWR_DisableWakeUpPin>
		  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // PWR_MAINREGULATOR_ON

		#endif

		#ifndef SLEEP_MODE_STOP
		  HAL_DBGMCU_DisableDBGStandbyMode();
 8002a14:	f002 fcd8 	bl	80053c8 <HAL_DBGMCU_DisableDBGStandbyMode>
		  HAL_PWR_EnterSTANDBYMode();
 8002a18:	f007 f804 	bl	8009a24 <HAL_PWR_EnterSTANDBYMode>
		#endif

		  // Resume clock and ticks
		  SystemClock_Config();
 8002a1c:	f000 f83c 	bl	8002a98 <SystemClock_Config>
		  HAL_ResumeTick();
 8002a20:	f002 fcc4 	bl	80053ac <HAL_ResumeTick>

		  // Reset wake up flag
		  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a28:	480f      	ldr	r0, [pc, #60]	@ (8002a68 <main+0xa78>)
 8002a2a:	f008 fa29 	bl	800ae80 <HAL_RTC_DeactivateAlarm>
		  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <main+0xa78>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <main+0xa78>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8002a3e:	60da      	str	r2, [r3, #12]


		  break;
 8002a40:	e006      	b.n	8002a50 <main+0xa60>

	  default:

		  ////////* UNDEFINED STATE *////////

		  break;
 8002a42:	bf00      	nop
 8002a44:	f7ff baf4 	b.w	8002030 <main+0x40>
		  break;
 8002a48:	bf00      	nop
 8002a4a:	f7ff baf1 	b.w	8002030 <main+0x40>
		  break;
 8002a4e:	bf00      	nop
	  switch(state)
 8002a50:	f7ff baee 	b.w	8002030 <main+0x40>
 8002a54:	20000210 	.word	0x20000210
 8002a58:	08080000 	.word	0x08080000
 8002a5c:	20000540 	.word	0x20000540
 8002a60:	20000200 	.word	0x20000200
 8002a64:	200002c8 	.word	0x200002c8
 8002a68:	200003f0 	.word	0x200003f0
 8002a6c:	200002d4 	.word	0x200002d4
 8002a70:	200002d8 	.word	0x200002d8
 8002a74:	40007000 	.word	0x40007000
 8002a78:	2000039c 	.word	0x2000039c
 8002a7c:	20000188 	.word	0x20000188
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	200004c0 	.word	0x200004c0
 8002a8c:	20000500 	.word	0x20000500
 8002a90:	200002f4 	.word	0x200002f4
 8002a94:	40010400 	.word	0x40010400

08002a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b094      	sub	sp, #80	@ 0x50
 8002a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	2234      	movs	r2, #52	@ 0x34
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f00a fbc7 	bl	800d23a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <SystemClock_Config+0xc8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8002acc:	4a24      	ldr	r2, [pc, #144]	@ (8002b60 <SystemClock_Config+0xc8>)
 8002ace:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ad2:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002af2:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002af8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8002afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4618      	mov	r0, r3
 8002b04:	f006 ffdc 	bl	8009ac0 <HAL_RCC_OscConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002b0e:	f000 fd08 	bl	8003522 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b12:	230f      	movs	r3, #15
 8002b14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b16:	2303      	movs	r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f007 faf7 	bl	800a120 <HAL_RCC_ClockConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002b38:	f000 fcf3 	bl	8003522 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b44:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b46:	463b      	mov	r3, r7
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f007 fd59 	bl	800a600 <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b54:	f000 fce5 	bl	8003522 <Error_Handler>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3750      	adds	r7, #80	@ 0x50
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40007000 	.word	0x40007000

08002b64 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <MX_ADC_Init+0xac>)
 8002b78:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b7a:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b86:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002baa:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002bd4:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bd6:	f002 fc05 	bl	80053e4 <HAL_ADC_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002be0:	f000 fc9f 	bl	8003522 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	@ (8002c0c <MX_ADC_Init+0xa8>)
 8002bf6:	f003 f84f 	bl	8005c98 <HAL_ADC_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002c00:	f000 fc8f 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200002f4 	.word	0x200002f4
 8002c10:	40012400 	.word	0x40012400

08002c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c1a:	4a13      	ldr	r2, [pc, #76]	@ (8002c68 <MX_I2C1_Init+0x54>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <MX_I2C1_Init+0x58>)
 8002c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c3e:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c44:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c50:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <MX_I2C1_Init+0x50>)
 8002c52:	f004 f991 	bl	8006f78 <HAL_I2C_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c5c:	f000 fc61 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000348 	.word	0x20000348
 8002c68:	40005400 	.word	0x40005400
 8002c6c:	000186a0 	.word	0x000186a0

08002c70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c76:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <MX_I2C2_Init+0x54>)
 8002c78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <MX_I2C2_Init+0x58>)
 8002c7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c94:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002cac:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <MX_I2C2_Init+0x50>)
 8002cae:	f004 f963 	bl	8006f78 <HAL_I2C_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002cb8:	f000 fc33 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000039c 	.word	0x2000039c
 8002cc4:	40005800 	.word	0x40005800
 8002cc8:	000186a0 	.word	0x000186a0

08002ccc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	@ 0x30
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
 8002cf0:	615a      	str	r2, [r3, #20]
 8002cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cf4:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002cf6:	4a38      	ldr	r2, [pc, #224]	@ (8002dd8 <MX_RTC_Init+0x10c>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cfa:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d00:	4b34      	ldr	r3, [pc, #208]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d02:	227f      	movs	r2, #127	@ 0x7f
 8002d04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d06:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d08:	22ff      	movs	r2, #255	@ 0xff
 8002d0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d12:	4b30      	ldr	r3, [pc, #192]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d1e:	482d      	ldr	r0, [pc, #180]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d20:	f007 fd3c 	bl	800a79c <HAL_RTC_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8002d2a:	f000 fbfa 	bl	8003522 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  sTime.Minutes = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sTime.Seconds = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4820      	ldr	r0, [pc, #128]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d52:	f007 fda4 	bl	800a89e <HAL_RTC_SetTime>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002d5c:	f000 fbe1 	bl	8003522 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_JANUARY;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sDate.Date = 1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  sDate.Year = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d78:	f107 0320 	add.w	r3, r7, #32
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4814      	ldr	r0, [pc, #80]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002d82:	f007 fe78 	bl	800aa76 <HAL_RTC_SetDate>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8002d8c:	f000 fbc9 	bl	8003522 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8002db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2200      	movs	r2, #0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4805      	ldr	r0, [pc, #20]	@ (8002dd4 <MX_RTC_Init+0x108>)
 8002dbe:	f007 ff2d 	bl	800ac1c <HAL_RTC_SetAlarm_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8002dc8:	f000 fbab 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	3730      	adds	r7, #48	@ 0x30
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200003f0 	.word	0x200003f0
 8002dd8:	40002800 	.word	0x40002800

08002ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <MX_SPI1_Init+0x5c>)
 8002de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002de8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e14:	4b07      	ldr	r3, [pc, #28]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e20:	4804      	ldr	r0, [pc, #16]	@ (8002e34 <MX_SPI1_Init+0x58>)
 8002e22:	f008 f9be 	bl	800b1a2 <HAL_SPI_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_SPI1_Init+0x54>
  {
    Error_Handler();
 8002e2c:	f000 fb79 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000410 	.word	0x20000410
 8002e38:	40013000 	.word	0x40013000

08002e3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <MX_SPI2_Init+0x5c>)
 8002e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e46:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	61da      	str	r2, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e80:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <MX_SPI2_Init+0x58>)
 8002e82:	f008 f98e 	bl	800b1a2 <HAL_SPI_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_SPI2_Init+0x54>
  {
    Error_Handler();
 8002e8c:	f000 fb49 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000468 	.word	0x20000468
 8002e98:	40003800 	.word	0x40003800

08002e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002ec2:	223f      	movs	r2, #63	@ 0x3f
 8002ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002ece:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ee0:	4813      	ldr	r0, [pc, #76]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002ee2:	f008 ff23 	bl	800bd2c <HAL_TIM_Base_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002eec:	f000 fb19 	bl	8003522 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4619      	mov	r1, r3
 8002efc:	480c      	ldr	r0, [pc, #48]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002efe:	f009 f899 	bl	800c034 <HAL_TIM_ConfigClockSource>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f08:	f000 fb0b 	bl	8003522 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	4619      	mov	r1, r3
 8002f18:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <MX_TIM2_Init+0x94>)
 8002f1a:	f009 fa75 	bl	800c408 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f24:	f000 fafd 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200004c0 	.word	0x200004c0

08002f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f52:	4a1e      	ldr	r2, [pc, #120]	@ (8002fcc <MX_TIM3_Init+0x98>)
 8002f54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1983;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f58:	f240 72bf 	movw	r2, #1983	@ 0x7bf
 8002f5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64515;
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f66:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 8002f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f78:	4813      	ldr	r0, [pc, #76]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f7a:	f008 fed7 	bl	800bd2c <HAL_TIM_Base_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f84:	f000 facd 	bl	8003522 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002f96:	f009 f84d 	bl	800c034 <HAL_TIM_ConfigClockSource>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002fa0:	f000 fabf 	bl	8003522 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <MX_TIM3_Init+0x94>)
 8002fb2:	f009 fa29 	bl	800c408 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f000 fab1 	bl	8003522 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000500 	.word	0x20000500
 8002fcc:	40000400 	.word	0x40000400

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd6:	f107 0314 	add.w	r3, r7, #20
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a64      	ldr	r2, [pc, #400]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	61d3      	str	r3, [r2, #28]
 8002ff2:	4b62      	ldr	r3, [pc, #392]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4a5e      	ldr	r2, [pc, #376]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003004:	f043 0320 	orr.w	r3, r3, #32
 8003008:	61d3      	str	r3, [r2, #28]
 800300a:	4b5c      	ldr	r3, [pc, #368]	@ (800317c <MX_GPIO_Init+0x1ac>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	4b59      	ldr	r3, [pc, #356]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4a58      	ldr	r2, [pc, #352]	@ (800317c <MX_GPIO_Init+0x1ac>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	61d3      	str	r3, [r2, #28]
 8003022:	4b56      	ldr	r3, [pc, #344]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	4b53      	ldr	r3, [pc, #332]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4a52      	ldr	r2, [pc, #328]	@ (800317c <MX_GPIO_Init+0x1ac>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	61d3      	str	r3, [r2, #28]
 800303a:	4b50      	ldr	r3, [pc, #320]	@ (800317c <MX_GPIO_Init+0x1ac>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BOOST_EN_Pin|EHUM_PWR_Pin|RESET_Pin, GPIO_PIN_RESET);
 8003046:	2200      	movs	r2, #0
 8003048:	f240 1109 	movw	r1, #265	@ 0x109
 800304c:	484c      	ldr	r0, [pc, #304]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 800304e:	f003 ff63 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_EX_GPIO_Port, SPI1_CS_EX_Pin, GPIO_PIN_SET);
 8003052:	2201      	movs	r2, #1
 8003054:	2110      	movs	r1, #16
 8003056:	484a      	ldr	r0, [pc, #296]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 8003058:	f003 ff5e 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_VBAT_EN_Pin|SPI2_NSS_Pin, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003062:	4848      	ldr	r0, [pc, #288]	@ (8003184 <MX_GPIO_Init+0x1b4>)
 8003064:	f003 ff58 	bl	8006f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOST_EN_Pin EHUM_PWR_Pin SPI1_CS_EX_Pin RESET_Pin */
  GPIO_InitStruct.Pin = BOOST_EN_Pin|EHUM_PWR_Pin|SPI1_CS_EX_Pin|RESET_Pin;
 8003068:	f240 1319 	movw	r3, #281	@ 0x119
 800306c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	483f      	ldr	r0, [pc, #252]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 8003082:	f003 fce9 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_VBAT_EN_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = D_VBAT_EN_Pin|SPI2_NSS_Pin;
 8003086:	f241 0301 	movw	r3, #4097	@ 0x1001
 800308a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	4839      	ldr	r0, [pc, #228]	@ (8003184 <MX_GPIO_Init+0x1b4>)
 80030a0:	f003 fcda 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin DIO0_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|DIO0_Pin;
 80030a4:	230a      	movs	r3, #10
 80030a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4832      	ldr	r0, [pc, #200]	@ (8003184 <MX_GPIO_Init+0x1b4>)
 80030ba:	f003 fccd 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED1_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = UNUSED1_Pin|GPIO_PIN_8|GPIO_PIN_9;
 80030be:	f44f 7341 	mov.w	r3, #772	@ 0x304
 80030c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	2303      	movs	r3, #3
 80030c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	482c      	ldr	r0, [pc, #176]	@ (8003184 <MX_GPIO_Init+0x1b4>)
 80030d4:	f003 fcc0 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80030d8:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 80030dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030de:	2303      	movs	r3, #3
 80030e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	4824      	ldr	r0, [pc, #144]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 80030ee:	f003 fcb3 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 80030f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	4619      	mov	r1, r3
 8003106:	481e      	ldr	r0, [pc, #120]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 8003108:	f003 fca6 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 800310c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003112:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4817      	ldr	r0, [pc, #92]	@ (8003180 <MX_GPIO_Init+0x1b0>)
 8003124:	f003 fc98 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO4_Pin DIO3_Pin */
  GPIO_InitStruct.Pin = DIO4_Pin|DIO3_Pin;
 8003128:	2330      	movs	r3, #48	@ 0x30
 800312a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4619      	mov	r1, r3
 800313a:	4812      	ldr	r0, [pc, #72]	@ (8003184 <MX_GPIO_Init+0x1b4>)
 800313c:	f003 fc8c 	bl	8006a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2101      	movs	r1, #1
 8003144:	2007      	movs	r0, #7
 8003146:	f003 f898 	bl	800627a <HAL_NVIC_SetPriority>
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2101      	movs	r1, #1
 800314e:	2009      	movs	r0, #9
 8003150:	f003 f893 	bl	800627a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  // ^^^^^^^^ COMMENT ALL IRQ ENABLE WRITEN BY IDE ^^^^^^^^
  // Manual setup IRQs - interrupt signal already at startup
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2101      	movs	r1, #1
 8003158:	2007      	movs	r0, #7
 800315a:	f003 f88e 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 1); // 1,0
 800315e:	2201      	movs	r2, #1
 8003160:	2101      	movs	r1, #1
 8003162:	2009      	movs	r0, #9
 8003164:	f003 f889 	bl	800627a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8003168:	2009      	movs	r0, #9
 800316a:	f003 f8b0 	bl	80062ce <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800316e:	2007      	movs	r0, #7
 8003170:	f003 f8ad 	bl	80062ce <HAL_NVIC_DisableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003174:	bf00      	nop
 8003176:	3728      	adds	r7, #40	@ 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	40020000 	.word	0x40020000
 8003184:	40020400 	.word	0x40020400

08003188 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
// Wake up interrupt - STOP mode //
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	awake = 1;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]
	if (state != STATE_INIT) state = STATE_RUN;
 8003196:	4b07      	ldr	r3, [pc, #28]	@ (80031b4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_RTC_AlarmAEventCallback+0x1c>
 800319e:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80031a0:	2202      	movs	r2, #2
 80031a2:	701a      	strb	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	20000540 	.word	0x20000540

080031b8 <HAL_TIM_PeriodElapsedCallback>:
}


// TIMER Interrupt //
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	/* TIMER 2 - 10Hz (Read sensors to average their values) */
	if (htim->Instance == TIM2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c8:	d112      	bne.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		if (measurements.ADC_read == 0)
 80031ca:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 80031d2:	4811      	ldr	r0, [pc, #68]	@ (8003218 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80031d4:	f008 fe3c 	bl	800be50 <HAL_TIM_Base_Stop_IT>
			adc_substate = 0;                  // start with battery in this cycle
 80031d8:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
			ADC_SelectChannel(ADC_CHANNEL_1);  // PA1 (AN_BAT)
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 f85c 	bl	800329c <ADC_SelectChannel>
			HAL_ADC_Start_IT(&hadc);
 80031e4:	480e      	ldr	r0, [pc, #56]	@ (8003220 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80031e6:	f002 fba3 	bl	8005930 <HAL_ADC_Start_IT>
			measurements.ADC_read = 1;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	705a      	strb	r2, [r3, #1]
		}
	}

	if (htim->Instance == TIM3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		tim3_tick_msb += 0x10000; // Increment the MSB by 0x10000 each time TIM2 overflows
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003202:	4a09      	ldr	r2, [pc, #36]	@ (8003228 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003204:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8003206:	4809      	ldr	r0, [pc, #36]	@ (800322c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003208:	f008 fdd0 	bl	800bdac <HAL_TIM_Base_Start_IT>
	}
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200001c0 	.word	0x200001c0
 8003218:	200004c0 	.word	0x200004c0
 800321c:	20000548 	.word	0x20000548
 8003220:	200002f4 	.word	0x200002f4
 8003224:	40000400 	.word	0x40000400
 8003228:	20000544 	.word	0x20000544
 800322c:	20000500 	.word	0x20000500

08003230 <HAL_ADC_ConvCpltCallback>:


// ADC interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a14      	ldr	r2, [pc, #80]	@ (8003290 <HAL_ADC_ConvCpltCallback+0x60>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d123      	bne.n	800328a <HAL_ADC_ConvCpltCallback+0x5a>
    {
    	if (adc_substate == 0)
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <HAL_ADC_ConvCpltCallback+0x64>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <HAL_ADC_ConvCpltCallback+0x3c>
		{
			// 1. conversion: BATTERY
			measurements.ADC_values[0] = HAL_ADC_GetValue(hadc);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f002 fc0d 	bl	8005a6c <HAL_ADC_GetValue>
 8003252:	4603      	mov	r3, r0
 8003254:	4a10      	ldr	r2, [pc, #64]	@ (8003298 <HAL_ADC_ConvCpltCallback+0x68>)
 8003256:	6053      	str	r3, [r2, #4]

			// 2. conversion: SOIL HUMIDITY
			adc_substate = 1;
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_ADC_ConvCpltCallback+0x64>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
			ADC_SelectChannel(ADC_CHANNEL_2);
 800325e:	2002      	movs	r0, #2
 8003260:	f000 f81c 	bl	800329c <ADC_SelectChannel>
			HAL_ADC_Start_IT(hadc);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f002 fb63 	bl	8005930 <HAL_ADC_Start_IT>
			return;
 800326a:	e00e      	b.n	800328a <HAL_ADC_ConvCpltCallback+0x5a>
		}
		else
		{
			// 2nd conversion: HUMIDITY
			measurements.ADC_values[1] = HAL_ADC_GetValue(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f002 fbfd 	bl	8005a6c <HAL_ADC_GetValue>
 8003272:	4603      	mov	r3, r0
 8003274:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <HAL_ADC_ConvCpltCallback+0x68>)
 8003276:	6093      	str	r3, [r2, #8]

			HAL_ADC_Stop_IT(hadc);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f002 fbc3 	bl	8005a04 <HAL_ADC_Stop_IT>
			measurements.ADC_read_end = 1;
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_ADC_ConvCpltCallback+0x68>)
 8003280:	2201      	movs	r2, #1
 8003282:	709a      	strb	r2, [r3, #2]
			adc_substate = 0;
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_ADC_ConvCpltCallback+0x64>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
		}
    }
}
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40012400 	.word	0x40012400
 8003294:	20000548 	.word	0x20000548
 8003298:	200001c0 	.word	0x200001c0

0800329c <ADC_SelectChannel>:


// Switch between channels of ADC
static void ADC_SelectChannel(uint32_t channel)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
    sConfig.Channel      = channel;                 // ADC_CHANNEL_1 or _2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60fb      	str	r3, [r7, #12]
    sConfig.Rank         = ADC_REGULAR_RANK_1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	4619      	mov	r1, r3
 80032c2:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <ADC_SelectChannel+0x34>)
 80032c4:	f002 fce8 	bl	8005c98 <HAL_ADC_ConfigChannel>
}
 80032c8:	bf00      	nop
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200002f4 	.word	0x200002f4
 80032d4:	00000000 	.word	0x00000000

080032d8 <ADC_Read_Battery>:


// Read battery voltage //
float ADC_Read_Battery(uint32_t* ADC_value)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	// If LDO is used to power the board
#ifdef LDO_USE
	float Vout = ((float)(*ADC_value * LDO_OUT_U)) / 4095;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f9b7 	bl	8000658 <__aeabi_ui2d>
 80032ea:	a311      	add	r3, pc, #68	@ (adr r3, 8003330 <ADC_Read_Battery+0x58>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fc ff46 	bl	8000180 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd face 	bl	800089c <__aeabi_d2f>
 8003300:	4603      	mov	r3, r0
 8003302:	490d      	ldr	r1, [pc, #52]	@ (8003338 <ADC_Read_Battery+0x60>)
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fcdb 	bl	8000cc0 <__aeabi_fdiv>
 800330a:	4603      	mov	r3, r0
 800330c:	60fb      	str	r3, [r7, #12]
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
 800330e:	490b      	ldr	r1, [pc, #44]	@ (800333c <ADC_Read_Battery+0x64>)
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7fd fcd5 	bl	8000cc0 <__aeabi_fdiv>
 8003316:	4603      	mov	r3, r0
 8003318:	4909      	ldr	r1, [pc, #36]	@ (8003340 <ADC_Read_Battery+0x68>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fc1c 	bl	8000b58 <__aeabi_fmul>
 8003320:	4603      	mov	r3, r0
 8003322:	60bb      	str	r3, [r7, #8]
	return (float) voltage;
 8003324:	68bb      	ldr	r3, [r7, #8]
#ifndef LDO_USE
	float Vout = ((float)(*ADC_value * BAT_U)) / 4095;
	float voltage = ((BAT_R1 + BAT_R2) * (Vout / BAT_R2));
	return (float) voltage;
#endif
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	400ccccc 	.word	0x400ccccc
 8003338:	457ff000 	.word	0x457ff000
 800333c:	42c80000 	.word	0x42c80000
 8003340:	43480000 	.word	0x43480000

08003344 <RFM95W_Struct_Init>:


// EFM95W module //
void RFM95W_Struct_Init(rfm95_handle_t* rfm95_handle)
{
 8003344:	b4b0      	push	{r4, r5, r7}
 8003346:	b08d      	sub	sp, #52	@ 0x34
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
		rfm95_handle->spi_handle = &hspi2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <RFM95W_Struct_Init+0xa4>)
 8003350:	601a      	str	r2, [r3, #0]
		rfm95_handle->nss_port = SPI2_NSS_GPIO_Port;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <RFM95W_Struct_Init+0xa8>)
 8003356:	605a      	str	r2, [r3, #4]
		rfm95_handle->nss_pin = SPI2_NSS_Pin;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800335e:	811a      	strh	r2, [r3, #8]
		rfm95_handle->nrst_port = RESET_GPIO_Port;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <RFM95W_Struct_Init+0xac>)
 8003364:	60da      	str	r2, [r3, #12]
		rfm95_handle->nrst_pin = RESET_Pin;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800336c:	821a      	strh	r2, [r3, #16]

		rfm95_handle->precision_tick_frequency = 32768;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
		rfm95_handle->precision_tick_drift_ns_per_s = 5000;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	63da      	str	r2, [r3, #60]	@ 0x3c
		rfm95_handle->receive_mode = RFM95_RECEIVE_MODE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		rfm95_handle->get_precision_tick = get_precision_tick;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1a      	ldr	r2, [pc, #104]	@ (80033f4 <RFM95W_Struct_Init+0xb0>)
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
		//rfm95_handle->precision_sleep_until = precision_sleep_until;
		rfm95_handle->random_int = random_int;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <RFM95W_Struct_Init+0xb4>)
 8003390:	64da      	str	r2, [r3, #76]	@ 0x4c

		uint8_t address[] = DEVICE_ADDRESS;
 8003392:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <RFM95W_Struct_Init+0xb8>)
 8003394:	62fb      	str	r3, [r7, #44]	@ 0x2c
		memcpy(rfm95_handle->device_address, address, sizeof(address));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3312      	adds	r3, #18
 800339a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339c:	601a      	str	r2, [r3, #0]

		uint8_t sKey[] = APPSKEY;
 800339e:	4b18      	ldr	r3, [pc, #96]	@ (8003400 <RFM95W_Struct_Init+0xbc>)
 80033a0:	f107 041c 	add.w	r4, r7, #28
 80033a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->application_session_key, sKey, sizeof(sKey));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3326      	adds	r3, #38	@ 0x26
 80033ae:	461d      	mov	r5, r3
 80033b0:	f107 041c 	add.w	r4, r7, #28
 80033b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b6:	6028      	str	r0, [r5, #0]
 80033b8:	6069      	str	r1, [r5, #4]
 80033ba:	60aa      	str	r2, [r5, #8]
 80033bc:	60eb      	str	r3, [r5, #12]

		uint8_t nKey[] = NWKSKEY;
 80033be:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <RFM95W_Struct_Init+0xc0>)
 80033c0:	f107 040c 	add.w	r4, r7, #12
 80033c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(rfm95_handle->network_session_key, nKey, sizeof(nKey));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3316      	adds	r3, #22
 80033ce:	461d      	mov	r5, r3
 80033d0:	f107 040c 	add.w	r4, r7, #12
 80033d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d6:	6028      	str	r0, [r5, #0]
 80033d8:	6069      	str	r1, [r5, #4]
 80033da:	60aa      	str	r2, [r5, #8]
 80033dc:	60eb      	str	r3, [r5, #12]
}
 80033de:	bf00      	nop
 80033e0:	3734      	adds	r7, #52	@ 0x34
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bcb0      	pop	{r4, r5, r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000468 	.word	0x20000468
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020000 	.word	0x40020000
 80033f4:	08003485 	.word	0x08003485
 80033f8:	08003461 	.word	0x08003461
 80033fc:	e9780b26 	.word	0xe9780b26
 8003400:	0800dfd0 	.word	0x0800dfd0
 8003404:	0800dfe0 	.word	0x0800dfe0

08003408 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
	//__disable_irq();
    if (GPIO_Pin == DIO0_Pin) {
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_GPIO_EXTI_Callback+0x1a>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 8003418:	2100      	movs	r1, #0
 800341a:	480f      	ldr	r0, [pc, #60]	@ (8003458 <HAL_GPIO_EXTI_Callback+0x50>)
 800341c:	f001 fbbe 	bl	8004b9c <rfm95_on_interrupt>
 8003420:	e013      	b.n	800344a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO1_Pin) {
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	d104      	bne.n	8003434 <HAL_GPIO_EXTI_Callback+0x2c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 800342a:	2101      	movs	r1, #1
 800342c:	480a      	ldr	r0, [pc, #40]	@ (8003458 <HAL_GPIO_EXTI_Callback+0x50>)
 800342e:	f001 fbb5 	bl	8004b9c <rfm95_on_interrupt>
 8003432:	e00a      	b.n	800344a <HAL_GPIO_EXTI_Callback+0x42>
    } else if (GPIO_Pin == DIO5_Pin) {
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d104      	bne.n	8003444 <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 800343a:	2102      	movs	r1, #2
 800343c:	4806      	ldr	r0, [pc, #24]	@ (8003458 <HAL_GPIO_EXTI_Callback+0x50>)
 800343e:	f001 fbad 	bl	8004b9c <rfm95_on_interrupt>
 8003442:	e002      	b.n	800344a <HAL_GPIO_EXTI_Callback+0x42>
    } else {
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear any unexpected interrupt
 8003444:	4a05      	ldr	r2, [pc, #20]	@ (800345c <HAL_GPIO_EXTI_Callback+0x54>)
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	6153      	str	r3, [r2, #20]
    }
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the flag
 800344a:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_GPIO_EXTI_Callback+0x54>)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	6153      	str	r3, [r2, #20]
    //__enable_irq();
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000210 	.word	0x20000210
 800345c:	40010400 	.word	0x40010400

08003460 <random_int>:

static uint8_t random_int(uint8_t max)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
    return (uint8_t)(measurements.ADC_values[0] & 0x000f); // Use ADC other means of obtaining a random number.
 800346a:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <random_int+0x20>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	b2db      	uxtb	r3, r3
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	200001c0 	.word	0x200001c0

08003484 <get_precision_tick>:

static uint32_t get_precision_tick()
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800348a:	b672      	cpsid	i
}
 800348c:	bf00      	nop
    __disable_irq(); 		// Disable interrupts to ensure atomic access to tick variables
    uint32_t precision_tick = tim3_tick_msb | __HAL_TIM_GET_COUNTER(&htim3);
 800348e:	4b07      	ldr	r3, [pc, #28]	@ (80034ac <get_precision_tick+0x28>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <get_precision_tick+0x2c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4313      	orrs	r3, r2
 800349a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800349c:	b662      	cpsie	i
}
 800349e:	bf00      	nop
    __enable_irq(); 		// Re-enable interrupts
    return precision_tick;
 80034a0:	687b      	ldr	r3, [r7, #4]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	20000500 	.word	0x20000500
 80034b0:	20000544 	.word	0x20000544

080034b4 <ADC_Read_EHum>:

// Read humidity in ground //
uint8_t ADC_Read_EHum(uint32_t* ADC_value, float* delta)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	//uint8_t humidity = (uint16_t)round(*ADC_value - EARTH_HUM_WET_VAL) * (*delta);
	float val = (uint16_t)round(EARTH_HUM_DRY_VAL - *ADC_value);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f5c3 6306 	rsb	r3, r3, #2144	@ 0x860
 80034c6:	330c      	adds	r3, #12
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8c5 	bl	8000658 <__aeabi_ui2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7fd f9c1 	bl	800085c <__aeabi_d2uiz>
 80034da:	4603      	mov	r3, r0
 80034dc:	b29b      	uxth	r3, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fae2 	bl	8000aa8 <__aeabi_ui2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]
	uint8_t humidity = (uint8_t)round(val * (*delta));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fb32 	bl	8000b58 <__aeabi_fmul>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f8d0 	bl	800069c <__aeabi_f2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	f00a fd12 	bl	800df2c <round>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f7fd f9a4 	bl	800085c <__aeabi_d2uiz>
 8003514:	4603      	mov	r3, r0
 8003516:	72fb      	strb	r3, [r7, #11]
	return humidity;
 8003518:	7afb      	ldrb	r3, [r7, #11]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003526:	b672      	cpsid	i
}
 8003528:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <Error_Handler+0x8>

0800352e <read_register>:
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19



static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	460b      	mov	r3, r1
 800353c:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6858      	ldr	r0, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	891b      	ldrh	r3, [r3, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	4619      	mov	r1, r3
 800354a:	f003 fce5 	bl	8006f18 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003554:	b2db      	uxtb	r3, r3
 8003556:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	f107 0117 	add.w	r1, r7, #23
 8003560:	2364      	movs	r3, #100	@ 0x64
 8003562:	2201      	movs	r2, #1
 8003564:	f007 fe99 	bl	800b29a <HAL_SPI_Transmit>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <read_register+0x44>
		return false;
 800356e:	2300      	movs	r3, #0
 8003570:	e015      	b.n	800359e <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b29a      	uxth	r2, r3
 800357a:	2364      	movs	r3, #100	@ 0x64
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	f007 ffd0 	bl	800b522 <HAL_SPI_Receive>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <read_register+0x5e>
		return false;
 8003588:	2300      	movs	r3, #0
 800358a:	e008      	b.n	800359e <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6858      	ldr	r0, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	891b      	ldrh	r3, [r3, #8]
 8003594:	2201      	movs	r2, #1
 8003596:	4619      	mov	r1, r3
 8003598:	f003 fcbe 	bl	8006f18 <HAL_GPIO_WritePin>

	return true;
 800359c:	2301      	movs	r3, #1

}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <write_register>:


static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
 80035b2:	4613      	mov	r3, r2
 80035b4:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6858      	ldr	r0, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	891b      	ldrh	r3, [r3, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	4619      	mov	r1, r3
 80035c2:	f003 fca9 	bl	8006f18 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	733b      	strb	r3, [r7, #12]
 80035d0:	78bb      	ldrb	r3, [r7, #2]
 80035d2:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	f107 010c 	add.w	r1, r7, #12
 80035dc:	2364      	movs	r3, #100	@ 0x64
 80035de:	2202      	movs	r2, #2
 80035e0:	f007 fe5b 	bl	800b29a <HAL_SPI_Transmit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <write_register+0x48>
		return false;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e008      	b.n	8003600 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6858      	ldr	r0, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	891b      	ldrh	r3, [r3, #8]
 80035f6:	2201      	movs	r2, #1
 80035f8:	4619      	mov	r1, r3
 80035fa:	f003 fc8d 	bl	8006f18 <HAL_GPIO_WritePin>

	return true;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <config_set_channel>:


static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	460b      	mov	r3, r1
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 8003616:	7afb      	ldrb	r3, [r7, #11]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d905      	bls.n	8003628 <config_set_channel+0x20>
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <config_set_channel+0x54>)
 800361e:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <config_set_channel+0x58>)
 8003620:	2175      	movs	r1, #117	@ 0x75
 8003622:	4810      	ldr	r0, [pc, #64]	@ (8003664 <config_set_channel+0x5c>)
 8003624:	f009 fcc4 	bl	800cfb0 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8003628:	7afa      	ldrb	r2, [r7, #11]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	321a      	adds	r2, #26
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800363a:	b21a      	sxth	r2, r3
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	b21b      	sxth	r3, r3
 8003646:	4313      	orrs	r3, r2
 8003648:	b21b      	sxth	r3, r3
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	0800dff0 	.word	0x0800dff0
 8003660:	0800e244 	.word	0x0800e244
 8003664:	0800e004 	.word	0x0800e004

08003668 <config_load_default>:


static void config_load_default(rfm95_handle_t *handle)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f64a 3267 	movw	r2, #43879	@ 0xab67
 8003676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	handle->config.tx_frame_count = 0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	handle->config.rx_frame_count = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	handle->config.rx1_delay = 1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	handle->config.channel_mask = 0;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	config_set_channel(handle, 0, 868100000);
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <config_load_default+0x58>)
 800369c:	2100      	movs	r1, #0
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffb2 	bl	8003608 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 80036a4:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <config_load_default+0x5c>)
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ffad 	bl	8003608 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80036ae:	4a06      	ldr	r2, [pc, #24]	@ (80036c8 <config_load_default+0x60>)
 80036b0:	2102      	movs	r1, #2
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffa8 	bl	8003608 <config_set_channel>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	33be27a0 	.word	0x33be27a0
 80036c4:	33c134e0 	.word	0x33c134e0
 80036c8:	33c44220 	.word	0x33c44220

080036cc <reset>:


static void reset(rfm95_handle_t *handle)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
	// Popravljen pin state: low -> hight, dodan interni pull-up
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET); // SET
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68d8      	ldr	r0, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8a1b      	ldrh	r3, [r3, #16]
 80036dc:	2200      	movs	r2, #0
 80036de:	4619      	mov	r1, r3
 80036e0:	f003 fc1a 	bl	8006f18 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 80036e4:	2001      	movs	r0, #1
 80036e6:	f001 fe3f 	bl	8005368 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET); // RESET
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68d8      	ldr	r0, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8a1b      	ldrh	r3, [r3, #16]
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	f003 fc0f 	bl	8006f18 <HAL_GPIO_WritePin>
	HAL_Delay(20);//5
 80036fa:	2014      	movs	r0, #20
 80036fc:	f001 fe34 	bl	8005368 <HAL_Delay>
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <configure_frequency>:


static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	2000      	movs	r0, #0
 8003716:	460a      	mov	r2, r1
 8003718:	4603      	mov	r3, r0
 800371a:	0b55      	lsrs	r5, r2, #13
 800371c:	04d4      	lsls	r4, r2, #19
 800371e:	4a27      	ldr	r2, [pc, #156]	@ (80037bc <configure_frequency+0xb4>)
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	4620      	mov	r0, r4
 8003726:	4629      	mov	r1, r5
 8003728:	f7fd fc4c 	bl	8000fc4 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8003734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	0c02      	lsrs	r2, r0, #16
 8003742:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003746:	0c0b      	lsrs	r3, r1, #16
 8003748:	b2d3      	uxtb	r3, r2
 800374a:	461a      	mov	r2, r3
 800374c:	2106      	movs	r1, #6
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff29 	bl	80035a6 <write_register>
 8003754:	4603      	mov	r3, r0
 8003756:	f083 0301 	eor.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <configure_frequency+0x5c>
 8003760:	2300      	movs	r3, #0
 8003762:	e026      	b.n	80037b2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8003764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	0a02      	lsrs	r2, r0, #8
 8003772:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003776:	0a0b      	lsrs	r3, r1, #8
 8003778:	b2d3      	uxtb	r3, r2
 800377a:	461a      	mov	r2, r3
 800377c:	2107      	movs	r1, #7
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff11 	bl	80035a6 <write_register>
 8003784:	4603      	mov	r3, r0
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <configure_frequency+0x8c>
 8003790:	2300      	movs	r3, #0
 8003792:	e00e      	b.n	80037b2 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	461a      	mov	r2, r3
 8003798:	2108      	movs	r1, #8
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff03 	bl	80035a6 <write_register>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <configure_frequency+0xa8>
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <configure_frequency+0xaa>

	return true;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	01e84800 	.word	0x01e84800

080037c0 <configure_channel>:


static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80037d0:	461a      	mov	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	fa42 f303 	asr.w	r3, r2, r3
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <configure_channel+0x2c>
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <configure_channel+0x48>)
 80037e2:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <configure_channel+0x4c>)
 80037e4:	21a1      	movs	r1, #161	@ 0xa1
 80037e6:	480a      	ldr	r0, [pc, #40]	@ (8003810 <configure_channel+0x50>)
 80037e8:	f009 fbe2 	bl	800cfb0 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	321a      	adds	r2, #26
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff85 	bl	8003708 <configure_frequency>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	0800e018 	.word	0x0800e018
 800380c:	0800e258 	.word	0x0800e258
 8003810:	0800e004 	.word	0x0800e004

08003814 <wait_for_irq>:


static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	460b      	mov	r3, r1
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	72fb      	strb	r3, [r7, #11]
	// Works with interrupt but it needs more testing for timeout
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4798      	blx	r3
 8003828:	4601      	mov	r1, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <wait_for_irq+0x5c>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	440b      	add	r3, r1
 800383e:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8003840:	e008      	b.n	8003854 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	4798      	blx	r3
 8003848:	4602      	mov	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4293      	cmp	r3, r2
 800384e:	d801      	bhi.n	8003854 <wait_for_irq+0x40>
			return false;
 8003850:	2300      	movs	r3, #0
 8003852:	e008      	b.n	8003866 <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	332a      	adds	r3, #42	@ 0x2a
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <wait_for_irq+0x2e>
		}
	}
	return true;
 8003864:	2301      	movs	r3, #1
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	10624dd3 	.word	0x10624dd3

08003874 <wait_for_rx_irqs>:


static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() + RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	4798      	blx	r3
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4912      	ldr	r1, [pc, #72]	@ (80038dc <wait_for_rx_irqs+0x68>)
 8003892:	fba1 1303 	umull	r1, r3, r1, r3
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 800389c:	e008      	b.n	80038b0 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4798      	blx	r3
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d801      	bhi.n	80038b0 <wait_for_rx_irqs+0x3c>
			return false;
 80038ac:	2300      	movs	r3, #0
 80038ae:	e011      	b.n	80038d4 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <wait_for_rx_irqs+0x50>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ec      	beq.n	800389e <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	10624dd3 	.word	0x10624dd3

080038e0 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	dd03      	ble.n	80038fc <rfm95_set_power+0x1c>
 80038f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f8:	2b11      	cmp	r3, #17
 80038fa:	dd09      	ble.n	8003910 <rfm95_set_power+0x30>
 80038fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003900:	2b14      	cmp	r3, #20
 8003902:	d005      	beq.n	8003910 <rfm95_set_power+0x30>
 8003904:	4b2c      	ldr	r3, [pc, #176]	@ (80039b8 <rfm95_set_power+0xd8>)
 8003906:	4a2d      	ldr	r2, [pc, #180]	@ (80039bc <rfm95_set_power+0xdc>)
 8003908:	21c3      	movs	r1, #195	@ 0xc3
 800390a:	482d      	ldr	r0, [pc, #180]	@ (80039c0 <rfm95_set_power+0xe0>)
 800390c:	f009 fb50 	bl	800cfb0 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8003910:	2300      	movs	r3, #0
 8003912:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8003918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391c:	2b01      	cmp	r3, #1
 800391e:	dd18      	ble.n	8003952 <rfm95_set_power+0x72>
 8003920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003924:	2b11      	cmp	r3, #17
 8003926:	dc14      	bgt.n	8003952 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8003928:	7b3b      	ldrb	r3, [r7, #12]
 800392a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800392e:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003930:	7b3b      	ldrb	r3, [r7, #12]
 8003932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003936:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b02      	subs	r3, #2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	b2da      	uxtb	r2, r3
 8003944:	7b3b      	ldrb	r3, [r7, #12]
 8003946:	f362 0303 	bfi	r3, r2, #0, #4
 800394a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER; //0x14;
 800394c:	2384      	movs	r3, #132	@ 0x84
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e011      	b.n	8003976 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8003952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003956:	2b14      	cmp	r3, #20
 8003958:	d10d      	bne.n	8003976 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003960:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8003962:	7b3b      	ldrb	r3, [r7, #12]
 8003964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003968:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 800396a:	7b3b      	ldrb	r3, [r7, #12]
 800396c:	f043 030f 	orr.w	r3, r3, #15
 8003970:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8003972:	2387      	movs	r3, #135	@ 0x87
 8003974:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8003976:	7b3b      	ldrb	r3, [r7, #12]
 8003978:	461a      	mov	r2, r3
 800397a:	2109      	movs	r1, #9
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fe12 	bl	80035a6 <write_register>
 8003982:	4603      	mov	r3, r0
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <rfm95_set_power+0xb2>
 800398e:	2300      	movs	r3, #0
 8003990:	e00e      	b.n	80039b0 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	461a      	mov	r2, r3
 8003996:	214d      	movs	r1, #77	@ 0x4d
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fe04 	bl	80035a6 <write_register>
 800399e:	4603      	mov	r3, r0
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <rfm95_set_power+0xce>
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <rfm95_set_power+0xd0>

	return true;
 80039ae:	2301      	movs	r3, #1
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	0800e04c 	.word	0x0800e04c
 80039bc:	0800e26c 	.word	0x0800e26c
 80039c0:	0800e004 	.word	0x0800e004

080039c4 <rfm95_init>:


bool rfm95_init(rfm95_handle_t *handle)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d6:	d005      	beq.n	80039e4 <rfm95_init+0x20>
 80039d8:	4b94      	ldr	r3, [pc, #592]	@ (8003c2c <rfm95_init+0x268>)
 80039da:	4a95      	ldr	r2, [pc, #596]	@ (8003c30 <rfm95_init+0x26c>)
 80039dc:	21de      	movs	r1, #222	@ 0xde
 80039de:	4895      	ldr	r0, [pc, #596]	@ (8003c34 <rfm95_init+0x270>)
 80039e0:	f009 fae6 	bl	800cfb0 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <rfm95_init+0x36>
 80039ee:	4b92      	ldr	r3, [pc, #584]	@ (8003c38 <rfm95_init+0x274>)
 80039f0:	4a8f      	ldr	r2, [pc, #572]	@ (8003c30 <rfm95_init+0x26c>)
 80039f2:	21df      	movs	r1, #223	@ 0xdf
 80039f4:	488f      	ldr	r0, [pc, #572]	@ (8003c34 <rfm95_init+0x270>)
 80039f6:	f009 fadb 	bl	800cfb0 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <rfm95_init+0x4c>
 8003a04:	4b8d      	ldr	r3, [pc, #564]	@ (8003c3c <rfm95_init+0x278>)
 8003a06:	4a8a      	ldr	r2, [pc, #552]	@ (8003c30 <rfm95_init+0x26c>)
 8003a08:	21e0      	movs	r1, #224	@ 0xe0
 8003a0a:	488a      	ldr	r0, [pc, #552]	@ (8003c34 <rfm95_init+0x270>)
 8003a0c:	f009 fad0 	bl	800cfb0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <rfm95_init+0x62>
 8003a1a:	4b89      	ldr	r3, [pc, #548]	@ (8003c40 <rfm95_init+0x27c>)
 8003a1c:	4a84      	ldr	r2, [pc, #528]	@ (8003c30 <rfm95_init+0x26c>)
 8003a1e:	21e1      	movs	r1, #225	@ 0xe1
 8003a20:	4884      	ldr	r0, [pc, #528]	@ (8003c34 <rfm95_init+0x270>)
 8003a22:	f009 fac5 	bl	800cfb0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <rfm95_init+0x78>
 8003a30:	4b84      	ldr	r3, [pc, #528]	@ (8003c44 <rfm95_init+0x280>)
 8003a32:	4a7f      	ldr	r2, [pc, #508]	@ (8003c30 <rfm95_init+0x26c>)
 8003a34:	21e2      	movs	r1, #226	@ 0xe2
 8003a36:	487f      	ldr	r0, [pc, #508]	@ (8003c34 <rfm95_init+0x270>)
 8003a38:	f009 faba 	bl	800cfb0 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <rfm95_init+0x8c>
 8003a44:	4b80      	ldr	r3, [pc, #512]	@ (8003c48 <rfm95_init+0x284>)
 8003a46:	4a7a      	ldr	r2, [pc, #488]	@ (8003c30 <rfm95_init+0x26c>)
 8003a48:	21e3      	movs	r1, #227	@ 0xe3
 8003a4a:	487a      	ldr	r0, [pc, #488]	@ (8003c34 <rfm95_init+0x270>)
 8003a4c:	f009 fab0 	bl	800cfb0 <__assert_func>
	assert(handle->random_int != NULL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <rfm95_init+0xa0>
 8003a58:	4b7c      	ldr	r3, [pc, #496]	@ (8003c4c <rfm95_init+0x288>)
 8003a5a:	4a75      	ldr	r2, [pc, #468]	@ (8003c30 <rfm95_init+0x26c>)
 8003a5c:	21e4      	movs	r1, #228	@ 0xe4
 8003a5e:	4875      	ldr	r0, [pc, #468]	@ (8003c34 <rfm95_init+0x270>)
 8003a60:	f009 faa6 	bl	800cfb0 <__assert_func>
	//assert(handle->precision_sleep_until != NULL); // It is not needed when data is not receided
	assert(handle->precision_tick_frequency > 10000);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d805      	bhi.n	8003a7c <rfm95_init+0xb8>
 8003a70:	4b77      	ldr	r3, [pc, #476]	@ (8003c50 <rfm95_init+0x28c>)
 8003a72:	4a6f      	ldr	r2, [pc, #444]	@ (8003c30 <rfm95_init+0x26c>)
 8003a74:	21e6      	movs	r1, #230	@ 0xe6
 8003a76:	486f      	ldr	r0, [pc, #444]	@ (8003c34 <rfm95_init+0x270>)
 8003a78:	f009 fa9a 	bl	800cfb0 <__assert_func>

	reset(handle);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe25 	bl	80036cc <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <rfm95_init+0xec>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	3260      	adds	r2, #96	@ 0x60
 8003a92:	4610      	mov	r0, r2
 8003a94:	4798      	blx	r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <rfm95_init+0xec>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8003aa8:	f64a 3267 	movw	r2, #43879	@ 0xab67
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d002      	beq.n	8003ab6 <rfm95_init+0xf2>
		config_load_default(handle);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fdd9 	bl	8003668 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8003ab6:	f107 020f 	add.w	r2, r7, #15
 8003aba:	2301      	movs	r3, #1
 8003abc:	2142      	movs	r1, #66	@ 0x42
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fd35 	bl	800352e <read_register>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f083 0301 	eor.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <rfm95_init+0x110>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e0a7      	b.n	8003c24 <rfm95_init+0x260>
	if (version != RFM9x_VER) return false;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b12      	cmp	r3, #18
 8003ad8:	d001      	beq.n	8003ade <rfm95_init+0x11a>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e0a2      	b.n	8003c24 <rfm95_init+0x260>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fd5f 	bl	80035a6 <write_register>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <rfm95_init+0x134>
 8003af4:	2300      	movs	r3, #0
 8003af6:	e095      	b.n	8003c24 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	2101      	movs	r1, #1
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fd52 	bl	80035a6 <write_register>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f083 0301 	eor.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <rfm95_init+0x14e>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e088      	b.n	8003c24 <rfm95_init+0x260>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz RX_DONE
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8003b12:	2240      	movs	r2, #64	@ 0x40
 8003b14:	2140      	movs	r1, #64	@ 0x40
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fd45 	bl	80035a6 <write_register>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f083 0301 	eor.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <rfm95_init+0x168>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e07b      	b.n	8003c24 <rfm95_init+0x260>

	if (handle->on_after_interrupts_configured != NULL) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <rfm95_init+0x176>
		handle->on_after_interrupts_configured();
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	// check
	if (!rfm95_set_power(handle, 17)) return false;
 8003b3a:	2111      	movs	r1, #17
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fecf 	bl	80038e0 <rfm95_set_power>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f083 0301 	eor.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <rfm95_init+0x18e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e068      	b.n	8003c24 <rfm95_init+0x260>

	// Set LNA to the highest gain with 150% boost. - OK
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8003b52:	2223      	movs	r2, #35	@ 0x23
 8003b54:	210c      	movs	r1, #12
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fd25 	bl	80035a6 <write_register>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <rfm95_init+0x1a8>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e05b      	b.n	8003c24 <rfm95_init+0x260>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	// MSB: 0x25, LSB:  0x26
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2120      	movs	r1, #32
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fd18 	bl	80035a6 <write_register>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <rfm95_init+0x1c2>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e04e      	b.n	8003c24 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8003b86:	2208      	movs	r2, #8
 8003b88:	2121      	movs	r1, #33	@ 0x21
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fd0b 	bl	80035a6 <write_register>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <rfm95_init+0x1dc>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e041      	b.n	8003c24 <rfm95_init+0x260>

	// Set TTN sync word 0x34.
	// check - RegSyncConfig: 0x27
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8003ba0:	2234      	movs	r2, #52	@ 0x34
 8003ba2:	2139      	movs	r1, #57	@ 0x39
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fcfe 	bl	80035a6 <write_register>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <rfm95_init+0x1f6>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e034      	b.n	8003c24 <rfm95_init+0x260>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8003bba:	2280      	movs	r2, #128	@ 0x80
 8003bbc:	210e      	movs	r1, #14
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fcf1 	bl	80035a6 <write_register>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f083 0301 	eor.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <rfm95_init+0x210>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e027      	b.n	8003c24 <rfm95_init+0x260>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fce4 	bl	80035a6 <write_register>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <rfm95_init+0x22a>
 8003bea:	2300      	movs	r3, #0
 8003bec:	e01a      	b.n	8003c24 <rfm95_init+0x260>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8003bee:	2240      	movs	r2, #64	@ 0x40
 8003bf0:	2123      	movs	r1, #35	@ 0x23
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fcd7 	bl	80035a6 <write_register>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f083 0301 	eor.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <rfm95_init+0x244>
 8003c04:	2300      	movs	r3, #0
 8003c06:	e00d      	b.n	8003c24 <rfm95_init+0x260>

	// Let module sleep after initialisation. - OK
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fcca 	bl	80035a6 <write_register>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <rfm95_init+0x25e>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <rfm95_init+0x260>

	return true;
 8003c22:	2301      	movs	r3, #1
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	0800e078 	.word	0x0800e078
 8003c30:	0800e27c 	.word	0x0800e27c
 8003c34:	0800e004 	.word	0x0800e004
 8003c38:	0800e0ac 	.word	0x0800e0ac
 8003c3c:	0800e0e8 	.word	0x0800e0e8
 8003c40:	0800e120 	.word	0x0800e120
 8003c44:	0800e15c 	.word	0x0800e15c
 8003c48:	0800e194 	.word	0x0800e194
 8003c4c:	0800e1b8 	.word	0x0800e1b8
 8003c50:	0800e1d4 	.word	0x0800e1d4

08003c54 <rfm95_goto_sleep>:


bool rfm95_goto_sleep(rfm95_handle_t *handle)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	// Put module to sleep
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8003c5c:	2280      	movs	r2, #128	@ 0x80
 8003c5e:	2101      	movs	r1, #1
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fca0 	bl	80035a6 <write_register>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f083 0301 	eor.w	r3, r3, #1
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <rfm95_goto_sleep+0x22>
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <rfm95_goto_sleep+0x24>

	return true;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <process_mac_commands>:


static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload, size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length, int8_t snr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	@ 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t answer_index = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	while (index < frame_payload_length) {
 8003c9a:	e1a1      	b.n	8003fe0 <process_mac_commands+0x360>
		switch (frame_payload[index++])
 8003c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 8195 	bhi.w	8003fe0 <process_mac_commands+0x360>
 8003cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <process_mac_commands+0x3c>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003d0b 	.word	0x08003d0b
 8003cc4:	08003d29 	.word	0x08003d29
 8003cc8:	08003d47 	.word	0x08003d47
 8003ccc:	08003d61 	.word	0x08003d61
 8003cd0:	08003da9 	.word	0x08003da9
 8003cd4:	08003e13 	.word	0x08003e13
 8003cd8:	08003f37 	.word	0x08003f37
 8003cdc:	08003f97 	.word	0x08003f97
 8003ce0:	08003fa5 	.word	0x08003fa5
 8003ce4:	08003fb7 	.word	0x08003fb7
 8003ce8:	08003fc5 	.word	0x08003fc5
 8003cec:	08003fe1 	.word	0x08003fe1
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d801      	bhi.n	8003cfe <process_mac_commands+0x7e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e17b      	b.n	8003ff6 <process_mac_commands+0x376>

				index += 1;
 8003cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d02:	3301      	adds	r3, #1
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003d08:	e16a      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8003d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d0e:	3301      	adds	r3, #1
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d801      	bhi.n	8003d1c <process_mac_commands+0x9c>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e16c      	b.n	8003ff6 <process_mac_commands+0x376>

				index += 2;
 8003d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d20:	3302      	adds	r3, #2
 8003d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003d26:	e15b      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8003d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d2c:	3303      	adds	r3, #3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d801      	bhi.n	8003d3a <process_mac_commands+0xba>
 8003d36:	2300      	movs	r3, #0
 8003d38:	e15d      	b.n	8003ff6 <process_mac_commands+0x376>

				index += 4;
 8003d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d3e:	3304      	adds	r3, #4
 8003d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003d44:	e14c      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8003d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d801      	bhi.n	8003d54 <process_mac_commands+0xd4>
 8003d50:	2300      	movs	r3, #0
 8003d52:	e150      	b.n	8003ff6 <process_mac_commands+0x376>

				index += 1;
 8003d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8003d5e:	e13f      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d64:	3304      	adds	r3, #4
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d801      	bhi.n	8003d72 <process_mac_commands+0xf2>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e141      	b.n	8003ff6 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003d72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d76:	2b30      	cmp	r3, #48	@ 0x30
 8003d78:	d901      	bls.n	8003d7e <process_mac_commands+0xfe>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e13b      	b.n	8003ff6 <process_mac_commands+0x376>
				//uint8_t frequency_lsb = frame_payload[index++];
				//uint8_t frequency_msb = frame_payload[index++];
				//uint8_t frequency_hsb = frame_payload[index++];
				//uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;

				answer_buffer[answer_index++] = 0x05;
 8003d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d88:	461a      	mov	r2, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	2205      	movs	r2, #5
 8003d90:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8003d92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	4413      	add	r3, r2
 8003da2:	2207      	movs	r2, #7
 8003da4:	701a      	strb	r2, [r3, #0]
				break;
 8003da6:	e11b      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8003da8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dac:	2b2f      	cmp	r3, #47	@ 0x2f
 8003dae:	d901      	bls.n	8003db4 <process_mac_commands+0x134>
 8003db0:	2300      	movs	r3, #0
 8003db2:	e120      	b.n	8003ff6 <process_mac_commands+0x376>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8003db4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	763b      	strb	r3, [r7, #24]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <process_mac_commands+0x150>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dca:	4798      	blx	r3
 8003dcc:	4603      	mov	r3, r0
 8003dce:	e000      	b.n	8003dd2 <process_mac_commands+0x152>
 8003dd0:	23ff      	movs	r3, #255	@ 0xff
 8003dd2:	75fb      	strb	r3, [r7, #23]

				answer_buffer[answer_index++] = 0x06;
 8003dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003dde:	461a      	mov	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	2206      	movs	r2, #6
 8003de6:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8003de8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003df2:	461a      	mov	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	7dfa      	ldrb	r2, [r7, #23]
 8003dfa:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8003dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003e06:	461a      	mov	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	7e3a      	ldrb	r2, [r7, #24]
 8003e0e:	701a      	strb	r2, [r3, #0]
				break;
 8003e10:	e0e6      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e16:	3304      	adds	r3, #4
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d801      	bhi.n	8003e24 <process_mac_commands+0x1a4>
 8003e20:	2300      	movs	r3, #0
 8003e22:	e0e8      	b.n	8003ff6 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003e24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e28:	2b30      	cmp	r3, #48	@ 0x30
 8003e2a:	d901      	bls.n	8003e30 <process_mac_commands+0x1b0>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e0e2      	b.n	8003ff6 <process_mac_commands+0x376>

				uint8_t channel_index = frame_payload[index++];
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4413      	add	r3, r2
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
				uint8_t frequency_lsb = frame_payload[index++];
 8003e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
				uint8_t frequency_msb = frame_payload[index++];
 8003e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				uint8_t frequency_hsb = frame_payload[index++];
 8003e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
				uint8_t min_max_dr = frame_payload[index++];
 8003e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4413      	add	r3, r2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8003e9e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	2264      	movs	r2, #100	@ 0x64
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	61fb      	str	r3, [r7, #28]
				uint8_t min_dr = min_max_dr & 0x0f;
 8003eba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	76fb      	strb	r3, [r7, #27]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8003ec4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	76bb      	strb	r3, [r7, #26]

				if (channel_index >= 3) {
 8003ecc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d906      	bls.n	8003ee2 <process_mac_commands+0x262>
					config_set_channel(handle, channel_index, frequency);
 8003ed4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff fb93 	bl	8003608 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8003ee2:	7efb      	ldrb	r3, [r7, #27]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d902      	bls.n	8003eee <process_mac_commands+0x26e>
 8003ee8:	7ebb      	ldrb	r3, [r7, #26]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d901      	bls.n	8003ef2 <process_mac_commands+0x272>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <process_mac_commands+0x274>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	767b      	strb	r3, [r7, #25]
 8003ef6:	7e7b      	ldrb	r3, [r7, #25]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	767b      	strb	r3, [r7, #25]

				answer_buffer[answer_index++] = 0x07;
 8003efe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003f08:	461a      	mov	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	2207      	movs	r2, #7
 8003f10:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8003f12:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	b25a      	sxtb	r2, r3
 8003f20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f24:	1c59      	adds	r1, r3, #1
 8003f26:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	440b      	add	r3, r1
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
				break;
 8003f34:	e054      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d801      	bhi.n	8003f44 <process_mac_commands+0x2c4>
 8003f40:	2300      	movs	r3, #0
 8003f42:	e058      	b.n	8003ff6 <process_mac_commands+0x376>
				if ((answer_index + 2) >= 51) return false;
 8003f44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f48:	2b30      	cmp	r3, #48	@ 0x30
 8003f4a:	d901      	bls.n	8003f50 <process_mac_commands+0x2d0>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e052      	b.n	8003ff6 <process_mac_commands+0x376>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8003f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				if (handle->config.rx1_delay == 0) {
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <process_mac_commands+0x300>
					handle->config.rx1_delay = 1;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8003f80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	2208      	movs	r2, #8
 8003f92:	701a      	strb	r2, [r3, #0]
				break;
 8003f94:	e024      	b.n	8003fe0 <process_mac_commands+0x360>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003f96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d818      	bhi.n	8003fd2 <process_mac_commands+0x352>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e028      	b.n	8003ff6 <process_mac_commands+0x376>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa8:	3304      	adds	r3, #4
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d811      	bhi.n	8003fd6 <process_mac_commands+0x356>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e01f      	b.n	8003ff6 <process_mac_commands+0x376>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8003fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d80c      	bhi.n	8003fda <process_mac_commands+0x35a>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e018      	b.n	8003ff6 <process_mac_commands+0x376>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8003fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d807      	bhi.n	8003fde <process_mac_commands+0x35e>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e011      	b.n	8003ff6 <process_mac_commands+0x376>
				break;
 8003fd2:	bf00      	nop
 8003fd4:	e004      	b.n	8003fe0 <process_mac_commands+0x360>
				break;
 8003fd6:	bf00      	nop
 8003fd8:	e002      	b.n	8003fe0 <process_mac_commands+0x360>
				break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <process_mac_commands+0x360>

				break;
 8003fde:	bf00      	nop
	while (index < frame_payload_length) {
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f63f ae58 	bhi.w	8003c9c <process_mac_commands+0x1c>
				break;
			}
		}
	}

	*answer_buffer_length = answer_index;
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003ff2:	701a      	strb	r2, [r3, #0]
	return true;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3728      	adds	r7, #40	@ 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <receive_at_scheduled_time>:


static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004012:	492b      	ldr	r1, [pc, #172]	@ (80040c0 <receive_at_scheduled_time+0xc0>)
 8004014:	fba1 1202 	umull	r1, r2, r1, r2
 8004018:	0992      	lsrs	r2, r2, #6
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	1a8a      	subs	r2, r1, r2
 800401e:	4610      	mov	r0, r2
 8004020:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8004022:	2200      	movs	r2, #0
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fabd 	bl	80035a6 <write_register>
 800402c:	4603      	mov	r3, r0
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <receive_at_scheduled_time+0x3c>
 8004038:	2300      	movs	r3, #0
 800403a:	e03c      	b.n	80040b6 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 800403c:	22ff      	movs	r2, #255	@ 0xff
 800403e:	2112      	movs	r1, #18
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fab0 	bl	80035a6 <write_register>
 8004046:	4603      	mov	r3, r0
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <receive_at_scheduled_time+0x56>
 8004052:	2300      	movs	r3, #0
 8004054:	e02f      	b.n	80040b6 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800406e:	2281      	movs	r2, #129	@ 0x81
 8004070:	2101      	movs	r1, #1
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fa97 	bl	80035a6 <write_register>
 8004078:	4603      	mov	r3, r0
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <receive_at_scheduled_time+0x88>
 8004084:	2300      	movs	r3, #0
 8004086:	e016      	b.n	80040b6 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8004088:	22c8      	movs	r2, #200	@ 0xc8
 800408a:	2102      	movs	r1, #2
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fbc1 	bl	8003814 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	6838      	ldr	r0, [r7, #0]
 8004098:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 800409a:	2286      	movs	r2, #134	@ 0x86
 800409c:	2101      	movs	r1, #1
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fa81 	bl	80035a6 <write_register>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <receive_at_scheduled_time+0xb4>
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <receive_at_scheduled_time+0xb6>

	return true;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	10624dd3 	.word	0x10624dd3

080040c4 <calculate_rx_timings>:


static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks, uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b08a      	sub	sp, #40	@ 0x28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	3b01      	subs	r3, #1
 80040da:	2202      	movs	r2, #2
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	4a29      	ldr	r2, [pc, #164]	@ (8004188 <calculate_rx_timings+0xc4>)
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	4413      	add	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	0fd9      	lsrs	r1, r3, #31
 8004112:	440b      	add	r3, r1
 8004114:	105b      	asrs	r3, r3, #1
 8004116:	425b      	negs	r3, r3
 8004118:	4413      	add	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	17da      	asrs	r2, r3, #31
 8004120:	469a      	mov	sl, r3
 8004122:	4693      	mov	fp, r2
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	2200      	movs	r2, #0
 800412a:	4698      	mov	r8, r3
 800412c:	4691      	mov	r9, r2
 800412e:	fb08 f20b 	mul.w	r2, r8, fp
 8004132:	fb0a f309 	mul.w	r3, sl, r9
 8004136:	4413      	add	r3, r2
 8004138:	fbaa 4508 	umull	r4, r5, sl, r8
 800413c:	442b      	add	r3, r5
 800413e:	461d      	mov	r5, r3
 8004140:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <calculate_rx_timings+0xc4>)
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc feeb 	bl	8000f24 <__aeabi_ldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4613      	mov	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 8004160:	fb03 f202 	mul.w	r2, r3, r2
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4413      	add	r3, r2
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	441a      	add	r2, r3
 800416c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416e:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	fb92 f3f3 	sdiv	r3, r2, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800417c:	601a      	str	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	3728      	adds	r7, #40	@ 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004188:	000f4240 	.word	0x000f4240

0800418c <receive_package>:


static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len, int8_t *snr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	@ 0x30
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 80041a0:	f107 0320 	add.w	r3, r7, #32
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2207      	movs	r2, #7
 80041b0:	49ab      	ldr	r1, [pc, #684]	@ (8004460 <receive_package+0x2d4>)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ff86 	bl	80040c4 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041be:	d306      	bcc.n	80041ce <receive_package+0x42>
 80041c0:	4ba8      	ldr	r3, [pc, #672]	@ (8004464 <receive_package+0x2d8>)
 80041c2:	4aa9      	ldr	r2, [pc, #676]	@ (8004468 <receive_package+0x2dc>)
 80041c4:	f240 11df 	movw	r1, #479	@ 0x1df
 80041c8:	48a8      	ldr	r0, [pc, #672]	@ (800446c <receive_package+0x2e0>)
 80041ca:	f008 fef1 	bl	800cfb0 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80041ce:	2272      	movs	r2, #114	@ 0x72
 80041d0:	211d      	movs	r1, #29
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff f9e7 	bl	80035a6 <write_register>
 80041d8:	4603      	mov	r3, r0
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <receive_package+0x5c>
 80041e4:	2300      	movs	r3, #0
 80041e6:	e136      	b.n	8004456 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	211e      	movs	r1, #30
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff f9d1 	bl	80035a6 <write_register>
 8004204:	4603      	mov	r3, r0
 8004206:	f083 0301 	eor.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <receive_package+0x88>
 8004210:	2300      	movs	r3, #0
 8004212:	e120      	b.n	8004456 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8004214:	2204      	movs	r2, #4
 8004216:	2126      	movs	r1, #38	@ 0x26
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff f9c4 	bl	80035a6 <write_register>
 800421e:	4603      	mov	r3, r0
 8004220:	f083 0301 	eor.w	r3, r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <receive_package+0xa2>
 800422a:	2300      	movs	r3, #0
 800422c:	e113      	b.n	8004456 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	211f      	movs	r1, #31
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff f9b5 	bl	80035a6 <write_register>
 800423c:	4603      	mov	r3, r0
 800423e:	f083 0301 	eor.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <receive_package+0xc0>
 8004248:	2300      	movs	r3, #0
 800424a:	e104      	b.n	8004456 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 800424c:	2267      	movs	r2, #103	@ 0x67
 800424e:	2133      	movs	r1, #51	@ 0x33
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff f9a8 	bl	80035a6 <write_register>
 8004256:	4603      	mov	r3, r0
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <receive_package+0xda>
 8004262:	2300      	movs	r3, #0
 8004264:	e0f7      	b.n	8004456 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8004266:	2219      	movs	r2, #25
 8004268:	213b      	movs	r1, #59	@ 0x3b
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff f99b 	bl	80035a6 <write_register>
 8004270:	4603      	mov	r3, r0
 8004272:	f083 0301 	eor.w	r3, r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <receive_package+0xf4>
 800427c:	2300      	movs	r3, #0
 800427e:	e0ea      	b.n	8004456 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	4619      	mov	r1, r3
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff febb 	bl	8004000 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff faf2 	bl	8003874 <wait_for_rx_irqs>
 8004290:	4603      	mov	r3, r0
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d07a      	beq.n	8004392 <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800429c:	2280      	movs	r2, #128	@ 0x80
 800429e:	2101      	movs	r1, #1
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff f980 	bl	80035a6 <write_register>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f083 0301 	eor.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <receive_package+0x12a>
 80042b2:	2300      	movs	r3, #0
 80042b4:	e0cf      	b.n	8004456 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d166      	bne.n	800438e <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 80042c0:	f107 0314 	add.w	r3, r7, #20
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	f107 0318 	add.w	r3, r7, #24
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	220c      	movs	r2, #12
 80042d0:	4963      	ldr	r1, [pc, #396]	@ (8004460 <receive_package+0x2d4>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fef6 	bl	80040c4 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 80042d8:	4965      	ldr	r1, [pc, #404]	@ (8004470 <receive_package+0x2e4>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fa14 	bl	8003708 <configure_frequency>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <receive_package+0x164>
 80042ec:	2300      	movs	r3, #0
 80042ee:	e0b2      	b.n	8004456 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 80042f0:	22c2      	movs	r2, #194	@ 0xc2
 80042f2:	211d      	movs	r1, #29
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7ff f956 	bl	80035a6 <write_register>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <receive_package+0x17e>
 8004306:	2300      	movs	r3, #0
 8004308:	e0a5      	b.n	8004456 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	211e      	movs	r1, #30
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff f940 	bl	80035a6 <write_register>
 8004326:	4603      	mov	r3, r0
 8004328:	f083 0301 	eor.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <receive_package+0x1aa>
 8004332:	2300      	movs	r3, #0
 8004334:	e08f      	b.n	8004456 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8004336:	2204      	movs	r2, #4
 8004338:	2126      	movs	r1, #38	@ 0x26
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff f933 	bl	80035a6 <write_register>
 8004340:	4603      	mov	r3, r0
 8004342:	f083 0301 	eor.w	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <receive_package+0x1c4>
 800434c:	2300      	movs	r3, #0
 800434e:	e082      	b.n	8004456 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	211f      	movs	r1, #31
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff f924 	bl	80035a6 <write_register>
 800435e:	4603      	mov	r3, r0
 8004360:	f083 0301 	eor.w	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <receive_package+0x1e2>
 800436a:	2300      	movs	r3, #0
 800436c:	e073      	b.n	8004456 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4619      	mov	r1, r3
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fe44 	bl	8004000 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fa7b 	bl	8003874 <wait_for_rx_irqs>
 800437e:	4603      	mov	r3, r0
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 800438a:	2301      	movs	r3, #1
 800438c:	e063      	b.n	8004456 <receive_package+0x2ca>
			}
		}

		return true;
 800438e:	2301      	movs	r3, #1
 8004390:	e061      	b.n	8004456 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8004392:	f107 021f 	add.w	r2, r7, #31
 8004396:	2301      	movs	r3, #1
 8004398:	2112      	movs	r1, #18
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7ff f8c7 	bl	800352e <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <receive_package+0x222>
		return true;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e053      	b.n	8004456 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 80043ae:	f107 021e 	add.w	r2, r7, #30
 80043b2:	2301      	movs	r3, #1
 80043b4:	2119      	movs	r1, #25
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff f8b9 	bl	800352e <read_register>
 80043bc:	4603      	mov	r3, r0
 80043be:	f083 0301 	eor.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <receive_package+0x240>
 80043c8:	2300      	movs	r3, #0
 80043ca:	e044      	b.n	8004456 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 80043cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da00      	bge.n	80043d6 <receive_package+0x24a>
 80043d4:	3303      	adds	r3, #3
 80043d6:	109b      	asrs	r3, r3, #2
 80043d8:	b25a      	sxtb	r2, r3
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 80043de:	f107 021d 	add.w	r2, r7, #29
 80043e2:	2301      	movs	r3, #1
 80043e4:	2113      	movs	r1, #19
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff f8a1 	bl	800352e <read_register>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f083 0301 	eor.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <receive_package+0x270>
 80043f8:	2300      	movs	r3, #0
 80043fa:	e02c      	b.n	8004456 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 80043fc:	2200      	movs	r2, #0
 80043fe:	210d      	movs	r1, #13
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff f8d0 	bl	80035a6 <write_register>
 8004406:	4603      	mov	r3, r0
 8004408:	f083 0301 	eor.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <receive_package+0x28a>
 8004412:	2300      	movs	r3, #0
 8004414:	e01f      	b.n	8004456 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8004416:	7f7b      	ldrb	r3, [r7, #29]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	2100      	movs	r1, #0
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7ff f886 	bl	800352e <read_register>
 8004422:	4603      	mov	r3, r0
 8004424:	f083 0301 	eor.w	r3, r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <receive_package+0x2a6>
 800442e:	2300      	movs	r3, #0
 8004430:	e011      	b.n	8004456 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004432:	2280      	movs	r2, #128	@ 0x80
 8004434:	2101      	movs	r1, #1
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff f8b5 	bl	80035a6 <write_register>
 800443c:	4603      	mov	r3, r0
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <receive_package+0x2c0>
 8004448:	2300      	movs	r3, #0
 800444a:	e004      	b.n	8004456 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 800444c:	7f7b      	ldrb	r3, [r7, #29]
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	601a      	str	r2, [r3, #0]
	return true;
 8004454:	2301      	movs	r3, #1
}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	@ 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	0001e848 	.word	0x0001e848
 8004464:	0800e200 	.word	0x0800e200
 8004468:	0800e288 	.word	0x0800e288
 800446c:	0800e004 	.word	0x0800e004
 8004470:	33d3e608 	.word	0x33d3e608

08004474 <send_package>:


static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel, uint32_t *tx_ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	4619      	mov	r1, r3
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff f99a 	bl	80037c0 <configure_channel>
 800448c:	4603      	mov	r3, r0
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <send_package+0x28>
 8004498:	2300      	movs	r3, #0
 800449a:	e0d9      	b.n	8004650 <send_package+0x1dc>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800449c:	2272      	movs	r2, #114	@ 0x72
 800449e:	211d      	movs	r1, #29
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff f880 	bl	80035a6 <write_register>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f083 0301 	eor.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <send_package+0x42>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e0cc      	b.n	8004650 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 80044b6:	2274      	movs	r2, #116	@ 0x74
 80044b8:	211e      	movs	r1, #30
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff f873 	bl	80035a6 <write_register>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f083 0301 	eor.w	r3, r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <send_package+0x5c>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e0bf      	b.n	8004650 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80044d0:	2204      	movs	r2, #4
 80044d2:	2126      	movs	r1, #38	@ 0x26
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff f866 	bl	80035a6 <write_register>
 80044da:	4603      	mov	r3, r0
 80044dc:	f083 0301 	eor.w	r3, r3, #1
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <send_package+0x76>
 80044e6:	2300      	movs	r3, #0
 80044e8:	e0b2      	b.n	8004650 <send_package+0x1dc>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 80044ea:	2227      	movs	r2, #39	@ 0x27
 80044ec:	2133      	movs	r1, #51	@ 0x33
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff f859 	bl	80035a6 <write_register>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <send_package+0x90>
 8004500:	2300      	movs	r3, #0
 8004502:	e0a5      	b.n	8004650 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8004504:	221d      	movs	r2, #29
 8004506:	213b      	movs	r1, #59	@ 0x3b
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff f84c 	bl	80035a6 <write_register>
 800450e:	4603      	mov	r3, r0
 8004510:	f083 0301 	eor.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <send_package+0xaa>
 800451a:	2300      	movs	r3, #0
 800451c:	e098      	b.n	8004650 <send_package+0x1dc>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	2122      	movs	r1, #34	@ 0x22
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff f83d 	bl	80035a6 <write_register>
 800452c:	4603      	mov	r3, r0
 800452e:	f083 0301 	eor.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <send_package+0xc8>
 8004538:	2300      	movs	r3, #0
 800453a:	e089      	b.n	8004650 <send_package+0x1dc>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 800453c:	2240      	movs	r2, #64	@ 0x40
 800453e:	2140      	movs	r1, #64	@ 0x40
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff f830 	bl	80035a6 <write_register>
 8004546:	4603      	mov	r3, r0
 8004548:	f083 0301 	eor.w	r3, r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <send_package+0xe2>
 8004552:	2300      	movs	r3, #0
 8004554:	e07c      	b.n	8004650 <send_package+0x1dc>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8004556:	22ff      	movs	r2, #255	@ 0xff
 8004558:	2112      	movs	r1, #18
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff f823 	bl	80035a6 <write_register>
 8004560:	4603      	mov	r3, r0
 8004562:	f083 0301 	eor.w	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <send_package+0xfc>
 800456c:	2300      	movs	r3, #0
 800456e:	e06f      	b.n	8004650 <send_package+0x1dc>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8004580:	2281      	movs	r2, #129	@ 0x81
 8004582:	2101      	movs	r1, #1
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff f80e 	bl	80035a6 <write_register>
 800458a:	4603      	mov	r3, r0
 800458c:	f083 0301 	eor.w	r3, r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <send_package+0x126>
 8004596:	2300      	movs	r3, #0
 8004598:	e05a      	b.n	8004650 <send_package+0x1dc>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 800459a:	22c8      	movs	r2, #200	@ 0xc8
 800459c:	2102      	movs	r1, #2
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff f938 	bl	8003814 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 80045a4:	2280      	movs	r2, #128	@ 0x80
 80045a6:	210d      	movs	r1, #13
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7fe fffc 	bl	80035a6 <write_register>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <send_package+0x14a>
 80045ba:	2300      	movs	r3, #0
 80045bc:	e048      	b.n	8004650 <send_package+0x1dc>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e00b      	b.n	80045dc <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	2100      	movs	r1, #0
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7fe ffe8 	bl	80035a6 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3ef      	bcc.n	80045c4 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 80045e4:	2283      	movs	r2, #131	@ 0x83
 80045e6:	2101      	movs	r1, #1
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7fe ffdc 	bl	80035a6 <write_register>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f083 0301 	eor.w	r3, r3, #1
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <send_package+0x18a>
 80045fa:	2300      	movs	r3, #0
 80045fc:	e028      	b.n	8004650 <send_package+0x1dc>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 80045fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004602:	2100      	movs	r1, #0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff f905 	bl	8003814 <wait_for_irq>
 800460a:	4603      	mov	r3, r0
 800460c:	f083 0301 	eor.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <send_package+0x1a6>
 8004616:	2300      	movs	r3, #0
 8004618:	e01a      	b.n	8004650 <send_package+0x1dc>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8004624:	2280      	movs	r2, #128	@ 0x80
 8004626:	2101      	movs	r1, #1
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7fe ffbc 	bl	80035a6 <write_register>
 800462e:	4603      	mov	r3, r0
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <send_package+0x1ca>
 800463a:	2300      	movs	r3, #0
 800463c:	e008      	b.n	8004650 <send_package+0x1dc>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004644:	3301      	adds	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

	return true;
 800464e:	2301      	movs	r3, #1
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <encode_phy_payload>:


static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload, size_t frame_payload_length, uint8_t port)
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b08d      	sub	sp, #52	@ 0x34
 800465c:	af04      	add	r7, sp, #16
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	330d      	adds	r3, #13
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d906      	bls.n	8004680 <encode_phy_payload+0x28>
 8004672:	4b51      	ldr	r3, [pc, #324]	@ (80047b8 <encode_phy_payload+0x160>)
 8004674:	4a51      	ldr	r2, [pc, #324]	@ (80047bc <encode_phy_payload+0x164>)
 8004676:	f240 216a 	movw	r1, #618	@ 0x26a
 800467a:	4851      	ldr	r0, [pc, #324]	@ (80047c0 <encode_phy_payload+0x168>)
 800467c:	f008 fc98 	bl	800cfb0 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2240      	movs	r2, #64	@ 0x40
 8004684:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	7d52      	ldrb	r2, [r2, #21]
 800468e:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	3302      	adds	r3, #2
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	7d12      	ldrb	r2, [r2, #20]
 8004698:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3303      	adds	r3, #3
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	7cd2      	ldrb	r2, [r2, #19]
 80046a2:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3304      	adds	r3, #4
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	7c92      	ldrb	r2, [r2, #18]
 80046ac:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3305      	adds	r3, #5
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3306      	adds	r3, #6
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3307      	adds	r3, #7
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	3308      	adds	r3, #8
 80046da:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80046de:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3309      	adds	r3, #9
 80046e4:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4413      	add	r3, r2
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f008 fe1e 	bl	800d332 <memcpy>
	if (port == 0) {
 80046f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	18d0      	adds	r0, r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2d9      	uxtb	r1, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800470e:	461c      	mov	r4, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3316      	adds	r3, #22
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	3212      	adds	r2, #18
 8004718:	9201      	str	r2, [sp, #4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2300      	movs	r3, #0
 800471e:	4622      	mov	r2, r4
 8004720:	f008 f96b 	bl	800c9fa <Encrypt_Payload>
 8004724:	e012      	b.n	800474c <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count, 0, handle->application_session_key, handle->device_address);
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	18d0      	adds	r0, r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2d9      	uxtb	r1, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004736:	461c      	mov	r4, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3326      	adds	r3, #38	@ 0x26
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	3212      	adds	r2, #18
 8004740:	9201      	str	r2, [sp, #4]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	4622      	mov	r2, r4
 8004748:	f008 f957 	bl	800c9fa <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4413      	add	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0, handle->network_session_key, handle->device_address);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	b2d8      	uxtb	r0, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800475e:	461c      	mov	r4, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3316      	adds	r3, #22
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	3212      	adds	r2, #18
 8004768:	f107 0114 	add.w	r1, r7, #20
 800476c:	9202      	str	r2, [sp, #8]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	2300      	movs	r3, #0
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	4623      	mov	r3, r4
 8004776:	4602      	mov	r2, r0
 8004778:	68b8      	ldr	r0, [r7, #8]
 800477a:	f008 f9f2 	bl	800cb62 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 800477e:	2300      	movs	r3, #0
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e00d      	b.n	80047a0 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8004784:	7ffa      	ldrb	r2, [r7, #31]
 8004786:	7ff9      	ldrb	r1, [r7, #31]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	440b      	add	r3, r1
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	440b      	add	r3, r1
 8004790:	3220      	adds	r2, #32
 8004792:	443a      	add	r2, r7
 8004794:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004798:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 800479a:	7ffb      	ldrb	r3, [r7, #31]
 800479c:	3301      	adds	r3, #1
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d9ee      	bls.n	8004784 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3304      	adds	r3, #4
 80047aa:	61bb      	str	r3, [r7, #24]

	return payload_len;
 80047ac:	69bb      	ldr	r3, [r7, #24]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3724      	adds	r7, #36	@ 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd90      	pop	{r4, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	0800e21c 	.word	0x0800e21c
 80047bc:	0800e298 	.word	0x0800e298
 80047c0:	0800e004 	.word	0x0800e004

080047c4 <decode_phy_payload>:


static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length, uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b08d      	sub	sp, #52	@ 0x34
 80047c8:	af04      	add	r7, sp, #16
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b60      	cmp	r3, #96	@ 0x60
 80047da:	d001      	beq.n	80047e0 <decode_phy_payload+0x1c>
		return false;
 80047dc:	2300      	movs	r3, #0
 80047de:	e0ab      	b.n	8004938 <decode_phy_payload+0x174>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	3301      	adds	r3, #1
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	7d5b      	ldrb	r3, [r3, #21]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d114      	bne.n	8004818 <decode_phy_payload+0x54>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3302      	adds	r3, #2
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	7d1b      	ldrb	r3, [r3, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d10d      	bne.n	8004818 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3303      	adds	r3, #3
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d106      	bne.n	8004818 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3304      	adds	r3, #4
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	7c9b      	ldrb	r3, [r3, #18]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <decode_phy_payload+0x58>
		return false;
 8004818:	2300      	movs	r3, #0
 800481a:	e08d      	b.n	8004938 <decode_phy_payload+0x174>
	}

	uint8_t frame_control = payload_buf[5];
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	795b      	ldrb	r3, [r3, #5]
 8004820:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3307      	adds	r3, #7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b21b      	sxth	r3, r3
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	b21a      	sxth	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	3306      	adds	r3, #6
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b21b      	sxth	r3, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	b21b      	sxth	r3, r3
 8004842:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800484a:	8bba      	ldrh	r2, [r7, #28]
 800484c:	429a      	cmp	r2, r3
 800484e:	d201      	bcs.n	8004854 <decode_phy_payload+0x90>
		return false;
 8004850:	2300      	movs	r3, #0
 8004852:	e071      	b.n	8004938 <decode_phy_payload+0x174>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8bba      	ldrh	r2, [r7, #28]
 8004858:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	3b04      	subs	r3, #4
 8004860:	b2d8      	uxtb	r0, r3
 8004862:	8bbc      	ldrh	r4, [r7, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3316      	adds	r3, #22
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	3212      	adds	r2, #18
 800486c:	f107 0114 	add.w	r1, r7, #20
 8004870:	9202      	str	r2, [sp, #8]
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	2301      	movs	r3, #1
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	4623      	mov	r3, r4
 800487a:	4602      	mov	r2, r0
 800487c:	68b8      	ldr	r0, [r7, #8]
 800487e:	f008 f970 	bl	800cb62 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	3b04      	subs	r3, #4
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	18d1      	adds	r1, r2, r3
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	2204      	movs	r2, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f008 fcc2 	bl	800d21a <memcmp>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <decode_phy_payload+0xdc>
		return false;
 800489c:	2300      	movs	r3, #0
 800489e:	e04b      	b.n	8004938 <decode_phy_payload+0x174>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	f1a3 020c 	sub.w	r2, r3, #12
 80048a6:	7fbb      	ldrb	r3, [r7, #30]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d10b      	bne.n	80048c4 <decode_phy_payload+0x100>
		*frame_port = 0;
 80048ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f103 0208 	add.w	r2, r3, #8
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	7fba      	ldrb	r2, [r7, #30]
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	e038      	b.n	8004936 <decode_phy_payload+0x172>

	} else {
		*frame_port = payload_buf[8];
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	7a1a      	ldrb	r2, [r3, #8]
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 80048cc:	7fbb      	ldrb	r3, [r7, #30]
 80048ce:	3309      	adds	r3, #9
 80048d0:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 80048d8:	7eba      	ldrb	r2, [r7, #26]
 80048da:	7efb      	ldrb	r3, [r7, #27]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 80048e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <decode_phy_payload+0x144>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->network_session_key, handle->device_address);
 80048e8:	7efb      	ldrb	r3, [r7, #27]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	18d0      	adds	r0, r2, r3
 80048ee:	8bbc      	ldrh	r4, [r7, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3316      	adds	r3, #22
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	3212      	adds	r2, #18
 80048f8:	7e79      	ldrb	r1, [r7, #25]
 80048fa:	9201      	str	r2, [sp, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2301      	movs	r3, #1
 8004900:	4622      	mov	r2, r4
 8004902:	f008 f87a 	bl	800c9fa <Encrypt_Payload>
 8004906:	e00e      	b.n	8004926 <decode_phy_payload+0x162>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count, 1, handle->application_session_key, handle->device_address);
 8004908:	7efb      	ldrb	r3, [r7, #27]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	18d0      	adds	r0, r2, r3
 800490e:	8bbc      	ldrh	r4, [r7, #28]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3326      	adds	r3, #38	@ 0x26
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	3212      	adds	r2, #18
 8004918:	7e79      	ldrb	r1, [r7, #25]
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	2301      	movs	r3, #1
 8004920:	4622      	mov	r2, r4
 8004922:	f008 f86a 	bl	800c9fa <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8004926:	7efb      	ldrb	r3, [r7, #27]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	441a      	add	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	7e7a      	ldrb	r2, [r7, #25]
 8004934:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8004936:	2301      	movs	r3, #1
}
 8004938:	4618      	mov	r0, r3
 800493a:	3724      	adds	r7, #36	@ 0x24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}

08004940 <select_random_channel>:


static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 800494c:	2300      	movs	r3, #0
 800494e:	73bb      	strb	r3, [r7, #14]
 8004950:	e010      	b.n	8004974 <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8004958:	461a      	mov	r2, r3
 800495a:	7bbb      	ldrb	r3, [r7, #14]
 800495c:	fa42 f303 	asr.w	r3, r2, r3
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <select_random_channel+0x2e>
			channel_count++;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	3301      	adds	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	3301      	adds	r3, #1
 8004972:	73bb      	strb	r3, [r7, #14]
 8004974:	7bbb      	ldrb	r3, [r7, #14]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d9eb      	bls.n	8004952 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
 8004984:	4603      	mov	r3, r0
 8004986:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8004988:	2300      	movs	r3, #0
 800498a:	733b      	strb	r3, [r7, #12]
 800498c:	e015      	b.n	80049ba <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8004994:	461a      	mov	r2, r3
 8004996:	7b3b      	ldrb	r3, [r7, #12]
 8004998:	fa42 f303 	asr.w	r3, r2, r3
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <select_random_channel+0x74>
			if (random_channel == 0) {
 80049a4:	7b7b      	ldrb	r3, [r7, #13]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <select_random_channel+0x6e>
				return i;
 80049aa:	7b3b      	ldrb	r3, [r7, #12]
 80049ac:	e009      	b.n	80049c2 <select_random_channel+0x82>
			} else {
				random_channel--;
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 80049b4:	7b3b      	ldrb	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	733b      	strb	r3, [r7, #12]
 80049ba:	7b3b      	ldrb	r3, [r7, #12]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d9e6      	bls.n	800498e <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <rfm95_send_receive_cycle>:


bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b0aa      	sub	sp, #168	@ 0xa8
 80049ce:	af02      	add	r7, sp, #8
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 80049d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80049da:	2240      	movs	r2, #64	@ 0x40
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 fc2b 	bl	800d23a <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 80049e4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80049e8:	2301      	movs	r3, #1
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff fe31 	bl	8004658 <encode_phy_payload>
 80049f6:	4603      	mov	r3, r0
 80049f8:	65bb      	str	r3, [r7, #88]	@ 0x58

	uint8_t random_channel = select_random_channel(handle);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff ffa0 	bl	8004940 <select_random_channel>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks))
 8004a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a08:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8004a0c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4603      	mov	r3, r0
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fd2b 	bl	8004474 <send_package>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f083 0301 	eor.w	r3, r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <rfm95_send_receive_cycle+0x6e>
	{
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004a2a:	2280      	movs	r2, #128	@ 0x80
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fe fdb9 	bl	80035a6 <write_register>
		return false;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e0ad      	b.n	8004b94 <rfm95_send_receive_cycle+0x1ca>
	}


	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8004a38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004a3c:	2240      	movs	r2, #64	@ 0x40
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f008 fbfa 	bl	800d23a <memset>
	phy_payload_len = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8094 	beq.w	8004b7e <rfm95_send_receive_cycle+0x1b4>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8004a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a58:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8004a5c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004a60:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4603      	mov	r3, r0
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fb8f 	bl	800418c <receive_package>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f083 0301 	eor.w	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <rfm95_send_receive_cycle+0xd2>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7fe fd91 	bl	80035a6 <write_register>
			if (handle->save_config) {
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <rfm95_send_receive_cycle+0xce>
				handle->save_config(&(handle->config));
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	3260      	adds	r2, #96	@ 0x60
 8004a94:	4610      	mov	r0, r2
 8004a96:	4798      	blx	r3
			}
			return false;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e07b      	b.n	8004b94 <rfm95_send_receive_cycle+0x1ca>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8004a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d06d      	beq.n	8004b7e <rfm95_send_receive_cycle+0x1b4>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len, &frame_port)) {
 8004aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8004ab0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004ab4:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fe7e 	bl	80047c4 <decode_phy_payload>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d057      	beq.n	8004b7e <rfm95_send_receive_cycle+0x1b4>

				// Process Mac Commands
				if (frame_port == 0) {
 8004ace:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d153      	bne.n	8004b7e <rfm95_send_receive_cycle+0x1b4>

					uint8_t mac_response_data[51] = {0};
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	2233      	movs	r2, #51	@ 0x33
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f008 fbab 	bl	800d23a <memset>
					uint8_t mac_response_len = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data, &mac_response_len, snr) && mac_response_len != 0) {
 8004aea:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004aec:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8004af0:	4618      	mov	r0, r3
 8004af2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004af6:	f107 0214 	add.w	r2, r7, #20
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	f107 0349 	add.w	r3, r7, #73	@ 0x49
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	4602      	mov	r2, r0
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff f8ba 	bl	8003c80 <process_mac_commands>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d035      	beq.n	8004b7e <rfm95_send_receive_cycle+0x1b4>
 8004b12:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d031      	beq.n	8004b7e <rfm95_send_receive_cycle+0x1b4>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data, mac_response_len, 0);
 8004b1a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f107 0214 	add.w	r2, r7, #20
 8004b24:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff fd92 	bl	8004658 <encode_phy_payload>
 8004b34:	4603      	mov	r3, r0
 8004b36:	65bb      	str	r3, [r7, #88]	@ 0x58

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8004b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b3a:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8004b3e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8004b42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fc92 	bl	8004474 <send_package>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <rfm95_send_receive_cycle+0x1b4>
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8004b5c:	2280      	movs	r2, #128	@ 0x80
 8004b5e:	2101      	movs	r1, #1
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7fe fd20 	bl	80035a6 <write_register>
							if (handle->save_config) {
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <rfm95_send_receive_cycle+0x1b0>
								handle->save_config(&(handle->config));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	3260      	adds	r2, #96	@ 0x60
 8004b76:	4610      	mov	r0, r2
 8004b78:	4798      	blx	r3
							}
							return false;
 8004b7a:	2300      	movs	r3, #0
			return false;
 8004b7c:	e00a      	b.n	8004b94 <rfm95_send_receive_cycle+0x1ca>
				}
			}
		}
	}

	if (handle->save_config) {
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <rfm95_send_receive_cycle+0x1c8>
		handle->save_config(&(handle->config));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	3260      	adds	r2, #96	@ 0x60
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4798      	blx	r3
	}

	return true;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	37a0      	adds	r7, #160	@ 0xa0
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <rfm95_on_interrupt>:


void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	78fc      	ldrb	r4, [r7, #3]
 8004bae:	4798      	blx	r3
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	6059      	str	r1, [r3, #4]
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}
	...

08004bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004bce:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <HAL_MspInit+0x58>)
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	4a13      	ldr	r2, [pc, #76]	@ (8004c20 <HAL_MspInit+0x58>)
 8004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bd8:	6253      	str	r3, [r2, #36]	@ 0x24
 8004bda:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <HAL_MspInit+0x58>)
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c20 <HAL_MspInit+0x58>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4a0d      	ldr	r2, [pc, #52]	@ (8004c20 <HAL_MspInit+0x58>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6213      	str	r3, [r2, #32]
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_MspInit+0x58>)
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b08      	ldr	r3, [pc, #32]	@ (8004c20 <HAL_MspInit+0x58>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <HAL_MspInit+0x58>)
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	6253      	str	r3, [r2, #36]	@ 0x24
 8004c0a:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <HAL_MspInit+0x58>)
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40023800 	.word	0x40023800

08004c24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a19      	ldr	r2, [pc, #100]	@ (8004ca8 <HAL_ADC_MspInit+0x84>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d12b      	bne.n	8004c9e <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c46:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c50:	6213      	str	r3, [r2, #32]
 8004c52:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5e:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	61d3      	str	r3, [r2, #28]
 8004c6a:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <HAL_ADC_MspInit+0x88>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = AN_BAT_Pin|AN_E_HUM_Pin;
 8004c76:	2306      	movs	r3, #6
 8004c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c82:	f107 0314 	add.w	r3, r7, #20
 8004c86:	4619      	mov	r1, r3
 8004c88:	4809      	ldr	r0, [pc, #36]	@ (8004cb0 <HAL_ADC_MspInit+0x8c>)
 8004c8a:	f001 fee5 	bl	8006a58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2102      	movs	r1, #2
 8004c92:	2012      	movs	r0, #18
 8004c94:	f001 faf1 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004c98:	2012      	movs	r0, #18
 8004c9a:	f001 fb0a 	bl	80062b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004c9e:	bf00      	nop
 8004ca0:	3728      	adds	r7, #40	@ 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40012400 	.word	0x40012400
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40020000 	.word	0x40020000

08004cb4 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <HAL_ADC_MspDeInit+0x34>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_ADC_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004cc6:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_ADC_MspDeInit+0x38>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <HAL_ADC_MspDeInit+0x38>)
 8004ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cd0:	6213      	str	r3, [r2, #32]

    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    HAL_GPIO_DeInit(GPIOA, AN_BAT_Pin|AN_E_HUM_Pin);
 8004cd2:	2106      	movs	r1, #6
 8004cd4:	4806      	ldr	r0, [pc, #24]	@ (8004cf0 <HAL_ADC_MspDeInit+0x3c>)
 8004cd6:	f002 f83f 	bl	8006d58 <HAL_GPIO_DeInit>

    /* ADC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8004cda:	2012      	movs	r0, #18
 8004cdc:	f001 faf7 	bl	80062ce <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40012400 	.word	0x40012400
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40020000 	.word	0x40020000

08004cf4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	@ 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	f107 031c 	add.w	r3, r7, #28
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3a      	ldr	r2, [pc, #232]	@ (8004dfc <HAL_I2C_MspInit+0x108>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d138      	bne.n	8004d88 <HAL_I2C_MspInit+0x94>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d16:	4b3a      	ldr	r3, [pc, #232]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4a39      	ldr	r2, [pc, #228]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	61d3      	str	r3, [r2, #28]
 8004d22:	4b37      	ldr	r3, [pc, #220]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d2e:	23c0      	movs	r3, #192	@ 0xc0
 8004d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d32:	2312      	movs	r3, #18
 8004d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d3e:	2304      	movs	r3, #4
 8004d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d42:	f107 031c 	add.w	r3, r7, #28
 8004d46:	4619      	mov	r1, r3
 8004d48:	482e      	ldr	r0, [pc, #184]	@ (8004e04 <HAL_I2C_MspInit+0x110>)
 8004d4a:	f001 fe85 	bl	8006a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	4a2b      	ldr	r2, [pc, #172]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d58:	6253      	str	r3, [r2, #36]	@ 0x24
 8004d5a:	4b29      	ldr	r3, [pc, #164]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	201f      	movs	r0, #31
 8004d6c:	f001 fa85 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004d70:	201f      	movs	r0, #31
 8004d72:	f001 fa9e 	bl	80062b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2020      	movs	r0, #32
 8004d7c:	f001 fa7d 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004d80:	2020      	movs	r0, #32
 8004d82:	f001 fa96 	bl	80062b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004d86:	e035      	b.n	8004df4 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <HAL_I2C_MspInit+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d130      	bne.n	8004df4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4a1a      	ldr	r2, [pc, #104]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	61d3      	str	r3, [r2, #28]
 8004d9e:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004daa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004db0:	2312      	movs	r3, #18
 8004db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db8:	2303      	movs	r3, #3
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc0:	f107 031c 	add.w	r3, r7, #28
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	480f      	ldr	r0, [pc, #60]	@ (8004e04 <HAL_I2C_MspInit+0x110>)
 8004dc8:	f001 fe46 	bl	8006a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004dd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dd6:	6253      	str	r3, [r2, #36]	@ 0x24
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_I2C_MspInit+0x10c>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004de4:	2200      	movs	r2, #0
 8004de6:	2100      	movs	r1, #0
 8004de8:	2021      	movs	r0, #33	@ 0x21
 8004dea:	f001 fa46 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004dee:	2021      	movs	r0, #33	@ 0x21
 8004df0:	f001 fa5f 	bl	80062b2 <HAL_NVIC_EnableIRQ>
}
 8004df4:	bf00      	nop
 8004df6:	3730      	adds	r7, #48	@ 0x30
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40005400 	.word	0x40005400
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40020400 	.word	0x40020400
 8004e08:	40005800 	.word	0x40005800

08004e0c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <HAL_RTC_MspInit+0x30>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10a      	bne.n	8004e34 <HAL_RTC_MspInit+0x28>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e1e:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <HAL_RTC_MspInit+0x34>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	2029      	movs	r0, #41	@ 0x29
 8004e2a:	f001 fa26 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004e2e:	2029      	movs	r0, #41	@ 0x29
 8004e30:	f001 fa3f 	bl	80062b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40002800 	.word	0x40002800
 8004e40:	424706d8 	.word	0x424706d8

08004e44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08c      	sub	sp, #48	@ 0x30
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4c:	f107 031c 	add.w	r3, r7, #28
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	60da      	str	r2, [r3, #12]
 8004e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a2e      	ldr	r2, [pc, #184]	@ (8004f1c <HAL_SPI_MspInit+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d128      	bne.n	8004eb8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e66:	4b2e      	ldr	r3, [pc, #184]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	61d3      	str	r3, [r2, #28]
 8004e8a:	4b25      	ldr	r3, [pc, #148]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e96:	23e0      	movs	r3, #224	@ 0xe0
 8004e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eaa:	f107 031c 	add.w	r3, r7, #28
 8004eae:	4619      	mov	r1, r3
 8004eb0:	481c      	ldr	r0, [pc, #112]	@ (8004f24 <HAL_SPI_MspInit+0xe0>)
 8004eb2:	f001 fdd1 	bl	8006a58 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004eb6:	e02d      	b.n	8004f14 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f28 <HAL_SPI_MspInit+0xe4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d128      	bne.n	8004f14 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ecc:	6253      	str	r3, [r2, #36]	@ 0x24
 8004ece:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eda:	4b11      	ldr	r3, [pc, #68]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	61d3      	str	r3, [r2, #28]
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <HAL_SPI_MspInit+0xdc>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ef2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f00:	2303      	movs	r3, #3
 8004f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f04:	2305      	movs	r3, #5
 8004f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f08:	f107 031c 	add.w	r3, r7, #28
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4807      	ldr	r0, [pc, #28]	@ (8004f2c <HAL_SPI_MspInit+0xe8>)
 8004f10:	f001 fda2 	bl	8006a58 <HAL_GPIO_Init>
}
 8004f14:	bf00      	nop
 8004f16:	3730      	adds	r7, #48	@ 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40013000 	.word	0x40013000
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40020000 	.word	0x40020000
 8004f28:	40003800 	.word	0x40003800
 8004f2c:	40020400 	.word	0x40020400

08004f30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f40:	d114      	bne.n	8004f6c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6253      	str	r3, [r2, #36]	@ 0x24
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	201c      	movs	r0, #28
 8004f60:	f001 f98b 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f64:	201c      	movs	r0, #28
 8004f66:	f001 f9a4 	bl	80062b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f6a:	e018      	b.n	8004f9e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0e      	ldr	r2, [pc, #56]	@ (8004fac <HAL_TIM_Base_MspInit+0x7c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f76:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6253      	str	r3, [r2, #36]	@ 0x24
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <HAL_TIM_Base_MspInit+0x78>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	201d      	movs	r0, #29
 8004f94:	f001 f971 	bl	800627a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f98:	201d      	movs	r0, #29
 8004f9a:	f001 f98a 	bl	80062b2 <HAL_NVIC_EnableIRQ>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40000400 	.word	0x40000400

08004fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <NMI_Handler+0x4>

08004fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <HardFault_Handler+0x4>

08004fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <MemManage_Handler+0x4>

08004fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fcc:	bf00      	nop
 8004fce:	e7fd      	b.n	8004fcc <BusFault_Handler+0x4>

08004fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <UsageFault_Handler+0x4>

08004fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005000:	f000 f996 	bl	8005330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}

08005008 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO5_Pin);
 800500c:	2002      	movs	r0, #2
 800500e:	f001 ff9b 	bl	8006f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}

08005016 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800501a:	2008      	movs	r0, #8
 800501c:	f001 ff94 	bl	8006f48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}

08005024 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005028:	4802      	ldr	r0, [pc, #8]	@ (8005034 <ADC1_IRQHandler+0x10>)
 800502a:	f000 fd2b 	bl	8005a84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200002f4 	.word	0x200002f4

08005038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800503c:	4802      	ldr	r0, [pc, #8]	@ (8005048 <TIM2_IRQHandler+0x10>)
 800503e:	f006 ff2d 	bl	800be9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	200004c0 	.word	0x200004c0

0800504c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005050:	4802      	ldr	r0, [pc, #8]	@ (800505c <TIM3_IRQHandler+0x10>)
 8005052:	f006 ff23 	bl	800be9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000500 	.word	0x20000500

08005060 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005064:	4802      	ldr	r0, [pc, #8]	@ (8005070 <I2C1_EV_IRQHandler+0x10>)
 8005066:	f002 fc0b 	bl	8007880 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000348 	.word	0x20000348

08005074 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005078:	4802      	ldr	r0, [pc, #8]	@ (8005084 <I2C1_ER_IRQHandler+0x10>)
 800507a:	f002 fd72 	bl	8007b62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000348 	.word	0x20000348

08005088 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800508c:	4802      	ldr	r0, [pc, #8]	@ (8005098 <I2C2_EV_IRQHandler+0x10>)
 800508e:	f002 fbf7 	bl	8007880 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000039c 	.word	0x2000039c

0800509c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80050a0:	4802      	ldr	r0, [pc, #8]	@ (80050ac <RTC_Alarm_IRQHandler+0x10>)
 80050a2:	f005 ff7b 	bl	800af9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200003f0 	.word	0x200003f0

080050b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return 1;
 80050b4:	2301      	movs	r3, #1
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <_kill>:

int _kill(int pid, int sig)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050c8:	f008 f906 	bl	800d2d8 <__errno>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2216      	movs	r2, #22
 80050d0:	601a      	str	r2, [r3, #0]
  return -1;
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <_exit>:

void _exit (int status)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050e6:	f04f 31ff 	mov.w	r1, #4294967295
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ffe7 	bl	80050be <_kill>
  while (1) {}    /* Make sure we hang here */
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <_exit+0x12>

080050f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e00a      	b.n	800511c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005106:	f3af 8000 	nop.w
 800510a:	4601      	mov	r1, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	60ba      	str	r2, [r7, #8]
 8005112:	b2ca      	uxtb	r2, r1
 8005114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3301      	adds	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	dbf0      	blt.n	8005106 <_read+0x12>
  }

  return len;
 8005124:	687b      	ldr	r3, [r7, #4]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e009      	b.n	8005154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	60ba      	str	r2, [r7, #8]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3301      	adds	r3, #1
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	dbf1      	blt.n	8005140 <_write+0x12>
  }
  return len;
 800515c:	687b      	ldr	r3, [r7, #4]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <_close>:

int _close(int file)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800518c:	605a      	str	r2, [r3, #4]
  return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <_isatty>:

int _isatty(int file)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051a2:	2301      	movs	r3, #1
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051d0:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <_sbrk+0x5c>)
 80051d2:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <_sbrk+0x60>)
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051dc:	4b13      	ldr	r3, [pc, #76]	@ (800522c <_sbrk+0x64>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051e4:	4b11      	ldr	r3, [pc, #68]	@ (800522c <_sbrk+0x64>)
 80051e6:	4a12      	ldr	r2, [pc, #72]	@ (8005230 <_sbrk+0x68>)
 80051e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ea:	4b10      	ldr	r3, [pc, #64]	@ (800522c <_sbrk+0x64>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d207      	bcs.n	8005208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051f8:	f008 f86e 	bl	800d2d8 <__errno>
 80051fc:	4603      	mov	r3, r0
 80051fe:	220c      	movs	r2, #12
 8005200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e009      	b.n	800521c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005208:	4b08      	ldr	r3, [pc, #32]	@ (800522c <_sbrk+0x64>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800520e:	4b07      	ldr	r3, [pc, #28]	@ (800522c <_sbrk+0x64>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	4a05      	ldr	r2, [pc, #20]	@ (800522c <_sbrk+0x64>)
 8005218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20002800 	.word	0x20002800
 8005228:	00000400 	.word	0x00000400
 800522c:	2000054c 	.word	0x2000054c
 8005230:	200006c8 	.word	0x200006c8

08005234 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8005240:	f7ff fff8 	bl	8005234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005244:	480b      	ldr	r0, [pc, #44]	@ (8005274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005246:	490c      	ldr	r1, [pc, #48]	@ (8005278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005248:	4a0c      	ldr	r2, [pc, #48]	@ (800527c <LoopFillZerobss+0x16>)
  movs r3, #0
 800524a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800524c:	e002      	b.n	8005254 <LoopCopyDataInit>

0800524e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800524e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005252:	3304      	adds	r3, #4

08005254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005258:	d3f9      	bcc.n	800524e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800525a:	4a09      	ldr	r2, [pc, #36]	@ (8005280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800525c:	4c09      	ldr	r4, [pc, #36]	@ (8005284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800525e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005260:	e001      	b.n	8005266 <LoopFillZerobss>

08005262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005264:	3204      	adds	r2, #4

08005266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005268:	d3fb      	bcc.n	8005262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800526a:	f008 f83b 	bl	800d2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800526e:	f7fc febf 	bl	8001ff0 <main>
  bx lr
 8005272:	4770      	bx	lr
  ldr r0, =_sdata
 8005274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005278:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 800527c:	0800e350 	.word	0x0800e350
  ldr r2, =_sbss
 8005280:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8005284:	200006c8 	.word	0x200006c8

08005288 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005288:	e7fe      	b.n	8005288 <COMP_IRQHandler>

0800528a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005294:	2003      	movs	r0, #3
 8005296:	f000 ffe5 	bl	8006264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800529a:	200f      	movs	r0, #15
 800529c:	f000 f80e 	bl	80052bc <HAL_InitTick>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	71fb      	strb	r3, [r7, #7]
 80052aa:	e001      	b.n	80052b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052ac:	f7ff fc8c 	bl	8004bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052b0:	79fb      	ldrb	r3, [r7, #7]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80052c8:	4b16      	ldr	r3, [pc, #88]	@ (8005324 <HAL_InitTick+0x68>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d022      	beq.n	8005316 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80052d0:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <HAL_InitTick+0x6c>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <HAL_InitTick+0x68>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80052dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 f800 	bl	80062ea <HAL_SYSTICK_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d809      	bhi.n	800530a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f6:	2200      	movs	r2, #0
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	f000 ffbc 	bl	800627a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005302:	4a0a      	ldr	r2, [pc, #40]	@ (800532c <HAL_InitTick+0x70>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e007      	b.n	800531a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	e004      	b.n	800531a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
 8005314:	e001      	b.n	800531a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2000000c 	.word	0x2000000c
 8005328:	20000004 	.word	0x20000004
 800532c:	20000008 	.word	0x20000008

08005330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005334:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_IncTick+0x1c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <HAL_IncTick+0x20>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4413      	add	r3, r2
 800533e:	4a03      	ldr	r2, [pc, #12]	@ (800534c <HAL_IncTick+0x1c>)
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000550 	.word	0x20000550
 8005350:	2000000c 	.word	0x2000000c

08005354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return uwTick;
 8005358:	4b02      	ldr	r3, [pc, #8]	@ (8005364 <HAL_GetTick+0x10>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	20000550 	.word	0x20000550

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff fff0 	bl	8005354 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d004      	beq.n	800538c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_Delay+0x40>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538c:	bf00      	nop
 800538e:	f7ff ffe1 	bl	8005354 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	429a      	cmp	r2, r3
 800539c:	d8f7      	bhi.n	800538e <HAL_Delay+0x26>
  {
  }
}
 800539e:	bf00      	nop
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	2000000c 	.word	0x2000000c

080053ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80053b0:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <HAL_ResumeTick+0x18>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a03      	ldr	r2, [pc, #12]	@ (80053c4 <HAL_ResumeTick+0x18>)
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	e000e010 	.word	0xe000e010

080053c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80053cc:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a03      	ldr	r2, [pc, #12]	@ (80053e0 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80053d2:	f023 0304 	bic.w	r3, r3, #4
 80053d6:	6053      	str	r3, [r2, #4]
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	e0042000 	.word	0xe0042000

080053e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	@ 0x38
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e127      	b.n	8005654 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d115      	bne.n	800543e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005420:	4b8e      	ldr	r3, [pc, #568]	@ (800565c <HAL_ADC_Init+0x278>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4a8d      	ldr	r2, [pc, #564]	@ (800565c <HAL_ADC_Init+0x278>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6213      	str	r3, [r2, #32]
 800542c:	4b8b      	ldr	r3, [pc, #556]	@ (800565c <HAL_ADC_Init+0x278>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff fbf3 	bl	8004c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	f003 0310 	and.w	r3, r3, #16
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 80ff 	bne.w	800564a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005450:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	f043 0202 	orr.w	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8005460:	4b7f      	ldr	r3, [pc, #508]	@ (8005660 <HAL_ADC_Init+0x27c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	497c      	ldr	r1, [pc, #496]	@ (8005660 <HAL_ADC_Init+0x27c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800547a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005482:	4619      	mov	r1, r3
 8005484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005488:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800549e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80054a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ac:	4619      	mov	r1, r3
 80054ae:	2302      	movs	r3, #2
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	fa93 f3a3 	rbit	r3, r3
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80054c6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80054c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ca:	4313      	orrs	r3, r2
 80054cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d007      	beq.n	80054e6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80054de:	4313      	orrs	r3, r2
 80054e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e2:	4313      	orrs	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	d04f      	beq.n	8005594 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054fa:	4313      	orrs	r3, r2
 80054fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005506:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6912      	ldr	r2, [r2, #16]
 800550c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8005510:	d003      	beq.n	800551a <HAL_ADC_Init+0x136>
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6912      	ldr	r2, [r2, #16]
 8005516:	2a01      	cmp	r2, #1
 8005518:	d102      	bne.n	8005520 <HAL_ADC_Init+0x13c>
 800551a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800551e:	e000      	b.n	8005522 <HAL_ADC_Init+0x13e>
 8005520:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8005522:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8005524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005526:	4313      	orrs	r3, r2
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d125      	bne.n	8005580 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d114      	bne.n	8005568 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	3b01      	subs	r3, #1
 8005544:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8005548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	fa92 f2a2 	rbit	r2, r2
 8005550:	617a      	str	r2, [r7, #20]
  return result;
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	fab2 f282 	clz	r2, r2
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	4093      	lsls	r3, r2
 800555c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005562:	4313      	orrs	r3, r2
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
 8005566:	e00b      	b.n	8005580 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b37      	ldr	r3, [pc, #220]	@ (8005664 <HAL_ADC_Init+0x280>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005590:	430b      	orrs	r3, r1
 8005592:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	4b33      	ldr	r3, [pc, #204]	@ (8005668 <HAL_ADC_Init+0x284>)
 800559c:	4013      	ands	r3, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b0:	d003      	beq.n	80055ba <HAL_ADC_Init+0x1d6>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d119      	bne.n	80055ee <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80055ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	fa92 f2a2 	rbit	r2, r2
 80055d6:	60fa      	str	r2, [r7, #12]
  return result;
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	fab2 f282 	clz	r2, r2
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	fa03 f202 	lsl.w	r2, r3, r2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80055ec:	e007      	b.n	80055fe <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	4b19      	ldr	r3, [pc, #100]	@ (800566c <HAL_ADC_Init+0x288>)
 8005606:	4013      	ands	r3, r2
 8005608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d10b      	bne.n	8005626 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005624:	e014      	b.n	8005650 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562a:	f023 0312 	bic.w	r3, r3, #18
 800562e:	f043 0210 	orr.w	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563a:	f043 0201 	orr.w	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005648:	e002      	b.n	8005650 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8005654:	4618      	mov	r0, r3
 8005656:	3738      	adds	r7, #56	@ 0x38
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	40012700 	.word	0x40012700
 8005664:	fcfc16ff 	.word	0xfcfc16ff
 8005668:	c0fff18d 	.word	0xc0fff18d
 800566c:	bf80fffe 	.word	0xbf80fffe

08005670 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e0bc      	b.n	8005800 <HAL_ADC_DeInit+0x190>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	f043 0202 	orr.w	r2, r3, #2
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fcac 	bl	8005ff0 <ADC_ConversionStop_Disable>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 80a9 	bne.w	80057f6 <HAL_ADC_DeInit+0x186>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 021f 	mvn.w	r2, #31
 80056ac:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <HAL_ADC_DeInit+0x198>)
 80056ba:	400b      	ands	r3, r1
 80056bc:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
                                    ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
                                    ADC_CR1_AWDCH                                       ));
    
    /* Reset register CR2 */
    ADC_CR2_CLEAR(hadc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b50      	ldr	r3, [pc, #320]	@ (800580c <HAL_ADC_DeInit+0x19c>)
 80056ca:	400b      	ands	r3, r1
 80056cc:	6093      	str	r3, [r2, #8]
    
    /* Reset register SMPR0 */
    ADC_SMPR0_CLEAR(hadc);
 80056ce:	bf00      	nop
    
    /* Reset register SMPR1 */
    ADC_SMPR1_CLEAR(hadc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	0d5b      	lsrs	r3, r3, #21
 80056dc:	055b      	lsls	r3, r3, #21
 80056de:	60d3      	str	r3, [r2, #12]
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056ee:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
                                      ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
                                      ADC_SMPR2_SMP10                                      ));
    
    /* Reset register SMPR3 */
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80056fe:	615a      	str	r2, [r3, #20]
                                      ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
                                      ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
                                      ADC_SMPR3_SMP0                                    ));
    
    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800570e:	f023 030f 	bic.w	r3, r3, #15
 8005712:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005722:	f023 030f 	bic.w	r3, r3, #15
 8005726:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005736:	f023 030f 	bic.w	r3, r3, #15
 800573a:	6213      	str	r3, [r2, #32]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800574a:	f023 030f 	bic.w	r3, r3, #15
 800574e:	6253      	str	r3, [r2, #36]	@ 0x24
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800575e:	f023 030f 	bic.w	r3, r3, #15
 8005762:	6293      	str	r3, [r2, #40]	@ 0x28
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005772:	f023 030f 	bic.w	r3, r3, #15
 8005776:	62d3      	str	r3, [r2, #44]	@ 0x2c
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b23      	ldr	r3, [pc, #140]	@ (8005810 <HAL_ADC_DeInit+0x1a0>)
 8005784:	400b      	ands	r3, r1
 8005786:	6313      	str	r3, [r2, #48]	@ 0x30
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8005796:	635a      	str	r2, [r3, #52]	@ 0x34
                                     ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
                                     ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80057b6:	63da      	str	r2, [r3, #60]	@ 0x3c
                                     ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
    
    /* Reset register SQR5 */
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80057c6:	641a      	str	r2, [r3, #64]	@ 0x40
                                     ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
    
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	0d9b      	lsrs	r3, r3, #22
 80057d4:	059b      	lsls	r3, r3, #22
 80057d6:	6453      	str	r3, [r2, #68]	@ 0x44
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <HAL_ADC_DeInit+0x1a4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <HAL_ADC_DeInit+0x1a4>)
 80057de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057e2:	6053      	str	r3, [r2, #4]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fa65 	bl	8004cb4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	f83c0000 	.word	0xf83c0000
 800580c:	8080f08c 	.word	0x8080f08c
 8005810:	fe0f8000 	.word	0xfe0f8000
 8005814:	40012700 	.word	0x40012700

08005818 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_ADC_Start+0x1a>
 800582e:	2302      	movs	r3, #2
 8005830:	e04e      	b.n	80058d0 <HAL_ADC_Start+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fb7c 	bl	8005f38 <ADC_Enable>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d141      	bne.n	80058ce <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005870:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005874:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005888:	d106      	bne.n	8005898 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	f023 0206 	bic.w	r2, r3, #6
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	651a      	str	r2, [r3, #80]	@ 0x50
 8005896:	e002      	b.n	800589e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80058ae:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80058cc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_ADC_Stop+0x1a>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e01a      	b.n	8005928 <HAL_ADC_Stop+0x50>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb78 	bl	8005ff0 <ADC_ConversionStop_Disable>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_ADC_Start_IT+0x1a>
 8005946:	2302      	movs	r3, #2
 8005948:	e058      	b.n	80059fc <HAL_ADC_Start_IT+0xcc>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 faf0 	bl	8005f38 <ADC_Enable>
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d14b      	bne.n	80059fa <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005966:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005988:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800598c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a0:	d106      	bne.n	80059b0 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a6:	f023 0206 	bic.w	r2, r3, #6
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80059ae:	e002      	b.n	80059b6 <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80059c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059d6:	f043 0320 	orr.w	r3, r3, #32
 80059da:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059f8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_ADC_Stop_IT+0x1a>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e022      	b.n	8005a64 <HAL_ADC_Stop_IT+0x60>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fae2 	bl	8005ff0 <ADC_ConversionStop_Disable>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d111      	bne.n	8005a5a <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0220 	bic.w	r2, r2, #32
 8005a44:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d04c      	beq.n	8005b40 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d047      	beq.n	8005b40 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d12c      	bne.n	8005b30 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d127      	bne.n	8005b30 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae6:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d006      	beq.n	8005afc <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d119      	bne.n	8005b30 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0220 	bic.w	r2, r2, #32
 8005b0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b28:	f043 0201 	orr.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fd fb7d 	bl	8003230 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f06f 0212 	mvn.w	r2, #18
 8005b3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d05a      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d055      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d13a      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d006      	beq.n	8005b96 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d12c      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d125      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11e      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d119      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa3e 	bl	8006072 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 020c 	mvn.w	r2, #12
 8005bfe:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d012      	beq.n	8005c30 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f826 	bl	8005c72 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0201 	mvn.w	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d017      	beq.n	8005c6a <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d012      	beq.n	8005c6a <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c48:	f043 0202 	orr.w	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0220 	mvn.w	r2, #32
 8005c58:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f812 	bl	8005c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0220 	mvn.w	r2, #32
 8005c68:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
	...

08005c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x20>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e134      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x28a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	d81c      	bhi.n	8005d02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3b05      	subs	r3, #5
 8005cda:	221f      	movs	r2, #31
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	4019      	ands	r1, r3
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3b05      	subs	r3, #5
 8005cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d00:	e07e      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d81c      	bhi.n	8005d44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b23      	subs	r3, #35	@ 0x23
 8005d1c:	221f      	movs	r2, #31
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	4019      	ands	r1, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	3b23      	subs	r3, #35	@ 0x23
 8005d36:	fa00 f203 	lsl.w	r2, r0, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d42:	e05d      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b12      	cmp	r3, #18
 8005d4a:	d81c      	bhi.n	8005d86 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3b41      	subs	r3, #65	@ 0x41
 8005d5e:	221f      	movs	r2, #31
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	4019      	ands	r1, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	3b41      	subs	r3, #65	@ 0x41
 8005d78:	fa00 f203 	lsl.w	r2, r0, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d84:	e03c      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b18      	cmp	r3, #24
 8005d8c:	d81c      	bhi.n	8005dc8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3b5f      	subs	r3, #95	@ 0x5f
 8005da0:	221f      	movs	r2, #31
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	4019      	ands	r1, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	3b5f      	subs	r3, #95	@ 0x5f
 8005dba:	fa00 f203 	lsl.w	r2, r0, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dc6:	e01b      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3b7d      	subs	r3, #125	@ 0x7d
 8005dda:	221f      	movs	r2, #31
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43db      	mvns	r3, r3
 8005de2:	4019      	ands	r1, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	3b7d      	subs	r3, #125	@ 0x7d
 8005df4:	fa00 f203 	lsl.w	r2, r0, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d81a      	bhi.n	8005e3e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6959      	ldr	r1, [r3, #20]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	2207      	movs	r2, #7
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	4019      	ands	r1, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6898      	ldr	r0, [r3, #8]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	fa00 f203 	lsl.w	r2, r0, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	615a      	str	r2, [r3, #20]
 8005e3c:	e042      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b13      	cmp	r3, #19
 8005e44:	d81c      	bhi.n	8005e80 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6919      	ldr	r1, [r3, #16]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	3b1e      	subs	r3, #30
 8005e58:	2207      	movs	r2, #7
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	4019      	ands	r1, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6898      	ldr	r0, [r3, #8]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	3b1e      	subs	r3, #30
 8005e72:	fa00 f203 	lsl.w	r2, r0, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	611a      	str	r2, [r3, #16]
 8005e7e:	e021      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b1a      	cmp	r3, #26
 8005e86:	d81c      	bhi.n	8005ec2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68d9      	ldr	r1, [r3, #12]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	3b3c      	subs	r3, #60	@ 0x3c
 8005e9a:	2207      	movs	r2, #7
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	4019      	ands	r1, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6898      	ldr	r0, [r3, #8]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4613      	mov	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3b3c      	subs	r3, #60	@ 0x3c
 8005eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e000      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005ec2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d003      	beq.n	8005ed4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ed0:	2b11      	cmp	r3, #17
 8005ed2:	d121      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005ed4:	4b15      	ldr	r3, [pc, #84]	@ (8005f2c <HAL_ADC_ConfigChannel+0x294>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11b      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005ee0:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <HAL_ADC_ConfigChannel+0x294>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <HAL_ADC_ConfigChannel+0x294>)
 8005ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005eea:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d111      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f30 <HAL_ADC_ConfigChannel+0x298>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f34 <HAL_ADC_ConfigChannel+0x29c>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0c9a      	lsrs	r2, r3, #18
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005f0a:	e002      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f9      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	40012700 	.word	0x40012700
 8005f30:	20000004 	.word	0x20000004
 8005f34:	431bde83 	.word	0x431bde83

08005f38 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f52:	2b40      	cmp	r3, #64	@ 0x40
 8005f54:	d043      	beq.n	8005fde <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005f66:	4b20      	ldr	r3, [pc, #128]	@ (8005fe8 <ADC_Enable+0xb0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a20      	ldr	r2, [pc, #128]	@ (8005fec <ADC_Enable+0xb4>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	0c9a      	lsrs	r2, r3, #18
 8005f72:	4613      	mov	r3, r2
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4413      	add	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005f7a:	e002      	b.n	8005f82 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f9      	bne.n	8005f7c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8005f88:	f7ff f9e4 	bl	8005354 <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005f8e:	e01f      	b.n	8005fd0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005f90:	f7ff f9e0 	bl	8005354 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d918      	bls.n	8005fd0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d011      	beq.n	8005fd0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fb0:	f043 0210 	orr.w	r2, r3, #16
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	f043 0201 	orr.w	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e007      	b.n	8005fe0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d1d8      	bne.n	8005f90 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000004 	.word	0x20000004
 8005fec:	431bde83 	.word	0x431bde83

08005ff0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d12e      	bne.n	8006068 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800601a:	f7ff f99b 	bl	8005354 <HAL_GetTick>
 800601e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006020:	e01b      	b.n	800605a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8006022:	f7ff f997 	bl	8005354 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d914      	bls.n	800605a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d10d      	bne.n	800605a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006042:	f043 0210 	orr.w	r2, r3, #16
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604e:	f043 0201 	orr.w	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e007      	b.n	800606a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006064:	2b40      	cmp	r3, #64	@ 0x40
 8006066:	d0dc      	beq.n	8006022 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <__NVIC_SetPriorityGrouping>:
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006094:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060a0:	4013      	ands	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060b6:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <__NVIC_SetPriorityGrouping+0x44>)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	60d3      	str	r3, [r2, #12]
}
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <__NVIC_GetPriorityGrouping>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d0:	4b04      	ldr	r3, [pc, #16]	@ (80060e4 <__NVIC_GetPriorityGrouping+0x18>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	0a1b      	lsrs	r3, r3, #8
 80060d6:	f003 0307 	and.w	r3, r3, #7
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <__NVIC_EnableIRQ>:
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	db0b      	blt.n	8006112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	f003 021f 	and.w	r2, r3, #31
 8006100:	4906      	ldr	r1, [pc, #24]	@ (800611c <__NVIC_EnableIRQ+0x34>)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2001      	movs	r0, #1
 800610a:	fa00 f202 	lsl.w	r2, r0, r2
 800610e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	e000e100 	.word	0xe000e100

08006120 <__NVIC_DisableIRQ>:
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800612a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	db12      	blt.n	8006158 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	f003 021f 	and.w	r2, r3, #31
 8006138:	490a      	ldr	r1, [pc, #40]	@ (8006164 <__NVIC_DisableIRQ+0x44>)
 800613a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	2001      	movs	r0, #1
 8006142:	fa00 f202 	lsl.w	r2, r0, r2
 8006146:	3320      	adds	r3, #32
 8006148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800614c:	f3bf 8f4f 	dsb	sy
}
 8006150:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006152:	f3bf 8f6f 	isb	sy
}
 8006156:	bf00      	nop
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	e000e100 	.word	0xe000e100

08006168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006178:	2b00      	cmp	r3, #0
 800617a:	db0a      	blt.n	8006192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	490c      	ldr	r1, [pc, #48]	@ (80061b4 <__NVIC_SetPriority+0x4c>)
 8006182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006186:	0112      	lsls	r2, r2, #4
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	440b      	add	r3, r1
 800618c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006190:	e00a      	b.n	80061a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4908      	ldr	r1, [pc, #32]	@ (80061b8 <__NVIC_SetPriority+0x50>)
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	3b04      	subs	r3, #4
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	440b      	add	r3, r1
 80061a6:	761a      	strb	r2, [r3, #24]
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	e000e100 	.word	0xe000e100
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	@ 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f1c3 0307 	rsb	r3, r3, #7
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	bf28      	it	cs
 80061da:	2304      	movcs	r3, #4
 80061dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	3304      	adds	r3, #4
 80061e2:	2b06      	cmp	r3, #6
 80061e4:	d902      	bls.n	80061ec <NVIC_EncodePriority+0x30>
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3b03      	subs	r3, #3
 80061ea:	e000      	b.n	80061ee <NVIC_EncodePriority+0x32>
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43da      	mvns	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	401a      	ands	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006204:	f04f 31ff 	mov.w	r1, #4294967295
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	43d9      	mvns	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006214:	4313      	orrs	r3, r2
         );
}
 8006216:	4618      	mov	r0, r3
 8006218:	3724      	adds	r7, #36	@ 0x24
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3b01      	subs	r3, #1
 800622c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006230:	d301      	bcc.n	8006236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006232:	2301      	movs	r3, #1
 8006234:	e00f      	b.n	8006256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006236:	4a0a      	ldr	r2, [pc, #40]	@ (8006260 <SysTick_Config+0x40>)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800623e:	210f      	movs	r1, #15
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	f7ff ff90 	bl	8006168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006248:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <SysTick_Config+0x40>)
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800624e:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <SysTick_Config+0x40>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010

08006264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ff09 	bl	8006084 <__NVIC_SetPriorityGrouping>
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800628c:	f7ff ff1e 	bl	80060cc <__NVIC_GetPriorityGrouping>
 8006290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff ff90 	bl	80061bc <NVIC_EncodePriority>
 800629c:	4602      	mov	r2, r0
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff5f 	bl	8006168 <__NVIC_SetPriority>
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	4603      	mov	r3, r0
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff ff11 	bl	80060e8 <__NVIC_EnableIRQ>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	4603      	mov	r3, r0
 80062d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80062d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff ff1f 	bl	8006120 <__NVIC_DisableIRQ>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff94 	bl	8006220 <SysTick_Config>
 80062f8:	4603      	mov	r3, r0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d005      	beq.n	8006326 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2204      	movs	r2, #4
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	e029      	b.n	800637a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 020e 	bic.w	r2, r2, #14
 8006334:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	f003 021c 	and.w	r2, r3, #28
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006352:	2101      	movs	r1, #1
 8006354:	fa01 f202 	lsl.w	r2, r1, r2
 8006358:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
    }
  }
  return status;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006392:	b2db      	uxtb	r3, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
	...

080063a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80063a8:	f7fe ffd4 	bl	8005354 <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80063ae:	e010      	b.n	80063d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d00c      	beq.n	80063d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <FLASH_WaitForLastOperation+0x2e>
 80063be:	f7fe ffc9 	bl	8005354 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d201      	bcs.n	80063d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e02f      	b.n	8006432 <FLASH_WaitForLastOperation+0x92>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80063d2:	4b1a      	ldr	r3, [pc, #104]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d0e8      	beq.n	80063b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80063de:	4b17      	ldr	r3, [pc, #92]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d102      	bne.n	80063f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80063ea:	4b14      	ldr	r3, [pc, #80]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 80063ec:	2202      	movs	r2, #2
 80063ee:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80063f0:	4b12      	ldr	r3, [pc, #72]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fc:	d014      	beq.n	8006428 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80063fe:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006406:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800640a:	d00d      	beq.n	8006428 <FLASH_WaitForLastOperation+0x88>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800640c:	4b0b      	ldr	r3, [pc, #44]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006418:	d006      	beq.n	8006428 <FLASH_WaitForLastOperation+0x88>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800641a:	4b08      	ldr	r3, [pc, #32]	@ (800643c <FLASH_WaitForLastOperation+0x9c>)
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8006422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006426:	d103      	bne.n	8006430 <FLASH_WaitForLastOperation+0x90>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006428:	f000 f80a 	bl	8006440 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <FLASH_WaitForLastOperation+0x92>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40023c00 	.word	0x40023c00

08006440 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <FLASH_SetErrorCode+0xa4>)
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006456:	d109      	bne.n	800646c <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006458:	4b23      	ldr	r3, [pc, #140]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 8006462:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800646c:	4b1d      	ldr	r3, [pc, #116]	@ (80064e4 <FLASH_SetErrorCode+0xa4>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006478:	d109      	bne.n	800648e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800647a:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	4a19      	ldr	r2, [pc, #100]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 8006484:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800648c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800648e:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <FLASH_SetErrorCode+0xa4>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649a:	d109      	bne.n	80064b0 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800649c:	4b12      	ldr	r3, [pc, #72]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f043 0304 	orr.w	r3, r3, #4
 80064a4:	4a10      	ldr	r2, [pc, #64]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 80064a6:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80064ae:	607b      	str	r3, [r7, #4]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <FLASH_SetErrorCode+0xa4>)
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064bc:	d109      	bne.n	80064d2 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f043 0308 	orr.w	r3, r3, #8
 80064c6:	4a08      	ldr	r2, [pc, #32]	@ (80064e8 <FLASH_SetErrorCode+0xa8>)
 80064c8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064d0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80064d2:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <FLASH_SetErrorCode+0xa4>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6193      	str	r3, [r2, #24]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40023c00 	.word	0x40023c00
 80064e8:	20000554 	.word	0x20000554

080064ec <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80064f0:	4b09      	ldr	r3, [pc, #36]	@ (8006518 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80064fe:	4a07      	ldr	r2, [pc, #28]	@ (800651c <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8006500:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8006502:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8006504:	4a06      	ldr	r2, [pc, #24]	@ (8006520 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 8006506:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
}
 800650e:	4618      	mov	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40023c00 	.word	0x40023c00
 800651c:	89abcdef 	.word	0x89abcdef
 8006520:	02030405 	.word	0x02030405

08006524 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a04      	ldr	r2, [pc, #16]	@ (8006540 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40023c00 	.word	0x40023c00

08006544 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006552:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006556:	f7ff ff23 	bl	80063a0 <FLASH_WaitForLastOperation>
 800655a:	4603      	mov	r3, r0
 800655c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11a      	bne.n	800659a <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006564:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8006566:	2200      	movs	r2, #0
 8006568:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d102      	bne.n	8006576 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d102      	bne.n	8006582 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800658e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006592:	f7ff ff05 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000554 	.word	0x20000554

080065a8 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80065b4:	4b31      	ldr	r3, [pc, #196]	@ (800667c <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 80065b6:	7c1b      	ldrb	r3, [r3, #16]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_FLASHEx_DATAEEPROM_Program+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e058      	b.n	8006672 <HAL_FLASHEx_DATAEEPROM_Program+0xca>
 80065c0:	4b2e      	ldr	r3, [pc, #184]	@ (800667c <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80065c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80065ca:	f7ff fee9 	bl	80063a0 <FLASH_WaitForLastOperation>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d148      	bne.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065d8:	4b28      	ldr	r3, [pc, #160]	@ (800667c <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 80065da:	2200      	movs	r2, #0
 80065dc:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d106      	bne.n	80065f2 <HAL_FLASHEx_DATAEEPROM_Program+0x4a>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f000 fa18 	bl	8006a1c <FLASH_DATAEEPROM_ProgramWord>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
 80065f0:	e03b      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d108      	bne.n	800660a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4619      	mov	r1, r3
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	f000 f99c 	bl	800693c <FLASH_DATAEEPROM_ProgramHalfWord>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]
 8006608:	e02f      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d108      	bne.n	8006622 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	4619      	mov	r1, r3
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	f000 f934 	bl	8006884 <FLASH_DATAEEPROM_ProgramByte>
 800661c:	4603      	mov	r3, r0
 800661e:	75fb      	strb	r3, [r7, #23]
 8006620:	e023      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d108      	bne.n	800663a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f000 f826 	bl	8006680 <FLASH_DATAEEPROM_FastProgramByte>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]
 8006638:	e017      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d108      	bne.n	8006652 <HAL_FLASHEx_DATAEEPROM_Program+0xaa>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	b29b      	uxth	r3, r3
 8006644:	4619      	mov	r1, r3
 8006646:	68b8      	ldr	r0, [r7, #8]
 8006648:	f000 f87e 	bl	8006748 <FLASH_DATAEEPROM_FastProgramHalfWord>
 800664c:	4603      	mov	r3, r0
 800664e:	75fb      	strb	r3, [r7, #23]
 8006650:	e00b      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b10      	cmp	r3, #16
 8006656:	d106      	bne.n	8006666 <HAL_FLASHEx_DATAEEPROM_Program+0xbe>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	68b8      	ldr	r0, [r7, #8]
 800665c:	f000 f8ec 	bl	8006838 <FLASH_DATAEEPROM_FastProgramWord>
 8006660:	4603      	mov	r3, r0
 8006662:	75fb      	strb	r3, [r7, #23]
 8006664:	e001      	b.n	800666a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    }
    else
    {
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800666a:	4b04      	ldr	r3, [pc, #16]	@ (800667c <HAL_FLASHEx_DATAEEPROM_Program+0xd4>)
 800666c:	2200      	movs	r2, #0
 800666e:	741a      	strb	r2, [r3, #16]

  return status;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000554 	.word	0x20000554

08006680 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006698:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800669c:	f7ff fe80 	bl	80063a0 <FLASH_WaitForLastOperation>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d145      	bne.n	8006736 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80066aa:	4b25      	ldr	r3, [pc, #148]	@ (8006740 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4a24      	ldr	r2, [pc, #144]	@ (8006740 <FLASH_DATAEEPROM_FastProgramByte+0xc0>)
 80066b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b4:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint8_t)0x00U)
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <FLASH_DATAEEPROM_FastProgramByte+0x50>
    {
      /* If the previous operation is completed, proceed to write the new Data */
      *(__IO uint8_t *)Address = Data;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80066c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80066c6:	f7ff fe6b 	bl	80063a0 <FLASH_WaitForLastOperation>
 80066ca:	4603      	mov	r3, r0
 80066cc:	75fb      	strb	r3, [r7, #23]
 80066ce:	e032      	b.n	8006736 <FLASH_DATAEEPROM_FastProgramByte+0xb6>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	22ff      	movs	r2, #255	@ 0xff
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	4619      	mov	r1, r3
 8006700:	2002      	movs	r0, #2
 8006702:	f7ff ff1f 	bl	8006544 <HAL_FLASHEx_DATAEEPROM_Erase>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800670a:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 800670c:	2200      	movs	r2, #0
 800670e:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4619      	mov	r1, r3
 800671a:	2010      	movs	r0, #16
 800671c:	f7ff ff44 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8006724:	4b07      	ldr	r3, [pc, #28]	@ (8006744 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8006726:	7c1b      	ldrb	r3, [r3, #16]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <FLASH_DATAEEPROM_FastProgramByte+0xb0>
 800672c:	2302      	movs	r3, #2
 800672e:	e003      	b.n	8006738 <FLASH_DATAEEPROM_FastProgramByte+0xb8>
 8006730:	4b04      	ldr	r3, [pc, #16]	@ (8006744 <FLASH_DATAEEPROM_FastProgramByte+0xc4>)
 8006732:	2201      	movs	r2, #1
 8006734:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40023c00 	.word	0x40023c00
 8006744:	20000554 	.word	0x20000554

08006748 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006760:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006764:	f7ff fe1c 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d158      	bne.n	8006824 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8006772:	4b2f      	ldr	r3, [pc, #188]	@ (8006830 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4a2e      	ldr	r2, [pc, #184]	@ (8006830 <FLASH_DATAEEPROM_FastProgramHalfWord+0xe8>)
 8006778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800677c:	6053      	str	r3, [r2, #4]

#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    /* Possible only on Cat1 devices */
    if(Data != (uint16_t)0x0000U)
 800677e:	887b      	ldrh	r3, [r7, #2]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d009      	beq.n	8006798 <FLASH_DATAEEPROM_FastProgramHalfWord+0x50>
    {
      /* If the previous operation is completed, proceed to write the new data */
      *(__IO uint16_t *)Address = Data;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800678a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800678e:	f7ff fe07 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]
 8006796:	e045      	b.n	8006824 <FLASH_DATAEEPROM_FastProgramHalfWord+0xdc>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8006798:	4b26      	ldr	r3, [pc, #152]	@ (8006834 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 800679a:	2200      	movs	r2, #0
 800679c:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d028      	beq.n	80067fa <FLASH_DATAEEPROM_FastProgramHalfWord+0xb2>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	43db      	mvns	r3, r3
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4013      	ands	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f023 0303 	bic.w	r3, r3, #3
 80067d8:	4619      	mov	r1, r3
 80067da:	2002      	movs	r0, #2
 80067dc:	f7ff feb2 	bl	8006544 <HAL_FLASHEx_DATAEEPROM_Erase>
 80067e0:	4603      	mov	r3, r0
 80067e2:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4619      	mov	r1, r3
 80067ee:	2010      	movs	r0, #16
 80067f0:	f7ff feda 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75fb      	strb	r3, [r7, #23]
 80067f8:	e00b      	b.n	8006812 <FLASH_DATAEEPROM_FastProgramHalfWord+0xca>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80067fa:	2200      	movs	r2, #0
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	2004      	movs	r0, #4
 8006800:	f7ff fed2 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	2200      	movs	r2, #0
 800680a:	4619      	mov	r1, r3
 800680c:	2004      	movs	r0, #4
 800680e:	f7ff fecb 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8006812:	4b08      	ldr	r3, [pc, #32]	@ (8006834 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8006814:	7c1b      	ldrb	r3, [r3, #16]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <FLASH_DATAEEPROM_FastProgramHalfWord+0xd6>
 800681a:	2302      	movs	r3, #2
 800681c:	e003      	b.n	8006826 <FLASH_DATAEEPROM_FastProgramHalfWord+0xde>
 800681e:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <FLASH_DATAEEPROM_FastProgramHalfWord+0xec>)
 8006820:	2201      	movs	r2, #1
 8006822:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023c00 	.word	0x40023c00
 8006834:	20000554 	.word	0x20000554

08006838 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006846:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800684a:	f7ff fda9 	bl	80063a0 <FLASH_WaitForLastOperation>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10e      	bne.n	8006876 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8006858:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a08      	ldr	r2, [pc, #32]	@ (8006880 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 800685e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006862:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800686a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800686e:	f7ff fd97 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40023c00 	.word	0x40023c00

08006884 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800689c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068a0:	f7ff fd7e 	bl	80063a0 <FLASH_WaitForLastOperation>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d13f      	bne.n	800692e <FLASH_DATAEEPROM_ProgramByte+0xaa>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <FLASH_DATAEEPROM_ProgramByte+0x44>
    {
      *(__IO uint8_t *)Address = Data;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	701a      	strb	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068ba:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80068be:	f7ff fd6f 	bl	80063a0 <FLASH_WaitForLastOperation>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]
 80068c6:	e032      	b.n	800692e <FLASH_DATAEEPROM_ProgramByte+0xaa>

    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	60fb      	str	r3, [r7, #12]
      tmp = * (__IO uint32_t *) tmpaddr;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	613b      	str	r3, [r7, #16]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	22ff      	movs	r2, #255	@ 0xff
 80068e0:	fa02 f303 	lsl.w	r3, r2, r3
 80068e4:	60fb      	str	r3, [r7, #12]
      tmp &= ~tmpaddr;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4013      	ands	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
      status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	4619      	mov	r1, r3
 80068f8:	2002      	movs	r0, #2
 80068fa:	f7ff fe23 	bl	8006544 <HAL_FLASHEx_DATAEEPROM_Erase>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 8006904:	2200      	movs	r2, #0
 8006906:	741a      	strb	r2, [r3, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4619      	mov	r1, r3
 8006912:	2010      	movs	r0, #16
 8006914:	f7ff fe48 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
 8006918:	4603      	mov	r3, r0
 800691a:	75fb      	strb	r3, [r7, #23]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800691e:	7c1b      	ldrb	r3, [r3, #16]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <FLASH_DATAEEPROM_ProgramByte+0xa4>
 8006924:	2302      	movs	r3, #2
 8006926:	e003      	b.n	8006930 <FLASH_DATAEEPROM_ProgramByte+0xac>
 8006928:	4b03      	ldr	r3, [pc, #12]	@ (8006938 <FLASH_DATAEEPROM_ProgramByte+0xb4>)
 800692a:	2201      	movs	r2, #1
 800692c:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 800692e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000554 	.word	0x20000554

0800693c <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	75fb      	strb	r3, [r7, #23]
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
  uint32_t tmp = 0U, tmpaddr = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006954:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006958:	f7ff fd22 	bl	80063a0 <FLASH_WaitForLastOperation>
 800695c:	4603      	mov	r3, r0
 800695e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d152      	bne.n	8006a0c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint16_t)0x0000U)
 8006966:	887b      	ldrh	r3, [r7, #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <FLASH_DATAEEPROM_ProgramHalfWord+0x44>
    {
      *(__IO uint16_t *)Address = Data;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006972:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006976:	f7ff fd13 	bl	80063a0 <FLASH_WaitForLastOperation>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]
 800697e:	e045      	b.n	8006a0c <FLASH_DATAEEPROM_ProgramHalfWord+0xd0>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8006980:	4b25      	ldr	r3, [pc, #148]	@ (8006a18 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8006982:	2200      	movs	r2, #0
 8006984:	741a      	strb	r2, [r3, #16]
      if((Address & 0x3U) != 0x3U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d028      	beq.n	80069e2 <FLASH_DATAEEPROM_ProgramHalfWord+0xa6>
      {
        tmpaddr = Address & 0xFFFFFFFCU;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	60fb      	str	r3, [r7, #12]
        tmp = * (__IO uint32_t *) tmpaddr;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	613b      	str	r3, [r7, #16]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	60fb      	str	r3, [r7, #12]
        tmp &= ~tmpaddr;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
        status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	4619      	mov	r1, r3
 80069c2:	2002      	movs	r0, #2
 80069c4:	f7ff fdbe 	bl	8006544 <HAL_FLASHEx_DATAEEPROM_Erase>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75fb      	strb	r3, [r7, #23]
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4619      	mov	r1, r3
 80069d6:	2010      	movs	r0, #16
 80069d8:	f7ff fde6 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
 80069dc:	4603      	mov	r3, r0
 80069de:	75fb      	strb	r3, [r7, #23]
 80069e0:	e00b      	b.n	80069fa <FLASH_DATAEEPROM_ProgramHalfWord+0xbe>
      }
      else
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80069e2:	2200      	movs	r2, #0
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	2004      	movs	r0, #4
 80069e8:	f7ff fdde 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3301      	adds	r3, #1
 80069f0:	2200      	movs	r2, #0
 80069f2:	4619      	mov	r1, r3
 80069f4:	2004      	movs	r0, #4
 80069f6:	f7ff fdd7 	bl	80065a8 <HAL_FLASHEx_DATAEEPROM_Program>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 80069fa:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 80069fc:	7c1b      	ldrb	r3, [r3, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <FLASH_DATAEEPROM_ProgramHalfWord+0xca>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e003      	b.n	8006a0e <FLASH_DATAEEPROM_ProgramHalfWord+0xd2>
 8006a06:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <FLASH_DATAEEPROM_ProgramHalfWord+0xdc>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	741a      	strb	r2, [r3, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000554 	.word	0x20000554

08006a1c <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006a2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a2e:	f7ff fcb7 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d108      	bne.n	8006a4e <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006a42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006a46:	f7ff fcab 	bl	80063a0 <FLASH_WaitForLastOperation>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006a6e:	e154      	b.n	8006d1a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	2101      	movs	r1, #1
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8146 	beq.w	8006d14 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d005      	beq.n	8006aa0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d130      	bne.n	8006b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	2203      	movs	r2, #3
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f003 0201 	and.w	r2, r3, #1
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	fa02 f303 	lsl.w	r3, r2, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d017      	beq.n	8006b3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	2203      	movs	r2, #3
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4013      	ands	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d123      	bne.n	8006b92 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	08da      	lsrs	r2, r3, #3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3208      	adds	r2, #8
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	220f      	movs	r2, #15
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	08da      	lsrs	r2, r3, #3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3208      	adds	r2, #8
 8006b8c:	6939      	ldr	r1, [r7, #16]
 8006b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0203 	and.w	r2, r3, #3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80a0 	beq.w	8006d14 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bd4:	4b58      	ldr	r3, [pc, #352]	@ (8006d38 <HAL_GPIO_Init+0x2e0>)
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	4a57      	ldr	r2, [pc, #348]	@ (8006d38 <HAL_GPIO_Init+0x2e0>)
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	6213      	str	r3, [r2, #32]
 8006be0:	4b55      	ldr	r3, [pc, #340]	@ (8006d38 <HAL_GPIO_Init+0x2e0>)
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006bec:	4a53      	ldr	r2, [pc, #332]	@ (8006d3c <HAL_GPIO_Init+0x2e4>)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	089b      	lsrs	r3, r3, #2
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	220f      	movs	r2, #15
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a4b      	ldr	r2, [pc, #300]	@ (8006d40 <HAL_GPIO_Init+0x2e8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d019      	beq.n	8006c4c <HAL_GPIO_Init+0x1f4>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006d44 <HAL_GPIO_Init+0x2ec>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <HAL_GPIO_Init+0x1f0>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a49      	ldr	r2, [pc, #292]	@ (8006d48 <HAL_GPIO_Init+0x2f0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00d      	beq.n	8006c44 <HAL_GPIO_Init+0x1ec>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a48      	ldr	r2, [pc, #288]	@ (8006d4c <HAL_GPIO_Init+0x2f4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <HAL_GPIO_Init+0x1e8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a47      	ldr	r2, [pc, #284]	@ (8006d50 <HAL_GPIO_Init+0x2f8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d101      	bne.n	8006c3c <HAL_GPIO_Init+0x1e4>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	e008      	b.n	8006c4e <HAL_GPIO_Init+0x1f6>
 8006c3c:	2305      	movs	r3, #5
 8006c3e:	e006      	b.n	8006c4e <HAL_GPIO_Init+0x1f6>
 8006c40:	2303      	movs	r3, #3
 8006c42:	e004      	b.n	8006c4e <HAL_GPIO_Init+0x1f6>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e002      	b.n	8006c4e <HAL_GPIO_Init+0x1f6>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <HAL_GPIO_Init+0x1f6>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	f002 0203 	and.w	r2, r2, #3
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	4093      	lsls	r3, r2
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c5e:	4937      	ldr	r1, [pc, #220]	@ (8006d3c <HAL_GPIO_Init+0x2e4>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	3302      	adds	r3, #2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c6c:	4b39      	ldr	r3, [pc, #228]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006c90:	4a30      	ldr	r2, [pc, #192]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c96:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006cba:	4a26      	ldr	r2, [pc, #152]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006cc0:	4b24      	ldr	r3, [pc, #144]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cea:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006d0e:	4a11      	ldr	r2, [pc, #68]	@ (8006d54 <HAL_GPIO_Init+0x2fc>)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3301      	adds	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f aea3 	bne.w	8006a70 <HAL_GPIO_Init+0x18>
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40020000 	.word	0x40020000
 8006d44:	40020400 	.word	0x40020400
 8006d48:	40020800 	.word	0x40020800
 8006d4c:	40020c00 	.word	0x40020c00
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40010400 	.word	0x40010400

08006d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8006d6e:	e0b8      	b.n	8006ee2 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8006d70:	2201      	movs	r2, #1
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80ab 	beq.w	8006edc <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8006d86:	4a5d      	ldr	r2, [pc, #372]	@ (8006efc <HAL_GPIO_DeInit+0x1a4>)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d92:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	220f      	movs	r2, #15
 8006d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a55      	ldr	r2, [pc, #340]	@ (8006f00 <HAL_GPIO_DeInit+0x1a8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d019      	beq.n	8006de4 <HAL_GPIO_DeInit+0x8c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a54      	ldr	r2, [pc, #336]	@ (8006f04 <HAL_GPIO_DeInit+0x1ac>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_GPIO_DeInit+0x88>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a53      	ldr	r2, [pc, #332]	@ (8006f08 <HAL_GPIO_DeInit+0x1b0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00d      	beq.n	8006ddc <HAL_GPIO_DeInit+0x84>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a52      	ldr	r2, [pc, #328]	@ (8006f0c <HAL_GPIO_DeInit+0x1b4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <HAL_GPIO_DeInit+0x80>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a51      	ldr	r2, [pc, #324]	@ (8006f10 <HAL_GPIO_DeInit+0x1b8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <HAL_GPIO_DeInit+0x7c>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	e008      	b.n	8006de6 <HAL_GPIO_DeInit+0x8e>
 8006dd4:	2305      	movs	r3, #5
 8006dd6:	e006      	b.n	8006de6 <HAL_GPIO_DeInit+0x8e>
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e004      	b.n	8006de6 <HAL_GPIO_DeInit+0x8e>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e002      	b.n	8006de6 <HAL_GPIO_DeInit+0x8e>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_GPIO_DeInit+0x8e>
 8006de4:	2300      	movs	r3, #0
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	f002 0203 	and.w	r2, r2, #3
 8006dec:	0092      	lsls	r2, r2, #2
 8006dee:	4093      	lsls	r3, r2
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d132      	bne.n	8006e5c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006df6:	4b47      	ldr	r3, [pc, #284]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	4945      	ldr	r1, [pc, #276]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006e04:	4b43      	ldr	r3, [pc, #268]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	4941      	ldr	r1, [pc, #260]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006e12:	4b40      	ldr	r3, [pc, #256]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	493e      	ldr	r1, [pc, #248]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006e20:	4b3c      	ldr	r3, [pc, #240]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	43db      	mvns	r3, r3
 8006e28:	493a      	ldr	r1, [pc, #232]	@ (8006f14 <HAL_GPIO_DeInit+0x1bc>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	220f      	movs	r2, #15
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8006e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006efc <HAL_GPIO_DeInit+0x1a4>)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	089b      	lsrs	r3, r3, #2
 8006e44:	3302      	adds	r3, #2
 8006e46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	43da      	mvns	r2, r3
 8006e4e:	482b      	ldr	r0, [pc, #172]	@ (8006efc <HAL_GPIO_DeInit+0x1a4>)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	089b      	lsrs	r3, r3, #2
 8006e54:	400a      	ands	r2, r1
 8006e56:	3302      	adds	r3, #2
 8006e58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	2103      	movs	r1, #3
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	401a      	ands	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	08da      	lsrs	r2, r3, #3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3208      	adds	r2, #8
 8006e7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	220f      	movs	r2, #15
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	08d2      	lsrs	r2, r2, #3
 8006e92:	4019      	ands	r1, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3208      	adds	r2, #8
 8006e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	2103      	movs	r1, #3
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	401a      	ands	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2103      	movs	r1, #3
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f47f af40 	bne.w	8006d70 <HAL_GPIO_DeInit+0x18>
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40020000 	.word	0x40020000
 8006f04:	40020400 	.word	0x40020400
 8006f08:	40020800 	.word	0x40020800
 8006f0c:	40020c00 	.word	0x40020c00
 8006f10:	40021000 	.word	0x40021000
 8006f14:	40010400 	.word	0x40010400

08006f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	807b      	strh	r3, [r7, #2]
 8006f24:	4613      	mov	r3, r2
 8006f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f28:	787b      	ldrb	r3, [r7, #1]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f2e:	887a      	ldrh	r2, [r7, #2]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006f34:	e003      	b.n	8006f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006f36:	887b      	ldrh	r3, [r7, #2]
 8006f38:	041a      	lsls	r2, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	619a      	str	r2, [r3, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f52:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f54:	695a      	ldr	r2, [r3, #20]
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f5e:	4a05      	ldr	r2, [pc, #20]	@ (8006f74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fc fa4e 	bl	8003408 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40010400 	.word	0x40010400

08006f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e12b      	b.n	80071e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fd fea8 	bl	8004cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	@ 0x24
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f003 fa9c 	bl	800a518 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	4a81      	ldr	r2, [pc, #516]	@ (80071ec <HAL_I2C_Init+0x274>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d807      	bhi.n	8006ffc <HAL_I2C_Init+0x84>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a80      	ldr	r2, [pc, #512]	@ (80071f0 <HAL_I2C_Init+0x278>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bf94      	ite	ls
 8006ff4:	2301      	movls	r3, #1
 8006ff6:	2300      	movhi	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e006      	b.n	800700a <HAL_I2C_Init+0x92>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80071f4 <HAL_I2C_Init+0x27c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	bf94      	ite	ls
 8007004:	2301      	movls	r3, #1
 8007006:	2300      	movhi	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0e7      	b.n	80071e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a78      	ldr	r2, [pc, #480]	@ (80071f8 <HAL_I2C_Init+0x280>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	0c9b      	lsrs	r3, r3, #18
 800701c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	4a6a      	ldr	r2, [pc, #424]	@ (80071ec <HAL_I2C_Init+0x274>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d802      	bhi.n	800704c <HAL_I2C_Init+0xd4>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	3301      	adds	r3, #1
 800704a:	e009      	b.n	8007060 <HAL_I2C_Init+0xe8>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	4a69      	ldr	r2, [pc, #420]	@ (80071fc <HAL_I2C_Init+0x284>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	099b      	lsrs	r3, r3, #6
 800705e:	3301      	adds	r3, #1
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	430b      	orrs	r3, r1
 8007066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	495c      	ldr	r1, [pc, #368]	@ (80071ec <HAL_I2C_Init+0x274>)
 800707c:	428b      	cmp	r3, r1
 800707e:	d819      	bhi.n	80070b4 <HAL_I2C_Init+0x13c>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1e59      	subs	r1, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	fbb1 f3f3 	udiv	r3, r1, r3
 800708e:	1c59      	adds	r1, r3, #1
 8007090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007094:	400b      	ands	r3, r1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_I2C_Init+0x138>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1e59      	subs	r1, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ae:	e051      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e04f      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d111      	bne.n	80070e0 <HAL_I2C_Init+0x168>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1e58      	subs	r0, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	440b      	add	r3, r1
 80070ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ce:	3301      	adds	r3, #1
 80070d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e012      	b.n	8007106 <HAL_I2C_Init+0x18e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1e58      	subs	r0, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	0099      	lsls	r1, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f6:	3301      	adds	r3, #1
 80070f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_I2C_Init+0x196>
 800710a:	2301      	movs	r3, #1
 800710c:	e022      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10e      	bne.n	8007134 <HAL_I2C_Init+0x1bc>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1e58      	subs	r0, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6859      	ldr	r1, [r3, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	440b      	add	r3, r1
 8007124:	fbb0 f3f3 	udiv	r3, r0, r3
 8007128:	3301      	adds	r3, #1
 800712a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007132:	e00f      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	1e58      	subs	r0, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	0099      	lsls	r1, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	fbb0 f3f3 	udiv	r3, r0, r3
 800714a:	3301      	adds	r3, #1
 800714c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	6809      	ldr	r1, [r1, #0]
 8007158:	4313      	orrs	r3, r2
 800715a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6911      	ldr	r1, [r2, #16]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68d2      	ldr	r2, [r2, #12]
 800718e:	4311      	orrs	r1, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	430b      	orrs	r3, r1
 8007196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	000186a0 	.word	0x000186a0
 80071f0:	001e847f 	.word	0x001e847f
 80071f4:	003d08ff 	.word	0x003d08ff
 80071f8:	431bde83 	.word	0x431bde83
 80071fc:	10624dd3 	.word	0x10624dd3

08007200 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007212:	2b80      	cmp	r3, #128	@ 0x80
 8007214:	d103      	bne.n	800721e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
  }
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	817b      	strh	r3, [r7, #10]
 800723a:	460b      	mov	r3, r1
 800723c:	813b      	strh	r3, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007242:	f7fe f887 	bl	8005354 <HAL_GetTick>
 8007246:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b20      	cmp	r3, #32
 8007252:	f040 80d9 	bne.w	8007408 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	2319      	movs	r3, #25
 800725c:	2201      	movs	r2, #1
 800725e:	496d      	ldr	r1, [pc, #436]	@ (8007414 <HAL_I2C_Mem_Write+0x1ec>)
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f002 f927 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
 800726e:	e0cc      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_I2C_Mem_Write+0x56>
 800727a:	2302      	movs	r3, #2
 800727c:	e0c5      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b01      	cmp	r3, #1
 8007292:	d007      	beq.n	80072a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2221      	movs	r2, #33	@ 0x21
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2240      	movs	r2, #64	@ 0x40
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a3a      	ldr	r2, [r7, #32]
 80072ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a4d      	ldr	r2, [pc, #308]	@ (8007418 <HAL_I2C_Mem_Write+0x1f0>)
 80072e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e6:	88f8      	ldrh	r0, [r7, #6]
 80072e8:	893a      	ldrh	r2, [r7, #8]
 80072ea:	8979      	ldrh	r1, [r7, #10]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4603      	mov	r3, r0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f001 feb6 	bl	8009068 <I2C_RequestMemoryWrite>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d052      	beq.n	80073a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e081      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f002 f9ec 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00d      	beq.n	8007332 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	2b04      	cmp	r3, #4
 800731c:	d107      	bne.n	800732e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800732c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e06b      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b04      	cmp	r3, #4
 800736e:	d11b      	bne.n	80073a8 <HAL_I2C_Mem_Write+0x180>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d017      	beq.n	80073a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1aa      	bne.n	8007306 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f002 f9df 	bl	8009778 <I2C_WaitOnBTFFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00d      	beq.n	80073dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d107      	bne.n	80073d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e016      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	00100002 	.word	0x00100002
 8007418:	ffff0000 	.word	0xffff0000

0800741c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08c      	sub	sp, #48	@ 0x30
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	461a      	mov	r2, r3
 800742a:	4603      	mov	r3, r0
 800742c:	817b      	strh	r3, [r7, #10]
 800742e:	460b      	mov	r3, r1
 8007430:	813b      	strh	r3, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007436:	f7fd ff8d 	bl	8005354 <HAL_GetTick>
 800743a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b20      	cmp	r3, #32
 8007446:	f040 8214 	bne.w	8007872 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	2319      	movs	r3, #25
 8007450:	2201      	movs	r2, #1
 8007452:	497b      	ldr	r1, [pc, #492]	@ (8007640 <HAL_I2C_Mem_Read+0x224>)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f002 f82d 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
 8007462:	e207      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_I2C_Mem_Read+0x56>
 800746e:	2302      	movs	r3, #2
 8007470:	e200      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d007      	beq.n	8007498 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0201 	orr.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2222      	movs	r2, #34	@ 0x22
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2240      	movs	r2, #64	@ 0x40
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80074c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007644 <HAL_I2C_Mem_Read+0x228>)
 80074d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074da:	88f8      	ldrh	r0, [r7, #6]
 80074dc:	893a      	ldrh	r2, [r7, #8]
 80074de:	8979      	ldrh	r1, [r7, #10]
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4603      	mov	r3, r0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 fe52 	bl	8009194 <I2C_RequestMemoryRead>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e1bc      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d113      	bne.n	800752a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007502:	2300      	movs	r3, #0
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	623b      	str	r3, [r7, #32]
 8007516:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	e190      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752e:	2b01      	cmp	r3, #1
 8007530:	d11b      	bne.n	800756a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	e170      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800756e:	2b02      	cmp	r3, #2
 8007570:	d11b      	bne.n	80075aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007580:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	e150      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075c0:	e144      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f200 80f1 	bhi.w	80077ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d123      	bne.n	800761c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f002 f947 	bl	800986c <I2C_WaitOnRXNEFlagUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e145      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800761a:	e117      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007620:	2b02      	cmp	r3, #2
 8007622:	d14e      	bne.n	80076c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	2200      	movs	r2, #0
 800762c:	4906      	ldr	r1, [pc, #24]	@ (8007648 <HAL_I2C_Mem_Read+0x22c>)
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f001 ff40 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d008      	beq.n	800764c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e11a      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
 800763e:	bf00      	nop
 8007640:	00100002 	.word	0x00100002
 8007644:	ffff0000 	.word	0xffff0000
 8007648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800765a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076c0:	e0c4      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	2200      	movs	r2, #0
 80076ca:	496c      	ldr	r1, [pc, #432]	@ (800787c <HAL_I2C_Mem_Read+0x460>)
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f001 fef1 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0cb      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	2200      	movs	r2, #0
 8007726:	4955      	ldr	r1, [pc, #340]	@ (800787c <HAL_I2C_Mem_Read+0x460>)
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f001 fec3 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e09d      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077ac:	e04e      	b.n	800784c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f002 f85a 	bl	800986c <I2C_WaitOnRXNEFlagUntilTimeout>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e058      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d124      	bne.n	800784c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007806:	2b03      	cmp	r3, #3
 8007808:	d107      	bne.n	800781a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007818:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007850:	2b00      	cmp	r3, #0
 8007852:	f47f aeb6 	bne.w	80075c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2220      	movs	r2, #32
 800785a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3728      	adds	r7, #40	@ 0x28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	00010004 	.word	0x00010004

08007880 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b10      	cmp	r3, #16
 80078ae:	d003      	beq.n	80078b8 <HAL_I2C_EV_IRQHandler+0x38>
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b40      	cmp	r3, #64	@ 0x40
 80078b4:	f040 80c1 	bne.w	8007a3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <HAL_I2C_EV_IRQHandler+0x6e>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80078d8:	d003      	beq.n	80078e2 <HAL_I2C_EV_IRQHandler+0x62>
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80078e0:	d101      	bne.n	80078e6 <HAL_I2C_EV_IRQHandler+0x66>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <HAL_I2C_EV_IRQHandler+0x68>
 80078e6:	2300      	movs	r3, #0
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	f000 8132 	beq.w	8007b52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <HAL_I2C_EV_IRQHandler+0x92>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	0a5b      	lsrs	r3, r3, #9
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 f83c 	bl	8009982 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fd91 	bl	8008432 <I2C_Master_SB>
 8007910:	e092      	b.n	8007a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	08db      	lsrs	r3, r3, #3
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <HAL_I2C_EV_IRQHandler+0xb2>
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	0a5b      	lsrs	r3, r3, #9
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fe06 	bl	800853c <I2C_Master_ADD10>
 8007930:	e082      	b.n	8007a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	085b      	lsrs	r3, r3, #1
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <HAL_I2C_EV_IRQHandler+0xd2>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	0a5b      	lsrs	r3, r3, #9
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fe1f 	bl	800858e <I2C_Master_ADDR>
 8007950:	e072      	b.n	8007a38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d03b      	beq.n	80079d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796c:	f000 80f3 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	09db      	lsrs	r3, r3, #7
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00f      	beq.n	800799c <HAL_I2C_EV_IRQHandler+0x11c>
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	0a9b      	lsrs	r3, r3, #10
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_I2C_EV_IRQHandler+0x11c>
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	089b      	lsrs	r3, r3, #2
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9e9 	bl	8007d6c <I2C_MasterTransmit_TXE>
 800799a:	e04d      	b.n	8007a38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	089b      	lsrs	r3, r3, #2
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80d6 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80cf 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b21      	cmp	r3, #33	@ 0x21
 80079bc:	d103      	bne.n	80079c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fa70 	bl	8007ea4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079c4:	e0c7      	b.n	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	f040 80c4 	bne.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fade 	bl	8007f90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079d4:	e0bf      	b.n	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e4:	f000 80b7 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	099b      	lsrs	r3, r3, #6
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00f      	beq.n	8007a14 <HAL_I2C_EV_IRQHandler+0x194>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	0a9b      	lsrs	r3, r3, #10
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <HAL_I2C_EV_IRQHandler+0x194>
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d103      	bne.n	8007a14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fb57 	bl	80080c0 <I2C_MasterReceive_RXNE>
 8007a12:	e011      	b.n	8007a38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 809a 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	0a5b      	lsrs	r3, r3, #9
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8093 	beq.w	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc0d 	bl	8008250 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a36:	e08e      	b.n	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007a38:	e08d      	b.n	8007b56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d004      	beq.n	8007a4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	e007      	b.n	8007a5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d012      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x20e>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00c      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 ffcd 	bl	8008a26 <I2C_Slave_ADDR>
 8007a8c:	e066      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <HAL_I2C_EV_IRQHandler+0x22e>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f808 	bl	8008abc <I2C_Slave_STOPF>
 8007aac:	e056      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b21      	cmp	r3, #33	@ 0x21
 8007ab2:	d002      	beq.n	8007aba <HAL_I2C_EV_IRQHandler+0x23a>
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b29      	cmp	r3, #41	@ 0x29
 8007ab8:	d125      	bne.n	8007b06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	09db      	lsrs	r3, r3, #7
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <HAL_I2C_EV_IRQHandler+0x266>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	0a9b      	lsrs	r3, r3, #10
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <HAL_I2C_EV_IRQHandler+0x266>
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	089b      	lsrs	r3, r3, #2
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fee5 	bl	80088ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ae4:	e039      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	089b      	lsrs	r3, r3, #2
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d033      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x2da>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	0a5b      	lsrs	r3, r3, #9
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02d      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 ff12 	bl	8008928 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b04:	e029      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	099b      	lsrs	r3, r3, #6
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00f      	beq.n	8007b32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	0a9b      	lsrs	r3, r3, #10
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	089b      	lsrs	r3, r3, #2
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d103      	bne.n	8007b32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 ff1c 	bl	8008968 <I2C_SlaveReceive_RXNE>
 8007b30:	e014      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	089b      	lsrs	r3, r3, #2
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	0a5b      	lsrs	r3, r3, #9
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 ff4a 	bl	80089e4 <I2C_SlaveReceive_BTF>
 8007b50:	e004      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08a      	sub	sp, #40	@ 0x28
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	0a1b      	lsrs	r3, r3, #8
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00e      	beq.n	8007bb0 <HAL_I2C_ER_IRQHandler+0x4e>
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007bae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	0a5b      	lsrs	r3, r3, #9
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_I2C_ER_IRQHandler+0x78>
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	f043 0302 	orr.w	r3, r3, #2
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007bd8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	0a9b      	lsrs	r3, r3, #10
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d03f      	beq.n	8007c66 <HAL_I2C_ER_IRQHandler+0x104>
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d039      	beq.n	8007c66 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007bf2:	7efb      	ldrb	r3, [r7, #27]
 8007bf4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c04:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007c0c:	7ebb      	ldrb	r3, [r7, #26]
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d112      	bne.n	8007c38 <HAL_I2C_ER_IRQHandler+0xd6>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10f      	bne.n	8007c38 <HAL_I2C_ER_IRQHandler+0xd6>
 8007c18:	7cfb      	ldrb	r3, [r7, #19]
 8007c1a:	2b21      	cmp	r3, #33	@ 0x21
 8007c1c:	d008      	beq.n	8007c30 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007c1e:	7cfb      	ldrb	r3, [r7, #19]
 8007c20:	2b29      	cmp	r3, #41	@ 0x29
 8007c22:	d005      	beq.n	8007c30 <HAL_I2C_ER_IRQHandler+0xce>
 8007c24:	7cfb      	ldrb	r3, [r7, #19]
 8007c26:	2b28      	cmp	r3, #40	@ 0x28
 8007c28:	d106      	bne.n	8007c38 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b21      	cmp	r3, #33	@ 0x21
 8007c2e:	d103      	bne.n	8007c38 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f873 	bl	8008d1c <I2C_Slave_AF>
 8007c36:	e016      	b.n	8007c66 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c40:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	f043 0304 	orr.w	r3, r3, #4
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007c4a:	7efb      	ldrb	r3, [r7, #27]
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	d002      	beq.n	8007c56 <HAL_I2C_ER_IRQHandler+0xf4>
 8007c50:	7efb      	ldrb	r3, [r7, #27]
 8007c52:	2b40      	cmp	r3, #64	@ 0x40
 8007c54:	d107      	bne.n	8007c66 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c64:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	0adb      	lsrs	r3, r3, #11
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00e      	beq.n	8007c90 <HAL_I2C_ER_IRQHandler+0x12e>
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	0a1b      	lsrs	r3, r3, #8
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d008      	beq.n	8007c90 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	f043 0308 	orr.w	r3, r3, #8
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007c8e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f8ae 	bl	8008e04 <I2C_ITError>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	3728      	adds	r7, #40	@ 0x28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
 8007d04:	4613      	mov	r3, r2
 8007d06:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr

08007d5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d150      	bne.n	8007e34 <I2C_MasterTransmit_TXE+0xc8>
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	2b21      	cmp	r3, #33	@ 0x21
 8007d96:	d14d      	bne.n	8007e34 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d01d      	beq.n	8007dda <I2C_MasterTransmit_TXE+0x6e>
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b20      	cmp	r3, #32
 8007da2:	d01a      	beq.n	8007dda <I2C_MasterTransmit_TXE+0x6e>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007daa:	d016      	beq.n	8007dda <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007dba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2211      	movs	r2, #17
 8007dc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff ff6c 	bl	8007cb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007dd8:	e060      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007de8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007df8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b40      	cmp	r3, #64	@ 0x40
 8007e12:	d107      	bne.n	8007e24 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff81 	bl	8007d24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e22:	e03b      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff3f 	bl	8007cb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e32:	e033      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	2b21      	cmp	r3, #33	@ 0x21
 8007e38:	d005      	beq.n	8007e46 <I2C_MasterTransmit_TXE+0xda>
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b40      	cmp	r3, #64	@ 0x40
 8007e3e:	d12d      	bne.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b22      	cmp	r3, #34	@ 0x22
 8007e44:	d12a      	bne.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d108      	bne.n	8007e62 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e60:	e01c      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b40      	cmp	r3, #64	@ 0x40
 8007e6c:	d103      	bne.n	8007e76 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f88e 	bl	8007f90 <I2C_MemoryTransmit_TXE_BTF>
}
 8007e74:	e012      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7a:	781a      	ldrb	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007e9a:	e7ff      	b.n	8007e9c <I2C_MasterTransmit_TXE+0x130>
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b21      	cmp	r3, #33	@ 0x21
 8007ebc:	d164      	bne.n	8007f88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d012      	beq.n	8007eee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007eec:	e04c      	b.n	8007f88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d01d      	beq.n	8007f30 <I2C_MasterTransmit_BTF+0x8c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d01a      	beq.n	8007f30 <I2C_MasterTransmit_BTF+0x8c>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f00:	d016      	beq.n	8007f30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2211      	movs	r2, #17
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fec1 	bl	8007cb0 <HAL_I2C_MasterTxCpltCallback>
}
 8007f2e:	e02b      	b.n	8007f88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b40      	cmp	r3, #64	@ 0x40
 8007f68:	d107      	bne.n	8007f7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fed6 	bl	8007d24 <HAL_I2C_MemTxCpltCallback>
}
 8007f78:	e006      	b.n	8007f88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fe94 	bl	8007cb0 <HAL_I2C_MasterTxCpltCallback>
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d11d      	bne.n	8007fe4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d10b      	bne.n	8007fc8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007fc6:	e077      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	121b      	asrs	r3, r3, #8
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fe2:	e069      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d10b      	bne.n	8008004 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008002:	e059      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008008:	2b02      	cmp	r3, #2
 800800a:	d152      	bne.n	80080b2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	2b22      	cmp	r3, #34	@ 0x22
 8008010:	d10d      	bne.n	800802e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008020:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800802c:	e044      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d015      	beq.n	8008064 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b21      	cmp	r3, #33	@ 0x21
 800803c:	d112      	bne.n	8008064 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008062:	e029      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d124      	bne.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	2b21      	cmp	r3, #33	@ 0x21
 8008072:	d121      	bne.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008082:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008092:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fe3a 	bl	8007d24 <HAL_I2C_MemTxCpltCallback>
}
 80080b0:	e002      	b.n	80080b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff f8a4 	bl	8007200 <I2C_Flush_DR>
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b22      	cmp	r3, #34	@ 0x22
 80080d2:	f040 80b9 	bne.w	8008248 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d921      	bls.n	800812e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	f040 8096 	bne.w	8008248 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800812a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800812c:	e08c      	b.n	8008248 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008132:	2b02      	cmp	r3, #2
 8008134:	d07f      	beq.n	8008236 <I2C_MasterReceive_RXNE+0x176>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d002      	beq.n	8008142 <I2C_MasterReceive_RXNE+0x82>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d179      	bne.n	8008236 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fb60 	bl	8009808 <I2C_WaitOnSTOPRequestThroughIT>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d14c      	bne.n	80081e8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800815c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800816c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b40      	cmp	r3, #64	@ 0x40
 80081a6:	d10a      	bne.n	80081be <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fdbd 	bl	8007d36 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80081bc:	e044      	b.n	8008248 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d002      	beq.n	80081d2 <I2C_MasterReceive_RXNE+0x112>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d103      	bne.n	80081da <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80081d8:	e002      	b.n	80081e0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2212      	movs	r2, #18
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fd6e 	bl	8007cc2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80081e6:	e02f      	b.n	8008248 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fd8a 	bl	8007d48 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008234:	e008      	b.n	8008248 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008244:	605a      	str	r2, [r3, #4]
}
 8008246:	e7ff      	b.n	8008248 <I2C_MasterReceive_RXNE+0x188>
 8008248:	bf00      	nop
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b04      	cmp	r3, #4
 8008266:	d11b      	bne.n	80082a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008276:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800829e:	e0c4      	b.n	800842a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d129      	bne.n	80082fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d00a      	beq.n	80082d6 <I2C_MasterReceive_BTF+0x86>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d007      	beq.n	80082d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80082fc:	e095      	b.n	800842a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008302:	b29b      	uxth	r3, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d17d      	bne.n	8008404 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d002      	beq.n	8008314 <I2C_MasterReceive_BTF+0xc4>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b10      	cmp	r3, #16
 8008312:	d108      	bne.n	8008326 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e016      	b.n	8008354 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b04      	cmp	r3, #4
 800832a:	d002      	beq.n	8008332 <I2C_MasterReceive_BTF+0xe2>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d108      	bne.n	8008344 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e007      	b.n	8008354 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008352:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80083ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b40      	cmp	r3, #64	@ 0x40
 80083c2:	d10a      	bne.n	80083da <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff fcaf 	bl	8007d36 <HAL_I2C_MemRxCpltCallback>
}
 80083d8:	e027      	b.n	800842a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d002      	beq.n	80083ee <I2C_MasterReceive_BTF+0x19e>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d103      	bne.n	80083f6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80083f4:	e002      	b.n	80083fc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2212      	movs	r2, #18
 80083fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff fc60 	bl	8007cc2 <HAL_I2C_MasterRxCpltCallback>
}
 8008402:	e012      	b.n	800842a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691a      	ldr	r2, [r3, #16]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008432:	b480      	push	{r7}
 8008434:	b083      	sub	sp, #12
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b40      	cmp	r3, #64	@ 0x40
 8008444:	d117      	bne.n	8008476 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	b2db      	uxtb	r3, r3
 8008454:	461a      	mov	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800845e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008460:	e067      	b.n	8008532 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	b2da      	uxtb	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	611a      	str	r2, [r3, #16]
}
 8008474:	e05d      	b.n	8008532 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800847e:	d133      	bne.n	80084e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b21      	cmp	r3, #33	@ 0x21
 800848a:	d109      	bne.n	80084a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008490:	b2db      	uxtb	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800849c:	611a      	str	r2, [r3, #16]
 800849e:	e008      	b.n	80084b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <I2C_Master_SB+0x92>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d108      	bne.n	80084d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d032      	beq.n	8008532 <I2C_Master_SB+0x100>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d02d      	beq.n	8008532 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084e4:	605a      	str	r2, [r3, #4]
}
 80084e6:	e024      	b.n	8008532 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10e      	bne.n	800850e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	11db      	asrs	r3, r3, #7
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0306 	and.w	r3, r3, #6
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f063 030f 	orn	r3, r3, #15
 8008504:	b2da      	uxtb	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	611a      	str	r2, [r3, #16]
}
 800850c:	e011      	b.n	8008532 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008512:	2b01      	cmp	r3, #1
 8008514:	d10d      	bne.n	8008532 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851a:	b29b      	uxth	r3, r3
 800851c:	11db      	asrs	r3, r3, #7
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0306 	and.w	r3, r3, #6
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f063 030e 	orn	r3, r3, #14
 800852a:	b2da      	uxtb	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008548:	b2da      	uxtb	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <I2C_Master_ADD10+0x26>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	2b00      	cmp	r3, #0
 8008560:	d108      	bne.n	8008574 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00c      	beq.n	8008584 <I2C_Master_ADD10+0x48>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008582:	605a      	str	r2, [r3, #4]
  }
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr

0800858e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800858e:	b480      	push	{r7}
 8008590:	b091      	sub	sp, #68	@ 0x44
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800859c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b22      	cmp	r3, #34	@ 0x22
 80085b6:	f040 8169 	bne.w	800888c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10f      	bne.n	80085e2 <I2C_Master_ADDR+0x54>
 80085c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80085c6:	2b40      	cmp	r3, #64	@ 0x40
 80085c8:	d10b      	bne.n	80085e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ca:	2300      	movs	r3, #0
 80085cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	e160      	b.n	80088a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d11d      	bne.n	8008626 <I2C_Master_ADDR+0x98>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085f2:	d118      	bne.n	8008626 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085f4:	2300      	movs	r3, #0
 80085f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008618:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	651a      	str	r2, [r3, #80]	@ 0x50
 8008624:	e13e      	b.n	80088a4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008630:	2300      	movs	r3, #0
 8008632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	e115      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	f040 808a 	bne.w	8008778 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800866a:	d137      	bne.n	80086dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800868a:	d113      	bne.n	80086b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800869a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800869c:	2300      	movs	r3, #0
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	e0e7      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b4:	2300      	movs	r3, #0
 80086b6:	623b      	str	r3, [r7, #32]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	623b      	str	r3, [r7, #32]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	623b      	str	r3, [r7, #32]
 80086c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e0d3      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d02e      	beq.n	8008740 <I2C_Master_ADDR+0x1b2>
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	d02b      	beq.n	8008740 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80086e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ea:	2b12      	cmp	r3, #18
 80086ec:	d102      	bne.n	80086f4 <I2C_Master_ADDR+0x166>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d125      	bne.n	8008740 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d00e      	beq.n	8008718 <I2C_Master_ADDR+0x18a>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d00b      	beq.n	8008718 <I2C_Master_ADDR+0x18a>
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	2b10      	cmp	r3, #16
 8008704:	d008      	beq.n	8008718 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e007      	b.n	8008728 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008726:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008728:	2300      	movs	r3, #0
 800872a:	61fb      	str	r3, [r7, #28]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	e0a1      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800874e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008750:	2300      	movs	r3, #0
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	61bb      	str	r3, [r7, #24]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	61bb      	str	r3, [r7, #24]
 8008764:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e085      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d14d      	bne.n	800881e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	2b04      	cmp	r3, #4
 8008786:	d016      	beq.n	80087b6 <I2C_Master_ADDR+0x228>
 8008788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878a:	2b02      	cmp	r3, #2
 800878c:	d013      	beq.n	80087b6 <I2C_Master_ADDR+0x228>
 800878e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008790:	2b10      	cmp	r3, #16
 8008792:	d010      	beq.n	80087b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e007      	b.n	80087c6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d4:	d117      	bne.n	8008806 <I2C_Master_ADDR+0x278>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087dc:	d00b      	beq.n	80087f6 <I2C_Master_ADDR+0x268>
 80087de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d008      	beq.n	80087f6 <I2C_Master_ADDR+0x268>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d005      	beq.n	80087f6 <I2C_Master_ADDR+0x268>
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	2b10      	cmp	r3, #16
 80087ee:	d002      	beq.n	80087f6 <I2C_Master_ADDR+0x268>
 80087f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d107      	bne.n	8008806 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008804:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	e032      	b.n	8008884 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800882c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800883c:	d117      	bne.n	800886e <I2C_Master_ADDR+0x2e0>
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008844:	d00b      	beq.n	800885e <I2C_Master_ADDR+0x2d0>
 8008846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008848:	2b01      	cmp	r3, #1
 800884a:	d008      	beq.n	800885e <I2C_Master_ADDR+0x2d0>
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	2b08      	cmp	r3, #8
 8008850:	d005      	beq.n	800885e <I2C_Master_ADDR+0x2d0>
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	2b10      	cmp	r3, #16
 8008856:	d002      	beq.n	800885e <I2C_Master_ADDR+0x2d0>
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	2b20      	cmp	r3, #32
 800885c:	d107      	bne.n	800886e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800886c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800888a:	e00b      	b.n	80088a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
}
 80088a2:	e7ff      	b.n	80088a4 <I2C_Master_ADDR+0x316>
 80088a4:	bf00      	nop
 80088a6:	3744      	adds	r7, #68	@ 0x44
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr

080088ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d02b      	beq.n	8008920 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d114      	bne.n	8008920 <I2C_SlaveTransmit_TXE+0x72>
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2b29      	cmp	r3, #41	@ 0x29
 80088fa:	d111      	bne.n	8008920 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800890a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2221      	movs	r2, #33	@ 0x21
 8008910:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2228      	movs	r2, #40	@ 0x28
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7ff f9da 	bl	8007cd4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008920:	bf00      	nop
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d011      	beq.n	800895e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr

08008968 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008976:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02c      	beq.n	80089dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898c:	b2d2      	uxtb	r2, r2
 800898e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d114      	bne.n	80089dc <I2C_SlaveReceive_RXNE+0x74>
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b6:	d111      	bne.n	80089dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2222      	movs	r2, #34	@ 0x22
 80089cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2228      	movs	r2, #40	@ 0x28
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7ff f985 	bl	8007ce6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80089dc:	bf00      	nop
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d012      	beq.n	8008a1c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	3b01      	subs	r3, #1
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008a40:	2b28      	cmp	r3, #40	@ 0x28
 8008a42:	d127      	bne.n	8008a94 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a52:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	09db      	lsrs	r3, r3, #7
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	81bb      	strh	r3, [r7, #12]
 8008a76:	e002      	b.n	8008a7e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008a86:	89ba      	ldrh	r2, [r7, #12]
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff f933 	bl	8007cf8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a92:	e00e      	b.n	8008ab2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a94:	2300      	movs	r3, #0
 8008a96:	60bb      	str	r3, [r7, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	60bb      	str	r3, [r7, #8]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ada:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008adc:	2300      	movs	r3, #0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	60bb      	str	r3, [r7, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0201 	orr.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b18:	d172      	bne.n	8008c00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b22      	cmp	r3, #34	@ 0x22
 8008b1e:	d002      	beq.n	8008b26 <I2C_Slave_STOPF+0x6a>
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b24:	d135      	bne.n	8008b92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	f043 0204 	orr.w	r2, r3, #4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fd fc10 	bl	8006384 <HAL_DMA_GetState>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d049      	beq.n	8008bfe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6e:	4a69      	ldr	r2, [pc, #420]	@ (8008d14 <I2C_Slave_STOPF+0x258>)
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fd fbc3 	bl	8006302 <HAL_DMA_Abort_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d03d      	beq.n	8008bfe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b90:	e035      	b.n	8008bfe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bae:	f043 0204 	orr.w	r2, r3, #4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fd fbda 	bl	8006384 <HAL_DMA_GetState>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d014      	beq.n	8008c00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bda:	4a4e      	ldr	r2, [pc, #312]	@ (8008d14 <I2C_Slave_STOPF+0x258>)
 8008bdc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fd fb8d 	bl	8006302 <HAL_DMA_Abort_IT>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	e000      	b.n	8008c00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bfe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d03e      	beq.n	8008c88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d112      	bne.n	8008c3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c48:	2b40      	cmp	r3, #64	@ 0x40
 8008c4a:	d112      	bne.n	8008c72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	b2d2      	uxtb	r2, r2
 8008c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c80:	f043 0204 	orr.w	r2, r3, #4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f8b7 	bl	8008e04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008c96:	e039      	b.n	8008d0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
 8008c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c9c:	d109      	bne.n	8008cb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2228      	movs	r2, #40	@ 0x28
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff f81a 	bl	8007ce6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b28      	cmp	r3, #40	@ 0x28
 8008cbc:	d111      	bne.n	8008ce2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a15      	ldr	r2, [pc, #84]	@ (8008d18 <I2C_Slave_STOPF+0x25c>)
 8008cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff f819 	bl	8007d12 <HAL_I2C_ListenCpltCallback>
}
 8008ce0:	e014      	b.n	8008d0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce6:	2b22      	cmp	r3, #34	@ 0x22
 8008ce8:	d002      	beq.n	8008cf0 <I2C_Slave_STOPF+0x234>
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	2b22      	cmp	r3, #34	@ 0x22
 8008cee:	d10d      	bne.n	8008d0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7fe ffed 	bl	8007ce6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008d0c:	bf00      	nop
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	08009365 	.word	0x08009365
 8008d18:	ffff0000 	.word	0xffff0000

08008d1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d002      	beq.n	8008d3e <I2C_Slave_AF+0x22>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d129      	bne.n	8008d92 <I2C_Slave_AF+0x76>
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	2b28      	cmp	r3, #40	@ 0x28
 8008d42:	d126      	bne.n	8008d92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a2e      	ldr	r2, [pc, #184]	@ (8008e00 <I2C_Slave_AF+0xe4>)
 8008d48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fe ffc1 	bl	8007d12 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008d90:	e031      	b.n	8008df6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b21      	cmp	r3, #33	@ 0x21
 8008d96:	d129      	bne.n	8008dec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a19      	ldr	r2, [pc, #100]	@ (8008e00 <I2C_Slave_AF+0xe4>)
 8008d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2221      	movs	r2, #33	@ 0x21
 8008da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008dc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008dcc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ddc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7fe fa0e 	bl	8007200 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fe ff75 	bl	8007cd4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008dea:	e004      	b.n	8008df6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008df4:	615a      	str	r2, [r3, #20]
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	ffff0000 	.word	0xffff0000

08008e04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b10      	cmp	r3, #16
 8008e20:	d002      	beq.n	8008e28 <I2C_ITError+0x24>
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b40      	cmp	r3, #64	@ 0x40
 8008e26:	d10a      	bne.n	8008e3e <I2C_ITError+0x3a>
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	2b22      	cmp	r3, #34	@ 0x22
 8008e2c:	d107      	bne.n	8008e3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e44:	2b28      	cmp	r3, #40	@ 0x28
 8008e46:	d107      	bne.n	8008e58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2228      	movs	r2, #40	@ 0x28
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008e56:	e015      	b.n	8008e84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e66:	d00a      	beq.n	8008e7e <I2C_ITError+0x7a>
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b60      	cmp	r3, #96	@ 0x60
 8008e6c:	d007      	beq.n	8008e7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e92:	d162      	bne.n	8008f5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ea2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ea8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d020      	beq.n	8008ef4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8009060 <I2C_ITError+0x25c>)
 8008eb8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fd fa1f 	bl	8006302 <HAL_DMA_Abort_IT>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8089 	beq.w	8008fde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0201 	bic.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4798      	blx	r3
 8008ef2:	e074      	b.n	8008fde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef8:	4a59      	ldr	r2, [pc, #356]	@ (8009060 <I2C_ITError+0x25c>)
 8008efa:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fd f9fe 	bl	8006302 <HAL_DMA_Abort_IT>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d068      	beq.n	8008fde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f16:	2b40      	cmp	r3, #64	@ 0x40
 8008f18:	d10b      	bne.n	8008f32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f24:	b2d2      	uxtb	r2, r2
 8008f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0201 	bic.w	r2, r2, #1
 8008f40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	e041      	b.n	8008fde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b60      	cmp	r3, #96	@ 0x60
 8008f64:	d125      	bne.n	8008fb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7e:	2b40      	cmp	r3, #64	@ 0x40
 8008f80:	d10b      	bne.n	8008f9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0201 	bic.w	r2, r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fe fed5 	bl	8007d5a <HAL_I2C_AbortCpltCallback>
 8008fb0:	e015      	b.n	8008fde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d10b      	bne.n	8008fd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691a      	ldr	r2, [r3, #16]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7fe feb5 	bl	8007d48 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10e      	bne.n	800900c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009022:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b04      	cmp	r3, #4
 800902e:	d113      	bne.n	8009058 <I2C_ITError+0x254>
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b28      	cmp	r3, #40	@ 0x28
 8009034:	d110      	bne.n	8009058 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a0a      	ldr	r2, [pc, #40]	@ (8009064 <I2C_ITError+0x260>)
 800903a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fe fe5d 	bl	8007d12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	08009365 	.word	0x08009365
 8009064:	ffff0000 	.word	0xffff0000

08009068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	4608      	mov	r0, r1
 8009072:	4611      	mov	r1, r2
 8009074:	461a      	mov	r2, r3
 8009076:	4603      	mov	r3, r0
 8009078:	817b      	strh	r3, [r7, #10]
 800907a:	460b      	mov	r3, r1
 800907c:	813b      	strh	r3, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	2200      	movs	r2, #0
 800909a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 fa08 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00d      	beq.n	80090c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090b8:	d103      	bne.n	80090c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e05f      	b.n	8009186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090c6:	897b      	ldrh	r3, [r7, #10]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80090d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	492d      	ldr	r1, [pc, #180]	@ (8009190 <I2C_RequestMemoryWrite+0x128>)
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fa63 	bl	80095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e04c      	b.n	8009186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009104:	6a39      	ldr	r1, [r7, #32]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 faee 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00d      	beq.n	800912e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	2b04      	cmp	r3, #4
 8009118:	d107      	bne.n	800912a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e02b      	b.n	8009186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d105      	bne.n	8009140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009134:	893b      	ldrh	r3, [r7, #8]
 8009136:	b2da      	uxtb	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	611a      	str	r2, [r3, #16]
 800913e:	e021      	b.n	8009184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009140:	893b      	ldrh	r3, [r7, #8]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	b29b      	uxth	r3, r3
 8009146:	b2da      	uxtb	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800914e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009150:	6a39      	ldr	r1, [r7, #32]
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fac8 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00d      	beq.n	800917a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	2b04      	cmp	r3, #4
 8009164:	d107      	bne.n	8009176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e005      	b.n	8009186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800917a:	893b      	ldrh	r3, [r7, #8]
 800917c:	b2da      	uxtb	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	00010002 	.word	0x00010002

08009194 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af02      	add	r7, sp, #8
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	461a      	mov	r2, r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	817b      	strh	r3, [r7, #10]
 80091a6:	460b      	mov	r3, r1
 80091a8:	813b      	strh	r3, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80091bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 f96a 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f4:	d103      	bne.n	80091fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e0aa      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009202:	897b      	ldrh	r3, [r7, #10]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009214:	6a3a      	ldr	r2, [r7, #32]
 8009216:	4952      	ldr	r1, [pc, #328]	@ (8009360 <I2C_RequestMemoryRead+0x1cc>)
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f9c5 	bl	80095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e097      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800923e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009240:	6a39      	ldr	r1, [r7, #32]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 fa50 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009252:	2b04      	cmp	r3, #4
 8009254:	d107      	bne.n	8009266 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e076      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d105      	bne.n	800927c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009270:	893b      	ldrh	r3, [r7, #8]
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	611a      	str	r2, [r3, #16]
 800927a:	e021      	b.n	80092c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800927c:	893b      	ldrh	r3, [r7, #8]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b29b      	uxth	r3, r3
 8009282:	b2da      	uxtb	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800928a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928c:	6a39      	ldr	r1, [r7, #32]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fa2a 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d107      	bne.n	80092b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e050      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092b6:	893b      	ldrh	r3, [r7, #8]
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c2:	6a39      	ldr	r1, [r7, #32]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fa0f 	bl	80096e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00d      	beq.n	80092ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d107      	bne.n	80092e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e035      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2200      	movs	r2, #0
 8009304:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f8d3 	bl	80094b4 <I2C_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00d      	beq.n	8009330 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800931e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009322:	d103      	bne.n	800932c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800932a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e013      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009330:	897b      	ldrh	r3, [r7, #10]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	6a3a      	ldr	r2, [r7, #32]
 8009344:	4906      	ldr	r1, [pc, #24]	@ (8009360 <I2C_RequestMemoryRead+0x1cc>)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f92e 	bl	80095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	00010002 	.word	0x00010002

08009364 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009374:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800937c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800937e:	4b4b      	ldr	r3, [pc, #300]	@ (80094ac <I2C_DMAAbort+0x148>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	4a4a      	ldr	r2, [pc, #296]	@ (80094b0 <I2C_DMAAbort+0x14c>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	0a1a      	lsrs	r2, r3, #8
 800938c:	4613      	mov	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	00da      	lsls	r2, r3, #3
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80093aa:	e00a      	b.n	80093c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c0:	d0ea      	beq.n	8009398 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ce:	2200      	movs	r2, #0
 80093d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093de:	2200      	movs	r2, #0
 80093e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2200      	movs	r2, #0
 80093f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009404:	2200      	movs	r2, #0
 8009406:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009414:	2200      	movs	r2, #0
 8009416:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0201 	bic.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b60      	cmp	r3, #96	@ 0x60
 8009432:	d10e      	bne.n	8009452 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2200      	movs	r2, #0
 8009448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800944a:	6978      	ldr	r0, [r7, #20]
 800944c:	f7fe fc85 	bl	8007d5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009450:	e027      	b.n	80094a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009452:	7cfb      	ldrb	r3, [r7, #19]
 8009454:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009458:	2b28      	cmp	r3, #40	@ 0x28
 800945a:	d117      	bne.n	800948c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0201 	orr.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800947a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2228      	movs	r2, #40	@ 0x28
 8009486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800948a:	e007      	b.n	800949c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f7fe fc53 	bl	8007d48 <HAL_I2C_ErrorCallback>
}
 80094a2:	bf00      	nop
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000004 	.word	0x20000004
 80094b0:	14f8b589 	.word	0x14f8b589

080094b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	4613      	mov	r3, r2
 80094c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094c4:	e048      	b.n	8009558 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094cc:	d044      	beq.n	8009558 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ce:	f7fb ff41 	bl	8005354 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d302      	bcc.n	80094e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d139      	bne.n	8009558 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10d      	bne.n	800950a <I2C_WaitOnFlagUntilTimeout+0x56>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	43da      	mvns	r2, r3
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4013      	ands	r3, r2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	461a      	mov	r2, r3
 8009508:	e00c      	b.n	8009524 <I2C_WaitOnFlagUntilTimeout+0x70>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	43da      	mvns	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4013      	ands	r3, r2
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	bf0c      	ite	eq
 800951c:	2301      	moveq	r3, #1
 800951e:	2300      	movne	r3, #0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	461a      	mov	r2, r3
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	429a      	cmp	r2, r3
 8009528:	d116      	bne.n	8009558 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009544:	f043 0220 	orr.w	r2, r3, #32
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e023      	b.n	80095a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b01      	cmp	r3, #1
 8009560:	d10d      	bne.n	800957e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	43da      	mvns	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4013      	ands	r3, r2
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	e00c      	b.n	8009598 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	43da      	mvns	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4013      	ands	r3, r2
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	bf0c      	ite	eq
 8009590:	2301      	moveq	r3, #1
 8009592:	2300      	movne	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	429a      	cmp	r2, r3
 800959c:	d093      	beq.n	80094c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095b6:	e071      	b.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c6:	d123      	bne.n	8009610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fc:	f043 0204 	orr.w	r2, r3, #4
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e067      	b.n	80096e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d041      	beq.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009618:	f7fb fe9c 	bl	8005354 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d302      	bcc.n	800962e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d136      	bne.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d10c      	bne.n	8009652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	43da      	mvns	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4013      	ands	r3, r2
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	bf14      	ite	ne
 800964a:	2301      	movne	r3, #1
 800964c:	2300      	moveq	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	e00b      	b.n	800966a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	43da      	mvns	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4013      	ands	r3, r2
 800965e:	b29b      	uxth	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf14      	ite	ne
 8009664:	2301      	movne	r3, #1
 8009666:	2300      	moveq	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e021      	b.n	80096e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d10c      	bne.n	80096c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	43da      	mvns	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4013      	ands	r3, r2
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf14      	ite	ne
 80096b8:	2301      	movne	r3, #1
 80096ba:	2300      	moveq	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e00b      	b.n	80096d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	43da      	mvns	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4013      	ands	r3, r2
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bf14      	ite	ne
 80096d2:	2301      	movne	r3, #1
 80096d4:	2300      	moveq	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f47f af6d 	bne.w	80095b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096f4:	e034      	b.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 f915 	bl	8009926 <I2C_IsAcknowledgeFailed>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e034      	b.n	8009770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d028      	beq.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970e:	f7fb fe21 	bl	8005354 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	429a      	cmp	r2, r3
 800971c:	d302      	bcc.n	8009724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d11d      	bne.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972e:	2b80      	cmp	r3, #128	@ 0x80
 8009730:	d016      	beq.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974c:	f043 0220 	orr.w	r2, r3, #32
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e007      	b.n	8009770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800976a:	2b80      	cmp	r3, #128	@ 0x80
 800976c:	d1c3      	bne.n	80096f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009784:	e034      	b.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 f8cd 	bl	8009926 <I2C_IsAcknowledgeFailed>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e034      	b.n	8009800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d028      	beq.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979e:	f7fb fdd9 	bl	8005354 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d302      	bcc.n	80097b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11d      	bne.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d016      	beq.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	f043 0220 	orr.w	r2, r3, #32
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e007      	b.n	8009800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d1c3      	bne.n	8009786 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009814:	4b13      	ldr	r3, [pc, #76]	@ (8009864 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	4a13      	ldr	r2, [pc, #76]	@ (8009868 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800981c:	fba2 2303 	umull	r2, r3, r2, r3
 8009820:	0a1a      	lsrs	r2, r3, #8
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b01      	subs	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d107      	bne.n	8009846 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800983a:	f043 0220 	orr.w	r2, r3, #32
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e008      	b.n	8009858 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009854:	d0e9      	beq.n	800982a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	bc80      	pop	{r7}
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000004 	.word	0x20000004
 8009868:	14f8b589 	.word	0x14f8b589

0800986c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009878:	e049      	b.n	800990e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b10      	cmp	r3, #16
 8009886:	d119      	bne.n	80098bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f06f 0210 	mvn.w	r2, #16
 8009890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2220      	movs	r2, #32
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e030      	b.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098bc:	f7fb fd4a 	bl	8005354 <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d302      	bcc.n	80098d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d11d      	bne.n	800990e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098dc:	2b40      	cmp	r3, #64	@ 0x40
 80098de:	d016      	beq.n	800990e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	f043 0220 	orr.w	r2, r3, #32
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e007      	b.n	800991e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009918:	2b40      	cmp	r3, #64	@ 0x40
 800991a:	d1ae      	bne.n	800987a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800993c:	d11b      	bne.n	8009976 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009946:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	f043 0204 	orr.w	r2, r3, #4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr

08009982 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009992:	d103      	bne.n	800999c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800999a:	e007      	b.n	80099ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80099a4:	d102      	bne.n	80099ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2208      	movs	r2, #8
 80099aa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr

080099b6 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	2310      	movs	r3, #16
 80099be:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	fa93 f3a3 	rbit	r3, r3
 80099c6:	603b      	str	r3, [r7, #0]
  return result;
 80099c8:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80099ca:	fab3 f383 	clz	r3, r3
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 80099d6:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 80099da:	461a      	mov	r2, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	6013      	str	r3, [r2, #0]
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr
	...

080099ec <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	fa93 f3a3 	rbit	r3, r3
 80099fe:	60bb      	str	r3, [r7, #8]
  return result;
 8009a00:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8009a02:	fab3 f383 	clz	r3, r3
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <HAL_PWR_DisableWakeUpPin+0x34>)
 8009a0e:	4413      	add	r3, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	2300      	movs	r3, #0
 8009a14:	6013      	str	r3, [r2, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr
 8009a20:	420e0080 	.word	0x420e0080

08009a24 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 2 (PC13) if enabled.
  *          - WKUP pin 3 (PE6) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009a28:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a07      	ldr	r2, [pc, #28]	@ (8009a4c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8009a2e:	f043 0302 	orr.w	r3, r3, #2
 8009a32:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a34:	4b06      	ldr	r3, [pc, #24]	@ (8009a50 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	4a05      	ldr	r2, [pc, #20]	@ (8009a50 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009a3a:	f043 0304 	orr.w	r3, r3, #4
 8009a3e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009a40:	bf30      	wfi
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40007000 	.word	0x40007000
 8009a50:	e000ed00 	.word	0xe000ed00

08009a54 <HAL_PWREx_DisableFastWakeUp>:
/**
  * @brief  Disables the Fast WakeUp from Ultra Low Power mode.
  * @retval None
  */
void HAL_PWREx_DisableFastWakeUp(void)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a5e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	fa93 f3a3 	rbit	r3, r3
 8009a66:	603b      	str	r3, [r7, #0]
  return result;
 8009a68:	683b      	ldr	r3, [r7, #0]
  /* Disable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)DISABLE;
 8009a6a:	fab3 f383 	clz	r3, r3
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8009a76:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr

08009a8a <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a94:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	fa93 f3a3 	rbit	r3, r3
 8009a9c:	603b      	str	r3, [r7, #0]
  return result;
 8009a9e:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 8009aa0:	fab3 f383 	clz	r3, r3
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8009aac:	f503 2360 	add.w	r3, r3, #917504	@ 0xe0000
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6013      	str	r3, [r2, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bc80      	pop	{r7}
 8009abe:	4770      	bx	lr

08009ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e31d      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ad2:	4b94      	ldr	r3, [pc, #592]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 030c 	and.w	r3, r3, #12
 8009ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009adc:	4b91      	ldr	r3, [pc, #580]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ae4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d07b      	beq.n	8009bea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d006      	beq.n	8009b06 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b0c      	cmp	r3, #12
 8009afc:	d10f      	bne.n	8009b1e <HAL_RCC_OscConfig+0x5e>
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b04:	d10b      	bne.n	8009b1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b06:	4b87      	ldr	r3, [pc, #540]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d06a      	beq.n	8009be8 <HAL_RCC_OscConfig+0x128>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d166      	bne.n	8009be8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e2f7      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d106      	bne.n	8009b34 <HAL_RCC_OscConfig+0x74>
 8009b26:	4b7f      	ldr	r3, [pc, #508]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e02d      	b.n	8009b90 <HAL_RCC_OscConfig+0xd0>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10c      	bne.n	8009b56 <HAL_RCC_OscConfig+0x96>
 8009b3c:	4b79      	ldr	r3, [pc, #484]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a78      	ldr	r2, [pc, #480]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	4b76      	ldr	r3, [pc, #472]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a75      	ldr	r2, [pc, #468]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e01c      	b.n	8009b90 <HAL_RCC_OscConfig+0xd0>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d10c      	bne.n	8009b78 <HAL_RCC_OscConfig+0xb8>
 8009b5e:	4b71      	ldr	r3, [pc, #452]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a70      	ldr	r2, [pc, #448]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e00b      	b.n	8009b90 <HAL_RCC_OscConfig+0xd0>
 8009b78:	4b6a      	ldr	r3, [pc, #424]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a69      	ldr	r2, [pc, #420]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	4b67      	ldr	r3, [pc, #412]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a66      	ldr	r2, [pc, #408]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b98:	f7fb fbdc 	bl	8005354 <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ba0:	f7fb fbd8 	bl	8005354 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b64      	cmp	r3, #100	@ 0x64
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e2ad      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f0      	beq.n	8009ba0 <HAL_RCC_OscConfig+0xe0>
 8009bbe:	e014      	b.n	8009bea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc0:	f7fb fbc8 	bl	8005354 <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bc8:	f7fb fbc4 	bl	8005354 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b64      	cmp	r3, #100	@ 0x64
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e299      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bda:	4b52      	ldr	r3, [pc, #328]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x108>
 8009be6:	e000      	b.n	8009bea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d05a      	beq.n	8009cac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d005      	beq.n	8009c08 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	2b0c      	cmp	r3, #12
 8009c00:	d119      	bne.n	8009c36 <HAL_RCC_OscConfig+0x176>
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d116      	bne.n	8009c36 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c08:	4b46      	ldr	r3, [pc, #280]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d005      	beq.n	8009c20 <HAL_RCC_OscConfig+0x160>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d001      	beq.n	8009c20 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e276      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c20:	4b40      	ldr	r3, [pc, #256]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	493d      	ldr	r1, [pc, #244]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c34:	e03a      	b.n	8009cac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d020      	beq.n	8009c80 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8009d28 <HAL_RCC_OscConfig+0x268>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c44:	f7fb fb86 	bl	8005354 <HAL_GetTick>
 8009c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c4a:	e008      	b.n	8009c5e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c4c:	f7fb fb82 	bl	8005354 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e257      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c5e:	4b31      	ldr	r3, [pc, #196]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0f0      	beq.n	8009c4c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	492a      	ldr	r1, [pc, #168]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	604b      	str	r3, [r1, #4]
 8009c7e:	e015      	b.n	8009cac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c80:	4b29      	ldr	r3, [pc, #164]	@ (8009d28 <HAL_RCC_OscConfig+0x268>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c86:	f7fb fb65 	bl	8005354 <HAL_GetTick>
 8009c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c8c:	e008      	b.n	8009ca0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c8e:	f7fb fb61 	bl	8005354 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d901      	bls.n	8009ca0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e236      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ca0:	4b20      	ldr	r3, [pc, #128]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1f0      	bne.n	8009c8e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 80b8 	beq.w	8009e2a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d170      	bne.n	8009da2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009cc0:	4b18      	ldr	r3, [pc, #96]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x218>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e21a      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a1a      	ldr	r2, [r3, #32]
 8009cdc:	4b11      	ldr	r3, [pc, #68]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d921      	bls.n	8009d2c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 fc27 	bl	800a540 <RCC_SetFlashLatencyFromMSIRange>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e208      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	4906      	ldr	r1, [pc, #24]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d0e:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	061b      	lsls	r3, r3, #24
 8009d1c:	4901      	ldr	r1, [pc, #4]	@ (8009d24 <HAL_RCC_OscConfig+0x264>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]
 8009d22:	e020      	b.n	8009d66 <HAL_RCC_OscConfig+0x2a6>
 8009d24:	40023800 	.word	0x40023800
 8009d28:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d2c:	4b99      	ldr	r3, [pc, #612]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	4996      	ldr	r1, [pc, #600]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d3e:	4b95      	ldr	r3, [pc, #596]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	061b      	lsls	r3, r3, #24
 8009d4c:	4991      	ldr	r1, [pc, #580]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fbf2 	bl	800a540 <RCC_SetFlashLatencyFromMSIRange>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e1d3      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	0b5b      	lsrs	r3, r3, #13
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8009d76:	4a87      	ldr	r2, [pc, #540]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009d78:	6892      	ldr	r2, [r2, #8]
 8009d7a:	0912      	lsrs	r2, r2, #4
 8009d7c:	f002 020f 	and.w	r2, r2, #15
 8009d80:	4985      	ldr	r1, [pc, #532]	@ (8009f98 <HAL_RCC_OscConfig+0x4d8>)
 8009d82:	5c8a      	ldrb	r2, [r1, r2]
 8009d84:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8009d86:	4a85      	ldr	r2, [pc, #532]	@ (8009f9c <HAL_RCC_OscConfig+0x4dc>)
 8009d88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d8a:	4b85      	ldr	r3, [pc, #532]	@ (8009fa0 <HAL_RCC_OscConfig+0x4e0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fb fa94 	bl	80052bc <HAL_InitTick>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d045      	beq.n	8009e2a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	e1b5      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d029      	beq.n	8009dfe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009daa:	4b7e      	ldr	r3, [pc, #504]	@ (8009fa4 <HAL_RCC_OscConfig+0x4e4>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009db0:	f7fb fad0 	bl	8005354 <HAL_GetTick>
 8009db4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009db6:	e008      	b.n	8009dca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009db8:	f7fb facc 	bl	8005354 <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e1a1      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009dca:	4b72      	ldr	r3, [pc, #456]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f0      	beq.n	8009db8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	496c      	ldr	r1, [pc, #432]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009de8:	4b6a      	ldr	r3, [pc, #424]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	061b      	lsls	r3, r3, #24
 8009df6:	4967      	ldr	r1, [pc, #412]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	604b      	str	r3, [r1, #4]
 8009dfc:	e015      	b.n	8009e2a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009dfe:	4b69      	ldr	r3, [pc, #420]	@ (8009fa4 <HAL_RCC_OscConfig+0x4e4>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e04:	f7fb faa6 	bl	8005354 <HAL_GetTick>
 8009e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e0c:	f7fb faa2 	bl	8005354 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e177      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f0      	bne.n	8009e0c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d030      	beq.n	8009e98 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d016      	beq.n	8009e6c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8009fa8 <HAL_RCC_OscConfig+0x4e8>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e44:	f7fb fa86 	bl	8005354 <HAL_GetTick>
 8009e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e4c:	f7fb fa82 	bl	8005354 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e157      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f0      	beq.n	8009e4c <HAL_RCC_OscConfig+0x38c>
 8009e6a:	e015      	b.n	8009e98 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8009fa8 <HAL_RCC_OscConfig+0x4e8>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e72:	f7fb fa6f 	bl	8005354 <HAL_GetTick>
 8009e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e78:	e008      	b.n	8009e8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e7a:	f7fb fa6b 	bl	8005354 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e140      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e8c:	4b41      	ldr	r3, [pc, #260]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1f0      	bne.n	8009e7a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 80b5 	beq.w	800a010 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10d      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009eb6:	4b37      	ldr	r3, [pc, #220]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eba:	4a36      	ldr	r2, [pc, #216]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ec0:	6253      	str	r3, [r2, #36]	@ 0x24
 8009ec2:	4b34      	ldr	r3, [pc, #208]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009eca:	60bb      	str	r3, [r7, #8]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ed2:	4b36      	ldr	r3, [pc, #216]	@ (8009fac <HAL_RCC_OscConfig+0x4ec>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d118      	bne.n	8009f10 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ede:	4b33      	ldr	r3, [pc, #204]	@ (8009fac <HAL_RCC_OscConfig+0x4ec>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a32      	ldr	r2, [pc, #200]	@ (8009fac <HAL_RCC_OscConfig+0x4ec>)
 8009ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eea:	f7fb fa33 	bl	8005354 <HAL_GetTick>
 8009eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ef0:	e008      	b.n	8009f04 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ef2:	f7fb fa2f 	bl	8005354 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b64      	cmp	r3, #100	@ 0x64
 8009efe:	d901      	bls.n	8009f04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e104      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f04:	4b29      	ldr	r3, [pc, #164]	@ (8009fac <HAL_RCC_OscConfig+0x4ec>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d0f0      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d106      	bne.n	8009f26 <HAL_RCC_OscConfig+0x466>
 8009f18:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f22:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f24:	e02d      	b.n	8009f82 <HAL_RCC_OscConfig+0x4c2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10c      	bne.n	8009f48 <HAL_RCC_OscConfig+0x488>
 8009f2e:	4b19      	ldr	r3, [pc, #100]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f32:	4a18      	ldr	r2, [pc, #96]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f38:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f3a:	4b16      	ldr	r3, [pc, #88]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	4a15      	ldr	r2, [pc, #84]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f44:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f46:	e01c      	b.n	8009f82 <HAL_RCC_OscConfig+0x4c2>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b05      	cmp	r3, #5
 8009f4e:	d10c      	bne.n	8009f6a <HAL_RCC_OscConfig+0x4aa>
 8009f50:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f54:	4a0f      	ldr	r2, [pc, #60]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009f5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f60:	4a0c      	ldr	r2, [pc, #48]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f66:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f68:	e00b      	b.n	8009f82 <HAL_RCC_OscConfig+0x4c2>
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6e:	4a09      	ldr	r2, [pc, #36]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f74:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f76:	4b07      	ldr	r3, [pc, #28]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f7a:	4a06      	ldr	r2, [pc, #24]	@ (8009f94 <HAL_RCC_OscConfig+0x4d4>)
 8009f7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f80:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d024      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f8a:	f7fb f9e3 	bl	8005354 <HAL_GetTick>
 8009f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f90:	e019      	b.n	8009fc6 <HAL_RCC_OscConfig+0x506>
 8009f92:	bf00      	nop
 8009f94:	40023800 	.word	0x40023800
 8009f98:	0800e2b8 	.word	0x0800e2b8
 8009f9c:	20000004 	.word	0x20000004
 8009fa0:	20000008 	.word	0x20000008
 8009fa4:	42470020 	.word	0x42470020
 8009fa8:	42470680 	.word	0x42470680
 8009fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fb0:	f7fb f9d0 	bl	8005354 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e0a3      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fc6:	4b54      	ldr	r3, [pc, #336]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0ee      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x4f0>
 8009fd2:	e014      	b.n	8009ffe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fd4:	f7fb f9be 	bl	8005354 <HAL_GetTick>
 8009fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fda:	e00a      	b.n	8009ff2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fdc:	f7fb f9ba 	bl	8005354 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e08d      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ff2:	4b49      	ldr	r3, [pc, #292]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 8009ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1ee      	bne.n	8009fdc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ffe:	7ffb      	ldrb	r3, [r7, #31]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d105      	bne.n	800a010 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a004:	4b44      	ldr	r3, [pc, #272]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a008:	4a43      	ldr	r2, [pc, #268]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a00a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a00e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d079      	beq.n	800a10c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b0c      	cmp	r3, #12
 800a01c:	d056      	beq.n	800a0cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	2b02      	cmp	r3, #2
 800a024:	d13b      	bne.n	800a09e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a026:	4b3d      	ldr	r3, [pc, #244]	@ (800a11c <HAL_RCC_OscConfig+0x65c>)
 800a028:	2200      	movs	r2, #0
 800a02a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a02c:	f7fb f992 	bl	8005354 <HAL_GetTick>
 800a030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a032:	e008      	b.n	800a046 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a034:	f7fb f98e 	bl	8005354 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d901      	bls.n	800a046 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e063      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a046:	4b34      	ldr	r3, [pc, #208]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f0      	bne.n	800a034 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a052:	4b31      	ldr	r3, [pc, #196]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a062:	4319      	orrs	r1, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a068:	430b      	orrs	r3, r1
 800a06a:	492b      	ldr	r1, [pc, #172]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a070:	4b2a      	ldr	r3, [pc, #168]	@ (800a11c <HAL_RCC_OscConfig+0x65c>)
 800a072:	2201      	movs	r2, #1
 800a074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a076:	f7fb f96d 	bl	8005354 <HAL_GetTick>
 800a07a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a07e:	f7fb f969 	bl	8005354 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e03e      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a090:	4b21      	ldr	r3, [pc, #132]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0f0      	beq.n	800a07e <HAL_RCC_OscConfig+0x5be>
 800a09c:	e036      	b.n	800a10c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a09e:	4b1f      	ldr	r3, [pc, #124]	@ (800a11c <HAL_RCC_OscConfig+0x65c>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0a4:	f7fb f956 	bl	8005354 <HAL_GetTick>
 800a0a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0ac:	f7fb f952 	bl	8005354 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e027      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0be:	4b16      	ldr	r3, [pc, #88]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f0      	bne.n	800a0ac <HAL_RCC_OscConfig+0x5ec>
 800a0ca:	e01f      	b.n	800a10c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e01a      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a0d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a118 <HAL_RCC_OscConfig+0x658>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d10d      	bne.n	800a108 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d106      	bne.n	800a108 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a104:	429a      	cmp	r2, r3
 800a106:	d001      	beq.n	800a10c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3720      	adds	r7, #32
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	40023800 	.word	0x40023800
 800a11c:	42470060 	.word	0x42470060

0800a120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e11a      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a134:	4b8f      	ldr	r3, [pc, #572]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d919      	bls.n	800a176 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d105      	bne.n	800a154 <HAL_RCC_ClockConfig+0x34>
 800a148:	4b8a      	ldr	r3, [pc, #552]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a89      	ldr	r2, [pc, #548]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a14e:	f043 0304 	orr.w	r3, r3, #4
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	4b87      	ldr	r3, [pc, #540]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f023 0201 	bic.w	r2, r3, #1
 800a15c:	4985      	ldr	r1, [pc, #532]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	4313      	orrs	r3, r2
 800a162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a164:	4b83      	ldr	r3, [pc, #524]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d001      	beq.n	800a176 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e0f9      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a182:	4b7d      	ldr	r3, [pc, #500]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	497a      	ldr	r1, [pc, #488]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a190:	4313      	orrs	r3, r2
 800a192:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f000 808e 	beq.w	800a2be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1aa:	4b73      	ldr	r3, [pc, #460]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d121      	bne.n	800a1fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e0d7      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d107      	bne.n	800a1d2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1c2:	4b6d      	ldr	r3, [pc, #436]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d115      	bne.n	800a1fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e0cb      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d107      	bne.n	800a1ea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1da:	4b67      	ldr	r3, [pc, #412]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0bf      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a1ea:	4b63      	ldr	r3, [pc, #396]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e0b7      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1fa:	4b5f      	ldr	r3, [pc, #380]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f023 0203 	bic.w	r2, r3, #3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	495c      	ldr	r1, [pc, #368]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a20c:	f7fb f8a2 	bl	8005354 <HAL_GetTick>
 800a210:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d112      	bne.n	800a240 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a21a:	e00a      	b.n	800a232 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a21c:	f7fb f89a 	bl	8005354 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e09b      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a232:	4b51      	ldr	r3, [pc, #324]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f003 030c 	and.w	r3, r3, #12
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d1ee      	bne.n	800a21c <HAL_RCC_ClockConfig+0xfc>
 800a23e:	e03e      	b.n	800a2be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b03      	cmp	r3, #3
 800a246:	d112      	bne.n	800a26e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a248:	e00a      	b.n	800a260 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a24a:	f7fb f883 	bl	8005354 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a258:	4293      	cmp	r3, r2
 800a25a:	d901      	bls.n	800a260 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e084      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a260:	4b45      	ldr	r3, [pc, #276]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 030c 	and.w	r3, r3, #12
 800a268:	2b0c      	cmp	r3, #12
 800a26a:	d1ee      	bne.n	800a24a <HAL_RCC_ClockConfig+0x12a>
 800a26c:	e027      	b.n	800a2be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d11d      	bne.n	800a2b2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a276:	e00a      	b.n	800a28e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a278:	f7fb f86c 	bl	8005354 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a286:	4293      	cmp	r3, r2
 800a288:	d901      	bls.n	800a28e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e06d      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a28e:	4b3a      	ldr	r3, [pc, #232]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	2b04      	cmp	r3, #4
 800a298:	d1ee      	bne.n	800a278 <HAL_RCC_ClockConfig+0x158>
 800a29a:	e010      	b.n	800a2be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a29c:	f7fb f85a 	bl	8005354 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d901      	bls.n	800a2b2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e05b      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a2b2:	4b31      	ldr	r3, [pc, #196]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 030c 	and.w	r3, r3, #12
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1ee      	bne.n	800a29c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2be:	4b2d      	ldr	r3, [pc, #180]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d219      	bcs.n	800a300 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d105      	bne.n	800a2de <HAL_RCC_ClockConfig+0x1be>
 800a2d2:	4b28      	ldr	r3, [pc, #160]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a27      	ldr	r2, [pc, #156]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2d8:	f043 0304 	orr.w	r3, r3, #4
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	4b25      	ldr	r3, [pc, #148]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f023 0201 	bic.w	r2, r3, #1
 800a2e6:	4923      	ldr	r1, [pc, #140]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ee:	4b21      	ldr	r3, [pc, #132]	@ (800a374 <HAL_RCC_ClockConfig+0x254>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d001      	beq.n	800a300 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e034      	b.n	800a36a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a30c:	4b1a      	ldr	r3, [pc, #104]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	4917      	ldr	r1, [pc, #92]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	2b00      	cmp	r3, #0
 800a328:	d009      	beq.n	800a33e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a32a:	4b13      	ldr	r3, [pc, #76]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	490f      	ldr	r1, [pc, #60]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a33e:	f000 f823 	bl	800a388 <HAL_RCC_GetSysClockFreq>
 800a342:	4602      	mov	r2, r0
 800a344:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <HAL_RCC_ClockConfig+0x258>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	091b      	lsrs	r3, r3, #4
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	490b      	ldr	r1, [pc, #44]	@ (800a37c <HAL_RCC_ClockConfig+0x25c>)
 800a350:	5ccb      	ldrb	r3, [r1, r3]
 800a352:	fa22 f303 	lsr.w	r3, r2, r3
 800a356:	4a0a      	ldr	r2, [pc, #40]	@ (800a380 <HAL_RCC_ClockConfig+0x260>)
 800a358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a35a:	4b0a      	ldr	r3, [pc, #40]	@ (800a384 <HAL_RCC_ClockConfig+0x264>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fa ffac 	bl	80052bc <HAL_InitTick>
 800a364:	4603      	mov	r3, r0
 800a366:	72fb      	strb	r3, [r7, #11]

  return status;
 800a368:	7afb      	ldrb	r3, [r7, #11]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40023c00 	.word	0x40023c00
 800a378:	40023800 	.word	0x40023800
 800a37c:	0800e2b8 	.word	0x0800e2b8
 800a380:	20000004 	.word	0x20000004
 800a384:	20000008 	.word	0x20000008

0800a388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a38c:	b08e      	sub	sp, #56	@ 0x38
 800a38e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800a390:	4b58      	ldr	r3, [pc, #352]	@ (800a4f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	f003 030c 	and.w	r3, r3, #12
 800a39c:	2b0c      	cmp	r3, #12
 800a39e:	d00d      	beq.n	800a3bc <HAL_RCC_GetSysClockFreq+0x34>
 800a3a0:	2b0c      	cmp	r3, #12
 800a3a2:	f200 8092 	bhi.w	800a4ca <HAL_RCC_GetSysClockFreq+0x142>
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d002      	beq.n	800a3b0 <HAL_RCC_GetSysClockFreq+0x28>
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d003      	beq.n	800a3b6 <HAL_RCC_GetSysClockFreq+0x2e>
 800a3ae:	e08c      	b.n	800a4ca <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a3b0:	4b51      	ldr	r3, [pc, #324]	@ (800a4f8 <HAL_RCC_GetSysClockFreq+0x170>)
 800a3b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a3b4:	e097      	b.n	800a4e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a3b6:	4b51      	ldr	r3, [pc, #324]	@ (800a4fc <HAL_RCC_GetSysClockFreq+0x174>)
 800a3b8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a3ba:	e094      	b.n	800a4e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	0c9b      	lsrs	r3, r3, #18
 800a3c0:	f003 020f 	and.w	r2, r3, #15
 800a3c4:	4b4e      	ldr	r3, [pc, #312]	@ (800a500 <HAL_RCC_GetSysClockFreq+0x178>)
 800a3c6:	5c9b      	ldrb	r3, [r3, r2]
 800a3c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3cc:	0d9b      	lsrs	r3, r3, #22
 800a3ce:	f003 0303 	and.w	r3, r3, #3
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a3d6:	4b47      	ldr	r3, [pc, #284]	@ (800a4f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d021      	beq.n	800a426 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	61bb      	str	r3, [r7, #24]
 800a3e8:	61fa      	str	r2, [r7, #28]
 800a3ea:	4b44      	ldr	r3, [pc, #272]	@ (800a4fc <HAL_RCC_GetSysClockFreq+0x174>)
 800a3ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800a3f0:	464a      	mov	r2, r9
 800a3f2:	fb03 f202 	mul.w	r2, r3, r2
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4644      	mov	r4, r8
 800a3fa:	fb04 f303 	mul.w	r3, r4, r3
 800a3fe:	4413      	add	r3, r2
 800a400:	4a3e      	ldr	r2, [pc, #248]	@ (800a4fc <HAL_RCC_GetSysClockFreq+0x174>)
 800a402:	4644      	mov	r4, r8
 800a404:	fba4 0102 	umull	r0, r1, r4, r2
 800a408:	440b      	add	r3, r1
 800a40a:	4619      	mov	r1, r3
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	2200      	movs	r2, #0
 800a410:	613b      	str	r3, [r7, #16]
 800a412:	617a      	str	r2, [r7, #20]
 800a414:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a418:	f7f6 fdd4 	bl	8000fc4 <__aeabi_uldivmod>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4613      	mov	r3, r2
 800a422:	637b      	str	r3, [r7, #52]	@ 0x34
 800a424:	e04e      	b.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	2200      	movs	r2, #0
 800a42a:	469a      	mov	sl, r3
 800a42c:	4693      	mov	fp, r2
 800a42e:	4652      	mov	r2, sl
 800a430:	465b      	mov	r3, fp
 800a432:	f04f 0000 	mov.w	r0, #0
 800a436:	f04f 0100 	mov.w	r1, #0
 800a43a:	0159      	lsls	r1, r3, #5
 800a43c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a440:	0150      	lsls	r0, r2, #5
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	ebb2 080a 	subs.w	r8, r2, sl
 800a44a:	eb63 090b 	sbc.w	r9, r3, fp
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	f04f 0300 	mov.w	r3, #0
 800a456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a45a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a45e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a462:	ebb2 0408 	subs.w	r4, r2, r8
 800a466:	eb63 0509 	sbc.w	r5, r3, r9
 800a46a:	f04f 0200 	mov.w	r2, #0
 800a46e:	f04f 0300 	mov.w	r3, #0
 800a472:	00eb      	lsls	r3, r5, #3
 800a474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a478:	00e2      	lsls	r2, r4, #3
 800a47a:	4614      	mov	r4, r2
 800a47c:	461d      	mov	r5, r3
 800a47e:	eb14 030a 	adds.w	r3, r4, sl
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	eb45 030b 	adc.w	r3, r5, fp
 800a488:	607b      	str	r3, [r7, #4]
 800a48a:	f04f 0200 	mov.w	r2, #0
 800a48e:	f04f 0300 	mov.w	r3, #0
 800a492:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a496:	4629      	mov	r1, r5
 800a498:	028b      	lsls	r3, r1, #10
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	4604      	mov	r4, r0
 800a4a0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a4a4:	4601      	mov	r1, r0
 800a4a6:	028a      	lsls	r2, r1, #10
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	60fa      	str	r2, [r7, #12]
 800a4b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4b8:	f7f6 fd84 	bl	8000fc4 <__aeabi_uldivmod>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a4c8:	e00d      	b.n	800a4e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	0b5b      	lsrs	r3, r3, #13
 800a4d0:	f003 0307 	and.w	r3, r3, #7
 800a4d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a4de:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a4e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3738      	adds	r7, #56	@ 0x38
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40023800 	.word	0x40023800
 800a4f8:	00f42400 	.word	0x00f42400
 800a4fc:	00b71b00 	.word	0x00b71b00
 800a500:	0800e2ac 	.word	0x0800e2ac

0800a504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a508:	4b02      	ldr	r3, [pc, #8]	@ (800a514 <HAL_RCC_GetHCLKFreq+0x10>)
 800a50a:	681b      	ldr	r3, [r3, #0]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	bc80      	pop	{r7}
 800a512:	4770      	bx	lr
 800a514:	20000004 	.word	0x20000004

0800a518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a51c:	f7ff fff2 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 800a520:	4602      	mov	r2, r0
 800a522:	4b05      	ldr	r3, [pc, #20]	@ (800a538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	0a1b      	lsrs	r3, r3, #8
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	4903      	ldr	r1, [pc, #12]	@ (800a53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a52e:	5ccb      	ldrb	r3, [r1, r3]
 800a530:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a534:	4618      	mov	r0, r3
 800a536:	bd80      	pop	{r7, pc}
 800a538:	40023800 	.word	0x40023800
 800a53c:	0800e2c8 	.word	0x0800e2c8

0800a540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a548:	2300      	movs	r3, #0
 800a54a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a54c:	4b29      	ldr	r3, [pc, #164]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d12c      	bne.n	800a5b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a558:	4b26      	ldr	r3, [pc, #152]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a564:	4b24      	ldr	r3, [pc, #144]	@ (800a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a56c:	617b      	str	r3, [r7, #20]
 800a56e:	e016      	b.n	800a59e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a570:	4b20      	ldr	r3, [pc, #128]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a574:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a57a:	6253      	str	r3, [r2, #36]	@ 0x24
 800a57c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a588:	4b1b      	ldr	r3, [pc, #108]	@ (800a5f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800a590:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a592:	4b18      	ldr	r3, [pc, #96]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a596:	4a17      	ldr	r2, [pc, #92]	@ (800a5f4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800a598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a59c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800a5a4:	d105      	bne.n	800a5b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a5ac:	d101      	bne.n	800a5b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d105      	bne.n	800a5c4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800a5b8:	4b10      	ldr	r3, [pc, #64]	@ (800a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a0f      	ldr	r2, [pc, #60]	@ (800a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5be:	f043 0304 	orr.w	r3, r3, #4
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f023 0201 	bic.w	r2, r3, #1
 800a5cc:	490b      	ldr	r1, [pc, #44]	@ (800a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a5d4:	4b09      	ldr	r3, [pc, #36]	@ (800a5fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d001      	beq.n	800a5e6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e000      	b.n	800a5e8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	40023800 	.word	0x40023800
 800a5f8:	40007000 	.word	0x40007000
 800a5fc:	40023c00 	.word	0x40023c00

0800a600 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80b8 	beq.w	800a786 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a61a:	4b5d      	ldr	r3, [pc, #372]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10d      	bne.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a626:	4b5a      	ldr	r3, [pc, #360]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62a:	4a59      	ldr	r2, [pc, #356]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a62c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a630:	6253      	str	r3, [r2, #36]	@ 0x24
 800a632:	4b57      	ldr	r3, [pc, #348]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a63a:	60bb      	str	r3, [r7, #8]
 800a63c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a642:	4b54      	ldr	r3, [pc, #336]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d118      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a64e:	4b51      	ldr	r3, [pc, #324]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a50      	ldr	r2, [pc, #320]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a65a:	f7fa fe7b 	bl	8005354 <HAL_GetTick>
 800a65e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a660:	e008      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a662:	f7fa fe77 	bl	8005354 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	2b64      	cmp	r3, #100	@ 0x64
 800a66e:	d901      	bls.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e089      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a674:	4b47      	ldr	r3, [pc, #284]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0f0      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a680:	4b43      	ldr	r3, [pc, #268]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a688:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	429a      	cmp	r2, r3
 800a696:	d00f      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6a4:	d108      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6a6:	4b3a      	ldr	r3, [pc, #232]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6b2:	d101      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e067      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a6b8:	4b35      	ldr	r3, [pc, #212]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d034      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d02d      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d027      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a6e2:	4b2b      	ldr	r3, [pc, #172]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a6ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800a798 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a6f2:	4b29      	ldr	r3, [pc, #164]	@ (800a798 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a6f8:	4a25      	ldr	r2, [pc, #148]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6353      	str	r3, [r2, #52]	@ 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d014      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a708:	f7fa fe24 	bl	8005354 <HAL_GetTick>
 800a70c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a70e:	e00a      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a710:	f7fa fe20 	bl	8005354 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a71e:	4293      	cmp	r3, r2
 800a720:	d901      	bls.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e030      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a726:	4b1a      	ldr	r3, [pc, #104]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0ee      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d01a      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a74a:	d10a      	bne.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800a74c:	4b10      	ldr	r3, [pc, #64]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a75c:	490c      	ldr	r1, [pc, #48]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	600b      	str	r3, [r1, #0]
 800a762:	4b0b      	ldr	r3, [pc, #44]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a76e:	4908      	ldr	r1, [pc, #32]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a770:	4313      	orrs	r3, r2
 800a772:	634b      	str	r3, [r1, #52]	@ 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d105      	bne.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a77a:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77e:	4a04      	ldr	r2, [pc, #16]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800a780:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a784:	6253      	str	r3, [r2, #36]	@ 0x24
    }
  }

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	40023800 	.word	0x40023800
 800a794:	40007000 	.word	0x40007000
 800a798:	424706dc 	.word	0x424706dc

0800a79c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d101      	bne.n	800a7ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e073      	b.n	800a896 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	7f5b      	ldrb	r3, [r3, #29]
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f7fa fb24 	bl	8004e0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b10      	cmp	r3, #16
 800a7d6:	d055      	beq.n	800a884 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	22ca      	movs	r2, #202	@ 0xca
 800a7de:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2253      	movs	r2, #83	@ 0x53
 800a7e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc42 	bl	800b072 <RTC_EnterInitMode>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d12c      	bne.n	800a852 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a80a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6899      	ldr	r1, [r3, #8]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	431a      	orrs	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68d2      	ldr	r2, [r2, #12]
 800a832:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6919      	ldr	r1, [r3, #16]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	041a      	lsls	r2, r3, #16
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	430a      	orrs	r2, r1
 800a846:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc49 	bl	800b0e0 <RTC_ExitInitMode>
 800a84e:	4603      	mov	r3, r0
 800a850:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d110      	bne.n	800a87a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a866:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	430a      	orrs	r2, r1
 800a878:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	22ff      	movs	r2, #255	@ 0xff
 800a880:	625a      	str	r2, [r3, #36]	@ 0x24
 800a882:	e001      	b.n	800a888 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a894:	7bfb      	ldrb	r3, [r7, #15]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a89e:	b590      	push	{r4, r7, lr}
 800a8a0:	b087      	sub	sp, #28
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	7f1b      	ldrb	r3, [r3, #28]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d101      	bne.n	800a8ba <HAL_RTC_SetTime+0x1c>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	e087      	b.n	800a9ca <HAL_RTC_SetTime+0x12c>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d126      	bne.n	800a91a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d102      	bne.n	800a8e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fc19 	bl	800b11c <RTC_ByteToBcd2>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fc12 	bl	800b11c <RTC_ByteToBcd2>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a8fc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	789b      	ldrb	r3, [r3, #2]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fc0a 	bl	800b11c <RTC_ByteToBcd2>
 800a908:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a90a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	78db      	ldrb	r3, [r3, #3]
 800a912:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	e018      	b.n	800a94c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a924:	2b00      	cmp	r3, #0
 800a926:	d102      	bne.n	800a92e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2200      	movs	r2, #0
 800a92c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a93a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a940:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	78db      	ldrb	r3, [r3, #3]
 800a946:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	22ca      	movs	r2, #202	@ 0xca
 800a952:	625a      	str	r2, [r3, #36]	@ 0x24
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2253      	movs	r2, #83	@ 0x53
 800a95a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 fb88 	bl	800b072 <RTC_EnterInitMode>
 800a962:	4603      	mov	r3, r0
 800a964:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a966:	7cfb      	ldrb	r3, [r7, #19]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d120      	bne.n	800a9ae <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a976:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a97a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	689a      	ldr	r2, [r3, #8]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a98a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6899      	ldr	r1, [r3, #8]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 fb9b 	bl	800b0e0 <RTC_ExitInitMode>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a9ae:	7cfb      	ldrb	r3, [r7, #19]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	22ff      	movs	r2, #255	@ 0xff
 800a9c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	771a      	strb	r2, [r3, #28]

  return status;
 800a9c8:	7cfb      	ldrb	r3, [r7, #19]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd90      	pop	{r4, r7, pc}

0800a9d2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b086      	sub	sp, #24
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a9ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a9f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	0c1b      	lsrs	r3, r3, #16
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	0a1b      	lsrs	r3, r3, #8
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	0d9b      	lsrs	r3, r3, #22
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d11a      	bne.n	800aa6c <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fb8b 	bl	800b156 <RTC_Bcd2ToByte>
 800aa40:	4603      	mov	r3, r0
 800aa42:	461a      	mov	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fb82 	bl	800b156 <RTC_Bcd2ToByte>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461a      	mov	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	789b      	ldrb	r3, [r3, #2]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fb79 	bl	800b156 <RTC_Bcd2ToByte>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aa76:	b590      	push	{r4, r7, lr}
 800aa78:	b087      	sub	sp, #28
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	7f1b      	ldrb	r3, [r3, #28]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <HAL_RTC_SetDate+0x1c>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	e071      	b.n	800ab76 <HAL_RTC_SetDate+0x100>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10e      	bne.n	800aac2 <HAL_RTC_SetDate+0x4c>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	785b      	ldrb	r3, [r3, #1]
 800aaa8:	f003 0310 	and.w	r3, r3, #16
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d008      	beq.n	800aac2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	f023 0310 	bic.w	r3, r3, #16
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	330a      	adds	r3, #10
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d11c      	bne.n	800ab02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	78db      	ldrb	r3, [r3, #3]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fb25 	bl	800b11c <RTC_ByteToBcd2>
 800aad2:	4603      	mov	r3, r0
 800aad4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	785b      	ldrb	r3, [r3, #1]
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 fb1e 	bl	800b11c <RTC_ByteToBcd2>
 800aae0:	4603      	mov	r3, r0
 800aae2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aae4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	789b      	ldrb	r3, [r3, #2]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fb16 	bl	800b11c <RTC_ByteToBcd2>
 800aaf0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aaf2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e00e      	b.n	800ab20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	78db      	ldrb	r3, [r3, #3]
 800ab06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ab0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ab14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	22ca      	movs	r2, #202	@ 0xca
 800ab26:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2253      	movs	r2, #83	@ 0x53
 800ab2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fa9e 	bl	800b072 <RTC_EnterInitMode>
 800ab36:	4603      	mov	r3, r0
 800ab38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ab3a:	7cfb      	ldrb	r3, [r7, #19]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10c      	bne.n	800ab5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ab4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fac5 	bl	800b0e0 <RTC_ExitInitMode>
 800ab56:	4603      	mov	r3, r0
 800ab58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ab5a:	7cfb      	ldrb	r3, [r7, #19]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2201      	movs	r2, #1
 800ab64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	22ff      	movs	r2, #255	@ 0xff
 800ab6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	771a      	strb	r2, [r3, #28]

  return status;
 800ab74:	7cfb      	ldrb	r3, [r7, #19]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd90      	pop	{r4, r7, pc}

0800ab7e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b086      	sub	sp, #24
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ab98:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ab9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	0c1b      	lsrs	r3, r3, #16
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 031f 	and.w	r3, r3, #31
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	0b5b      	lsrs	r3, r3, #13
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d11a      	bne.n	800ac12 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	78db      	ldrb	r3, [r3, #3]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fab8 	bl	800b156 <RTC_Bcd2ToByte>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461a      	mov	r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 faaf 	bl	800b156 <RTC_Bcd2ToByte>
 800abf8:	4603      	mov	r3, r0
 800abfa:	461a      	mov	r2, r3
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	789b      	ldrb	r3, [r3, #2]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 faa6 	bl	800b156 <RTC_Bcd2ToByte>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3718      	adds	r7, #24
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ac1c:	b590      	push	{r4, r7, lr}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ac28:	4b92      	ldr	r3, [pc, #584]	@ (800ae74 <HAL_RTC_SetAlarm_IT+0x258>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a92      	ldr	r2, [pc, #584]	@ (800ae78 <HAL_RTC_SetAlarm_IT+0x25c>)
 800ac2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac32:	0adb      	lsrs	r3, r3, #11
 800ac34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac38:	fb02 f303 	mul.w	r3, r2, r3
 800ac3c:	613b      	str	r3, [r7, #16]
       uint32_t tmpreg = 0U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	7f1b      	ldrb	r3, [r3, #28]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d101      	bne.n	800ac4e <HAL_RTC_SetAlarm_IT+0x32>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e10e      	b.n	800ae6c <HAL_RTC_SetAlarm_IT+0x250>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2202      	movs	r2, #2
 800ac58:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d136      	bne.n	800acce <HAL_RTC_SetAlarm_IT+0xb2>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <HAL_RTC_SetAlarm_IT+0x58>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2200      	movs	r2, #0
 800ac72:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 fa4f 	bl	800b11c <RTC_ByteToBcd2>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	785b      	ldrb	r3, [r3, #1]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 fa48 	bl	800b11c <RTC_ByteToBcd2>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ac90:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	789b      	ldrb	r3, [r3, #2]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 fa40 	bl	800b11c <RTC_ByteToBcd2>
 800ac9c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	78db      	ldrb	r3, [r3, #3]
 800aca6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800aca8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	7d1b      	ldrb	r3, [r3, #20]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fa33 	bl	800b11c <RTC_ByteToBcd2>
 800acb6:	4603      	mov	r3, r0
 800acb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800acba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800acc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800acc8:	4313      	orrs	r3, r2
 800acca:	617b      	str	r3, [r7, #20]
 800accc:	e022      	b.n	800ad14 <HAL_RTC_SetAlarm_IT+0xf8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <HAL_RTC_SetAlarm_IT+0xc6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2200      	movs	r2, #0
 800ace0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800acee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800acf4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	78db      	ldrb	r3, [r3, #3]
 800acfa:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800acfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	7d1b      	ldrb	r3, [r3, #20]
 800ad02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800ad04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ad0a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ad10:	4313      	orrs	r3, r2
 800ad12:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* RTC_SUBSECOND_SUPPORT */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	22ca      	movs	r2, #202	@ 0xca
 800ad1a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2253      	movs	r2, #83	@ 0x53
 800ad22:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad2c:	d13e      	bne.n	800adac <HAL_RTC_SetAlarm_IT+0x190>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ad3c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ad4e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10b      	bne.n	800ad74 <HAL_RTC_SetAlarm_IT+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	22ff      	movs	r2, #255	@ 0xff
 800ad62:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2203      	movs	r2, #3
 800ad68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e07b      	b.n	800ae6c <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0e6      	beq.n	800ad50 <HAL_RTC_SetAlarm_IT+0x134>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	61da      	str	r2, [r3, #28]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad98:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ada8:	609a      	str	r2, [r3, #8]
 800adaa:	e048      	b.n	800ae3e <HAL_RTC_SetAlarm_IT+0x222>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800adba:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800adcc:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800adce:	4b29      	ldr	r3, [pc, #164]	@ (800ae74 <HAL_RTC_SetAlarm_IT+0x258>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a29      	ldr	r2, [pc, #164]	@ (800ae78 <HAL_RTC_SetAlarm_IT+0x25c>)
 800add4:	fba2 2303 	umull	r2, r3, r2, r3
 800add8:	0adb      	lsrs	r3, r3, #11
 800adda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800adde:	fb02 f303 	mul.w	r3, r2, r3
 800ade2:	613b      	str	r3, [r7, #16]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <HAL_RTC_SetAlarm_IT+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	22ff      	movs	r2, #255	@ 0xff
 800adf6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2203      	movs	r2, #3
 800adfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e031      	b.n	800ae6c <HAL_RTC_SetAlarm_IT+0x250>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d0e6      	beq.n	800ade4 <HAL_RTC_SetAlarm_IT+0x1c8>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	621a      	str	r2, [r3, #32]
#if defined(RTC_SUBSECOND_SUPPORT)
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* RTC_SUBSECOND_SUPPORT */
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	689a      	ldr	r2, [r3, #8]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae2c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ae3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ae3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae7c <HAL_RTC_SetAlarm_IT+0x260>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a0e      	ldr	r2, [pc, #56]	@ (800ae7c <HAL_RTC_SetAlarm_IT+0x260>)
 800ae44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae48:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800ae4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae7c <HAL_RTC_SetAlarm_IT+0x260>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	4a0b      	ldr	r2, [pc, #44]	@ (800ae7c <HAL_RTC_SetAlarm_IT+0x260>)
 800ae50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae54:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	22ff      	movs	r2, #255	@ 0xff
 800ae5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2201      	movs	r2, #1
 800ae62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	371c      	adds	r7, #28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd90      	pop	{r4, r7, pc}
 800ae74:	20000004 	.word	0x20000004
 800ae78:	10624dd3 	.word	0x10624dd3
 800ae7c:	40010400 	.word	0x40010400

0800ae80 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7f1b      	ldrb	r3, [r3, #28]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <HAL_RTC_DeactivateAlarm+0x1a>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e07b      	b.n	800af92 <HAL_RTC_DeactivateAlarm+0x112>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	22ca      	movs	r2, #202	@ 0xca
 800aeac:	625a      	str	r2, [r3, #36]	@ 0x24
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2253      	movs	r2, #83	@ 0x53
 800aeb4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aebc:	d12f      	bne.n	800af1e <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aecc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aedc:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aede:	f7fa fa39 	bl	8005354 <HAL_GetTick>
 800aee2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800aee4:	e013      	b.n	800af0e <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aee6:	f7fa fa35 	bl	8005354 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aef4:	d90b      	bls.n	800af0e <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	22ff      	movs	r2, #255	@ 0xff
 800aefc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2203      	movs	r2, #3
 800af02:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e041      	b.n	800af92 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0e4      	beq.n	800aee6 <HAL_RTC_DeactivateAlarm+0x66>
 800af1c:	e02e      	b.n	800af7c <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800af2c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af3c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af3e:	f7fa fa09 	bl	8005354 <HAL_GetTick>
 800af42:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800af44:	e013      	b.n	800af6e <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af46:	f7fa fa05 	bl	8005354 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af54:	d90b      	bls.n	800af6e <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	22ff      	movs	r2, #255	@ 0xff
 800af5c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2203      	movs	r2, #3
 800af62:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e011      	b.n	800af92 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d0e4      	beq.n	800af46 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	22ff      	movs	r2, #255	@ 0xff
 800af82:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800afa4:	4b1f      	ldr	r3, [pc, #124]	@ (800b024 <HAL_RTC_AlarmIRQHandler+0x88>)
 800afa6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800afaa:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d012      	beq.n	800afe0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800afd8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7f8 f8d4 	bl	8003188 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d012      	beq.n	800b014 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	b2da      	uxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b00c:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f8be 	bl	800b190 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	775a      	strb	r2, [r3, #29]
}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40010400 	.word	0x40010400

0800b028 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800b03c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b03e:	f7fa f989 	bl	8005354 <HAL_GetTick>
 800b042:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b044:	e009      	b.n	800b05a <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b046:	f7fa f985 	bl	8005354 <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b054:	d901      	bls.n	800b05a <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e007      	b.n	800b06a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	f003 0320 	and.w	r3, r3, #32
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0ee      	beq.n	800b046 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d122      	bne.n	800b0d6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b09e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0a0:	f7fa f958 	bl	8005354 <HAL_GetTick>
 800b0a4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b0a6:	e00c      	b.n	800b0c2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0a8:	f7fa f954 	bl	8005354 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b0b6:	d904      	bls.n	800b0c2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2204      	movs	r2, #4
 800b0bc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d102      	bne.n	800b0d6 <RTC_EnterInitMode+0x64>
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d1e8      	bne.n	800b0a8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0fa:	60da      	str	r2, [r3, #12]
      hrtc->State = HAL_RTC_STATE_ERROR;
      status = HAL_ERROR;
    }
  }
#else /* RTC_CR_BYPSHAD */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff ff93 	bl	800b028 <HAL_RTC_WaitForSynchro>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2204      	movs	r2, #4
 800b10c:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	73fb      	strb	r3, [r7, #15]
  }
#endif /* RTC_CR_BYPSHAD */

  return status;
 800b112:	7bfb      	ldrb	r3, [r7, #15]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b12a:	e005      	b.n	800b138 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3301      	adds	r3, #1
 800b130:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	3b0a      	subs	r3, #10
 800b136:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b09      	cmp	r3, #9
 800b13c:	d8f6      	bhi.n	800b12c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	011b      	lsls	r3, r3, #4
 800b144:	b2da      	uxtb	r2, r3
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	4313      	orrs	r3, r2
 800b14a:	b2db      	uxtb	r3, r3
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	4603      	mov	r3, r0
 800b15e:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	091b      	lsrs	r3, r3, #4
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	79fb      	ldrb	r3, [r7, #7]
 800b17c:	f003 030f 	and.w	r3, r3, #15
 800b180:	b2db      	uxtb	r3, r3
 800b182:	4413      	add	r3, r2
 800b184:	b2db      	uxtb	r3, r3
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bc80      	pop	{r7}
 800b18e:	4770      	bx	lr

0800b190 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bc80      	pop	{r7}
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e06e      	b.n	800b292 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d108      	bne.n	800b1ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1c4:	d009      	beq.n	800b1da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	61da      	str	r2, [r3, #28]
 800b1cc:	e005      	b.n	800b1da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d106      	bne.n	800b1fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7f9 fe25 	bl	8004e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b210:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b22c:	431a      	orrs	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	431a      	orrs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b24a:	431a      	orrs	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b25e:	ea42 0103 	orr.w	r1, r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b266:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	0c1a      	lsrs	r2, r3, #16
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f002 0204 	and.w	r2, r2, #4
 800b280:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b088      	sub	sp, #32
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	603b      	str	r3, [r7, #0]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2aa:	f7fa f853 	bl	8005354 <HAL_GetTick>
 800b2ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d001      	beq.n	800b2c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e12a      	b.n	800b51a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <HAL_SPI_Transmit+0x36>
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e122      	b.n	800b51a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d101      	bne.n	800b2e2 <HAL_SPI_Transmit+0x48>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e11b      	b.n	800b51a <HAL_SPI_Transmit+0x280>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	88fa      	ldrh	r2, [r7, #6]
 800b302:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	88fa      	ldrh	r2, [r7, #6]
 800b308:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b330:	d10f      	bne.n	800b352 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b350:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35c:	2b40      	cmp	r3, #64	@ 0x40
 800b35e:	d007      	beq.n	800b370 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b36e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b378:	d152      	bne.n	800b420 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <HAL_SPI_Transmit+0xee>
 800b382:	8b7b      	ldrh	r3, [r7, #26]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d145      	bne.n	800b414 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38c:	881a      	ldrh	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b398:	1c9a      	adds	r2, r3, #2
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b3ac:	e032      	b.n	800b414 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d112      	bne.n	800b3e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c0:	881a      	ldrh	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3cc:	1c9a      	adds	r2, r3, #2
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b3e0:	e018      	b.n	800b414 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3e2:	f7f9 ffb7 	bl	8005354 <HAL_GetTick>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d803      	bhi.n	800b3fa <HAL_SPI_Transmit+0x160>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f8:	d102      	bne.n	800b400 <HAL_SPI_Transmit+0x166>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d109      	bne.n	800b414 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e082      	b.n	800b51a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b418:	b29b      	uxth	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1c7      	bne.n	800b3ae <HAL_SPI_Transmit+0x114>
 800b41e:	e053      	b.n	800b4c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <HAL_SPI_Transmit+0x194>
 800b428:	8b7b      	ldrh	r3, [r7, #26]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d147      	bne.n	800b4be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	330c      	adds	r3, #12
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b454:	e033      	b.n	800b4be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	2b02      	cmp	r3, #2
 800b462:	d113      	bne.n	800b48c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	330c      	adds	r3, #12
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b48a:	e018      	b.n	800b4be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b48c:	f7f9 ff62 	bl	8005354 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d803      	bhi.n	800b4a4 <HAL_SPI_Transmit+0x20a>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a2:	d102      	bne.n	800b4aa <HAL_SPI_Transmit+0x210>
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d109      	bne.n	800b4be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e02d      	b.n	800b51a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1c6      	bne.n	800b456 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4c8:	69fa      	ldr	r2, [r7, #28]
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fbd9 	bl	800bc84 <SPI_EndRxTxTransaction>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10a      	bne.n	800b4fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	617b      	str	r3, [r7, #20]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e000      	b.n	800b51a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b518:	2300      	movs	r3, #0
  }
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES 
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af02      	add	r7, sp, #8
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	603b      	str	r3, [r7, #0]
 800b52e:	4613      	mov	r3, r2
 800b530:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d001      	beq.n	800b542 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b53e:	2302      	movs	r3, #2
 800b540:	e104      	b.n	800b74c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <HAL_SPI_Receive+0x2c>
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e0fc      	b.n	800b74c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b55a:	d112      	bne.n	800b582 <HAL_SPI_Receive+0x60>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10e      	bne.n	800b582 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2204      	movs	r2, #4
 800b568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b56c:	88fa      	ldrh	r2, [r7, #6]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	4613      	mov	r3, r2
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 f8eb 	bl	800b754 <HAL_SPI_TransmitReceive>
 800b57e:	4603      	mov	r3, r0
 800b580:	e0e4      	b.n	800b74c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b582:	f7f9 fee7 	bl	8005354 <HAL_GetTick>
 800b586:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <HAL_SPI_Receive+0x74>
 800b592:	2302      	movs	r3, #2
 800b594:	e0da      	b.n	800b74c <HAL_SPI_Receive+0x22a>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2204      	movs	r2, #4
 800b5a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	68ba      	ldr	r2, [r7, #8]
 800b5b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	88fa      	ldrh	r2, [r7, #6]
 800b5b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	88fa      	ldrh	r2, [r7, #6]
 800b5bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5e4:	d10f      	bne.n	800b606 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b604:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b610:	2b40      	cmp	r3, #64	@ 0x40
 800b612:	d007      	beq.n	800b624 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b622:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d170      	bne.n	800b70e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b62c:	e035      	b.n	800b69a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d115      	bne.n	800b668 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f103 020c 	add.w	r2, r3, #12
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b648:	7812      	ldrb	r2, [r2, #0]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3b01      	subs	r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b666:	e018      	b.n	800b69a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b668:	f7f9 fe74 	bl	8005354 <HAL_GetTick>
 800b66c:	4602      	mov	r2, r0
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	429a      	cmp	r2, r3
 800b676:	d803      	bhi.n	800b680 <HAL_SPI_Receive+0x15e>
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67e:	d102      	bne.n	800b686 <HAL_SPI_Receive+0x164>
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d109      	bne.n	800b69a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e058      	b.n	800b74c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1c4      	bne.n	800b62e <HAL_SPI_Receive+0x10c>
 800b6a4:	e038      	b.n	800b718 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d113      	bne.n	800b6dc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6be:	b292      	uxth	r2, r2
 800b6c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c6:	1c9a      	adds	r2, r3, #2
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b6da:	e018      	b.n	800b70e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6dc:	f7f9 fe3a 	bl	8005354 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d803      	bhi.n	800b6f4 <HAL_SPI_Receive+0x1d2>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f2:	d102      	bne.n	800b6fa <HAL_SPI_Receive+0x1d8>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e01e      	b.n	800b74c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b712:	b29b      	uxth	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1c6      	bne.n	800b6a6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 fa4b 	bl	800bbb8 <SPI_EndRxTransaction>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800b74a:	2300      	movs	r3, #0
  }
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08a      	sub	sp, #40	@ 0x28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b762:	2301      	movs	r3, #1
 800b764:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b766:	f7f9 fdf5 	bl	8005354 <HAL_GetTick>
 800b76a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b772:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b77a:	887b      	ldrh	r3, [r7, #2]
 800b77c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d00c      	beq.n	800b79e <HAL_SPI_TransmitReceive+0x4a>
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b78a:	d106      	bne.n	800b79a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <HAL_SPI_TransmitReceive+0x46>
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	2b04      	cmp	r3, #4
 800b798:	d001      	beq.n	800b79e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
 800b79c:	e17f      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <HAL_SPI_TransmitReceive+0x5c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <HAL_SPI_TransmitReceive+0x5c>
 800b7aa:	887b      	ldrh	r3, [r7, #2]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e174      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_SPI_TransmitReceive+0x6e>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e16d      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d003      	beq.n	800b7de <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2205      	movs	r2, #5
 800b7da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	887a      	ldrh	r2, [r7, #2]
 800b7ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	887a      	ldrh	r2, [r7, #2]
 800b7f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	887a      	ldrh	r2, [r7, #2]
 800b800:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	887a      	ldrh	r2, [r7, #2]
 800b806:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b81e:	2b40      	cmp	r3, #64	@ 0x40
 800b820:	d007      	beq.n	800b832 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b830:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b83a:	d17e      	bne.n	800b93a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <HAL_SPI_TransmitReceive+0xf6>
 800b844:	8afb      	ldrh	r3, [r7, #22]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d16c      	bne.n	800b924 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84e:	881a      	ldrh	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85a:	1c9a      	adds	r2, r3, #2
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b864:	b29b      	uxth	r3, r3
 800b866:	3b01      	subs	r3, #1
 800b868:	b29a      	uxth	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b86e:	e059      	b.n	800b924 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d11b      	bne.n	800b8b6 <HAL_SPI_TransmitReceive+0x162>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d016      	beq.n	800b8b6 <HAL_SPI_TransmitReceive+0x162>
 800b888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d113      	bne.n	800b8b6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b892:	881a      	ldrh	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b89e:	1c9a      	adds	r2, r3, #2
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d119      	bne.n	800b8f8 <HAL_SPI_TransmitReceive+0x1a4>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d014      	beq.n	800b8f8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8e0:	1c9a      	adds	r2, r3, #2
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	b29a      	uxth	r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b8f8:	f7f9 fd2c 	bl	8005354 <HAL_GetTick>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b904:	429a      	cmp	r2, r3
 800b906:	d80d      	bhi.n	800b924 <HAL_SPI_TransmitReceive+0x1d0>
 800b908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90e:	d009      	beq.n	800b924 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e0bc      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b928:	b29b      	uxth	r3, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1a0      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x11c>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b932:	b29b      	uxth	r3, r3
 800b934:	2b00      	cmp	r3, #0
 800b936:	d19b      	bne.n	800b870 <HAL_SPI_TransmitReceive+0x11c>
 800b938:	e082      	b.n	800ba40 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d002      	beq.n	800b948 <HAL_SPI_TransmitReceive+0x1f4>
 800b942:	8afb      	ldrh	r3, [r7, #22]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d171      	bne.n	800ba2c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	330c      	adds	r3, #12
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b964:	b29b      	uxth	r3, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	b29a      	uxth	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b96e:	e05d      	b.n	800ba2c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d11c      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x264>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b982:	b29b      	uxth	r3, r3
 800b984:	2b00      	cmp	r3, #0
 800b986:	d017      	beq.n	800b9b8 <HAL_SPI_TransmitReceive+0x264>
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d114      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	7812      	ldrb	r2, [r2, #0]
 800b99a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d119      	bne.n	800b9fa <HAL_SPI_TransmitReceive+0x2a6>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d014      	beq.n	800b9fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9da:	b2d2      	uxtb	r2, r2
 800b9dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b9fa:	f7f9 fcab 	bl	8005354 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d803      	bhi.n	800ba12 <HAL_SPI_TransmitReceive+0x2be>
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba10:	d102      	bne.n	800ba18 <HAL_SPI_TransmitReceive+0x2c4>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d109      	bne.n	800ba2c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e038      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d19c      	bne.n	800b970 <HAL_SPI_TransmitReceive+0x21c>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d197      	bne.n	800b970 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba40:	6a3a      	ldr	r2, [r7, #32]
 800ba42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 f91d 	bl	800bc84 <SPI_EndRxTxTransaction>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d008      	beq.n	800ba62 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2220      	movs	r2, #32
 800ba54:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e01d      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	613b      	str	r3, [r7, #16]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	613b      	str	r3, [r7, #16]
 800ba7e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e000      	b.n	800ba9e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
  }
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	@ 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	4613      	mov	r3, r2
 800bab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bab8:	f7f9 fc4c 	bl	8005354 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	4413      	add	r3, r2
 800bac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bac8:	f7f9 fc44 	bl	8005354 <HAL_GetTick>
 800bacc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bace:	4b39      	ldr	r3, [pc, #228]	@ (800bbb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	015b      	lsls	r3, r3, #5
 800bad4:	0d1b      	lsrs	r3, r3, #20
 800bad6:	69fa      	ldr	r2, [r7, #28]
 800bad8:	fb02 f303 	mul.w	r3, r2, r3
 800badc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bade:	e054      	b.n	800bb8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae6:	d050      	beq.n	800bb8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bae8:	f7f9 fc34 	bl	8005354 <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d902      	bls.n	800bafe <SPI_WaitFlagStateUntilTimeout+0x56>
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d13d      	bne.n	800bb7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bb0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb16:	d111      	bne.n	800bb3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb20:	d004      	beq.n	800bb2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb2a:	d107      	bne.n	800bb3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bb3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb44:	d10f      	bne.n	800bb66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e017      	b.n	800bbaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4013      	ands	r3, r2
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	bf0c      	ite	eq
 800bb9a:	2301      	moveq	r3, #1
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d19b      	bne.n	800bae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3720      	adds	r7, #32
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000004 	.word	0x20000004

0800bbb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bbcc:	d111      	bne.n	800bbf2 <SPI_EndRxTransaction+0x3a>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbd6:	d004      	beq.n	800bbe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbe0:	d107      	bne.n	800bbf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbf0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bbfa:	d12a      	bne.n	800bc52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc04:	d012      	beq.n	800bc2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2180      	movs	r1, #128	@ 0x80
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7ff ff49 	bl	800baa8 <SPI_WaitFlagStateUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d02d      	beq.n	800bc78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc20:	f043 0220 	orr.w	r2, r3, #32
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e026      	b.n	800bc7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	2101      	movs	r1, #1
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f7ff ff36 	bl	800baa8 <SPI_WaitFlagStateUntilTimeout>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d01a      	beq.n	800bc78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc46:	f043 0220 	orr.w	r2, r3, #32
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e013      	b.n	800bc7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff ff23 	bl	800baa8 <SPI_WaitFlagStateUntilTimeout>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc6c:	f043 0220 	orr.w	r2, r3, #32
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e000      	b.n	800bc7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2201      	movs	r2, #1
 800bc98:	2102      	movs	r1, #2
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff ff04 	bl	800baa8 <SPI_WaitFlagStateUntilTimeout>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcaa:	f043 0220 	orr.w	r2, r3, #32
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e032      	b.n	800bd1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bcb6:	4b1b      	ldr	r3, [pc, #108]	@ (800bd24 <SPI_EndRxTxTransaction+0xa0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a1b      	ldr	r2, [pc, #108]	@ (800bd28 <SPI_EndRxTxTransaction+0xa4>)
 800bcbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc0:	0d5b      	lsrs	r3, r3, #21
 800bcc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bcc6:	fb02 f303 	mul.w	r3, r2, r3
 800bcca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bcd4:	d112      	bne.n	800bcfc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2180      	movs	r1, #128	@ 0x80
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff fee1 	bl	800baa8 <SPI_WaitFlagStateUntilTimeout>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d016      	beq.n	800bd1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf0:	f043 0220 	orr.w	r2, r3, #32
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e00f      	b.n	800bd1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd12:	2b80      	cmp	r3, #128	@ 0x80
 800bd14:	d0f2      	beq.n	800bcfc <SPI_EndRxTxTransaction+0x78>
 800bd16:	e000      	b.n	800bd1a <SPI_EndRxTxTransaction+0x96>
        break;
 800bd18:	bf00      	nop
  }

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	20000004 	.word	0x20000004
 800bd28:	165e9f81 	.word	0x165e9f81

0800bd2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e031      	b.n	800bda2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7f9 f8ec 	bl	8004f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4610      	mov	r0, r2
 800bd6c:	f000 fa4e 	bl	800c20c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d001      	beq.n	800bdc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e03a      	b.n	800be3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f042 0201 	orr.w	r2, r2, #1
 800bdda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bde4:	d00e      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x58>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a16      	ldr	r2, [pc, #88]	@ (800be44 <HAL_TIM_Base_Start_IT+0x98>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d009      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x58>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a14      	ldr	r2, [pc, #80]	@ (800be48 <HAL_TIM_Base_Start_IT+0x9c>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d004      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x58>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a13      	ldr	r2, [pc, #76]	@ (800be4c <HAL_TIM_Base_Start_IT+0xa0>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d111      	bne.n	800be28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b06      	cmp	r3, #6
 800be14:	d010      	beq.n	800be38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be26:	e007      	b.n	800be38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f042 0201 	orr.w	r2, r2, #1
 800be36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	bc80      	pop	{r7}
 800be42:	4770      	bx	lr
 800be44:	40000400 	.word	0x40000400
 800be48:	40000800 	.word	0x40000800
 800be4c:	40010800 	.word	0x40010800

0800be50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f022 0201 	bic.w	r2, r2, #1
 800be66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6a1a      	ldr	r2, [r3, #32]
 800be6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800be72:	4013      	ands	r3, r2
 800be74:	2b00      	cmp	r3, #0
 800be76:	d107      	bne.n	800be88 <HAL_TIM_Base_Stop_IT+0x38>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f022 0201 	bic.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	bc80      	pop	{r7}
 800be9a:	4770      	bx	lr

0800be9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d020      	beq.n	800bf00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f003 0302 	and.w	r3, r3, #2
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d01b      	beq.n	800bf00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f06f 0202 	mvn.w	r2, #2
 800bed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	f003 0303 	and.w	r3, r3, #3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f974 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800beec:	e005      	b.n	800befa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f967 	bl	800c1c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f976 	bl	800c1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d020      	beq.n	800bf4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01b      	beq.n	800bf4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f06f 0204 	mvn.w	r2, #4
 800bf1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2202      	movs	r2, #2
 800bf22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d003      	beq.n	800bf3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f94e 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bf38:	e005      	b.n	800bf46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f941 	bl	800c1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f950 	bl	800c1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d020      	beq.n	800bf98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d01b      	beq.n	800bf98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f06f 0208 	mvn.w	r2, #8
 800bf68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f928 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bf84:	e005      	b.n	800bf92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f91b 	bl	800c1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f92a 	bl	800c1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f003 0310 	and.w	r3, r3, #16
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d020      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f003 0310 	and.w	r3, r3, #16
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01b      	beq.n	800bfe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f06f 0210 	mvn.w	r2, #16
 800bfb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2208      	movs	r2, #8
 800bfba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d003      	beq.n	800bfd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f902 	bl	800c1d4 <HAL_TIM_IC_CaptureCallback>
 800bfd0:	e005      	b.n	800bfde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f8f5 	bl	800c1c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 f904 	bl	800c1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00c      	beq.n	800c008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d007      	beq.n	800c008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f06f 0201 	mvn.w	r2, #1
 800c000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7f7 f8d8 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00c      	beq.n	800c02c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f8e6 	bl	800c1f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c02c:	bf00      	nop
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d101      	bne.n	800c050 <HAL_TIM_ConfigClockSource+0x1c>
 800c04c:	2302      	movs	r3, #2
 800c04e:	e0b4      	b.n	800c1ba <HAL_TIM_ConfigClockSource+0x186>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c06e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c088:	d03e      	beq.n	800c108 <HAL_TIM_ConfigClockSource+0xd4>
 800c08a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c08e:	f200 8087 	bhi.w	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c096:	f000 8086 	beq.w	800c1a6 <HAL_TIM_ConfigClockSource+0x172>
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c09e:	d87f      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0a0:	2b70      	cmp	r3, #112	@ 0x70
 800c0a2:	d01a      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0xa6>
 800c0a4:	2b70      	cmp	r3, #112	@ 0x70
 800c0a6:	d87b      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0a8:	2b60      	cmp	r3, #96	@ 0x60
 800c0aa:	d050      	beq.n	800c14e <HAL_TIM_ConfigClockSource+0x11a>
 800c0ac:	2b60      	cmp	r3, #96	@ 0x60
 800c0ae:	d877      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0b0:	2b50      	cmp	r3, #80	@ 0x50
 800c0b2:	d03c      	beq.n	800c12e <HAL_TIM_ConfigClockSource+0xfa>
 800c0b4:	2b50      	cmp	r3, #80	@ 0x50
 800c0b6:	d873      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0b8:	2b40      	cmp	r3, #64	@ 0x40
 800c0ba:	d058      	beq.n	800c16e <HAL_TIM_ConfigClockSource+0x13a>
 800c0bc:	2b40      	cmp	r3, #64	@ 0x40
 800c0be:	d86f      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0c0:	2b30      	cmp	r3, #48	@ 0x30
 800c0c2:	d064      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x15a>
 800c0c4:	2b30      	cmp	r3, #48	@ 0x30
 800c0c6:	d86b      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0c8:	2b20      	cmp	r3, #32
 800c0ca:	d060      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x15a>
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d867      	bhi.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d05c      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x15a>
 800c0d4:	2b10      	cmp	r3, #16
 800c0d6:	d05a      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x15a>
 800c0d8:	e062      	b.n	800c1a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0ea:	f000 f96e 	bl	800c3ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c0fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	609a      	str	r2, [r3, #8]
      break;
 800c106:	e04f      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c118:	f000 f957 	bl	800c3ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	689a      	ldr	r2, [r3, #8]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c12a:	609a      	str	r2, [r3, #8]
      break;
 800c12c:	e03c      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c13a:	461a      	mov	r2, r3
 800c13c:	f000 f8ce 	bl	800c2dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2150      	movs	r1, #80	@ 0x50
 800c146:	4618      	mov	r0, r3
 800c148:	f000 f925 	bl	800c396 <TIM_ITRx_SetConfig>
      break;
 800c14c:	e02c      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c15a:	461a      	mov	r2, r3
 800c15c:	f000 f8ec 	bl	800c338 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2160      	movs	r1, #96	@ 0x60
 800c166:	4618      	mov	r0, r3
 800c168:	f000 f915 	bl	800c396 <TIM_ITRx_SetConfig>
      break;
 800c16c:	e01c      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c17a:	461a      	mov	r2, r3
 800c17c:	f000 f8ae 	bl	800c2dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2140      	movs	r1, #64	@ 0x40
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f905 	bl	800c396 <TIM_ITRx_SetConfig>
      break;
 800c18c:	e00c      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f000 f8fc 	bl	800c396 <TIM_ITRx_SetConfig>
      break;
 800c19e:	e003      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1a4:	e000      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b083      	sub	sp, #12
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1ca:	bf00      	nop
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bc80      	pop	{r7}
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bc80      	pop	{r7}
 800c1e4:	4770      	bx	lr

0800c1e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bc80      	pop	{r7}
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	bc80      	pop	{r7}
 800c208:	4770      	bx	lr
	...

0800c20c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c222:	d007      	beq.n	800c234 <TIM_Base_SetConfig+0x28>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a28      	ldr	r2, [pc, #160]	@ (800c2c8 <TIM_Base_SetConfig+0xbc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d003      	beq.n	800c234 <TIM_Base_SetConfig+0x28>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a27      	ldr	r2, [pc, #156]	@ (800c2cc <TIM_Base_SetConfig+0xc0>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d108      	bne.n	800c246 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24c:	d013      	beq.n	800c276 <TIM_Base_SetConfig+0x6a>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a1d      	ldr	r2, [pc, #116]	@ (800c2c8 <TIM_Base_SetConfig+0xbc>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d00f      	beq.n	800c276 <TIM_Base_SetConfig+0x6a>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a1c      	ldr	r2, [pc, #112]	@ (800c2cc <TIM_Base_SetConfig+0xc0>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d00b      	beq.n	800c276 <TIM_Base_SetConfig+0x6a>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4a1b      	ldr	r2, [pc, #108]	@ (800c2d0 <TIM_Base_SetConfig+0xc4>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d007      	beq.n	800c276 <TIM_Base_SetConfig+0x6a>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a1a      	ldr	r2, [pc, #104]	@ (800c2d4 <TIM_Base_SetConfig+0xc8>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d003      	beq.n	800c276 <TIM_Base_SetConfig+0x6a>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a19      	ldr	r2, [pc, #100]	@ (800c2d8 <TIM_Base_SetConfig+0xcc>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d108      	bne.n	800c288 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c27c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	4313      	orrs	r3, r2
 800c286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	689a      	ldr	r2, [r3, #8]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f043 0204 	orr.w	r2, r3, #4
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]
}
 800c2be:	bf00      	nop
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr
 800c2c8:	40000400 	.word	0x40000400
 800c2cc:	40000800 	.word	0x40000800
 800c2d0:	40010800 	.word	0x40010800
 800c2d4:	40010c00 	.word	0x40010c00
 800c2d8:	40011000 	.word	0x40011000

0800c2dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6a1b      	ldr	r3, [r3, #32]
 800c2ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a1b      	ldr	r3, [r3, #32]
 800c2f2:	f023 0201 	bic.w	r2, r3, #1
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	011b      	lsls	r3, r3, #4
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	4313      	orrs	r3, r2
 800c310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f023 030a 	bic.w	r3, r3, #10
 800c318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	4313      	orrs	r3, r2
 800c320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	621a      	str	r2, [r3, #32]
}
 800c32e:	bf00      	nop
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	bc80      	pop	{r7}
 800c336:	4770      	bx	lr

0800c338 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6a1b      	ldr	r3, [r3, #32]
 800c348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	f023 0210 	bic.w	r2, r3, #16
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	031b      	lsls	r3, r3, #12
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c374:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	621a      	str	r2, [r3, #32]
}
 800c38c:	bf00      	nop
 800c38e:	371c      	adds	r7, #28
 800c390:	46bd      	mov	sp, r7
 800c392:	bc80      	pop	{r7}
 800c394:	4770      	bx	lr

0800c396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	f043 0307 	orr.w	r3, r3, #7
 800c3b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	609a      	str	r2, [r3, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bc80      	pop	{r7}
 800c3c8:	4770      	bx	lr

0800c3ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b087      	sub	sp, #28
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
 800c3d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	021a      	lsls	r2, r3, #8
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	431a      	orrs	r2, r3
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	609a      	str	r2, [r3, #8]
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	bc80      	pop	{r7}
 800c406:	4770      	bx	lr

0800c408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d101      	bne.n	800c420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c41c:	2302      	movs	r3, #2
 800c41e:	e046      	b.n	800c4ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c462:	d00e      	beq.n	800c482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a13      	ldr	r2, [pc, #76]	@ (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d009      	beq.n	800c482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a12      	ldr	r2, [pc, #72]	@ (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d004      	beq.n	800c482 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a10      	ldr	r2, [pc, #64]	@ (800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d10c      	bne.n	800c49c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	4313      	orrs	r3, r2
 800c492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bc80      	pop	{r7}
 800c4b6:	4770      	bx	lr
 800c4b8:	40000400 	.word	0x40000400
 800c4bc:	40000800 	.word	0x40000800
 800c4c0:	40010800 	.word	0x40010800

0800c4c4 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 800c4c4:	b5b0      	push	{r4, r5, r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	777b      	strb	r3, [r7, #29]
 800c4d6:	e01b      	b.n	800c510 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	77bb      	strb	r3, [r7, #30]
 800c4dc:	e012      	b.n	800c504 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800c4de:	7fba      	ldrb	r2, [r7, #30]
 800c4e0:	7f7b      	ldrb	r3, [r7, #29]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	1899      	adds	r1, r3, r2
 800c4ec:	7fba      	ldrb	r2, [r7, #30]
 800c4ee:	7f7b      	ldrb	r3, [r7, #29]
 800c4f0:	7808      	ldrb	r0, [r1, #0]
 800c4f2:	4961      	ldr	r1, [pc, #388]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	440a      	add	r2, r1
 800c4f8:	4413      	add	r3, r2
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c4fe:	7fbb      	ldrb	r3, [r7, #30]
 800c500:	3301      	adds	r3, #1
 800c502:	77bb      	strb	r3, [r7, #30]
 800c504:	7fbb      	ldrb	r3, [r7, #30]
 800c506:	2b03      	cmp	r3, #3
 800c508:	d9e9      	bls.n	800c4de <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800c50a:	7f7b      	ldrb	r3, [r7, #29]
 800c50c:	3301      	adds	r3, #1
 800c50e:	777b      	strb	r3, [r7, #29]
 800c510:	7f7b      	ldrb	r3, [r7, #29]
 800c512:	2b03      	cmp	r3, #3
 800c514:	d9e0      	bls.n	800c4d8 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800c516:	2300      	movs	r3, #0
 800c518:	77fb      	strb	r3, [r7, #31]
 800c51a:	e00b      	b.n	800c534 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800c51c:	7ffb      	ldrb	r3, [r7, #31]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	441a      	add	r2, r3
 800c522:	7ffb      	ldrb	r3, [r7, #31]
 800c524:	7812      	ldrb	r2, [r2, #0]
 800c526:	3320      	adds	r3, #32
 800c528:	443b      	add	r3, r7
 800c52a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800c52e:	7ffb      	ldrb	r3, [r7, #31]
 800c530:	3301      	adds	r3, #1
 800c532:	77fb      	strb	r3, [r7, #31]
 800c534:	7ffb      	ldrb	r3, [r7, #31]
 800c536:	2b0f      	cmp	r3, #15
 800c538:	d9f0      	bls.n	800c51c <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800c53a:	f107 030c 	add.w	r3, r7, #12
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f89c 	bl	800c67c <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 800c544:	2301      	movs	r3, #1
 800c546:	773b      	strb	r3, [r7, #28]
 800c548:	e038      	b.n	800c5bc <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 800c54a:	2300      	movs	r3, #0
 800c54c:	777b      	strb	r3, [r7, #29]
 800c54e:	e01f      	b.n	800c590 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800c550:	2300      	movs	r3, #0
 800c552:	77bb      	strb	r3, [r7, #30]
 800c554:	e016      	b.n	800c584 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c556:	7fba      	ldrb	r2, [r7, #30]
 800c558:	7f7b      	ldrb	r3, [r7, #29]
 800c55a:	4947      	ldr	r1, [pc, #284]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c55c:	0092      	lsls	r2, r2, #2
 800c55e:	440a      	add	r2, r1
 800c560:	4413      	add	r3, r2
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	7fbd      	ldrb	r5, [r7, #30]
 800c566:	7f7c      	ldrb	r4, [r7, #29]
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 f8bf 	bl	800c6ec <AES_Sub_Byte>
 800c56e:	4603      	mov	r3, r0
 800c570:	4619      	mov	r1, r3
 800c572:	4a41      	ldr	r2, [pc, #260]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c574:	00ab      	lsls	r3, r5, #2
 800c576:	4413      	add	r3, r2
 800c578:	4423      	add	r3, r4
 800c57a:	460a      	mov	r2, r1
 800c57c:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800c57e:	7fbb      	ldrb	r3, [r7, #30]
 800c580:	3301      	adds	r3, #1
 800c582:	77bb      	strb	r3, [r7, #30]
 800c584:	7fbb      	ldrb	r3, [r7, #30]
 800c586:	2b03      	cmp	r3, #3
 800c588:	d9e5      	bls.n	800c556 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 800c58a:	7f7b      	ldrb	r3, [r7, #29]
 800c58c:	3301      	adds	r3, #1
 800c58e:	777b      	strb	r3, [r7, #29]
 800c590:	7f7b      	ldrb	r3, [r7, #29]
 800c592:	2b03      	cmp	r3, #3
 800c594:	d9dc      	bls.n	800c550 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 800c596:	f000 f8c5 	bl	800c724 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 800c59a:	f000 f905 	bl	800c7a8 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800c59e:	f107 020c 	add.w	r2, r7, #12
 800c5a2:	7f3b      	ldrb	r3, [r7, #28]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f994 	bl	800c8d4 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800c5ac:	f107 030c 	add.w	r3, r7, #12
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 f863 	bl	800c67c <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 800c5b6:	7f3b      	ldrb	r3, [r7, #28]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	773b      	strb	r3, [r7, #28]
 800c5bc:	7f3b      	ldrb	r3, [r7, #28]
 800c5be:	2b09      	cmp	r3, #9
 800c5c0:	d9c3      	bls.n	800c54a <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	777b      	strb	r3, [r7, #29]
 800c5c6:	e01f      	b.n	800c608 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	77bb      	strb	r3, [r7, #30]
 800c5cc:	e016      	b.n	800c5fc <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800c5ce:	7fba      	ldrb	r2, [r7, #30]
 800c5d0:	7f7b      	ldrb	r3, [r7, #29]
 800c5d2:	4929      	ldr	r1, [pc, #164]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c5d4:	0092      	lsls	r2, r2, #2
 800c5d6:	440a      	add	r2, r1
 800c5d8:	4413      	add	r3, r2
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	7fbd      	ldrb	r5, [r7, #30]
 800c5de:	7f7c      	ldrb	r4, [r7, #29]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f000 f883 	bl	800c6ec <AES_Sub_Byte>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4a23      	ldr	r2, [pc, #140]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c5ec:	00ab      	lsls	r3, r5, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	4423      	add	r3, r4
 800c5f2:	460a      	mov	r2, r1
 800c5f4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c5f6:	7fbb      	ldrb	r3, [r7, #30]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	77bb      	strb	r3, [r7, #30]
 800c5fc:	7fbb      	ldrb	r3, [r7, #30]
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d9e5      	bls.n	800c5ce <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 800c602:	7f7b      	ldrb	r3, [r7, #29]
 800c604:	3301      	adds	r3, #1
 800c606:	777b      	strb	r3, [r7, #29]
 800c608:	7f7b      	ldrb	r3, [r7, #29]
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d9dc      	bls.n	800c5c8 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800c60e:	f000 f889 	bl	800c724 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 800c612:	f107 020c 	add.w	r2, r7, #12
 800c616:	7f3b      	ldrb	r3, [r7, #28]
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 f95a 	bl	800c8d4 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 800c620:	f107 030c 	add.w	r3, r7, #12
 800c624:	4618      	mov	r0, r3
 800c626:	f000 f829 	bl	800c67c <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800c62a:	2300      	movs	r3, #0
 800c62c:	777b      	strb	r3, [r7, #29]
 800c62e:	e01a      	b.n	800c666 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 800c630:	2300      	movs	r3, #0
 800c632:	77bb      	strb	r3, [r7, #30]
 800c634:	e011      	b.n	800c65a <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800c636:	7fb9      	ldrb	r1, [r7, #30]
 800c638:	7f7a      	ldrb	r2, [r7, #29]
 800c63a:	7fb8      	ldrb	r0, [r7, #30]
 800c63c:	7f7b      	ldrb	r3, [r7, #29]
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4403      	add	r3, r0
 800c642:	4618      	mov	r0, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4403      	add	r3, r0
 800c648:	480b      	ldr	r0, [pc, #44]	@ (800c678 <AES_Encrypt+0x1b4>)
 800c64a:	0089      	lsls	r1, r1, #2
 800c64c:	4401      	add	r1, r0
 800c64e:	440a      	add	r2, r1
 800c650:	7812      	ldrb	r2, [r2, #0]
 800c652:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c654:	7fbb      	ldrb	r3, [r7, #30]
 800c656:	3301      	adds	r3, #1
 800c658:	77bb      	strb	r3, [r7, #30]
 800c65a:	7fbb      	ldrb	r3, [r7, #30]
 800c65c:	2b03      	cmp	r3, #3
 800c65e:	d9ea      	bls.n	800c636 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800c660:	7f7b      	ldrb	r3, [r7, #29]
 800c662:	3301      	adds	r3, #1
 800c664:	777b      	strb	r3, [r7, #29]
 800c666:	7f7b      	ldrb	r3, [r7, #29]
 800c668:	2b03      	cmp	r3, #3
 800c66a:	d9e1      	bls.n	800c630 <AES_Encrypt+0x16c>
		}
	}

}
 800c66c:	bf00      	nop
 800c66e:	bf00      	nop
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bdb0      	pop	{r4, r5, r7, pc}
 800c676:	bf00      	nop
 800c678:	2000056c 	.word	0x2000056c

0800c67c <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800c684:	2300      	movs	r3, #0
 800c686:	73bb      	strb	r3, [r7, #14]
 800c688:	e024      	b.n	800c6d4 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 800c68a:	2300      	movs	r3, #0
 800c68c:	73fb      	strb	r3, [r7, #15]
 800c68e:	e01b      	b.n	800c6c8 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800c690:	7bfa      	ldrb	r2, [r7, #15]
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	4914      	ldr	r1, [pc, #80]	@ (800c6e8 <AES_Add_Round_Key+0x6c>)
 800c696:	0092      	lsls	r2, r2, #2
 800c698:	440a      	add	r2, r1
 800c69a:	4413      	add	r3, r2
 800c69c:	7818      	ldrb	r0, [r3, #0]
 800c69e:	7bfa      	ldrb	r2, [r7, #15]
 800c6a0:	7bbb      	ldrb	r3, [r7, #14]
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	7819      	ldrb	r1, [r3, #0]
 800c6ae:	7bfa      	ldrb	r2, [r7, #15]
 800c6b0:	7bbb      	ldrb	r3, [r7, #14]
 800c6b2:	4041      	eors	r1, r0
 800c6b4:	b2c8      	uxtb	r0, r1
 800c6b6:	490c      	ldr	r1, [pc, #48]	@ (800c6e8 <AES_Add_Round_Key+0x6c>)
 800c6b8:	0092      	lsls	r2, r2, #2
 800c6ba:	440a      	add	r2, r1
 800c6bc:	4413      	add	r3, r2
 800c6be:	4602      	mov	r2, r0
 800c6c0:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800c6c2:	7bfb      	ldrb	r3, [r7, #15]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	73fb      	strb	r3, [r7, #15]
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d9e0      	bls.n	800c690 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	73bb      	strb	r3, [r7, #14]
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
 800c6d6:	2b03      	cmp	r3, #3
 800c6d8:	d9d7      	bls.n	800c68a <AES_Add_Round_Key+0xe>
		}
	}
}
 800c6da:	bf00      	nop
 800c6dc:	bf00      	nop
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bc80      	pop	{r7}
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	2000056c 	.word	0x2000056c

0800c6ec <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 800c6f6:	79fb      	ldrb	r3, [r7, #7]
 800c6f8:	091b      	lsrs	r3, r3, #4
 800c6fa:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	f003 030f 	and.w	r3, r3, #15
 800c702:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 800c704:	7bfa      	ldrb	r2, [r7, #15]
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	4905      	ldr	r1, [pc, #20]	@ (800c720 <AES_Sub_Byte+0x34>)
 800c70a:	0112      	lsls	r2, r2, #4
 800c70c:	440a      	add	r2, r1
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 800c714:	7b7b      	ldrb	r3, [r7, #13]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bc80      	pop	{r7}
 800c71e:	4770      	bx	lr
 800c720:	20000010 	.word	0x20000010

0800c724 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800c72a:	4b1e      	ldr	r3, [pc, #120]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c72c:	791b      	ldrb	r3, [r3, #4]
 800c72e:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800c730:	4b1c      	ldr	r3, [pc, #112]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c732:	795a      	ldrb	r2, [r3, #5]
 800c734:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c736:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800c738:	4b1a      	ldr	r3, [pc, #104]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c73a:	799a      	ldrb	r2, [r3, #6]
 800c73c:	4b19      	ldr	r3, [pc, #100]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c73e:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800c740:	4b18      	ldr	r3, [pc, #96]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c742:	79da      	ldrb	r2, [r3, #7]
 800c744:	4b17      	ldr	r3, [pc, #92]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c746:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 800c748:	4a16      	ldr	r2, [pc, #88]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800c74e:	4b15      	ldr	r3, [pc, #84]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c750:	7a1b      	ldrb	r3, [r3, #8]
 800c752:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 800c754:	4b13      	ldr	r3, [pc, #76]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c756:	7a9a      	ldrb	r2, [r3, #10]
 800c758:	4b12      	ldr	r3, [pc, #72]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c75a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800c75c:	4a11      	ldr	r2, [pc, #68]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800c762:	4b10      	ldr	r3, [pc, #64]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c764:	7a5b      	ldrb	r3, [r3, #9]
 800c766:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 800c768:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c76a:	7ada      	ldrb	r2, [r3, #11]
 800c76c:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c76e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800c770:	4a0c      	ldr	r2, [pc, #48]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 800c776:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c778:	7bdb      	ldrb	r3, [r3, #15]
 800c77a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800c77c:	4b09      	ldr	r3, [pc, #36]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c77e:	7b9a      	ldrb	r2, [r3, #14]
 800c780:	4b08      	ldr	r3, [pc, #32]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c782:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 800c784:	4b07      	ldr	r3, [pc, #28]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c786:	7b5a      	ldrb	r2, [r3, #13]
 800c788:	4b06      	ldr	r3, [pc, #24]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c78a:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800c78c:	4b05      	ldr	r3, [pc, #20]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c78e:	7b1a      	ldrb	r2, [r3, #12]
 800c790:	4b04      	ldr	r3, [pc, #16]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c792:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 800c794:	4a03      	ldr	r2, [pc, #12]	@ (800c7a4 <AES_Shift_Rows+0x80>)
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	7313      	strb	r3, [r2, #12]
}
 800c79a:	bf00      	nop
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bc80      	pop	{r7}
 800c7a2:	4770      	bx	lr
 800c7a4:	2000056c 	.word	0x2000056c

0800c7a8 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	73bb      	strb	r3, [r7, #14]
 800c7b2:	e082      	b.n	800c8ba <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
 800c7b8:	e033      	b.n	800c822 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800c7ba:	7bf9      	ldrb	r1, [r7, #15]
 800c7bc:	7bba      	ldrb	r2, [r7, #14]
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	4843      	ldr	r0, [pc, #268]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c7c2:	0089      	lsls	r1, r1, #2
 800c7c4:	4401      	add	r1, r0
 800c7c6:	440a      	add	r2, r1
 800c7c8:	7812      	ldrb	r2, [r2, #0]
 800c7ca:	3310      	adds	r3, #16
 800c7cc:	443b      	add	r3, r7
 800c7ce:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800c7d2:	7bfa      	ldrb	r2, [r7, #15]
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
 800c7d6:	493e      	ldr	r1, [pc, #248]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c7d8:	0092      	lsls	r2, r2, #2
 800c7da:	440a      	add	r2, r1
 800c7dc:	4413      	add	r3, r2
 800c7de:	781a      	ldrb	r2, [r3, #0]
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	0052      	lsls	r2, r2, #1
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	3310      	adds	r3, #16
 800c7e8:	443b      	add	r3, r7
 800c7ea:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 800c7ee:	7bfa      	ldrb	r2, [r7, #15]
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	4937      	ldr	r1, [pc, #220]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c7f4:	0092      	lsls	r2, r2, #2
 800c7f6:	440a      	add	r2, r1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	b25b      	sxtb	r3, r3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da0c      	bge.n	800c81c <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	3310      	adds	r3, #16
 800c806:	443b      	add	r3, r7
 800c808:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c80c:	7bfb      	ldrb	r3, [r7, #15]
 800c80e:	f082 021b 	eor.w	r2, r2, #27
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	3310      	adds	r3, #16
 800c816:	443b      	add	r3, r7
 800c818:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	3301      	adds	r3, #1
 800c820:	73fb      	strb	r3, [r7, #15]
 800c822:	7bfb      	ldrb	r3, [r7, #15]
 800c824:	2b03      	cmp	r3, #3
 800c826:	d9c8      	bls.n	800c7ba <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 800c828:	793a      	ldrb	r2, [r7, #4]
 800c82a:	7a7b      	ldrb	r3, [r7, #9]
 800c82c:	4053      	eors	r3, r2
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	797b      	ldrb	r3, [r7, #5]
 800c832:	4053      	eors	r3, r2
 800c834:	b2da      	uxtb	r2, r3
 800c836:	7abb      	ldrb	r3, [r7, #10]
 800c838:	4053      	eors	r3, r2
 800c83a:	b2d9      	uxtb	r1, r3
 800c83c:	7afa      	ldrb	r2, [r7, #11]
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	404a      	eors	r2, r1
 800c842:	b2d1      	uxtb	r1, r2
 800c844:	4a22      	ldr	r2, [pc, #136]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c846:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800c848:	7a3a      	ldrb	r2, [r7, #8]
 800c84a:	797b      	ldrb	r3, [r7, #5]
 800c84c:	4053      	eors	r3, r2
 800c84e:	b2da      	uxtb	r2, r3
 800c850:	7abb      	ldrb	r3, [r7, #10]
 800c852:	4053      	eors	r3, r2
 800c854:	b2da      	uxtb	r2, r3
 800c856:	79bb      	ldrb	r3, [r7, #6]
 800c858:	4053      	eors	r3, r2
 800c85a:	b2d9      	uxtb	r1, r3
 800c85c:	7afa      	ldrb	r2, [r7, #11]
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	404a      	eors	r2, r1
 800c862:	b2d1      	uxtb	r1, r2
 800c864:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c866:	4413      	add	r3, r2
 800c868:	460a      	mov	r2, r1
 800c86a:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800c86c:	7a3a      	ldrb	r2, [r7, #8]
 800c86e:	7a7b      	ldrb	r3, [r7, #9]
 800c870:	4053      	eors	r3, r2
 800c872:	b2da      	uxtb	r2, r3
 800c874:	79bb      	ldrb	r3, [r7, #6]
 800c876:	4053      	eors	r3, r2
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	4053      	eors	r3, r2
 800c87e:	b2d9      	uxtb	r1, r3
 800c880:	79fa      	ldrb	r2, [r7, #7]
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	404a      	eors	r2, r1
 800c886:	b2d1      	uxtb	r1, r2
 800c888:	4a11      	ldr	r2, [pc, #68]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c88a:	4413      	add	r3, r2
 800c88c:	460a      	mov	r2, r1
 800c88e:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 800c890:	7a3a      	ldrb	r2, [r7, #8]
 800c892:	793b      	ldrb	r3, [r7, #4]
 800c894:	4053      	eors	r3, r2
 800c896:	b2da      	uxtb	r2, r3
 800c898:	7a7b      	ldrb	r3, [r7, #9]
 800c89a:	4053      	eors	r3, r2
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	7abb      	ldrb	r3, [r7, #10]
 800c8a0:	4053      	eors	r3, r2
 800c8a2:	b2d9      	uxtb	r1, r3
 800c8a4:	79fa      	ldrb	r2, [r7, #7]
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	404a      	eors	r2, r1
 800c8aa:	b2d1      	uxtb	r1, r2
 800c8ac:	4a08      	ldr	r2, [pc, #32]	@ (800c8d0 <AES_Mix_Collums+0x128>)
 800c8ae:	4413      	add	r3, r2
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	73bb      	strb	r3, [r7, #14]
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	f67f af79 	bls.w	800c7b4 <AES_Mix_Collums+0xc>
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bc80      	pop	{r7}
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	2000056c 	.word	0x2000056c

0800c8d4 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 800c8d4:	b590      	push	{r4, r7, lr}
 800c8d6:	b087      	sub	sp, #28
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	6039      	str	r1, [r7, #0]
 800c8de:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	75fb      	strb	r3, [r7, #23]
 800c8e4:	e00c      	b.n	800c900 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	441a      	add	r2, r3
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	7812      	ldrb	r2, [r2, #0]
 800c8f2:	3318      	adds	r3, #24
 800c8f4:	443b      	add	r3, r7
 800c8f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	75fb      	strb	r3, [r7, #23]
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	2b03      	cmp	r3, #3
 800c904:	d9ef      	bls.n	800c8e6 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 800c906:	7b3b      	ldrb	r3, [r7, #12]
 800c908:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 800c90a:	7b7b      	ldrb	r3, [r7, #13]
 800c90c:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 800c916:	7d3b      	ldrb	r3, [r7, #20]
 800c918:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800c91a:	2300      	movs	r3, #0
 800c91c:	75fb      	strb	r3, [r7, #23]
 800c91e:	e012      	b.n	800c946 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	3318      	adds	r3, #24
 800c924:	443b      	add	r3, r7
 800c926:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c92a:	7dfc      	ldrb	r4, [r7, #23]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff fedd 	bl	800c6ec <AES_Sub_Byte>
 800c932:	4603      	mov	r3, r0
 800c934:	461a      	mov	r2, r3
 800c936:	f104 0318 	add.w	r3, r4, #24
 800c93a:	443b      	add	r3, r7
 800c93c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	3301      	adds	r3, #1
 800c944:	75fb      	strb	r3, [r7, #23]
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d9e9      	bls.n	800c920 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800c94c:	2301      	movs	r3, #1
 800c94e:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 800c950:	e010      	b.n	800c974 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 800c952:	7d7b      	ldrb	r3, [r7, #21]
 800c954:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c958:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800c95a:	7d7b      	ldrb	r3, [r7, #21]
 800c95c:	005b      	lsls	r3, r3, #1
 800c95e:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 800c960:	7cfb      	ldrb	r3, [r7, #19]
 800c962:	2b80      	cmp	r3, #128	@ 0x80
 800c964:	d103      	bne.n	800c96e <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800c966:	7d7b      	ldrb	r3, [r7, #21]
 800c968:	f083 031b 	eor.w	r3, r3, #27
 800c96c:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	3b01      	subs	r3, #1
 800c972:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d1eb      	bne.n	800c952 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800c97a:	7b3a      	ldrb	r2, [r7, #12]
 800c97c:	7d7b      	ldrb	r3, [r7, #21]
 800c97e:	4053      	eors	r3, r2
 800c980:	b2db      	uxtb	r3, r3
 800c982:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 800c984:	2300      	movs	r3, #0
 800c986:	75fb      	strb	r3, [r7, #23]
 800c988:	e02f      	b.n	800c9ea <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800c98a:	2300      	movs	r3, #0
 800c98c:	75bb      	strb	r3, [r7, #22]
 800c98e:	e026      	b.n	800c9de <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 800c990:	7dba      	ldrb	r2, [r7, #22]
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	461a      	mov	r2, r3
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	4413      	add	r3, r2
 800c99e:	7819      	ldrb	r1, [r3, #0]
 800c9a0:	7dbb      	ldrb	r3, [r7, #22]
 800c9a2:	3318      	adds	r3, #24
 800c9a4:	443b      	add	r3, r7
 800c9a6:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800c9aa:	7db8      	ldrb	r0, [r7, #22]
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4403      	add	r3, r0
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	4403      	add	r3, r0
 800c9b8:	404a      	eors	r2, r1
 800c9ba:	b2d2      	uxtb	r2, r2
 800c9bc:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 800c9be:	7dba      	ldrb	r2, [r7, #22]
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	441a      	add	r2, r3
 800c9cc:	7dbb      	ldrb	r3, [r7, #22]
 800c9ce:	7812      	ldrb	r2, [r2, #0]
 800c9d0:	3318      	adds	r3, #24
 800c9d2:	443b      	add	r3, r7
 800c9d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800c9d8:	7dbb      	ldrb	r3, [r7, #22]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	75bb      	strb	r3, [r7, #22]
 800c9de:	7dbb      	ldrb	r3, [r7, #22]
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d9d5      	bls.n	800c990 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	75fb      	strb	r3, [r7, #23]
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	2b03      	cmp	r3, #3
 800c9ee:	d9cc      	bls.n	800c98a <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	bf00      	nop
 800c9f4:	371c      	adds	r7, #28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd90      	pop	{r4, r7, pc}

0800c9fa <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b08a      	sub	sp, #40	@ 0x28
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	60f8      	str	r0, [r7, #12]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	461a      	mov	r2, r3
 800ca06:	460b      	mov	r3, r1
 800ca08:	72fb      	strb	r3, [r7, #11]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 800ca14:	2300      	movs	r3, #0
 800ca16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 800ca20:	7afb      	ldrb	r3, [r7, #11]
 800ca22:	091b      	lsrs	r3, r3, #4
 800ca24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	f003 030f 	and.w	r3, r3, #15
 800ca2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if(Incomplete_Block_Size != 0)
 800ca32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d004      	beq.n	800ca44 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800ca3a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ca3e:	3301      	adds	r3, #1
 800ca40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800ca44:	2301      	movs	r3, #1
 800ca46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca4a:	e07e      	b.n	800cb4a <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 800ca50:	2300      	movs	r3, #0
 800ca52:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800ca54:	2300      	movs	r3, #0
 800ca56:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 800ca60:	7abb      	ldrb	r3, [r7, #10]
 800ca62:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800ca64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca66:	78db      	ldrb	r3, [r3, #3]
 800ca68:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca6c:	789b      	ldrb	r3, [r3, #2]
 800ca6e:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 800ca70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca72:	785b      	ldrb	r3, [r3, #1]
 800ca74:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800ca76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	0a1b      	lsrs	r3, r3, #8
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 800ca90:	2300      	movs	r3, #0
 800ca92:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

		Block_A[14] = 0x00;
 800ca96:	2300      	movs	r3, #0
 800ca98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		Block_A[15] = i;
 800ca9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 800caa4:	f107 0314 	add.w	r3, r7, #20
 800caa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff fd0a 	bl	800c4c4 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 800cab0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cab4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cab8:	429a      	cmp	r2, r3
 800caba:	d01c      	beq.n	800caf6 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 800cabc:	2300      	movs	r3, #0
 800cabe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cac2:	e013      	b.n	800caec <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	781a      	ldrb	r2, [r3, #0]
 800cac8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cacc:	3328      	adds	r3, #40	@ 0x28
 800cace:	443b      	add	r3, r7
 800cad0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800cad4:	4053      	eors	r3, r2
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	701a      	strb	r2, [r3, #0]
				Data++;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3301      	adds	r3, #1
 800cae0:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 800cae2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cae6:	3301      	adds	r3, #1
 800cae8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800caec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d9e7      	bls.n	800cac4 <Encrypt_Payload+0xca>
 800caf4:	e024      	b.n	800cb40 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800caf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d102      	bne.n	800cb04 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 800cafe:	2310      	movs	r3, #16
 800cb00:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800cb04:	2300      	movs	r3, #0
 800cb06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb0a:	e013      	b.n	800cb34 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	781a      	ldrb	r2, [r3, #0]
 800cb10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb14:	3328      	adds	r3, #40	@ 0x28
 800cb16:	443b      	add	r3, r7
 800cb18:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800cb1c:	4053      	eors	r3, r2
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	701a      	strb	r2, [r3, #0]
				Data++;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	3301      	adds	r3, #1
 800cb28:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800cb2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb2e:	3301      	adds	r3, #1
 800cb30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800cb38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d3e5      	bcc.n	800cb0c <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 800cb40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb44:	3301      	adds	r3, #1
 800cb46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cb4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cb52:	429a      	cmp	r2, r3
 800cb54:	f67f af7a 	bls.w	800ca4c <Encrypt_Payload+0x52>
			}
		}
	}
}
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	3728      	adds	r7, #40	@ 0x28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b09a      	sub	sp, #104	@ 0x68
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	603b      	str	r3, [r7, #0]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800cb72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cb76:	2200      	movs	r2, #0
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	605a      	str	r2, [r3, #4]
 800cb7c:	609a      	str	r2, [r3, #8]
 800cb7e:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800cb80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cb84:	2200      	movs	r2, #0
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	605a      	str	r2, [r3, #4]
 800cb8a:	609a      	str	r2, [r3, #8]
 800cb8c:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 800cb8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	605a      	str	r2, [r3, #4]
 800cb98:	609a      	str	r2, [r3, #8]
 800cb9a:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800cb9c:	f107 0314 	add.w	r3, r7, #20
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	605a      	str	r2, [r3, #4]
 800cba6:	609a      	str	r2, [r3, #8]
 800cba8:	60da      	str	r2, [r3, #12]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	unsigned char Block_Counter = 0x01;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800cbbc:	2349      	movs	r3, #73	@ 0x49
 800cbbe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	Block_B[1] = 0x00;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	Block_B[2] = 0x00;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	Block_B[3] = 0x00;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Block_B[4] = 0x00;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

	Block_B[5] = Direction;
 800cbda:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800cbde:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	Block_B[6] = DevAddr[3];
 800cbe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbe4:	78db      	ldrb	r3, [r3, #3]
 800cbe6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	Block_B[7] = DevAddr[2];
 800cbea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbec:	789b      	ldrb	r3, [r3, #2]
 800cbee:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	Block_B[8] = DevAddr[1];
 800cbf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbf4:	785b      	ldrb	r3, [r3, #1]
 800cbf6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Block_B[9] = DevAddr[0];
 800cbfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	0a1b      	lsrs	r3, r3, #8
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Block_B[13] = 0x00;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

	Block_B[14] = 0x00;
 800cc20:	2300      	movs	r3, #0
 800cc22:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	Block_B[15] = Data_Length;
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	091b      	lsrs	r3, r3, #4
 800cc30:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	Incomplete_Block_Size = Data_Length % 16;
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

	if(Incomplete_Block_Size != 0)
 800cc3e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800cc46:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 800cc50:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800cc54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800cc58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f000 f8fe 	bl	800ce5c <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 800cc60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cc64:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff fc2c 	bl	800c4c4 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc72:	e010      	b.n	800cc96 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800cc74:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cc78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc7c:	3268      	adds	r2, #104	@ 0x68
 800cc7e:	443a      	add	r2, r7
 800cc80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800cc84:	3368      	adds	r3, #104	@ 0x68
 800cc86:	443b      	add	r3, r7
 800cc88:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800cc8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc90:	3301      	adds	r3, #1
 800cc92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cc96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc9a:	2b0f      	cmp	r3, #15
 800cc9c:	d9ea      	bls.n	800cc74 <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 800cc9e:	e043      	b.n	800cd28 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 800cca0:	2300      	movs	r3, #0
 800cca2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cca6:	e00f      	b.n	800ccc8 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800cca8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	7812      	ldrb	r2, [r2, #0]
 800ccb0:	3368      	adds	r3, #104	@ 0x68
 800ccb2:	443b      	add	r3, r7
 800ccb4:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800ccbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ccc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cccc:	2b0f      	cmp	r3, #15
 800ccce:	d9eb      	bls.n	800cca8 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800ccd0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ccd4:	f107 0314 	add.w	r3, r7, #20
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 f946 	bl	800cf6c <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 800cce0:	f107 0314 	add.w	r3, r7, #20
 800cce4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fbec 	bl	800c4c4 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 800ccec:	2300      	movs	r3, #0
 800ccee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ccf2:	e010      	b.n	800cd16 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 800ccf4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800ccf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccfc:	3268      	adds	r2, #104	@ 0x68
 800ccfe:	443a      	add	r2, r7
 800cd00:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 800cd04:	3368      	adds	r3, #104	@ 0x68
 800cd06:	443b      	add	r3, r7
 800cd08:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 800cd0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd10:	3301      	adds	r3, #1
 800cd12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd1a:	2b0f      	cmp	r3, #15
 800cd1c:	d9ea      	bls.n	800ccf4 <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 800cd1e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800cd22:	3301      	adds	r3, #1
 800cd24:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	while(Block_Counter < Number_of_Blocks)
 800cd28:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800cd2c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d3b5      	bcc.n	800cca0 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 800cd34:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d12e      	bne.n	800cd9a <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd42:	e00f      	b.n	800cd64 <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800cd44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	7812      	ldrb	r2, [r2, #0]
 800cd4c:	3368      	adds	r3, #104	@ 0x68
 800cd4e:	443b      	add	r3, r7
 800cd50:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3301      	adds	r3, #1
 800cd58:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800cd5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd5e:	3301      	adds	r3, #1
 800cd60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd68:	2b0f      	cmp	r3, #15
 800cd6a:	d9eb      	bls.n	800cd44 <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800cd6c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 f8f8 	bl	800cf6c <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800cd7c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cd80:	f107 0314 	add.w	r3, r7, #20
 800cd84:	4611      	mov	r1, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f000 f8f0 	bl	800cf6c <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800cd8c:	f107 0314 	add.w	r3, r7, #20
 800cd90:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fb96 	bl	800c4c4 <AES_Encrypt>
 800cd98:	e04d      	b.n	800ce36 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cda0:	e02f      	b.n	800ce02 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 800cda2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cda6:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d20a      	bcs.n	800cdc4 <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 800cdae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	7812      	ldrb	r2, [r2, #0]
 800cdb6:	3368      	adds	r3, #104	@ 0x68
 800cdb8:	443b      	add	r3, r7
 800cdba:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800cdc4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cdc8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d106      	bne.n	800cdde <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 800cdd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdd4:	3368      	adds	r3, #104	@ 0x68
 800cdd6:	443b      	add	r3, r7
 800cdd8:	2280      	movs	r2, #128	@ 0x80
 800cdda:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 800cdde:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800cde2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d906      	bls.n	800cdf8 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 800cdea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdee:	3368      	adds	r3, #104	@ 0x68
 800cdf0:	443b      	add	r3, r7
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 800cdf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ce02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ce06:	2b0f      	cmp	r3, #15
 800ce08:	d9cb      	bls.n	800cda2 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 800ce0a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f000 f8a9 	bl	800cf6c <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800ce1a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800ce1e:	f107 0314 	add.w	r3, r7, #20
 800ce22:	4611      	mov	r1, r2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 f8a1 	bl	800cf6c <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 800ce2a:	f107 0314 	add.w	r3, r7, #20
 800ce2e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fb47 	bl	800c4c4 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 800ce36:	7d3a      	ldrb	r2, [r7, #20]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	7d7a      	ldrb	r2, [r7, #21]
 800ce42:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	3302      	adds	r3, #2
 800ce48:	7dba      	ldrb	r2, [r7, #22]
 800ce4a:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	3303      	adds	r3, #3
 800ce50:	7dfa      	ldrb	r2, [r7, #23]
 800ce52:	701a      	strb	r2, [r3, #0]
}
 800ce54:	bf00      	nop
 800ce56:	3768      	adds	r7, #104	@ 0x68
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7ff fb2a 	bl	800c4c4 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	b25b      	sxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	da02      	bge.n	800ce80 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	75bb      	strb	r3, [r7, #22]
 800ce7e:	e001      	b.n	800ce84 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 f83c 	bl	800cf02 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 800ce8a:	7dbb      	ldrb	r3, [r7, #22]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d109      	bne.n	800cea4 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	330f      	adds	r3, #15
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	320f      	adds	r2, #15
 800ce9a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ce9e:	43db      	mvns	r3, r3
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 800cea4:	2300      	movs	r3, #0
 800cea6:	75fb      	strb	r3, [r7, #23]
 800cea8:	e00a      	b.n	800cec0 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	441a      	add	r2, r3
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	440b      	add	r3, r1
 800ceb6:	7812      	ldrb	r2, [r2, #0]
 800ceb8:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	3301      	adds	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
 800cec2:	2b0f      	cmp	r3, #15
 800cec4:	d9f1      	bls.n	800ceaa <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	b25b      	sxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	da02      	bge.n	800ced6 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800ced0:	2301      	movs	r3, #1
 800ced2:	75bb      	strb	r3, [r7, #22]
 800ced4:	e001      	b.n	800ceda <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800ceda:	68b8      	ldr	r0, [r7, #8]
 800cedc:	f000 f811 	bl	800cf02 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800cee0:	7dbb      	ldrb	r3, [r7, #22]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d109      	bne.n	800cefa <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	330f      	adds	r3, #15
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	320f      	adds	r2, #15
 800cef0:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800cef4:	43db      	mvns	r3, r3
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	7013      	strb	r3, [r2, #0]
	}
}
 800cefa:	bf00      	nop
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]
 800cf12:	e022      	b.n	800cf5a <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	2b0e      	cmp	r3, #14
 800cf18:	d80d      	bhi.n	800cf36 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	4413      	add	r3, r2
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	b25b      	sxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	da02      	bge.n	800cf30 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	73bb      	strb	r3, [r7, #14]
 800cf2e:	e004      	b.n	800cf3a <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73bb      	strb	r3, [r7, #14]
 800cf34:	e001      	b.n	800cf3a <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	4413      	add	r3, r2
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	b2d9      	uxtb	r1, r3
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	7bba      	ldrb	r2, [r7, #14]
 800cf4e:	440a      	add	r2, r1
 800cf50:	b2d2      	uxtb	r2, r2
 800cf52:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	3301      	adds	r3, #1
 800cf58:	73fb      	strb	r3, [r7, #15]
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b0f      	cmp	r3, #15
 800cf5e:	d9d9      	bls.n	800cf14 <Shift_Left+0x12>
	}
}
 800cf60:	bf00      	nop
 800cf62:	bf00      	nop
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bc80      	pop	{r7}
 800cf6a:	4770      	bx	lr

0800cf6c <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	73fb      	strb	r3, [r7, #15]
 800cf7a:	e010      	b.n	800cf9e <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	4413      	add	r3, r2
 800cf82:	7819      	ldrb	r1, [r3, #0]
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	4413      	add	r3, r2
 800cf8a:	781a      	ldrb	r2, [r3, #0]
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	4403      	add	r3, r0
 800cf92:	404a      	eors	r2, r1
 800cf94:	b2d2      	uxtb	r2, r2
 800cf96:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	73fb      	strb	r3, [r7, #15]
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	2b0f      	cmp	r3, #15
 800cfa2:	d9eb      	bls.n	800cf7c <XOR+0x10>
	}
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr

0800cfb0 <__assert_func>:
 800cfb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfb2:	4614      	mov	r4, r2
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	4b09      	ldr	r3, [pc, #36]	@ (800cfdc <__assert_func+0x2c>)
 800cfb8:	4605      	mov	r5, r0
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68d8      	ldr	r0, [r3, #12]
 800cfbe:	b14c      	cbz	r4, 800cfd4 <__assert_func+0x24>
 800cfc0:	4b07      	ldr	r3, [pc, #28]	@ (800cfe0 <__assert_func+0x30>)
 800cfc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfc6:	9100      	str	r1, [sp, #0]
 800cfc8:	462b      	mov	r3, r5
 800cfca:	4906      	ldr	r1, [pc, #24]	@ (800cfe4 <__assert_func+0x34>)
 800cfcc:	f000 f8b2 	bl	800d134 <fiprintf>
 800cfd0:	f000 f9bd 	bl	800d34e <abort>
 800cfd4:	4b04      	ldr	r3, [pc, #16]	@ (800cfe8 <__assert_func+0x38>)
 800cfd6:	461c      	mov	r4, r3
 800cfd8:	e7f3      	b.n	800cfc2 <__assert_func+0x12>
 800cfda:	bf00      	nop
 800cfdc:	2000011c 	.word	0x2000011c
 800cfe0:	0800e2d0 	.word	0x0800e2d0
 800cfe4:	0800e2dd 	.word	0x0800e2dd
 800cfe8:	0800e30b 	.word	0x0800e30b

0800cfec <std>:
 800cfec:	2300      	movs	r3, #0
 800cfee:	b510      	push	{r4, lr}
 800cff0:	4604      	mov	r4, r0
 800cff2:	e9c0 3300 	strd	r3, r3, [r0]
 800cff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cffa:	6083      	str	r3, [r0, #8]
 800cffc:	8181      	strh	r1, [r0, #12]
 800cffe:	6643      	str	r3, [r0, #100]	@ 0x64
 800d000:	81c2      	strh	r2, [r0, #14]
 800d002:	6183      	str	r3, [r0, #24]
 800d004:	4619      	mov	r1, r3
 800d006:	2208      	movs	r2, #8
 800d008:	305c      	adds	r0, #92	@ 0x5c
 800d00a:	f000 f916 	bl	800d23a <memset>
 800d00e:	4b0d      	ldr	r3, [pc, #52]	@ (800d044 <std+0x58>)
 800d010:	6224      	str	r4, [r4, #32]
 800d012:	6263      	str	r3, [r4, #36]	@ 0x24
 800d014:	4b0c      	ldr	r3, [pc, #48]	@ (800d048 <std+0x5c>)
 800d016:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d018:	4b0c      	ldr	r3, [pc, #48]	@ (800d04c <std+0x60>)
 800d01a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d01c:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <std+0x64>)
 800d01e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d020:	4b0c      	ldr	r3, [pc, #48]	@ (800d054 <std+0x68>)
 800d022:	429c      	cmp	r4, r3
 800d024:	d006      	beq.n	800d034 <std+0x48>
 800d026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d02a:	4294      	cmp	r4, r2
 800d02c:	d002      	beq.n	800d034 <std+0x48>
 800d02e:	33d0      	adds	r3, #208	@ 0xd0
 800d030:	429c      	cmp	r4, r3
 800d032:	d105      	bne.n	800d040 <std+0x54>
 800d034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03c:	f000 b976 	b.w	800d32c <__retarget_lock_init_recursive>
 800d040:	bd10      	pop	{r4, pc}
 800d042:	bf00      	nop
 800d044:	0800d195 	.word	0x0800d195
 800d048:	0800d1b7 	.word	0x0800d1b7
 800d04c:	0800d1ef 	.word	0x0800d1ef
 800d050:	0800d213 	.word	0x0800d213
 800d054:	2000057c 	.word	0x2000057c

0800d058 <stdio_exit_handler>:
 800d058:	4a02      	ldr	r2, [pc, #8]	@ (800d064 <stdio_exit_handler+0xc>)
 800d05a:	4903      	ldr	r1, [pc, #12]	@ (800d068 <stdio_exit_handler+0x10>)
 800d05c:	4803      	ldr	r0, [pc, #12]	@ (800d06c <stdio_exit_handler+0x14>)
 800d05e:	f000 b87b 	b.w	800d158 <_fwalk_sglue>
 800d062:	bf00      	nop
 800d064:	20000110 	.word	0x20000110
 800d068:	0800dbe9 	.word	0x0800dbe9
 800d06c:	20000120 	.word	0x20000120

0800d070 <cleanup_stdio>:
 800d070:	6841      	ldr	r1, [r0, #4]
 800d072:	4b0c      	ldr	r3, [pc, #48]	@ (800d0a4 <cleanup_stdio+0x34>)
 800d074:	b510      	push	{r4, lr}
 800d076:	4299      	cmp	r1, r3
 800d078:	4604      	mov	r4, r0
 800d07a:	d001      	beq.n	800d080 <cleanup_stdio+0x10>
 800d07c:	f000 fdb4 	bl	800dbe8 <_fflush_r>
 800d080:	68a1      	ldr	r1, [r4, #8]
 800d082:	4b09      	ldr	r3, [pc, #36]	@ (800d0a8 <cleanup_stdio+0x38>)
 800d084:	4299      	cmp	r1, r3
 800d086:	d002      	beq.n	800d08e <cleanup_stdio+0x1e>
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 fdad 	bl	800dbe8 <_fflush_r>
 800d08e:	68e1      	ldr	r1, [r4, #12]
 800d090:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <cleanup_stdio+0x3c>)
 800d092:	4299      	cmp	r1, r3
 800d094:	d004      	beq.n	800d0a0 <cleanup_stdio+0x30>
 800d096:	4620      	mov	r0, r4
 800d098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d09c:	f000 bda4 	b.w	800dbe8 <_fflush_r>
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	bf00      	nop
 800d0a4:	2000057c 	.word	0x2000057c
 800d0a8:	200005e4 	.word	0x200005e4
 800d0ac:	2000064c 	.word	0x2000064c

0800d0b0 <global_stdio_init.part.0>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <global_stdio_init.part.0+0x30>)
 800d0b4:	4c0b      	ldr	r4, [pc, #44]	@ (800d0e4 <global_stdio_init.part.0+0x34>)
 800d0b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d0e8 <global_stdio_init.part.0+0x38>)
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	2104      	movs	r1, #4
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f7ff ff94 	bl	800cfec <std>
 800d0c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	2109      	movs	r1, #9
 800d0cc:	f7ff ff8e 	bl	800cfec <std>
 800d0d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0da:	2112      	movs	r1, #18
 800d0dc:	f7ff bf86 	b.w	800cfec <std>
 800d0e0:	200006b4 	.word	0x200006b4
 800d0e4:	2000057c 	.word	0x2000057c
 800d0e8:	0800d059 	.word	0x0800d059

0800d0ec <__sfp_lock_acquire>:
 800d0ec:	4801      	ldr	r0, [pc, #4]	@ (800d0f4 <__sfp_lock_acquire+0x8>)
 800d0ee:	f000 b91e 	b.w	800d32e <__retarget_lock_acquire_recursive>
 800d0f2:	bf00      	nop
 800d0f4:	200006bd 	.word	0x200006bd

0800d0f8 <__sfp_lock_release>:
 800d0f8:	4801      	ldr	r0, [pc, #4]	@ (800d100 <__sfp_lock_release+0x8>)
 800d0fa:	f000 b919 	b.w	800d330 <__retarget_lock_release_recursive>
 800d0fe:	bf00      	nop
 800d100:	200006bd 	.word	0x200006bd

0800d104 <__sinit>:
 800d104:	b510      	push	{r4, lr}
 800d106:	4604      	mov	r4, r0
 800d108:	f7ff fff0 	bl	800d0ec <__sfp_lock_acquire>
 800d10c:	6a23      	ldr	r3, [r4, #32]
 800d10e:	b11b      	cbz	r3, 800d118 <__sinit+0x14>
 800d110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d114:	f7ff bff0 	b.w	800d0f8 <__sfp_lock_release>
 800d118:	4b04      	ldr	r3, [pc, #16]	@ (800d12c <__sinit+0x28>)
 800d11a:	6223      	str	r3, [r4, #32]
 800d11c:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <__sinit+0x2c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1f5      	bne.n	800d110 <__sinit+0xc>
 800d124:	f7ff ffc4 	bl	800d0b0 <global_stdio_init.part.0>
 800d128:	e7f2      	b.n	800d110 <__sinit+0xc>
 800d12a:	bf00      	nop
 800d12c:	0800d071 	.word	0x0800d071
 800d130:	200006b4 	.word	0x200006b4

0800d134 <fiprintf>:
 800d134:	b40e      	push	{r1, r2, r3}
 800d136:	b503      	push	{r0, r1, lr}
 800d138:	4601      	mov	r1, r0
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	4805      	ldr	r0, [pc, #20]	@ (800d154 <fiprintf+0x20>)
 800d13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d142:	6800      	ldr	r0, [r0, #0]
 800d144:	9301      	str	r3, [sp, #4]
 800d146:	f000 fa27 	bl	800d598 <_vfiprintf_r>
 800d14a:	b002      	add	sp, #8
 800d14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d150:	b003      	add	sp, #12
 800d152:	4770      	bx	lr
 800d154:	2000011c 	.word	0x2000011c

0800d158 <_fwalk_sglue>:
 800d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d15c:	4607      	mov	r7, r0
 800d15e:	4688      	mov	r8, r1
 800d160:	4614      	mov	r4, r2
 800d162:	2600      	movs	r6, #0
 800d164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d168:	f1b9 0901 	subs.w	r9, r9, #1
 800d16c:	d505      	bpl.n	800d17a <_fwalk_sglue+0x22>
 800d16e:	6824      	ldr	r4, [r4, #0]
 800d170:	2c00      	cmp	r4, #0
 800d172:	d1f7      	bne.n	800d164 <_fwalk_sglue+0xc>
 800d174:	4630      	mov	r0, r6
 800d176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d907      	bls.n	800d190 <_fwalk_sglue+0x38>
 800d180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d184:	3301      	adds	r3, #1
 800d186:	d003      	beq.n	800d190 <_fwalk_sglue+0x38>
 800d188:	4629      	mov	r1, r5
 800d18a:	4638      	mov	r0, r7
 800d18c:	47c0      	blx	r8
 800d18e:	4306      	orrs	r6, r0
 800d190:	3568      	adds	r5, #104	@ 0x68
 800d192:	e7e9      	b.n	800d168 <_fwalk_sglue+0x10>

0800d194 <__sread>:
 800d194:	b510      	push	{r4, lr}
 800d196:	460c      	mov	r4, r1
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	f000 f878 	bl	800d290 <_read_r>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	bfab      	itete	ge
 800d1a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d1a8:	181b      	addge	r3, r3, r0
 800d1aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1ae:	bfac      	ite	ge
 800d1b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1b2:	81a3      	strhlt	r3, [r4, #12]
 800d1b4:	bd10      	pop	{r4, pc}

0800d1b6 <__swrite>:
 800d1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ba:	461f      	mov	r7, r3
 800d1bc:	898b      	ldrh	r3, [r1, #12]
 800d1be:	4605      	mov	r5, r0
 800d1c0:	05db      	lsls	r3, r3, #23
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	d505      	bpl.n	800d1d4 <__swrite+0x1e>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d0:	f000 f84c 	bl	800d26c <_lseek_r>
 800d1d4:	89a3      	ldrh	r3, [r4, #12]
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1dc:	81a3      	strh	r3, [r4, #12]
 800d1de:	4628      	mov	r0, r5
 800d1e0:	463b      	mov	r3, r7
 800d1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ea:	f000 b863 	b.w	800d2b4 <_write_r>

0800d1ee <__sseek>:
 800d1ee:	b510      	push	{r4, lr}
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f6:	f000 f839 	bl	800d26c <_lseek_r>
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	bf15      	itete	ne
 800d200:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d202:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d206:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d20a:	81a3      	strheq	r3, [r4, #12]
 800d20c:	bf18      	it	ne
 800d20e:	81a3      	strhne	r3, [r4, #12]
 800d210:	bd10      	pop	{r4, pc}

0800d212 <__sclose>:
 800d212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d216:	f000 b819 	b.w	800d24c <_close_r>

0800d21a <memcmp>:
 800d21a:	b510      	push	{r4, lr}
 800d21c:	3901      	subs	r1, #1
 800d21e:	4402      	add	r2, r0
 800d220:	4290      	cmp	r0, r2
 800d222:	d101      	bne.n	800d228 <memcmp+0xe>
 800d224:	2000      	movs	r0, #0
 800d226:	e005      	b.n	800d234 <memcmp+0x1a>
 800d228:	7803      	ldrb	r3, [r0, #0]
 800d22a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d22e:	42a3      	cmp	r3, r4
 800d230:	d001      	beq.n	800d236 <memcmp+0x1c>
 800d232:	1b18      	subs	r0, r3, r4
 800d234:	bd10      	pop	{r4, pc}
 800d236:	3001      	adds	r0, #1
 800d238:	e7f2      	b.n	800d220 <memcmp+0x6>

0800d23a <memset>:
 800d23a:	4603      	mov	r3, r0
 800d23c:	4402      	add	r2, r0
 800d23e:	4293      	cmp	r3, r2
 800d240:	d100      	bne.n	800d244 <memset+0xa>
 800d242:	4770      	bx	lr
 800d244:	f803 1b01 	strb.w	r1, [r3], #1
 800d248:	e7f9      	b.n	800d23e <memset+0x4>
	...

0800d24c <_close_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	2300      	movs	r3, #0
 800d250:	4d05      	ldr	r5, [pc, #20]	@ (800d268 <_close_r+0x1c>)
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f7 ff85 	bl	8005166 <_close>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_close_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_close_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	200006b8 	.word	0x200006b8

0800d26c <_lseek_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	4611      	mov	r1, r2
 800d274:	2200      	movs	r2, #0
 800d276:	4d05      	ldr	r5, [pc, #20]	@ (800d28c <_lseek_r+0x20>)
 800d278:	602a      	str	r2, [r5, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	f7f7 ff97 	bl	80051ae <_lseek>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_lseek_r+0x1e>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_lseek_r+0x1e>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	200006b8 	.word	0x200006b8

0800d290 <_read_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	4611      	mov	r1, r2
 800d298:	2200      	movs	r2, #0
 800d29a:	4d05      	ldr	r5, [pc, #20]	@ (800d2b0 <_read_r+0x20>)
 800d29c:	602a      	str	r2, [r5, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f7f7 ff28 	bl	80050f4 <_read>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_read_r+0x1e>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_read_r+0x1e>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	200006b8 	.word	0x200006b8

0800d2b4 <_write_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	4608      	mov	r0, r1
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4d05      	ldr	r5, [pc, #20]	@ (800d2d4 <_write_r+0x20>)
 800d2c0:	602a      	str	r2, [r5, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	f7f7 ff33 	bl	800512e <_write>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d102      	bne.n	800d2d2 <_write_r+0x1e>
 800d2cc:	682b      	ldr	r3, [r5, #0]
 800d2ce:	b103      	cbz	r3, 800d2d2 <_write_r+0x1e>
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	200006b8 	.word	0x200006b8

0800d2d8 <__errno>:
 800d2d8:	4b01      	ldr	r3, [pc, #4]	@ (800d2e0 <__errno+0x8>)
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	2000011c 	.word	0x2000011c

0800d2e4 <__libc_init_array>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	4d0c      	ldr	r5, [pc, #48]	@ (800d31c <__libc_init_array+0x38>)
 800d2ea:	4c0d      	ldr	r4, [pc, #52]	@ (800d320 <__libc_init_array+0x3c>)
 800d2ec:	1b64      	subs	r4, r4, r5
 800d2ee:	10a4      	asrs	r4, r4, #2
 800d2f0:	42a6      	cmp	r6, r4
 800d2f2:	d109      	bne.n	800d308 <__libc_init_array+0x24>
 800d2f4:	f000 fe60 	bl	800dfb8 <_init>
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	4d0a      	ldr	r5, [pc, #40]	@ (800d324 <__libc_init_array+0x40>)
 800d2fc:	4c0a      	ldr	r4, [pc, #40]	@ (800d328 <__libc_init_array+0x44>)
 800d2fe:	1b64      	subs	r4, r4, r5
 800d300:	10a4      	asrs	r4, r4, #2
 800d302:	42a6      	cmp	r6, r4
 800d304:	d105      	bne.n	800d312 <__libc_init_array+0x2e>
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30c:	4798      	blx	r3
 800d30e:	3601      	adds	r6, #1
 800d310:	e7ee      	b.n	800d2f0 <__libc_init_array+0xc>
 800d312:	f855 3b04 	ldr.w	r3, [r5], #4
 800d316:	4798      	blx	r3
 800d318:	3601      	adds	r6, #1
 800d31a:	e7f2      	b.n	800d302 <__libc_init_array+0x1e>
 800d31c:	0800e348 	.word	0x0800e348
 800d320:	0800e348 	.word	0x0800e348
 800d324:	0800e348 	.word	0x0800e348
 800d328:	0800e34c 	.word	0x0800e34c

0800d32c <__retarget_lock_init_recursive>:
 800d32c:	4770      	bx	lr

0800d32e <__retarget_lock_acquire_recursive>:
 800d32e:	4770      	bx	lr

0800d330 <__retarget_lock_release_recursive>:
 800d330:	4770      	bx	lr

0800d332 <memcpy>:
 800d332:	440a      	add	r2, r1
 800d334:	4291      	cmp	r1, r2
 800d336:	f100 33ff 	add.w	r3, r0, #4294967295
 800d33a:	d100      	bne.n	800d33e <memcpy+0xc>
 800d33c:	4770      	bx	lr
 800d33e:	b510      	push	{r4, lr}
 800d340:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d344:	4291      	cmp	r1, r2
 800d346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34a:	d1f9      	bne.n	800d340 <memcpy+0xe>
 800d34c:	bd10      	pop	{r4, pc}

0800d34e <abort>:
 800d34e:	2006      	movs	r0, #6
 800d350:	b508      	push	{r3, lr}
 800d352:	f000 fd2d 	bl	800ddb0 <raise>
 800d356:	2001      	movs	r0, #1
 800d358:	f7f7 fec1 	bl	80050de <_exit>

0800d35c <_free_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4605      	mov	r5, r0
 800d360:	2900      	cmp	r1, #0
 800d362:	d040      	beq.n	800d3e6 <_free_r+0x8a>
 800d364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d368:	1f0c      	subs	r4, r1, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfb8      	it	lt
 800d36e:	18e4      	addlt	r4, r4, r3
 800d370:	f000 f8de 	bl	800d530 <__malloc_lock>
 800d374:	4a1c      	ldr	r2, [pc, #112]	@ (800d3e8 <_free_r+0x8c>)
 800d376:	6813      	ldr	r3, [r2, #0]
 800d378:	b933      	cbnz	r3, 800d388 <_free_r+0x2c>
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	6014      	str	r4, [r2, #0]
 800d37e:	4628      	mov	r0, r5
 800d380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d384:	f000 b8da 	b.w	800d53c <__malloc_unlock>
 800d388:	42a3      	cmp	r3, r4
 800d38a:	d908      	bls.n	800d39e <_free_r+0x42>
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	1821      	adds	r1, r4, r0
 800d390:	428b      	cmp	r3, r1
 800d392:	bf01      	itttt	eq
 800d394:	6819      	ldreq	r1, [r3, #0]
 800d396:	685b      	ldreq	r3, [r3, #4]
 800d398:	1809      	addeq	r1, r1, r0
 800d39a:	6021      	streq	r1, [r4, #0]
 800d39c:	e7ed      	b.n	800d37a <_free_r+0x1e>
 800d39e:	461a      	mov	r2, r3
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	b10b      	cbz	r3, 800d3a8 <_free_r+0x4c>
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d9fa      	bls.n	800d39e <_free_r+0x42>
 800d3a8:	6811      	ldr	r1, [r2, #0]
 800d3aa:	1850      	adds	r0, r2, r1
 800d3ac:	42a0      	cmp	r0, r4
 800d3ae:	d10b      	bne.n	800d3c8 <_free_r+0x6c>
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	4401      	add	r1, r0
 800d3b4:	1850      	adds	r0, r2, r1
 800d3b6:	4283      	cmp	r3, r0
 800d3b8:	6011      	str	r1, [r2, #0]
 800d3ba:	d1e0      	bne.n	800d37e <_free_r+0x22>
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	4408      	add	r0, r1
 800d3c2:	6010      	str	r0, [r2, #0]
 800d3c4:	6053      	str	r3, [r2, #4]
 800d3c6:	e7da      	b.n	800d37e <_free_r+0x22>
 800d3c8:	d902      	bls.n	800d3d0 <_free_r+0x74>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	e7d6      	b.n	800d37e <_free_r+0x22>
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	1821      	adds	r1, r4, r0
 800d3d4:	428b      	cmp	r3, r1
 800d3d6:	bf01      	itttt	eq
 800d3d8:	6819      	ldreq	r1, [r3, #0]
 800d3da:	685b      	ldreq	r3, [r3, #4]
 800d3dc:	1809      	addeq	r1, r1, r0
 800d3de:	6021      	streq	r1, [r4, #0]
 800d3e0:	6063      	str	r3, [r4, #4]
 800d3e2:	6054      	str	r4, [r2, #4]
 800d3e4:	e7cb      	b.n	800d37e <_free_r+0x22>
 800d3e6:	bd38      	pop	{r3, r4, r5, pc}
 800d3e8:	200006c4 	.word	0x200006c4

0800d3ec <sbrk_aligned>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	4e0f      	ldr	r6, [pc, #60]	@ (800d42c <sbrk_aligned+0x40>)
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	6831      	ldr	r1, [r6, #0]
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	b911      	cbnz	r1, 800d3fe <sbrk_aligned+0x12>
 800d3f8:	f000 fcf6 	bl	800dde8 <_sbrk_r>
 800d3fc:	6030      	str	r0, [r6, #0]
 800d3fe:	4621      	mov	r1, r4
 800d400:	4628      	mov	r0, r5
 800d402:	f000 fcf1 	bl	800dde8 <_sbrk_r>
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	d103      	bne.n	800d412 <sbrk_aligned+0x26>
 800d40a:	f04f 34ff 	mov.w	r4, #4294967295
 800d40e:	4620      	mov	r0, r4
 800d410:	bd70      	pop	{r4, r5, r6, pc}
 800d412:	1cc4      	adds	r4, r0, #3
 800d414:	f024 0403 	bic.w	r4, r4, #3
 800d418:	42a0      	cmp	r0, r4
 800d41a:	d0f8      	beq.n	800d40e <sbrk_aligned+0x22>
 800d41c:	1a21      	subs	r1, r4, r0
 800d41e:	4628      	mov	r0, r5
 800d420:	f000 fce2 	bl	800dde8 <_sbrk_r>
 800d424:	3001      	adds	r0, #1
 800d426:	d1f2      	bne.n	800d40e <sbrk_aligned+0x22>
 800d428:	e7ef      	b.n	800d40a <sbrk_aligned+0x1e>
 800d42a:	bf00      	nop
 800d42c:	200006c0 	.word	0x200006c0

0800d430 <_malloc_r>:
 800d430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d434:	1ccd      	adds	r5, r1, #3
 800d436:	f025 0503 	bic.w	r5, r5, #3
 800d43a:	3508      	adds	r5, #8
 800d43c:	2d0c      	cmp	r5, #12
 800d43e:	bf38      	it	cc
 800d440:	250c      	movcc	r5, #12
 800d442:	2d00      	cmp	r5, #0
 800d444:	4606      	mov	r6, r0
 800d446:	db01      	blt.n	800d44c <_malloc_r+0x1c>
 800d448:	42a9      	cmp	r1, r5
 800d44a:	d904      	bls.n	800d456 <_malloc_r+0x26>
 800d44c:	230c      	movs	r3, #12
 800d44e:	6033      	str	r3, [r6, #0]
 800d450:	2000      	movs	r0, #0
 800d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d52c <_malloc_r+0xfc>
 800d45a:	f000 f869 	bl	800d530 <__malloc_lock>
 800d45e:	f8d8 3000 	ldr.w	r3, [r8]
 800d462:	461c      	mov	r4, r3
 800d464:	bb44      	cbnz	r4, 800d4b8 <_malloc_r+0x88>
 800d466:	4629      	mov	r1, r5
 800d468:	4630      	mov	r0, r6
 800d46a:	f7ff ffbf 	bl	800d3ec <sbrk_aligned>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	4604      	mov	r4, r0
 800d472:	d158      	bne.n	800d526 <_malloc_r+0xf6>
 800d474:	f8d8 4000 	ldr.w	r4, [r8]
 800d478:	4627      	mov	r7, r4
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	d143      	bne.n	800d506 <_malloc_r+0xd6>
 800d47e:	2c00      	cmp	r4, #0
 800d480:	d04b      	beq.n	800d51a <_malloc_r+0xea>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	4639      	mov	r1, r7
 800d486:	4630      	mov	r0, r6
 800d488:	eb04 0903 	add.w	r9, r4, r3
 800d48c:	f000 fcac 	bl	800dde8 <_sbrk_r>
 800d490:	4581      	cmp	r9, r0
 800d492:	d142      	bne.n	800d51a <_malloc_r+0xea>
 800d494:	6821      	ldr	r1, [r4, #0]
 800d496:	4630      	mov	r0, r6
 800d498:	1a6d      	subs	r5, r5, r1
 800d49a:	4629      	mov	r1, r5
 800d49c:	f7ff ffa6 	bl	800d3ec <sbrk_aligned>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d03a      	beq.n	800d51a <_malloc_r+0xea>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	442b      	add	r3, r5
 800d4a8:	6023      	str	r3, [r4, #0]
 800d4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	bb62      	cbnz	r2, 800d50c <_malloc_r+0xdc>
 800d4b2:	f8c8 7000 	str.w	r7, [r8]
 800d4b6:	e00f      	b.n	800d4d8 <_malloc_r+0xa8>
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	1b52      	subs	r2, r2, r5
 800d4bc:	d420      	bmi.n	800d500 <_malloc_r+0xd0>
 800d4be:	2a0b      	cmp	r2, #11
 800d4c0:	d917      	bls.n	800d4f2 <_malloc_r+0xc2>
 800d4c2:	1961      	adds	r1, r4, r5
 800d4c4:	42a3      	cmp	r3, r4
 800d4c6:	6025      	str	r5, [r4, #0]
 800d4c8:	bf18      	it	ne
 800d4ca:	6059      	strne	r1, [r3, #4]
 800d4cc:	6863      	ldr	r3, [r4, #4]
 800d4ce:	bf08      	it	eq
 800d4d0:	f8c8 1000 	streq.w	r1, [r8]
 800d4d4:	5162      	str	r2, [r4, r5]
 800d4d6:	604b      	str	r3, [r1, #4]
 800d4d8:	4630      	mov	r0, r6
 800d4da:	f000 f82f 	bl	800d53c <__malloc_unlock>
 800d4de:	f104 000b 	add.w	r0, r4, #11
 800d4e2:	1d23      	adds	r3, r4, #4
 800d4e4:	f020 0007 	bic.w	r0, r0, #7
 800d4e8:	1ac2      	subs	r2, r0, r3
 800d4ea:	bf1c      	itt	ne
 800d4ec:	1a1b      	subne	r3, r3, r0
 800d4ee:	50a3      	strne	r3, [r4, r2]
 800d4f0:	e7af      	b.n	800d452 <_malloc_r+0x22>
 800d4f2:	6862      	ldr	r2, [r4, #4]
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	bf0c      	ite	eq
 800d4f8:	f8c8 2000 	streq.w	r2, [r8]
 800d4fc:	605a      	strne	r2, [r3, #4]
 800d4fe:	e7eb      	b.n	800d4d8 <_malloc_r+0xa8>
 800d500:	4623      	mov	r3, r4
 800d502:	6864      	ldr	r4, [r4, #4]
 800d504:	e7ae      	b.n	800d464 <_malloc_r+0x34>
 800d506:	463c      	mov	r4, r7
 800d508:	687f      	ldr	r7, [r7, #4]
 800d50a:	e7b6      	b.n	800d47a <_malloc_r+0x4a>
 800d50c:	461a      	mov	r2, r3
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	42a3      	cmp	r3, r4
 800d512:	d1fb      	bne.n	800d50c <_malloc_r+0xdc>
 800d514:	2300      	movs	r3, #0
 800d516:	6053      	str	r3, [r2, #4]
 800d518:	e7de      	b.n	800d4d8 <_malloc_r+0xa8>
 800d51a:	230c      	movs	r3, #12
 800d51c:	4630      	mov	r0, r6
 800d51e:	6033      	str	r3, [r6, #0]
 800d520:	f000 f80c 	bl	800d53c <__malloc_unlock>
 800d524:	e794      	b.n	800d450 <_malloc_r+0x20>
 800d526:	6005      	str	r5, [r0, #0]
 800d528:	e7d6      	b.n	800d4d8 <_malloc_r+0xa8>
 800d52a:	bf00      	nop
 800d52c:	200006c4 	.word	0x200006c4

0800d530 <__malloc_lock>:
 800d530:	4801      	ldr	r0, [pc, #4]	@ (800d538 <__malloc_lock+0x8>)
 800d532:	f7ff befc 	b.w	800d32e <__retarget_lock_acquire_recursive>
 800d536:	bf00      	nop
 800d538:	200006bc 	.word	0x200006bc

0800d53c <__malloc_unlock>:
 800d53c:	4801      	ldr	r0, [pc, #4]	@ (800d544 <__malloc_unlock+0x8>)
 800d53e:	f7ff bef7 	b.w	800d330 <__retarget_lock_release_recursive>
 800d542:	bf00      	nop
 800d544:	200006bc 	.word	0x200006bc

0800d548 <__sfputc_r>:
 800d548:	6893      	ldr	r3, [r2, #8]
 800d54a:	b410      	push	{r4}
 800d54c:	3b01      	subs	r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	6093      	str	r3, [r2, #8]
 800d552:	da07      	bge.n	800d564 <__sfputc_r+0x1c>
 800d554:	6994      	ldr	r4, [r2, #24]
 800d556:	42a3      	cmp	r3, r4
 800d558:	db01      	blt.n	800d55e <__sfputc_r+0x16>
 800d55a:	290a      	cmp	r1, #10
 800d55c:	d102      	bne.n	800d564 <__sfputc_r+0x1c>
 800d55e:	bc10      	pop	{r4}
 800d560:	f000 bb6a 	b.w	800dc38 <__swbuf_r>
 800d564:	6813      	ldr	r3, [r2, #0]
 800d566:	1c58      	adds	r0, r3, #1
 800d568:	6010      	str	r0, [r2, #0]
 800d56a:	7019      	strb	r1, [r3, #0]
 800d56c:	4608      	mov	r0, r1
 800d56e:	bc10      	pop	{r4}
 800d570:	4770      	bx	lr

0800d572 <__sfputs_r>:
 800d572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d574:	4606      	mov	r6, r0
 800d576:	460f      	mov	r7, r1
 800d578:	4614      	mov	r4, r2
 800d57a:	18d5      	adds	r5, r2, r3
 800d57c:	42ac      	cmp	r4, r5
 800d57e:	d101      	bne.n	800d584 <__sfputs_r+0x12>
 800d580:	2000      	movs	r0, #0
 800d582:	e007      	b.n	800d594 <__sfputs_r+0x22>
 800d584:	463a      	mov	r2, r7
 800d586:	4630      	mov	r0, r6
 800d588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58c:	f7ff ffdc 	bl	800d548 <__sfputc_r>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d1f3      	bne.n	800d57c <__sfputs_r+0xa>
 800d594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d598 <_vfiprintf_r>:
 800d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	460d      	mov	r5, r1
 800d59e:	4614      	mov	r4, r2
 800d5a0:	4698      	mov	r8, r3
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	b09d      	sub	sp, #116	@ 0x74
 800d5a6:	b118      	cbz	r0, 800d5b0 <_vfiprintf_r+0x18>
 800d5a8:	6a03      	ldr	r3, [r0, #32]
 800d5aa:	b90b      	cbnz	r3, 800d5b0 <_vfiprintf_r+0x18>
 800d5ac:	f7ff fdaa 	bl	800d104 <__sinit>
 800d5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5b2:	07d9      	lsls	r1, r3, #31
 800d5b4:	d405      	bmi.n	800d5c2 <_vfiprintf_r+0x2a>
 800d5b6:	89ab      	ldrh	r3, [r5, #12]
 800d5b8:	059a      	lsls	r2, r3, #22
 800d5ba:	d402      	bmi.n	800d5c2 <_vfiprintf_r+0x2a>
 800d5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5be:	f7ff feb6 	bl	800d32e <__retarget_lock_acquire_recursive>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	071b      	lsls	r3, r3, #28
 800d5c6:	d501      	bpl.n	800d5cc <_vfiprintf_r+0x34>
 800d5c8:	692b      	ldr	r3, [r5, #16]
 800d5ca:	b99b      	cbnz	r3, 800d5f4 <_vfiprintf_r+0x5c>
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f000 fb70 	bl	800dcb4 <__swsetup_r>
 800d5d4:	b170      	cbz	r0, 800d5f4 <_vfiprintf_r+0x5c>
 800d5d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5d8:	07dc      	lsls	r4, r3, #31
 800d5da:	d504      	bpl.n	800d5e6 <_vfiprintf_r+0x4e>
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	b01d      	add	sp, #116	@ 0x74
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	89ab      	ldrh	r3, [r5, #12]
 800d5e8:	0598      	lsls	r0, r3, #22
 800d5ea:	d4f7      	bmi.n	800d5dc <_vfiprintf_r+0x44>
 800d5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ee:	f7ff fe9f 	bl	800d330 <__retarget_lock_release_recursive>
 800d5f2:	e7f3      	b.n	800d5dc <_vfiprintf_r+0x44>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f8:	2320      	movs	r3, #32
 800d5fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5fe:	2330      	movs	r3, #48	@ 0x30
 800d600:	f04f 0901 	mov.w	r9, #1
 800d604:	f8cd 800c 	str.w	r8, [sp, #12]
 800d608:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d7b4 <_vfiprintf_r+0x21c>
 800d60c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d610:	4623      	mov	r3, r4
 800d612:	469a      	mov	sl, r3
 800d614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d618:	b10a      	cbz	r2, 800d61e <_vfiprintf_r+0x86>
 800d61a:	2a25      	cmp	r2, #37	@ 0x25
 800d61c:	d1f9      	bne.n	800d612 <_vfiprintf_r+0x7a>
 800d61e:	ebba 0b04 	subs.w	fp, sl, r4
 800d622:	d00b      	beq.n	800d63c <_vfiprintf_r+0xa4>
 800d624:	465b      	mov	r3, fp
 800d626:	4622      	mov	r2, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	4630      	mov	r0, r6
 800d62c:	f7ff ffa1 	bl	800d572 <__sfputs_r>
 800d630:	3001      	adds	r0, #1
 800d632:	f000 80a7 	beq.w	800d784 <_vfiprintf_r+0x1ec>
 800d636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d638:	445a      	add	r2, fp
 800d63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d63c:	f89a 3000 	ldrb.w	r3, [sl]
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 809f 	beq.w	800d784 <_vfiprintf_r+0x1ec>
 800d646:	2300      	movs	r3, #0
 800d648:	f04f 32ff 	mov.w	r2, #4294967295
 800d64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d650:	f10a 0a01 	add.w	sl, sl, #1
 800d654:	9304      	str	r3, [sp, #16]
 800d656:	9307      	str	r3, [sp, #28]
 800d658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d65c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d65e:	4654      	mov	r4, sl
 800d660:	2205      	movs	r2, #5
 800d662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d666:	4853      	ldr	r0, [pc, #332]	@ (800d7b4 <_vfiprintf_r+0x21c>)
 800d668:	f000 fbce 	bl	800de08 <memchr>
 800d66c:	9a04      	ldr	r2, [sp, #16]
 800d66e:	b9d8      	cbnz	r0, 800d6a8 <_vfiprintf_r+0x110>
 800d670:	06d1      	lsls	r1, r2, #27
 800d672:	bf44      	itt	mi
 800d674:	2320      	movmi	r3, #32
 800d676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d67a:	0713      	lsls	r3, r2, #28
 800d67c:	bf44      	itt	mi
 800d67e:	232b      	movmi	r3, #43	@ 0x2b
 800d680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d684:	f89a 3000 	ldrb.w	r3, [sl]
 800d688:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68a:	d015      	beq.n	800d6b8 <_vfiprintf_r+0x120>
 800d68c:	4654      	mov	r4, sl
 800d68e:	2000      	movs	r0, #0
 800d690:	f04f 0c0a 	mov.w	ip, #10
 800d694:	9a07      	ldr	r2, [sp, #28]
 800d696:	4621      	mov	r1, r4
 800d698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d69c:	3b30      	subs	r3, #48	@ 0x30
 800d69e:	2b09      	cmp	r3, #9
 800d6a0:	d94b      	bls.n	800d73a <_vfiprintf_r+0x1a2>
 800d6a2:	b1b0      	cbz	r0, 800d6d2 <_vfiprintf_r+0x13a>
 800d6a4:	9207      	str	r2, [sp, #28]
 800d6a6:	e014      	b.n	800d6d2 <_vfiprintf_r+0x13a>
 800d6a8:	eba0 0308 	sub.w	r3, r0, r8
 800d6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	46a2      	mov	sl, r4
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	e7d2      	b.n	800d65e <_vfiprintf_r+0xc6>
 800d6b8:	9b03      	ldr	r3, [sp, #12]
 800d6ba:	1d19      	adds	r1, r3, #4
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	9103      	str	r1, [sp, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	bfbb      	ittet	lt
 800d6c4:	425b      	neglt	r3, r3
 800d6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ca:	9307      	strge	r3, [sp, #28]
 800d6cc:	9307      	strlt	r3, [sp, #28]
 800d6ce:	bfb8      	it	lt
 800d6d0:	9204      	strlt	r2, [sp, #16]
 800d6d2:	7823      	ldrb	r3, [r4, #0]
 800d6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6d6:	d10a      	bne.n	800d6ee <_vfiprintf_r+0x156>
 800d6d8:	7863      	ldrb	r3, [r4, #1]
 800d6da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6dc:	d132      	bne.n	800d744 <_vfiprintf_r+0x1ac>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	3402      	adds	r4, #2
 800d6e2:	1d1a      	adds	r2, r3, #4
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	9203      	str	r2, [sp, #12]
 800d6e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ec:	9305      	str	r3, [sp, #20]
 800d6ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d7b8 <_vfiprintf_r+0x220>
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	4650      	mov	r0, sl
 800d6f6:	7821      	ldrb	r1, [r4, #0]
 800d6f8:	f000 fb86 	bl	800de08 <memchr>
 800d6fc:	b138      	cbz	r0, 800d70e <_vfiprintf_r+0x176>
 800d6fe:	2240      	movs	r2, #64	@ 0x40
 800d700:	9b04      	ldr	r3, [sp, #16]
 800d702:	eba0 000a 	sub.w	r0, r0, sl
 800d706:	4082      	lsls	r2, r0
 800d708:	4313      	orrs	r3, r2
 800d70a:	3401      	adds	r4, #1
 800d70c:	9304      	str	r3, [sp, #16]
 800d70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d712:	2206      	movs	r2, #6
 800d714:	4829      	ldr	r0, [pc, #164]	@ (800d7bc <_vfiprintf_r+0x224>)
 800d716:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d71a:	f000 fb75 	bl	800de08 <memchr>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d03f      	beq.n	800d7a2 <_vfiprintf_r+0x20a>
 800d722:	4b27      	ldr	r3, [pc, #156]	@ (800d7c0 <_vfiprintf_r+0x228>)
 800d724:	bb1b      	cbnz	r3, 800d76e <_vfiprintf_r+0x1d6>
 800d726:	9b03      	ldr	r3, [sp, #12]
 800d728:	3307      	adds	r3, #7
 800d72a:	f023 0307 	bic.w	r3, r3, #7
 800d72e:	3308      	adds	r3, #8
 800d730:	9303      	str	r3, [sp, #12]
 800d732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d734:	443b      	add	r3, r7
 800d736:	9309      	str	r3, [sp, #36]	@ 0x24
 800d738:	e76a      	b.n	800d610 <_vfiprintf_r+0x78>
 800d73a:	460c      	mov	r4, r1
 800d73c:	2001      	movs	r0, #1
 800d73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d742:	e7a8      	b.n	800d696 <_vfiprintf_r+0xfe>
 800d744:	2300      	movs	r3, #0
 800d746:	f04f 0c0a 	mov.w	ip, #10
 800d74a:	4619      	mov	r1, r3
 800d74c:	3401      	adds	r4, #1
 800d74e:	9305      	str	r3, [sp, #20]
 800d750:	4620      	mov	r0, r4
 800d752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d756:	3a30      	subs	r2, #48	@ 0x30
 800d758:	2a09      	cmp	r2, #9
 800d75a:	d903      	bls.n	800d764 <_vfiprintf_r+0x1cc>
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d0c6      	beq.n	800d6ee <_vfiprintf_r+0x156>
 800d760:	9105      	str	r1, [sp, #20]
 800d762:	e7c4      	b.n	800d6ee <_vfiprintf_r+0x156>
 800d764:	4604      	mov	r4, r0
 800d766:	2301      	movs	r3, #1
 800d768:	fb0c 2101 	mla	r1, ip, r1, r2
 800d76c:	e7f0      	b.n	800d750 <_vfiprintf_r+0x1b8>
 800d76e:	ab03      	add	r3, sp, #12
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	462a      	mov	r2, r5
 800d774:	4630      	mov	r0, r6
 800d776:	4b13      	ldr	r3, [pc, #76]	@ (800d7c4 <_vfiprintf_r+0x22c>)
 800d778:	a904      	add	r1, sp, #16
 800d77a:	f3af 8000 	nop.w
 800d77e:	4607      	mov	r7, r0
 800d780:	1c78      	adds	r0, r7, #1
 800d782:	d1d6      	bne.n	800d732 <_vfiprintf_r+0x19a>
 800d784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d786:	07d9      	lsls	r1, r3, #31
 800d788:	d405      	bmi.n	800d796 <_vfiprintf_r+0x1fe>
 800d78a:	89ab      	ldrh	r3, [r5, #12]
 800d78c:	059a      	lsls	r2, r3, #22
 800d78e:	d402      	bmi.n	800d796 <_vfiprintf_r+0x1fe>
 800d790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d792:	f7ff fdcd 	bl	800d330 <__retarget_lock_release_recursive>
 800d796:	89ab      	ldrh	r3, [r5, #12]
 800d798:	065b      	lsls	r3, r3, #25
 800d79a:	f53f af1f 	bmi.w	800d5dc <_vfiprintf_r+0x44>
 800d79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7a0:	e71e      	b.n	800d5e0 <_vfiprintf_r+0x48>
 800d7a2:	ab03      	add	r3, sp, #12
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	4b06      	ldr	r3, [pc, #24]	@ (800d7c4 <_vfiprintf_r+0x22c>)
 800d7ac:	a904      	add	r1, sp, #16
 800d7ae:	f000 f87d 	bl	800d8ac <_printf_i>
 800d7b2:	e7e4      	b.n	800d77e <_vfiprintf_r+0x1e6>
 800d7b4:	0800e30c 	.word	0x0800e30c
 800d7b8:	0800e312 	.word	0x0800e312
 800d7bc:	0800e316 	.word	0x0800e316
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	0800d573 	.word	0x0800d573

0800d7c8 <_printf_common>:
 800d7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	4698      	mov	r8, r3
 800d7d0:	688a      	ldr	r2, [r1, #8]
 800d7d2:	690b      	ldr	r3, [r1, #16]
 800d7d4:	4607      	mov	r7, r0
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	bfb8      	it	lt
 800d7da:	4613      	movlt	r3, r2
 800d7dc:	6033      	str	r3, [r6, #0]
 800d7de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7e8:	b10a      	cbz	r2, 800d7ee <_printf_common+0x26>
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	6033      	str	r3, [r6, #0]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	0699      	lsls	r1, r3, #26
 800d7f2:	bf42      	ittt	mi
 800d7f4:	6833      	ldrmi	r3, [r6, #0]
 800d7f6:	3302      	addmi	r3, #2
 800d7f8:	6033      	strmi	r3, [r6, #0]
 800d7fa:	6825      	ldr	r5, [r4, #0]
 800d7fc:	f015 0506 	ands.w	r5, r5, #6
 800d800:	d106      	bne.n	800d810 <_printf_common+0x48>
 800d802:	f104 0a19 	add.w	sl, r4, #25
 800d806:	68e3      	ldr	r3, [r4, #12]
 800d808:	6832      	ldr	r2, [r6, #0]
 800d80a:	1a9b      	subs	r3, r3, r2
 800d80c:	42ab      	cmp	r3, r5
 800d80e:	dc2b      	bgt.n	800d868 <_printf_common+0xa0>
 800d810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d814:	6822      	ldr	r2, [r4, #0]
 800d816:	3b00      	subs	r3, #0
 800d818:	bf18      	it	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	0692      	lsls	r2, r2, #26
 800d81e:	d430      	bmi.n	800d882 <_printf_common+0xba>
 800d820:	4641      	mov	r1, r8
 800d822:	4638      	mov	r0, r7
 800d824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d828:	47c8      	blx	r9
 800d82a:	3001      	adds	r0, #1
 800d82c:	d023      	beq.n	800d876 <_printf_common+0xae>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	6922      	ldr	r2, [r4, #16]
 800d832:	f003 0306 	and.w	r3, r3, #6
 800d836:	2b04      	cmp	r3, #4
 800d838:	bf14      	ite	ne
 800d83a:	2500      	movne	r5, #0
 800d83c:	6833      	ldreq	r3, [r6, #0]
 800d83e:	f04f 0600 	mov.w	r6, #0
 800d842:	bf08      	it	eq
 800d844:	68e5      	ldreq	r5, [r4, #12]
 800d846:	f104 041a 	add.w	r4, r4, #26
 800d84a:	bf08      	it	eq
 800d84c:	1aed      	subeq	r5, r5, r3
 800d84e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d852:	bf08      	it	eq
 800d854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d858:	4293      	cmp	r3, r2
 800d85a:	bfc4      	itt	gt
 800d85c:	1a9b      	subgt	r3, r3, r2
 800d85e:	18ed      	addgt	r5, r5, r3
 800d860:	42b5      	cmp	r5, r6
 800d862:	d11a      	bne.n	800d89a <_printf_common+0xd2>
 800d864:	2000      	movs	r0, #0
 800d866:	e008      	b.n	800d87a <_printf_common+0xb2>
 800d868:	2301      	movs	r3, #1
 800d86a:	4652      	mov	r2, sl
 800d86c:	4641      	mov	r1, r8
 800d86e:	4638      	mov	r0, r7
 800d870:	47c8      	blx	r9
 800d872:	3001      	adds	r0, #1
 800d874:	d103      	bne.n	800d87e <_printf_common+0xb6>
 800d876:	f04f 30ff 	mov.w	r0, #4294967295
 800d87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87e:	3501      	adds	r5, #1
 800d880:	e7c1      	b.n	800d806 <_printf_common+0x3e>
 800d882:	2030      	movs	r0, #48	@ 0x30
 800d884:	18e1      	adds	r1, r4, r3
 800d886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d890:	4422      	add	r2, r4
 800d892:	3302      	adds	r3, #2
 800d894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d898:	e7c2      	b.n	800d820 <_printf_common+0x58>
 800d89a:	2301      	movs	r3, #1
 800d89c:	4622      	mov	r2, r4
 800d89e:	4641      	mov	r1, r8
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	47c8      	blx	r9
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d0e6      	beq.n	800d876 <_printf_common+0xae>
 800d8a8:	3601      	adds	r6, #1
 800d8aa:	e7d9      	b.n	800d860 <_printf_common+0x98>

0800d8ac <_printf_i>:
 800d8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	7e0f      	ldrb	r7, [r1, #24]
 800d8b2:	4691      	mov	r9, r2
 800d8b4:	2f78      	cmp	r7, #120	@ 0x78
 800d8b6:	4680      	mov	r8, r0
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8c2:	d807      	bhi.n	800d8d4 <_printf_i+0x28>
 800d8c4:	2f62      	cmp	r7, #98	@ 0x62
 800d8c6:	d80a      	bhi.n	800d8de <_printf_i+0x32>
 800d8c8:	2f00      	cmp	r7, #0
 800d8ca:	f000 80d1 	beq.w	800da70 <_printf_i+0x1c4>
 800d8ce:	2f58      	cmp	r7, #88	@ 0x58
 800d8d0:	f000 80b8 	beq.w	800da44 <_printf_i+0x198>
 800d8d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8dc:	e03a      	b.n	800d954 <_printf_i+0xa8>
 800d8de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8e2:	2b15      	cmp	r3, #21
 800d8e4:	d8f6      	bhi.n	800d8d4 <_printf_i+0x28>
 800d8e6:	a101      	add	r1, pc, #4	@ (adr r1, 800d8ec <_printf_i+0x40>)
 800d8e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8ec:	0800d945 	.word	0x0800d945
 800d8f0:	0800d959 	.word	0x0800d959
 800d8f4:	0800d8d5 	.word	0x0800d8d5
 800d8f8:	0800d8d5 	.word	0x0800d8d5
 800d8fc:	0800d8d5 	.word	0x0800d8d5
 800d900:	0800d8d5 	.word	0x0800d8d5
 800d904:	0800d959 	.word	0x0800d959
 800d908:	0800d8d5 	.word	0x0800d8d5
 800d90c:	0800d8d5 	.word	0x0800d8d5
 800d910:	0800d8d5 	.word	0x0800d8d5
 800d914:	0800d8d5 	.word	0x0800d8d5
 800d918:	0800da57 	.word	0x0800da57
 800d91c:	0800d983 	.word	0x0800d983
 800d920:	0800da11 	.word	0x0800da11
 800d924:	0800d8d5 	.word	0x0800d8d5
 800d928:	0800d8d5 	.word	0x0800d8d5
 800d92c:	0800da79 	.word	0x0800da79
 800d930:	0800d8d5 	.word	0x0800d8d5
 800d934:	0800d983 	.word	0x0800d983
 800d938:	0800d8d5 	.word	0x0800d8d5
 800d93c:	0800d8d5 	.word	0x0800d8d5
 800d940:	0800da19 	.word	0x0800da19
 800d944:	6833      	ldr	r3, [r6, #0]
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6032      	str	r2, [r6, #0]
 800d94c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d954:	2301      	movs	r3, #1
 800d956:	e09c      	b.n	800da92 <_printf_i+0x1e6>
 800d958:	6833      	ldr	r3, [r6, #0]
 800d95a:	6820      	ldr	r0, [r4, #0]
 800d95c:	1d19      	adds	r1, r3, #4
 800d95e:	6031      	str	r1, [r6, #0]
 800d960:	0606      	lsls	r6, r0, #24
 800d962:	d501      	bpl.n	800d968 <_printf_i+0xbc>
 800d964:	681d      	ldr	r5, [r3, #0]
 800d966:	e003      	b.n	800d970 <_printf_i+0xc4>
 800d968:	0645      	lsls	r5, r0, #25
 800d96a:	d5fb      	bpl.n	800d964 <_printf_i+0xb8>
 800d96c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d970:	2d00      	cmp	r5, #0
 800d972:	da03      	bge.n	800d97c <_printf_i+0xd0>
 800d974:	232d      	movs	r3, #45	@ 0x2d
 800d976:	426d      	negs	r5, r5
 800d978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d97c:	230a      	movs	r3, #10
 800d97e:	4858      	ldr	r0, [pc, #352]	@ (800dae0 <_printf_i+0x234>)
 800d980:	e011      	b.n	800d9a6 <_printf_i+0xfa>
 800d982:	6821      	ldr	r1, [r4, #0]
 800d984:	6833      	ldr	r3, [r6, #0]
 800d986:	0608      	lsls	r0, r1, #24
 800d988:	f853 5b04 	ldr.w	r5, [r3], #4
 800d98c:	d402      	bmi.n	800d994 <_printf_i+0xe8>
 800d98e:	0649      	lsls	r1, r1, #25
 800d990:	bf48      	it	mi
 800d992:	b2ad      	uxthmi	r5, r5
 800d994:	2f6f      	cmp	r7, #111	@ 0x6f
 800d996:	6033      	str	r3, [r6, #0]
 800d998:	bf14      	ite	ne
 800d99a:	230a      	movne	r3, #10
 800d99c:	2308      	moveq	r3, #8
 800d99e:	4850      	ldr	r0, [pc, #320]	@ (800dae0 <_printf_i+0x234>)
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9a6:	6866      	ldr	r6, [r4, #4]
 800d9a8:	2e00      	cmp	r6, #0
 800d9aa:	60a6      	str	r6, [r4, #8]
 800d9ac:	db05      	blt.n	800d9ba <_printf_i+0x10e>
 800d9ae:	6821      	ldr	r1, [r4, #0]
 800d9b0:	432e      	orrs	r6, r5
 800d9b2:	f021 0104 	bic.w	r1, r1, #4
 800d9b6:	6021      	str	r1, [r4, #0]
 800d9b8:	d04b      	beq.n	800da52 <_printf_i+0x1a6>
 800d9ba:	4616      	mov	r6, r2
 800d9bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9c0:	fb03 5711 	mls	r7, r3, r1, r5
 800d9c4:	5dc7      	ldrb	r7, [r0, r7]
 800d9c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9ca:	462f      	mov	r7, r5
 800d9cc:	42bb      	cmp	r3, r7
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	d9f4      	bls.n	800d9bc <_printf_i+0x110>
 800d9d2:	2b08      	cmp	r3, #8
 800d9d4:	d10b      	bne.n	800d9ee <_printf_i+0x142>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	07df      	lsls	r7, r3, #31
 800d9da:	d508      	bpl.n	800d9ee <_printf_i+0x142>
 800d9dc:	6923      	ldr	r3, [r4, #16]
 800d9de:	6861      	ldr	r1, [r4, #4]
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	bfde      	ittt	le
 800d9e4:	2330      	movle	r3, #48	@ 0x30
 800d9e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9ee:	1b92      	subs	r2, r2, r6
 800d9f0:	6122      	str	r2, [r4, #16]
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f8cd a000 	str.w	sl, [sp]
 800d9fc:	aa03      	add	r2, sp, #12
 800d9fe:	f7ff fee3 	bl	800d7c8 <_printf_common>
 800da02:	3001      	adds	r0, #1
 800da04:	d14a      	bne.n	800da9c <_printf_i+0x1f0>
 800da06:	f04f 30ff 	mov.w	r0, #4294967295
 800da0a:	b004      	add	sp, #16
 800da0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	f043 0320 	orr.w	r3, r3, #32
 800da16:	6023      	str	r3, [r4, #0]
 800da18:	2778      	movs	r7, #120	@ 0x78
 800da1a:	4832      	ldr	r0, [pc, #200]	@ (800dae4 <_printf_i+0x238>)
 800da1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	6831      	ldr	r1, [r6, #0]
 800da24:	061f      	lsls	r7, r3, #24
 800da26:	f851 5b04 	ldr.w	r5, [r1], #4
 800da2a:	d402      	bmi.n	800da32 <_printf_i+0x186>
 800da2c:	065f      	lsls	r7, r3, #25
 800da2e:	bf48      	it	mi
 800da30:	b2ad      	uxthmi	r5, r5
 800da32:	6031      	str	r1, [r6, #0]
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	bf44      	itt	mi
 800da38:	f043 0320 	orrmi.w	r3, r3, #32
 800da3c:	6023      	strmi	r3, [r4, #0]
 800da3e:	b11d      	cbz	r5, 800da48 <_printf_i+0x19c>
 800da40:	2310      	movs	r3, #16
 800da42:	e7ad      	b.n	800d9a0 <_printf_i+0xf4>
 800da44:	4826      	ldr	r0, [pc, #152]	@ (800dae0 <_printf_i+0x234>)
 800da46:	e7e9      	b.n	800da1c <_printf_i+0x170>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	f023 0320 	bic.w	r3, r3, #32
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	e7f6      	b.n	800da40 <_printf_i+0x194>
 800da52:	4616      	mov	r6, r2
 800da54:	e7bd      	b.n	800d9d2 <_printf_i+0x126>
 800da56:	6833      	ldr	r3, [r6, #0]
 800da58:	6825      	ldr	r5, [r4, #0]
 800da5a:	1d18      	adds	r0, r3, #4
 800da5c:	6961      	ldr	r1, [r4, #20]
 800da5e:	6030      	str	r0, [r6, #0]
 800da60:	062e      	lsls	r6, r5, #24
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	d501      	bpl.n	800da6a <_printf_i+0x1be>
 800da66:	6019      	str	r1, [r3, #0]
 800da68:	e002      	b.n	800da70 <_printf_i+0x1c4>
 800da6a:	0668      	lsls	r0, r5, #25
 800da6c:	d5fb      	bpl.n	800da66 <_printf_i+0x1ba>
 800da6e:	8019      	strh	r1, [r3, #0]
 800da70:	2300      	movs	r3, #0
 800da72:	4616      	mov	r6, r2
 800da74:	6123      	str	r3, [r4, #16]
 800da76:	e7bc      	b.n	800d9f2 <_printf_i+0x146>
 800da78:	6833      	ldr	r3, [r6, #0]
 800da7a:	2100      	movs	r1, #0
 800da7c:	1d1a      	adds	r2, r3, #4
 800da7e:	6032      	str	r2, [r6, #0]
 800da80:	681e      	ldr	r6, [r3, #0]
 800da82:	6862      	ldr	r2, [r4, #4]
 800da84:	4630      	mov	r0, r6
 800da86:	f000 f9bf 	bl	800de08 <memchr>
 800da8a:	b108      	cbz	r0, 800da90 <_printf_i+0x1e4>
 800da8c:	1b80      	subs	r0, r0, r6
 800da8e:	6060      	str	r0, [r4, #4]
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	6123      	str	r3, [r4, #16]
 800da94:	2300      	movs	r3, #0
 800da96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da9a:	e7aa      	b.n	800d9f2 <_printf_i+0x146>
 800da9c:	4632      	mov	r2, r6
 800da9e:	4649      	mov	r1, r9
 800daa0:	4640      	mov	r0, r8
 800daa2:	6923      	ldr	r3, [r4, #16]
 800daa4:	47d0      	blx	sl
 800daa6:	3001      	adds	r0, #1
 800daa8:	d0ad      	beq.n	800da06 <_printf_i+0x15a>
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	079b      	lsls	r3, r3, #30
 800daae:	d413      	bmi.n	800dad8 <_printf_i+0x22c>
 800dab0:	68e0      	ldr	r0, [r4, #12]
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	4298      	cmp	r0, r3
 800dab6:	bfb8      	it	lt
 800dab8:	4618      	movlt	r0, r3
 800daba:	e7a6      	b.n	800da0a <_printf_i+0x15e>
 800dabc:	2301      	movs	r3, #1
 800dabe:	4632      	mov	r2, r6
 800dac0:	4649      	mov	r1, r9
 800dac2:	4640      	mov	r0, r8
 800dac4:	47d0      	blx	sl
 800dac6:	3001      	adds	r0, #1
 800dac8:	d09d      	beq.n	800da06 <_printf_i+0x15a>
 800daca:	3501      	adds	r5, #1
 800dacc:	68e3      	ldr	r3, [r4, #12]
 800dace:	9903      	ldr	r1, [sp, #12]
 800dad0:	1a5b      	subs	r3, r3, r1
 800dad2:	42ab      	cmp	r3, r5
 800dad4:	dcf2      	bgt.n	800dabc <_printf_i+0x210>
 800dad6:	e7eb      	b.n	800dab0 <_printf_i+0x204>
 800dad8:	2500      	movs	r5, #0
 800dada:	f104 0619 	add.w	r6, r4, #25
 800dade:	e7f5      	b.n	800dacc <_printf_i+0x220>
 800dae0:	0800e31d 	.word	0x0800e31d
 800dae4:	0800e32e 	.word	0x0800e32e

0800dae8 <__sflush_r>:
 800dae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daee:	0716      	lsls	r6, r2, #28
 800daf0:	4605      	mov	r5, r0
 800daf2:	460c      	mov	r4, r1
 800daf4:	d454      	bmi.n	800dba0 <__sflush_r+0xb8>
 800daf6:	684b      	ldr	r3, [r1, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	dc02      	bgt.n	800db02 <__sflush_r+0x1a>
 800dafc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dafe:	2b00      	cmp	r3, #0
 800db00:	dd48      	ble.n	800db94 <__sflush_r+0xac>
 800db02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db04:	2e00      	cmp	r6, #0
 800db06:	d045      	beq.n	800db94 <__sflush_r+0xac>
 800db08:	2300      	movs	r3, #0
 800db0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db0e:	682f      	ldr	r7, [r5, #0]
 800db10:	6a21      	ldr	r1, [r4, #32]
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	d030      	beq.n	800db78 <__sflush_r+0x90>
 800db16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	0759      	lsls	r1, r3, #29
 800db1c:	d505      	bpl.n	800db2a <__sflush_r+0x42>
 800db1e:	6863      	ldr	r3, [r4, #4]
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db24:	b10b      	cbz	r3, 800db2a <__sflush_r+0x42>
 800db26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db28:	1ad2      	subs	r2, r2, r3
 800db2a:	2300      	movs	r3, #0
 800db2c:	4628      	mov	r0, r5
 800db2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db30:	6a21      	ldr	r1, [r4, #32]
 800db32:	47b0      	blx	r6
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	d106      	bne.n	800db48 <__sflush_r+0x60>
 800db3a:	6829      	ldr	r1, [r5, #0]
 800db3c:	291d      	cmp	r1, #29
 800db3e:	d82b      	bhi.n	800db98 <__sflush_r+0xb0>
 800db40:	4a28      	ldr	r2, [pc, #160]	@ (800dbe4 <__sflush_r+0xfc>)
 800db42:	40ca      	lsrs	r2, r1
 800db44:	07d6      	lsls	r6, r2, #31
 800db46:	d527      	bpl.n	800db98 <__sflush_r+0xb0>
 800db48:	2200      	movs	r2, #0
 800db4a:	6062      	str	r2, [r4, #4]
 800db4c:	6922      	ldr	r2, [r4, #16]
 800db4e:	04d9      	lsls	r1, r3, #19
 800db50:	6022      	str	r2, [r4, #0]
 800db52:	d504      	bpl.n	800db5e <__sflush_r+0x76>
 800db54:	1c42      	adds	r2, r0, #1
 800db56:	d101      	bne.n	800db5c <__sflush_r+0x74>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b903      	cbnz	r3, 800db5e <__sflush_r+0x76>
 800db5c:	6560      	str	r0, [r4, #84]	@ 0x54
 800db5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db60:	602f      	str	r7, [r5, #0]
 800db62:	b1b9      	cbz	r1, 800db94 <__sflush_r+0xac>
 800db64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <__sflush_r+0x8a>
 800db6c:	4628      	mov	r0, r5
 800db6e:	f7ff fbf5 	bl	800d35c <_free_r>
 800db72:	2300      	movs	r3, #0
 800db74:	6363      	str	r3, [r4, #52]	@ 0x34
 800db76:	e00d      	b.n	800db94 <__sflush_r+0xac>
 800db78:	2301      	movs	r3, #1
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b0      	blx	r6
 800db7e:	4602      	mov	r2, r0
 800db80:	1c50      	adds	r0, r2, #1
 800db82:	d1c9      	bne.n	800db18 <__sflush_r+0x30>
 800db84:	682b      	ldr	r3, [r5, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c6      	beq.n	800db18 <__sflush_r+0x30>
 800db8a:	2b1d      	cmp	r3, #29
 800db8c:	d001      	beq.n	800db92 <__sflush_r+0xaa>
 800db8e:	2b16      	cmp	r3, #22
 800db90:	d11d      	bne.n	800dbce <__sflush_r+0xe6>
 800db92:	602f      	str	r7, [r5, #0]
 800db94:	2000      	movs	r0, #0
 800db96:	e021      	b.n	800dbdc <__sflush_r+0xf4>
 800db98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db9c:	b21b      	sxth	r3, r3
 800db9e:	e01a      	b.n	800dbd6 <__sflush_r+0xee>
 800dba0:	690f      	ldr	r7, [r1, #16]
 800dba2:	2f00      	cmp	r7, #0
 800dba4:	d0f6      	beq.n	800db94 <__sflush_r+0xac>
 800dba6:	0793      	lsls	r3, r2, #30
 800dba8:	bf18      	it	ne
 800dbaa:	2300      	movne	r3, #0
 800dbac:	680e      	ldr	r6, [r1, #0]
 800dbae:	bf08      	it	eq
 800dbb0:	694b      	ldreq	r3, [r1, #20]
 800dbb2:	1bf6      	subs	r6, r6, r7
 800dbb4:	600f      	str	r7, [r1, #0]
 800dbb6:	608b      	str	r3, [r1, #8]
 800dbb8:	2e00      	cmp	r6, #0
 800dbba:	ddeb      	ble.n	800db94 <__sflush_r+0xac>
 800dbbc:	4633      	mov	r3, r6
 800dbbe:	463a      	mov	r2, r7
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	6a21      	ldr	r1, [r4, #32]
 800dbc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dbc8:	47e0      	blx	ip
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	dc07      	bgt.n	800dbde <__sflush_r+0xf6>
 800dbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbda:	81a3      	strh	r3, [r4, #12]
 800dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbde:	4407      	add	r7, r0
 800dbe0:	1a36      	subs	r6, r6, r0
 800dbe2:	e7e9      	b.n	800dbb8 <__sflush_r+0xd0>
 800dbe4:	20400001 	.word	0x20400001

0800dbe8 <_fflush_r>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	690b      	ldr	r3, [r1, #16]
 800dbec:	4605      	mov	r5, r0
 800dbee:	460c      	mov	r4, r1
 800dbf0:	b913      	cbnz	r3, 800dbf8 <_fflush_r+0x10>
 800dbf2:	2500      	movs	r5, #0
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	b118      	cbz	r0, 800dc02 <_fflush_r+0x1a>
 800dbfa:	6a03      	ldr	r3, [r0, #32]
 800dbfc:	b90b      	cbnz	r3, 800dc02 <_fflush_r+0x1a>
 800dbfe:	f7ff fa81 	bl	800d104 <__sinit>
 800dc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0f3      	beq.n	800dbf2 <_fflush_r+0xa>
 800dc0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc0c:	07d0      	lsls	r0, r2, #31
 800dc0e:	d404      	bmi.n	800dc1a <_fflush_r+0x32>
 800dc10:	0599      	lsls	r1, r3, #22
 800dc12:	d402      	bmi.n	800dc1a <_fflush_r+0x32>
 800dc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc16:	f7ff fb8a 	bl	800d32e <__retarget_lock_acquire_recursive>
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	f7ff ff63 	bl	800dae8 <__sflush_r>
 800dc22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc24:	4605      	mov	r5, r0
 800dc26:	07da      	lsls	r2, r3, #31
 800dc28:	d4e4      	bmi.n	800dbf4 <_fflush_r+0xc>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	059b      	lsls	r3, r3, #22
 800dc2e:	d4e1      	bmi.n	800dbf4 <_fflush_r+0xc>
 800dc30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc32:	f7ff fb7d 	bl	800d330 <__retarget_lock_release_recursive>
 800dc36:	e7dd      	b.n	800dbf4 <_fflush_r+0xc>

0800dc38 <__swbuf_r>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	460e      	mov	r6, r1
 800dc3c:	4614      	mov	r4, r2
 800dc3e:	4605      	mov	r5, r0
 800dc40:	b118      	cbz	r0, 800dc4a <__swbuf_r+0x12>
 800dc42:	6a03      	ldr	r3, [r0, #32]
 800dc44:	b90b      	cbnz	r3, 800dc4a <__swbuf_r+0x12>
 800dc46:	f7ff fa5d 	bl	800d104 <__sinit>
 800dc4a:	69a3      	ldr	r3, [r4, #24]
 800dc4c:	60a3      	str	r3, [r4, #8]
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	071a      	lsls	r2, r3, #28
 800dc52:	d501      	bpl.n	800dc58 <__swbuf_r+0x20>
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	b943      	cbnz	r3, 800dc6a <__swbuf_r+0x32>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 f82a 	bl	800dcb4 <__swsetup_r>
 800dc60:	b118      	cbz	r0, 800dc6a <__swbuf_r+0x32>
 800dc62:	f04f 37ff 	mov.w	r7, #4294967295
 800dc66:	4638      	mov	r0, r7
 800dc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	6922      	ldr	r2, [r4, #16]
 800dc6e:	b2f6      	uxtb	r6, r6
 800dc70:	1a98      	subs	r0, r3, r2
 800dc72:	6963      	ldr	r3, [r4, #20]
 800dc74:	4637      	mov	r7, r6
 800dc76:	4283      	cmp	r3, r0
 800dc78:	dc05      	bgt.n	800dc86 <__swbuf_r+0x4e>
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f7ff ffb3 	bl	800dbe8 <_fflush_r>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d1ed      	bne.n	800dc62 <__swbuf_r+0x2a>
 800dc86:	68a3      	ldr	r3, [r4, #8]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	60a3      	str	r3, [r4, #8]
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	6022      	str	r2, [r4, #0]
 800dc92:	701e      	strb	r6, [r3, #0]
 800dc94:	6962      	ldr	r2, [r4, #20]
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d004      	beq.n	800dca6 <__swbuf_r+0x6e>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	07db      	lsls	r3, r3, #31
 800dca0:	d5e1      	bpl.n	800dc66 <__swbuf_r+0x2e>
 800dca2:	2e0a      	cmp	r6, #10
 800dca4:	d1df      	bne.n	800dc66 <__swbuf_r+0x2e>
 800dca6:	4621      	mov	r1, r4
 800dca8:	4628      	mov	r0, r5
 800dcaa:	f7ff ff9d 	bl	800dbe8 <_fflush_r>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0d9      	beq.n	800dc66 <__swbuf_r+0x2e>
 800dcb2:	e7d6      	b.n	800dc62 <__swbuf_r+0x2a>

0800dcb4 <__swsetup_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4b29      	ldr	r3, [pc, #164]	@ (800dd5c <__swsetup_r+0xa8>)
 800dcb8:	4605      	mov	r5, r0
 800dcba:	6818      	ldr	r0, [r3, #0]
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	b118      	cbz	r0, 800dcc8 <__swsetup_r+0x14>
 800dcc0:	6a03      	ldr	r3, [r0, #32]
 800dcc2:	b90b      	cbnz	r3, 800dcc8 <__swsetup_r+0x14>
 800dcc4:	f7ff fa1e 	bl	800d104 <__sinit>
 800dcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dccc:	0719      	lsls	r1, r3, #28
 800dcce:	d422      	bmi.n	800dd16 <__swsetup_r+0x62>
 800dcd0:	06da      	lsls	r2, r3, #27
 800dcd2:	d407      	bmi.n	800dce4 <__swsetup_r+0x30>
 800dcd4:	2209      	movs	r2, #9
 800dcd6:	602a      	str	r2, [r5, #0]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	e033      	b.n	800dd4c <__swsetup_r+0x98>
 800dce4:	0758      	lsls	r0, r3, #29
 800dce6:	d512      	bpl.n	800dd0e <__swsetup_r+0x5a>
 800dce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcea:	b141      	cbz	r1, 800dcfe <__swsetup_r+0x4a>
 800dcec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcf0:	4299      	cmp	r1, r3
 800dcf2:	d002      	beq.n	800dcfa <__swsetup_r+0x46>
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f7ff fb31 	bl	800d35c <_free_r>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd04:	81a3      	strh	r3, [r4, #12]
 800dd06:	2300      	movs	r3, #0
 800dd08:	6063      	str	r3, [r4, #4]
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f043 0308 	orr.w	r3, r3, #8
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	6923      	ldr	r3, [r4, #16]
 800dd18:	b94b      	cbnz	r3, 800dd2e <__swsetup_r+0x7a>
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd24:	d003      	beq.n	800dd2e <__swsetup_r+0x7a>
 800dd26:	4621      	mov	r1, r4
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f000 f8a0 	bl	800de6e <__smakebuf_r>
 800dd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd32:	f013 0201 	ands.w	r2, r3, #1
 800dd36:	d00a      	beq.n	800dd4e <__swsetup_r+0x9a>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	60a2      	str	r2, [r4, #8]
 800dd3c:	6962      	ldr	r2, [r4, #20]
 800dd3e:	4252      	negs	r2, r2
 800dd40:	61a2      	str	r2, [r4, #24]
 800dd42:	6922      	ldr	r2, [r4, #16]
 800dd44:	b942      	cbnz	r2, 800dd58 <__swsetup_r+0xa4>
 800dd46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd4a:	d1c5      	bne.n	800dcd8 <__swsetup_r+0x24>
 800dd4c:	bd38      	pop	{r3, r4, r5, pc}
 800dd4e:	0799      	lsls	r1, r3, #30
 800dd50:	bf58      	it	pl
 800dd52:	6962      	ldrpl	r2, [r4, #20]
 800dd54:	60a2      	str	r2, [r4, #8]
 800dd56:	e7f4      	b.n	800dd42 <__swsetup_r+0x8e>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	e7f7      	b.n	800dd4c <__swsetup_r+0x98>
 800dd5c:	2000011c 	.word	0x2000011c

0800dd60 <_raise_r>:
 800dd60:	291f      	cmp	r1, #31
 800dd62:	b538      	push	{r3, r4, r5, lr}
 800dd64:	4605      	mov	r5, r0
 800dd66:	460c      	mov	r4, r1
 800dd68:	d904      	bls.n	800dd74 <_raise_r+0x14>
 800dd6a:	2316      	movs	r3, #22
 800dd6c:	6003      	str	r3, [r0, #0]
 800dd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd76:	b112      	cbz	r2, 800dd7e <_raise_r+0x1e>
 800dd78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd7c:	b94b      	cbnz	r3, 800dd92 <_raise_r+0x32>
 800dd7e:	4628      	mov	r0, r5
 800dd80:	f000 f830 	bl	800dde4 <_getpid_r>
 800dd84:	4622      	mov	r2, r4
 800dd86:	4601      	mov	r1, r0
 800dd88:	4628      	mov	r0, r5
 800dd8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd8e:	f000 b817 	b.w	800ddc0 <_kill_r>
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d00a      	beq.n	800ddac <_raise_r+0x4c>
 800dd96:	1c59      	adds	r1, r3, #1
 800dd98:	d103      	bne.n	800dda2 <_raise_r+0x42>
 800dd9a:	2316      	movs	r3, #22
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	2001      	movs	r0, #1
 800dda0:	e7e7      	b.n	800dd72 <_raise_r+0x12>
 800dda2:	2100      	movs	r1, #0
 800dda4:	4620      	mov	r0, r4
 800dda6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ddaa:	4798      	blx	r3
 800ddac:	2000      	movs	r0, #0
 800ddae:	e7e0      	b.n	800dd72 <_raise_r+0x12>

0800ddb0 <raise>:
 800ddb0:	4b02      	ldr	r3, [pc, #8]	@ (800ddbc <raise+0xc>)
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	f7ff bfd3 	b.w	800dd60 <_raise_r>
 800ddba:	bf00      	nop
 800ddbc:	2000011c 	.word	0x2000011c

0800ddc0 <_kill_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	4d06      	ldr	r5, [pc, #24]	@ (800dde0 <_kill_r+0x20>)
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	f7f7 f976 	bl	80050be <_kill>
 800ddd2:	1c43      	adds	r3, r0, #1
 800ddd4:	d102      	bne.n	800dddc <_kill_r+0x1c>
 800ddd6:	682b      	ldr	r3, [r5, #0]
 800ddd8:	b103      	cbz	r3, 800dddc <_kill_r+0x1c>
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	bd38      	pop	{r3, r4, r5, pc}
 800ddde:	bf00      	nop
 800dde0:	200006b8 	.word	0x200006b8

0800dde4 <_getpid_r>:
 800dde4:	f7f7 b964 	b.w	80050b0 <_getpid>

0800dde8 <_sbrk_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	2300      	movs	r3, #0
 800ddec:	4d05      	ldr	r5, [pc, #20]	@ (800de04 <_sbrk_r+0x1c>)
 800ddee:	4604      	mov	r4, r0
 800ddf0:	4608      	mov	r0, r1
 800ddf2:	602b      	str	r3, [r5, #0]
 800ddf4:	f7f7 f9e8 	bl	80051c8 <_sbrk>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d102      	bne.n	800de02 <_sbrk_r+0x1a>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	b103      	cbz	r3, 800de02 <_sbrk_r+0x1a>
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	200006b8 	.word	0x200006b8

0800de08 <memchr>:
 800de08:	4603      	mov	r3, r0
 800de0a:	b510      	push	{r4, lr}
 800de0c:	b2c9      	uxtb	r1, r1
 800de0e:	4402      	add	r2, r0
 800de10:	4293      	cmp	r3, r2
 800de12:	4618      	mov	r0, r3
 800de14:	d101      	bne.n	800de1a <memchr+0x12>
 800de16:	2000      	movs	r0, #0
 800de18:	e003      	b.n	800de22 <memchr+0x1a>
 800de1a:	7804      	ldrb	r4, [r0, #0]
 800de1c:	3301      	adds	r3, #1
 800de1e:	428c      	cmp	r4, r1
 800de20:	d1f6      	bne.n	800de10 <memchr+0x8>
 800de22:	bd10      	pop	{r4, pc}

0800de24 <__swhatbuf_r>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	460c      	mov	r4, r1
 800de28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de2c:	4615      	mov	r5, r2
 800de2e:	2900      	cmp	r1, #0
 800de30:	461e      	mov	r6, r3
 800de32:	b096      	sub	sp, #88	@ 0x58
 800de34:	da0c      	bge.n	800de50 <__swhatbuf_r+0x2c>
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	2100      	movs	r1, #0
 800de3a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de3e:	bf14      	ite	ne
 800de40:	2340      	movne	r3, #64	@ 0x40
 800de42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de46:	2000      	movs	r0, #0
 800de48:	6031      	str	r1, [r6, #0]
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	b016      	add	sp, #88	@ 0x58
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	466a      	mov	r2, sp
 800de52:	f000 f849 	bl	800dee8 <_fstat_r>
 800de56:	2800      	cmp	r0, #0
 800de58:	dbed      	blt.n	800de36 <__swhatbuf_r+0x12>
 800de5a:	9901      	ldr	r1, [sp, #4]
 800de5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de64:	4259      	negs	r1, r3
 800de66:	4159      	adcs	r1, r3
 800de68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de6c:	e7eb      	b.n	800de46 <__swhatbuf_r+0x22>

0800de6e <__smakebuf_r>:
 800de6e:	898b      	ldrh	r3, [r1, #12]
 800de70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de72:	079d      	lsls	r5, r3, #30
 800de74:	4606      	mov	r6, r0
 800de76:	460c      	mov	r4, r1
 800de78:	d507      	bpl.n	800de8a <__smakebuf_r+0x1c>
 800de7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	6123      	str	r3, [r4, #16]
 800de82:	2301      	movs	r3, #1
 800de84:	6163      	str	r3, [r4, #20]
 800de86:	b003      	add	sp, #12
 800de88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8a:	466a      	mov	r2, sp
 800de8c:	ab01      	add	r3, sp, #4
 800de8e:	f7ff ffc9 	bl	800de24 <__swhatbuf_r>
 800de92:	9f00      	ldr	r7, [sp, #0]
 800de94:	4605      	mov	r5, r0
 800de96:	4639      	mov	r1, r7
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fac9 	bl	800d430 <_malloc_r>
 800de9e:	b948      	cbnz	r0, 800deb4 <__smakebuf_r+0x46>
 800dea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea4:	059a      	lsls	r2, r3, #22
 800dea6:	d4ee      	bmi.n	800de86 <__smakebuf_r+0x18>
 800dea8:	f023 0303 	bic.w	r3, r3, #3
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	81a3      	strh	r3, [r4, #12]
 800deb2:	e7e2      	b.n	800de7a <__smakebuf_r+0xc>
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800deba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800debe:	81a3      	strh	r3, [r4, #12]
 800dec0:	9b01      	ldr	r3, [sp, #4]
 800dec2:	6020      	str	r0, [r4, #0]
 800dec4:	b15b      	cbz	r3, 800dede <__smakebuf_r+0x70>
 800dec6:	4630      	mov	r0, r6
 800dec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800decc:	f000 f81e 	bl	800df0c <_isatty_r>
 800ded0:	b128      	cbz	r0, 800dede <__smakebuf_r+0x70>
 800ded2:	89a3      	ldrh	r3, [r4, #12]
 800ded4:	f023 0303 	bic.w	r3, r3, #3
 800ded8:	f043 0301 	orr.w	r3, r3, #1
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	89a3      	ldrh	r3, [r4, #12]
 800dee0:	431d      	orrs	r5, r3
 800dee2:	81a5      	strh	r5, [r4, #12]
 800dee4:	e7cf      	b.n	800de86 <__smakebuf_r+0x18>
	...

0800dee8 <_fstat_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	2300      	movs	r3, #0
 800deec:	4d06      	ldr	r5, [pc, #24]	@ (800df08 <_fstat_r+0x20>)
 800deee:	4604      	mov	r4, r0
 800def0:	4608      	mov	r0, r1
 800def2:	4611      	mov	r1, r2
 800def4:	602b      	str	r3, [r5, #0]
 800def6:	f7f7 f941 	bl	800517c <_fstat>
 800defa:	1c43      	adds	r3, r0, #1
 800defc:	d102      	bne.n	800df04 <_fstat_r+0x1c>
 800defe:	682b      	ldr	r3, [r5, #0]
 800df00:	b103      	cbz	r3, 800df04 <_fstat_r+0x1c>
 800df02:	6023      	str	r3, [r4, #0]
 800df04:	bd38      	pop	{r3, r4, r5, pc}
 800df06:	bf00      	nop
 800df08:	200006b8 	.word	0x200006b8

0800df0c <_isatty_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	2300      	movs	r3, #0
 800df10:	4d05      	ldr	r5, [pc, #20]	@ (800df28 <_isatty_r+0x1c>)
 800df12:	4604      	mov	r4, r0
 800df14:	4608      	mov	r0, r1
 800df16:	602b      	str	r3, [r5, #0]
 800df18:	f7f7 f93f 	bl	800519a <_isatty>
 800df1c:	1c43      	adds	r3, r0, #1
 800df1e:	d102      	bne.n	800df26 <_isatty_r+0x1a>
 800df20:	682b      	ldr	r3, [r5, #0]
 800df22:	b103      	cbz	r3, 800df26 <_isatty_r+0x1a>
 800df24:	6023      	str	r3, [r4, #0]
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	200006b8 	.word	0x200006b8

0800df2c <round>:
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800df32:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800df36:	2a13      	cmp	r2, #19
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	460b      	mov	r3, r1
 800df3e:	dc1a      	bgt.n	800df76 <round+0x4a>
 800df40:	2a00      	cmp	r2, #0
 800df42:	da0b      	bge.n	800df5c <round+0x30>
 800df44:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800df48:	3201      	adds	r2, #1
 800df4a:	bf04      	itt	eq
 800df4c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800df50:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800df54:	2200      	movs	r2, #0
 800df56:	461d      	mov	r5, r3
 800df58:	4614      	mov	r4, r2
 800df5a:	e016      	b.n	800df8a <round+0x5e>
 800df5c:	4815      	ldr	r0, [pc, #84]	@ (800dfb4 <round+0x88>)
 800df5e:	4110      	asrs	r0, r2
 800df60:	4001      	ands	r1, r0
 800df62:	4321      	orrs	r1, r4
 800df64:	d011      	beq.n	800df8a <round+0x5e>
 800df66:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800df6a:	fa41 f202 	asr.w	r2, r1, r2
 800df6e:	4413      	add	r3, r2
 800df70:	ea23 0300 	bic.w	r3, r3, r0
 800df74:	e7ee      	b.n	800df54 <round+0x28>
 800df76:	2a33      	cmp	r2, #51	@ 0x33
 800df78:	dd0a      	ble.n	800df90 <round+0x64>
 800df7a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800df7e:	d104      	bne.n	800df8a <round+0x5e>
 800df80:	4602      	mov	r2, r0
 800df82:	f7f2 fa2d 	bl	80003e0 <__adddf3>
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4620      	mov	r0, r4
 800df8c:	4629      	mov	r1, r5
 800df8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df90:	f04f 30ff 	mov.w	r0, #4294967295
 800df94:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800df98:	40f8      	lsrs	r0, r7
 800df9a:	4220      	tst	r0, r4
 800df9c:	d0f5      	beq.n	800df8a <round+0x5e>
 800df9e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	408a      	lsls	r2, r1
 800dfa6:	1912      	adds	r2, r2, r4
 800dfa8:	bf28      	it	cs
 800dfaa:	3301      	addcs	r3, #1
 800dfac:	ea22 0200 	bic.w	r2, r2, r0
 800dfb0:	e7d1      	b.n	800df56 <round+0x2a>
 800dfb2:	bf00      	nop
 800dfb4:	000fffff 	.word	0x000fffff

0800dfb8 <_init>:
 800dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfba:	bf00      	nop
 800dfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfbe:	bc08      	pop	{r3}
 800dfc0:	469e      	mov	lr, r3
 800dfc2:	4770      	bx	lr

0800dfc4 <_fini>:
 800dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc6:	bf00      	nop
 800dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfca:	bc08      	pop	{r3}
 800dfcc:	469e      	mov	lr, r3
 800dfce:	4770      	bx	lr
